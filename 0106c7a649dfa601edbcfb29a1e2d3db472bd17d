{
  "comments": [
    {
      "key": {
        "uuid": "AAADOX///+4\u003d",
        "filename": "gerrit-gwtui/src/main/java/com/google/gerrit/client/admin/ProjectBranchesScreen.java",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2012-02-25T18:02:43Z",
      "side": 1,
      "message": "I like this solution much better, but it appears now that this path here is no longer really used and your new error path has to do extra work to mimick this.  This has me thinking of a possible more generic solution, bear with me.\n\nWhat if we created a new generic RpcResult\u003cR,E\u003e which held a result and/or an Exception.  You could then put the ListBranchesResult in the result, and still have a place to store an Exception which I think could now maintain its type (if defined in the common package).  This would allow you to move some of the code from your new AddBranchResult back to the old Exception (mainly the Type enum and any other error needed stuff).  And finally the other generic piece that would help is to make a new generic GerritRpcResultCallback which extends GerritCallback\u003cR extends RpcResult\u003cR, E\u003e\u003e and takes a look at R to see if the Result and/or the exception are null or not.  And perhaps it then would call the onSuccess(R) and/or onFailure(E) as appropriate, sometimes calling both?  Or maybe we add a third method, onFailureResult(R, E) which it calls instead of the other 2 in the case that neither R nor E are null?\n\nMy thinking is that Gerrit currently does not support some error cases well enough, sometimes there are errors in services which need to be reported to users, but nevertheless the service does still cause a change which deserves a screen update to a new Result, this third new method would support such a case perhpas?  And this new generic framework might allow us to better report exceptions in cases such as your change here?  There are probably some pieces missing in my explanation or my idea, but it feels like it should work?",
      "revId": "0106c7a649dfa601edbcfb29a1e2d3db472bd17d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAEQH////o\u003d",
        "filename": "gerrit-gwtui/src/main/java/com/google/gerrit/client/admin/ProjectBranchesScreen.java",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2012-03-23T07:53:29Z",
      "side": 1,
      "message": "Sorry for the delayed answer. I really like your proposal and I will try to implement it. The whole error and exception handling in Gerrit is not really satisfying as it is now and this looks like a good solution to me.",
      "parentUuid": "AAADOX///+4\u003d",
      "revId": "0106c7a649dfa601edbcfb29a1e2d3db472bd17d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAESH////s\u003d",
        "filename": "gerrit-gwtui/src/main/java/com/google/gerrit/client/admin/ProjectBranchesScreen.java",
        "patchSetId": 2
      },
      "lineNbr": 237,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2012-03-23T15:45:49Z",
      "side": 1,
      "message": "So I was trying to implement this and have a first version ready. It\u0027s a bit nicer than the implementation in this patch set, but it\u0027s also not much different.\n\nFirst of all I investigated why with the current implementaion the type of the Exception is not available on the client side. I actually think this is really the intended behaviour. The JSON Servlet explicitly sends only an error code and the error message back to the client instead of serializing the exception. I believe that sending back the serialized exception that includes the stacktrace might be a security issue because it reveals internal details. This is why I think it is not a good idea to bypass this code and include the exception class as part of the result data. Because of this in my RpcResult\u003cR,E\u003e E is not an Exception but an RpcError which just has a type to identify the error. Subclasses of RpcError can include additional information about the error that is then carrying over to the client.\n\nAs suggested by you, I\u0027ve added GerritRpcResultCallback which calls onResult(R) or onError(E) (Java didn\u0027t allow me to use onSuccess(R) and onFailure(E) because the names are clashing with the existing methods). At the moment RpcRsult can either contain a result or an error, but it can easily be extended to contain both and/or multiple errors. I decided not to have a onFailureResult(R, E) method, but rather to invoke in this case both onResult(R) and onError(E) because it would be additional overhead for users to implement this method and it would probably anyway delegate to the other two methods.\n\nSo as a result the enum with the error types is still there. Please let me know what you think of the implementation and whether you still see room for further improvements.\n\nAlso would it make sense to add the generic error handling classes in an own change?",
      "parentUuid": "AAAEQH////o\u003d",
      "revId": "0106c7a649dfa601edbcfb29a1e2d3db472bd17d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}