{
  "pushCert": "certificate version 0.1\npusher A0D0EF51 1513005590 +0100\nnonce ADEcKBqaUBL9Ogcq3YItUODt9B9y3f30/Eaekp2PwWHB++3CdwplVu1j9pcrewtNvvkgZkz90qry\n\n0000000000000000000000000000000000000000 043034e7ffcf497ac56793751a3e7f9fa4e74276 refs/for/master\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJaLqIWAAoJEFG1/Zeg0O9RohsH/RWVXfFjjWFwcdGY8ci/bZ+V\nlEOfKKSpSlyJyCla3Y2x8E5nbiT1pMCAYyBKj4QkdHcvQhNbaCE2QOQMsKwfq+LN\n384w4wH0uUR/AFaKhx5+/4uuh9OZQbiVoU3pP/vxcHiX67G7ZrjLL0R5fOwrqytc\nYYQ0NbZnMlHCl8fNS3Ahug2WRG1To36/xU6uSOsH5O8n+dFgRNpM7uMRIW1P1O4A\nZkJ3QEXGkYls0JRAHNhtt8MZ8I5h4GdPnIi1/+FgALm9ESLixd63dpLQAXFVwMuH\nuCDUC2kQqtlQbrBNsSftFDQOtq1KfGO2exkpQ/kjhto2PHUUgyPKfUtUDiYGnQ4\u003d\n\u003dCgo8\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "a141e06e_f3248358",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T16:44:58Z",
      "side": 1,
      "message": "Checking my understanding: there is no insert variant that takes an AccountUpdater, because there is no Account yet that could be exposed?",
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea14bf20_6bc9ae05",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-11T17:04:00Z",
      "side": 1,
      "message": "We could provide a variant with AccountUpdater that provides the newly created account (with all the default values). However I didn\u0027t add it since there would be no user for it.",
      "parentUuid": "a141e06e_f3248358",
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3c9adfb_094fb900",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-11T17:12:26Z",
      "side": 1,
      "message": "Similar to this it\u0027s maybe worth to point out that we have\n\n  update(Account.Id accountId, List\u003cAccountUpdater\u003e updater)\n\nbut can\u0027t have a variant for this, since\n\n  update(Account.Id accountId, List\u003cConsumer\u003cInternalAccountUpdate.Builder\u003e\u003e consumers)\n\nwould have the same method signature after erasure.",
      "parentUuid": "ea14bf20_6bc9ae05",
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e31918_7edaa592",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T16:44:58Z",
      "side": 1,
      "message": "\"updaters\" plural. It might also be worth mentioning explicitly that all updaters apply to the same account.",
      "range": {
        "startLine": 265,
        "startChar": 20,
        "endLine": 265,
        "endChar": 27
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77b95fb_4000b732",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 265,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-12T10:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17e31918_7edaa592",
      "range": {
        "startLine": 265,
        "startChar": 20,
        "endLine": 265,
        "endChar": 27
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79944539_146e3927",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T16:44:58Z",
      "side": 1,
      "message": "updaters",
      "range": {
        "startLine": 271,
        "startChar": 67,
        "endLine": 271,
        "endChar": 74
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2133d7ba_28860b1a",
        "filename": "java/com/google/gerrit/server/account/AccountsUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 271,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-12T10:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79944539_146e3927",
      "range": {
        "startLine": 271,
        "startChar": 67,
        "endLine": 271,
        "endChar": 74
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5df35e8b_f7ac27d8",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T16:44:58Z",
      "side": 1,
      "message": "This class doesn\u0027t actually describe the semantics of any of the fields. I would explicitly mention that setters correspond to fields in the Account type.",
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5713738_fe0b5ab1",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-12T10:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5df35e8b_f7ac27d8",
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3bd2dd7_3b175e9f",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T16:44:58Z",
      "side": 1,
      "message": "TBH I am not the biggest fan of this, particularly given that most callers appear to do setFoo(Strings.nullToEmpty(foo)).\n\nAs a consumer of this interface, I would prefer to have a pair of methods, (kind of like a protobuf message):\n\n setFullName(String fullName); // IAE if fullName is null *or empty*.\n clearFullName();\n\nOTOH, implementing that would probably require more boilerplate in this file, since I\u0027m not sure how much AutoValue can help you here.\n\nWhat do you think?",
      "range": {
        "startLine": 63,
        "startChar": 54,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3b51cd4_eb2a2df3",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-11T17:04:00Z",
      "side": 1,
      "message": "Yes, I\u0027m not too happy with this interface either. \n\nWe somehow need to differentiate between \n\na) no update to full name and\nb) clear fullname\n\nSo with your proposal setFullName(null) and setFullName(\"\") would both clear the fullname (option b)?\nSo to differentiate between a) and b) we would to track explicitly whether setFullName was called (which I think we can\u0027t do with AutoValue)? \n\nAt the moment Optional.empty() is used for a) and Optional.of(\"\") is used for b).\nI followed this approach because this is what InternalGroupUpdate does for the group description.\n\nI don\u0027t mind writing some boilerplate code here if it simplifies the callers.",
      "parentUuid": "e3bd2dd7_3b175e9f",
      "range": {
        "startLine": 63,
        "startChar": 54,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25e3b68b_7032d419",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-11T22:37:47Z",
      "side": 1,
      "message": "To clarify the proposal I was trying to make...\n\nContinue storing Optional\u003cString\u003e within the builder. For the internal Optional field:\n\n* null \u003d\u003e don\u0027t touch it\n* Optional.empty() \u003d\u003e clear the value in the db\n* non-empty \u003d\u003e set to this value\n\nThe interface looks like:\n\n* clearFullName() \u003d\u003e set internal field to Optional.empty()\n* setFullName(null), setFullName(\"\") \u003d\u003e IAE\n* setFullName(\"foo\") \u003d\u003e set to Optional.of(\"foo\")\n\n(The reason I say AutoValue doesn\u0027t really help you here is I don\u0027t know how to have a method called setFullName on the Builder that is not abstract, which is what you would need here.)\n\nIMO this makes the interface semantics clear.\n\nHowever, it doesn\u0027t actually make the callers any clearer, because the callers will have to do:\n\n if (isNullOrEmpty(fullName)) {\n   u.clearFullName();\n } else {\n   u.setFullName(fullName);\n }\n\nwhich times N fields is pretty ugly.\n\nSo I guess I don\u0027t have a better proposal now, but I\u0027ll continue thinking on it.",
      "parentUuid": "c3b51cd4_eb2a2df3",
      "range": {
        "startLine": 63,
        "startChar": 54,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfe20b3b_82ac2f5c",
        "filename": "java/com/google/gerrit/server/account/InternalAccountUpdate.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-12T10:58:16Z",
      "side": 1,
      "message": "\u003e * null \u003d\u003e don\u0027t touch it\n\u003e * Optional.empty() \u003d\u003e clear the value in the db\n\nI think this wouldn\u0027t work with AutoValue since Optional.empty() is the default value if a setter is not invoked. Hence Optional.empty() would need to mean \"don\u0027t touch it\".\n\n\u003e (The reason I say AutoValue doesn\u0027t really help you here is I don\u0027t know how to have\n\u003e a method called setFullName on the Builder that is not abstract, which is what you would\n\u003e need here.)\n\nI think we can achieve what we want if we don\u0027t use AutoValue hfor this class and instead manually implement it, but this would result in quite some boilerplate code...\n\n\u003e However, it doesn\u0027t actually make the callers any clearer, because the callers will have\n\u003e to do:\n\u003e\n\u003e if (isNullOrEmpty(fullName)) {\n\u003e   u.clearFullName();\n\u003e } else {\n\u003e   u.setFullName(fullName);\n\u003e }\n\u003e\n\u003e which times N fields is pretty ugly.\n\nYes, I also think that this is not much clearer. On the contrary if a caller forgets to check for null and calls u.setFullName(null) this will be a no-op now, although the caller would expect to full name to be cleared. With the current implementation this would at least fail with an NPE so we would get aware of these issues.\n\nI think from the callers perspective we really want to just call\n \n  u.setFullName(fullName)\n\nIf fullName is null or empty the fullName should be cleared, otherwise it should be updated to the new value. If setFullName is not invoked the full name should not be updated.\n\nTo get this done we can either implement this class manually (boilerplace code) or do some magic to automatically convert null string args to empty strings. If null string args are converted to empty strings AutoValue is happy:\n\n* Optional.empty() (default value) \u003d\u003e don\u0027t touch it\n* Optional.of(\u003cnon-empty-string\u003e) \u003d\u003e set to this calue\n* Optional.of(\"\") \u003d\u003e clear the value in the db\n\nI think I found a way to convert null string args to empty strings automatically. It\u0027s a little hacky, but maybe it\u0027s less ugly then implementing the classes manually?\nWhat do you think?",
      "parentUuid": "25e3b68b_7032d419",
      "range": {
        "startLine": 63,
        "startChar": 54,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "043034e7ffcf497ac56793751a3e7f9fa4e74276",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}