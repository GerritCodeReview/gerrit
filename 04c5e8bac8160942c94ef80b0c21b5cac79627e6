{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1474380955 -0400\nnonce AE+e84bNjq+pcuMjxUDFxQSAlRCHJi5Dvb8UCUEAJpZrkO8r+ZYGbRCQXjRWmimkA26dy8jBHdmA\n\n0000000000000000000000000000000000000000 04c5e8bac8160942c94ef80b0c21b5cac79627e6 refs/for/master%r\u003ddpursehouse@collab.net\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJX4USbAAoJEF/XxZqaEoiMNrIP/1gmD+oDUD4cL4ia/sIEkBxb\nhCotGHsrPvtWwWYr2SknZPRMWfx95hGwRAB5i/kXYjwAXUiEa7jVPREqQIQu3zd6\noPWXybQ695ZsaCXv4RJWMZcZwdrNxgNQ0EPIq7rZAxD+hI7avGE6NRmO0QCMn/Na\nixw/FNl5l8wMWasNrKBQrgR138GymMnkEwhUkngJ8IQ2Xb1hkMXseZrSjzq4v+Ag\nNs2rbPqC8IbEOyTGAb7crSk4NqvG/8L6jBmQDzKmjp0TUfkJGbTvE+Q0luJIcrit\nUM7JXZE5txlTib1ob6xOv4qS64M49svGtP/gupsgql1+dyf7VZy+jNyr05HNLxTS\nM6FctdQDjpKzGdFa2GVtXaYzTXnAC77H/+hNXMJbP9B8KCjoqbOeoNgt1baPdu6s\n7T2uh7FsZ5ygkIY/wj9ZghyhUFtqpiTKjcFqE4bwHgQ9+llcmjoVqx5EuaG2dCfc\nCkgsjFe+oVKc6ZqxP9UvZ/rCfe9tM1enPWF4LpsxvBfL216F6kR7TzLQZjMbbJdZ\nwkSe4kyOlN/AI3UosHKWBihnXmcWdgtQoxQVThFlxlw1I37eN8am0bYYyu9f0hcI\nD95klB2I0IHTkVlG74tYiS3knKXInn1jLjlwGpV78UozQwR8ermVoMr2oV2HUx9H\nn300aZLF1kTVjxRTod/4\n\u003dEPHc\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "4be70257_c949e9ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-09-20T15:56:15Z",
      "side": 1,
      "message": "That\u0027s weird. The base version was more verbose, but less weird, as it was obvious about the conversion:\n\n  public Metric apply(ValueGauge in) {\n    return in;\n  }\n\nSo it was obvious, that we downcast. I guess we still want the lambda version.",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 49
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be70257_a95d854b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "It is weird, I agree. I added an explicit cast to make the intention clearer.\n\nI think if we wrap this in Collections.unmodifiableMap (or ImmutableMap.copy), then it makes it safe to do the covariant cast as:\n\n  (Map\u003cObject, Metric\u003e) (Collections.unmodifiableMap(cells))\n\nIOW the cast is safe only if you can\u0027t put a non-ValueGauge Metric in the map.\n\nBut honestly that is too much for my brain right now, so I will stick with the obviously correct boilerplate reduction.",
      "parentUuid": "4be70257_c949e9ba",
      "range": {
        "startLine": 126,
        "startChar": 4,
        "endLine": 126,
        "endChar": 49
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0a2af7a_031a8ed8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/CapabilityControl.java",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-09-20T16:41:44Z",
      "side": 1,
      "message": "Does collect populate the full list or is it lazy like the one produced by Iterables.transform?\n\nIf the former, this can be made lazy by making ids a Stream and passing ids::iterator to containsAnyOf.\n\nOr containsAnyOf could learn to accept Stream.",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_c887236b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/CapabilityControl.java",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "It\u0027s not lazy, you\u0027re right. containsAnyOf takes Iterable, and it\u0027s nontrivial to get a lazy Iterable from a Stream; in this series I was trying not to modify public interfaces. There are lots of Iterable interfaces that might do better to take Iterator or Stream.\n\nI was thinking when I wrote this that the list would be small enough that we don\u0027t care about eagerly storing it. However, since then, I realized that in these kinds of cases the easiest way to achieve laziness + readability is to use FluentIterable, so will change to that.",
      "parentUuid": "b0a2af7a_031a8ed8",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0a56383_a4d94210",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/extensions/webui/UiActions.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-09-20T16:59:44Z",
      "side": 1,
      "message": "not about this patch: This would be simpler if it could return a Stream.",
      "range": {
        "startLine": 47,
        "startChar": 41,
        "endLine": 47,
        "endChar": 49
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be70257_e9678d1b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/extensions/webui/UiActions.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "Yeah, as I said elsewhere, there are lots of interfaces that could be rethought with Stream in mind, which I\u0027m not doing in this series. The one gotcha to keep in mind is that unlike Iterables, Streams can be consumed only once.\n\nYou could replace FluentIterable.from(views).transform(...).filter(...) with views.map(...).transform(...).filter(...). That uses the JDK exclusively rather than Guava, but I\u0027m not sure it\u0027s really \"simpler\".",
      "parentUuid": "d0a56383_a4d94210",
      "range": {
        "startLine": 47,
        "startChar": 41,
        "endLine": 47,
        "endChar": 49
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_68fd37ff",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/extensions/webui/UiActions.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-09-20T15:56:15Z",
      "side": 1,
      "message": "or:\n\n  filter(Objects::nonNull)",
      "range": {
        "startLine": 96,
        "startChar": 8,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be70257_c9e3a99b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/extensions/webui/UiActions.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2016-09-20T16:02:13Z",
      "side": 1,
      "message": "I had problems with using static references like this in Gerrit today, did this work for you? Did it compile?",
      "parentUuid": "2bec8e3b_68fd37ff",
      "range": {
        "startLine": 96,
        "startChar": 8,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_e886676c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/extensions/webui/UiActions.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "Works for me.",
      "parentUuid": "4be70257_c9e3a99b",
      "range": {
        "startLine": 96,
        "startChar": 8,
        "endLine": 96,
        "endChar": 32
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be70257_89db61e1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/RevisionNoteBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2016-09-20T16:01:06Z",
      "side": 1,
      "message": "Usually we aren\u0027t importing functions directly, right?\n\nso just import Collectors and use Collectors.toList()\n\nI might be wrong though",
      "range": {
        "startLine": 20,
        "startChar": 42,
        "endLine": 20,
        "endChar": 48
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0a2af7a_e320920d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/RevisionNoteBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-09-20T16:59:44Z",
      "side": 1,
      "message": "import static when it makes code more readable is fine (e.g., see checkArgument above).",
      "parentUuid": "4be70257_89db61e1",
      "range": {
        "startLine": 20,
        "startChar": 42,
        "endLine": 20,
        "endChar": 48
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_28b20f52",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/RevisionNoteBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "For the specific case of Collectors.*, I think it is much more readable to see collect(toList()), which you can read directly in English as \"collect to [a] list\". This sounds better in my head than \"collect collector to [a] list\"",
      "parentUuid": "b0a2af7a_e320920d",
      "range": {
        "startLine": 20,
        "startChar": 42,
        "endLine": 20,
        "endChar": 48
      },
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0a56383_241f92c9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/RevisionNoteData.java",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-09-20T16:59:44Z",
      "side": 1,
      "message": "Can simplify using streams:\n\n return ImmutableList.copyOf(\n   comments.stream().map(c -\u003e ...).collect(toList());",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_489cb3ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/RevisionNoteData.java",
        "patchSetId": 1
      },
      "lineNbr": 138,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "Arguably not simpler, but done.\n\n(Will definitely be a win once toImmutableList() exists in Guava :)",
      "parentUuid": "d0a56383_241f92c9",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_883a3bd0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/GetReflog.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-09-20T15:56:15Z",
      "side": 1,
      "message": "nice.",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2bec8e3b_c85603fe",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-09-20T15:56:15Z",
      "side": 1,
      "message": "Add a blank line between com and java package static imports?",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4be70257_496dd9fb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-21T06:42:32Z",
      "side": 1,
      "message": "No, we actually don\u0027t do that, try it for yourself in Eclipse.\n\nIf you see me doing it it\u0027s because I have a buggy script (written by someone else) for organizing imports in my editor and I forgot to fix it.",
      "parentUuid": "2bec8e3b_c85603fe",
      "revId": "04c5e8bac8160942c94ef80b0c21b5cac79627e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}