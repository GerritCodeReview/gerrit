{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1525378308 -0400\nnonce AFN+CTJIEgXX2tp3aDYh+hxlSdMYqS9I63FhBd2UXIIfpMTFqM1oDqqJD58jnUs2TqwwnpNU12Up\n\n0000000000000000000000000000000000000000 077f4848163dd3caf05be60399feb9b968084e39 refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlrrbQQVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiM5rgP/3Jy8tLFN387tc0Uk98kRXu6nCXL\ngKD5B0KP85+7ri3aJJ1FiFI6oxHBvkjPE4HLec+O7xsIlEen0xd1x/lubp6hbrz1\nbasDVJMRnsaUWecQ7zqPxax95kwWjUBmAQAGgKpUWSXzNQbI3i3v4F/B5qLYGnYP\nPdf82INZlgtL7C2rkqBOxlT0GSDq7eKpBxmenc25GkWxtBdNWdI6hly+nuljP3Hh\nOca8mRsXpwAOzQmoM9NluvYJUP0dIaBZRT7pNbniQVLoy/dslvf1nsjlXj8jCZTJ\nSKIp1UvI2RfmpwChjnanV/H8NGqRL4SQx+YUn/xK5UiwGAiZNekWZYwC7d7RpHUq\nvSlrl+u8NieDLvv4gko9MoyyLKyrqcWl89UrRRnzdohjrJJBRBTgl34gzj3JnR7h\nnCZClq4j+ArUrkA7ABdUetpCtA81OBMzyHycW+cQ3ygitCtSiS6qICK/UfzRWR2l\n3mQe6qP/9H1t2hRSEFjm9P4BfFdwAXYxtW15POa8T/JCvi3DIgIwtChJbhCQFneN\nHkKbH9ZxWL4C/l5WlZt9ufFV4u0LZUqB+54YcQX8Be33gFNqs4gIqeAZ2g0R6XlS\niX4ZrA/CdK7FOb3lMhLkoWLPhhFHDMR5rJv+aewm0tpjKPpJLfOrZUMqkrkyZ9o3\nzqPSEA+ODMGcyaYr\n\u003dDuVp\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "ea513408_c9ad2915",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "After spending some mental cycles on remembering why we need this method as well as testExpectedAutoValueMethods(), I feel that we should add some comments, especially as others won\u0027t have our insights from this chain of changes.\n\nIdeally, we would add those comments directly in the tests using those methods. I generally think that we should add more comments to those tests which briefly explain what we are testing and why we do that. In addition, we should also add some hints for others which indicate what a developer should do (-\u003e cache invalidation -\u003e increase version) if one of the tests fails due to code changes. Without that, other developers might just adjust the tests (e.g. add further method to expected AutoValue methods) but miss additionally necessary steps.",
      "range": {
        "startLine": 31,
        "startChar": 21,
        "endLine": 31,
        "endChar": 39
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c1bee31_b1b5730c",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-14T21:26:21Z",
      "side": 1,
      "message": "Good point. I agree that we should have some kind of comment telling developers what to do if the tests fail. I worry a little bit, though, that it\u0027s going to be a 2-3 sentence explanation that would just get copy/pasted into the dozen similar test methods. What if we write that description once in the javadoc of SerializedClassSubject, and then @link to it from the javadoc of the relevant test methods? Do you think that would be too easy for developers to miss?",
      "parentUuid": "ea513408_c9ad2915",
      "range": {
        "startLine": 31,
        "startChar": 21,
        "endLine": 31,
        "endChar": 39
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "270d1d9c_c557cde0",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-15T11:48:35Z",
      "side": 1,
      "message": "Linking to a comprehensive explanation in SerializedClassSubject is a good idea. The way you phrased the referring comment e.g. in ChangeKindCacheImplTest#keyFields is perfect.",
      "parentUuid": "5c1bee31_b1b5730c",
      "range": {
        "startLine": 31,
        "startChar": 21,
        "endLine": 31,
        "endChar": 39
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4a6e9e4_a0fe8453",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I did this earlier in the series where I introduced SerializedClassSubject.",
      "parentUuid": "5c1bee31_b1b5730c",
      "range": {
        "startLine": 31,
        "startChar": 21,
        "endLine": 31,
        "endChar": 39
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b86e71a0_c3ddfc9e",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "This only covers the fields declared in the specified class and excludes those of super classes. In theory, we would need to cover those as well. To get them, we could manually gather all fields from all involved classes or use something like the Reflections library (see below).",
      "range": {
        "startLine": 33,
        "startChar": 26,
        "endLine": 33,
        "endChar": 51
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e500a3a_445b2664",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-14T21:26:21Z",
      "side": 1,
      "message": "Done. Per my comment below we can\u0027t use Reflections, but we already have a dep on an Apache Commons package that does what we need.",
      "parentUuid": "b86e71a0_c3ddfc9e",
      "range": {
        "startLine": 33,
        "startChar": 26,
        "endLine": 33,
        "endChar": 51
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f08d1dae_5dd2ece5",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "(Done earlier in the series)",
      "parentUuid": "4e500a3a_445b2664",
      "range": {
        "startLine": 33,
        "startChar": 26,
        "endLine": 33,
        "endChar": 51
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a70b7635_047891b5",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "It\u0027s a bit unfortunate that we have to distinguish between an AutoValue class and a non-AutoValue class and call the appropriate method. For AutoValue classes, it would also be possible to look at the fields. The only issue is that getting the generated AutoValue_ class isn\u0027t that easy. I don\u0027t have a good suggestion for this yet. The best would be to use the Reflections library and search for the subtype when we encounter an abstract class but that would mean we would need to add a new dependency to the Gerrit tests.",
      "range": {
        "startLine": 39,
        "startChar": 21,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59356336_5a6f9ec2",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-14T21:26:21Z",
      "side": 1,
      "message": "\u003e It\u0027s a bit unfortunate that we have to distinguish between an AutoValue class and a non-AutoValue class\n\nI agree it\u0027s a little unfortunate, but in practice I don\u0027t see it as a significant barrier to writing accurate tests. For example, if you accidentally called testExpectedFields on an abstract AutoValue class, your assertion would fail, since the extracted map would always be empty. I don\u0027t think it would take too long to figure out the cause.\n\n(Of course, a well-designed test API with appropriately-named methods can also help, and I hope the latest patch set is a slight improvement.)\n\n\u003e The best would be to use the Reflections library and search for the subtype when we encounter an abstract class but that would mean we would need to add a new dependency to the Gerrit tests.\n\nI don\u0027t object to adding new dependencies to tests in general, but assuming you\u0027re talking about [1], we can\u0027t use it since our lawyers don\u0027t consider WTFPL a usable license[2].\n\n[1] https://github.com/ronmamo/reflections\n[2] https://opensource.google.com/docs/thirdparty/licenses/#wtfpl-not-allowed",
      "parentUuid": "a70b7635_047891b5",
      "range": {
        "startLine": 39,
        "startChar": 21,
        "endLine": 39,
        "endChar": 49
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b413dfbb_aff1420e",
        "filename": "java/com/google/gerrit/server/cache/testing/CacheSerializerTestUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-15T11:48:35Z",
      "side": 1,
      "message": "\u003e (Of course, a well-designed test API with appropriately-named methods can also help, and I hope the latest patch set is a slight improvement.)\n\nYes, I do like the subject approach.\n\n\u003e I don\u0027t object to adding new dependencies to tests in general, but assuming you\u0027re talking about [1], we can\u0027t use it since our lawyers don\u0027t consider WTFPL a usable license[2].\n\nSomeone else already went through the legal hassle and found a way that we can use it (internally; not sure about the open source part of Gerrit). The Apache Commons library is also fine, though. I just thought that we tended to avoid it but since we already have it, it\u0027s definitely the better option.",
      "parentUuid": "59356336_5a6f9ec2",
      "range": {
        "startLine": 39,
        "startChar": 21,
        "endLine": 39,
        "endChar": 49
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90d1518d_01d574ab",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesCache.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "I don\u0027t think this disables the cache by default as you intended. Internally, any values less than or equal to 0 are mapped to 128 \u003c\u003c 20.",
      "range": {
        "startLine": 60,
        "startChar": 13,
        "endLine": 60,
        "endChar": 26
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b93e9db3_8324af5f",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesCache.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Dang, I swear I had a separate commit that changed this behavior in PersistentCacheBinding, but I can\u0027t find what happened to it. Fixed.",
      "parentUuid": "90d1518d_01d574ab",
      "range": {
        "startLine": 60,
        "startChar": 13,
        "endLine": 60,
        "endChar": 26
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "035f4509_7719c875",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 444,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "This check and the one in line 440 are tautologous.",
      "range": {
        "startLine": 444,
        "startChar": 6,
        "endLine": 444,
        "endChar": 36
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e26ce772_6a5b7b53",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 444,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "035f4509_7719c875",
      "range": {
        "startLine": 444,
        "startChar": 6,
        "endLine": 444,
        "endChar": 36
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d1ea3d2_35463ae5",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Here and below: It would be better for readability if everything for ChangeColumnsProto was in a separate method.",
      "range": {
        "startLine": 453,
        "startChar": 6,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "939cc54b_586c359c",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done, and similarly in deserialize.",
      "parentUuid": "0d1ea3d2_35463ae5",
      "range": {
        "startLine": 453,
        "startChar": 6,
        "endLine": 453,
        "endChar": 24
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7289d68_37cbf5ca",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "For simplicity here and during deserialization, wouldn\u0027t it be better to use our regular approach of converting enums to strings?",
      "range": {
        "startLine": 477,
        "startChar": 21,
        "endLine": 477,
        "endChar": 34
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "236495f4_cbb08003",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 477,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "My thinking was that CodedEnum is an example of reusing an existing serialization format for an existing type. But on second thought, it\u0027s probably not worth the mental overhead of distinguishing between Enum and CodedEnum. Plus, several years of experience with using int fields for this in the generated reviewdb.proto has taught me that having the change state be readable is valuable.\n\nDone.",
      "parentUuid": "f7289d68_37cbf5ca",
      "range": {
        "startLine": 477,
        "startChar": 21,
        "endLine": 477,
        "endChar": 34
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de11b83e_f2826a5c",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Can\u0027t we directly use ProtobufCodec#encodeToByteString?",
      "range": {
        "startLine": 530,
        "startChar": 26,
        "endLine": 530,
        "endChar": 44
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "507fc24e_94e56ea8",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I think what I meant to do (and failed) was to make it deterministic, which ProtobufCodec#encodeToByteString is not. Arguably we should improve the ProtobufCodec interface instead, either by making determinism a property of the ProtobufCodec instance, or by adding a new method. But it lives in gwtorm and I have no desire to touch gwtorm code.\n\nSince this is only a value type, we could get away with not encoding deterministically, but I would prefer not to, because of tests: the tests as written (and discussed elsewhere) depend on these fields having a specific deterministic serialized format.\n\nMoved this to ProtoCacheSerializers and documented the deterministic guarantee.",
      "parentUuid": "de11b83e_f2826a5c",
      "range": {
        "startLine": 530,
        "startChar": 26,
        "endLine": 530,
        "endChar": 44
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "613f4ab8_96655f73",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "When reading the code in this method, it\u0027s a bit strange that two different styles are used to do the same. Many lines above, the getHas..() calls were always wrapped in an if-statement. Would it be possible to use a consistent style, no matter which of them? Thus, when scanning this method, it would be easier to spot whether a getHas..() call is missing as you would only need to look out for one pattern.",
      "range": {
        "startLine": 654,
        "startChar": 14,
        "endLine": 654,
        "endChar": 43
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8df0e55e_1a999a86",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesState.java",
        "patchSetId": 2
      },
      "lineNbr": 654,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "613f4ab8_96655f73",
      "range": {
        "startLine": 654,
        "startChar": 14,
        "endLine": 654,
        "endChar": 43
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03a9715f_c73c1a5e",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:57:31Z",
      "side": 1,
      "message": "There\u0027s also the proto extension for Truth. If we are adding more tests especially for the protos, we might want to use it.",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 57
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a958aa9f_f97df971",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesCacheTest.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Good call, I didn\u0027t realize that was open-source. Done.",
      "parentUuid": "03a9715f_c73c1a5e",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 57
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "181959cb_8394e79f",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "I don\u0027t know how thorough you want your tests to be. I noticed that the tests don\u0027t cover serialization of all attributes of the nested classes.\n\nMissing are:\n- ChangeMessage: message, tag, realAuthor\n- ReviewerByEmailSet: null for name\n- Comment: lineNbr, range, revId, realAuthor; true for legacyFormat doesn\u0027t show up in the JSON output\n- SubmitRecord: labels, requirements, errorMessage\n\nBy the way, I noticed an inconsistency for the realAuthor of Comment: If you just call the constructor of Comment, realAuthor is set to author. If you call setRealAuthor with null or the Account.Id of the author, realAuthor is set to null.\n\nIf you feel it would be good to have those tests, please add them. If not, just ignore this comment.",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f16faf2_c32fd748",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Shouldn\u0027t we also have the following tests?\n- serializeChangeKey\n- serializeCreatedOn\n- serializeLastUpdatedOn\n- serializeOwner\n- serializeBranch\n- serializeSubject",
      "range": {
        "startLine": 65,
        "startChar": 13,
        "endLine": 65,
        "endChar": 33
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5e7cfe1_a20c4cbe",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-09T15:52:48Z",
      "side": 1,
      "message": "My general rule is that it is out of scope here to test the serialization format for other types which already have some other serialization strategy used elsewhere in Gerrit. So I don\u0027t think we need tests for all types of ChangeMessage/Comment/SubmitRecord, but there probably should be more tests for ReviewerByEmailSet",
      "parentUuid": "181959cb_8394e79f",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ba0eda2_333626de",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "That\u0027s what serializeRequiredFieldsOnly is testing, but as you said elsewhere we shouldn\u0027t necessarily depend on the defaults. Done.",
      "parentUuid": "5f16faf2_c32fd748",
      "range": {
        "startLine": 65,
        "startChar": 13,
        "endLine": 65,
        "endChar": 33
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e73db6f_ee037cd1",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done for ReviewerByEmailSet.\n\nUnfortunately, during the process, I noticed that Address does not include the name in its equals/hashCode at all. I think I would like to fix that, but I\u0027m not sure if it would have unintended consequences elsewhere in Gerrit.\n\nFor now, I wrote additional assertions that take this awkward behavior into account.",
      "parentUuid": "b5e7cfe1_a20c4cbe",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aca9ef74_58a98931",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Here and below: Can\u0027t we simply specify a specific Timestamp here instead of relying on the specification of TestTimeUtil#resetWithClockStep above? This would also help for tests which explicitly verify some Timestamps as it is not immediately obvious in a test why TimeUtil.newTs() equals for instance 1254344403000L.",
      "range": {
        "startLine": 85,
        "startChar": 23,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5e5045e_748a280b",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aca9ef74_58a98931",
      "range": {
        "startLine": 85,
        "startChar": 23,
        "endLine": 85,
        "endChar": 39
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45f0c740_810a6f3b",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Instead of this assertion, we should rather ensure that we set up the test data correctly and don\u0027t rely on default values (TotT 511). For instance, we could use:\n\n newBuilder().columns(cols.toBuilder().topic(null).build()).build();\n\nin the previous line.",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 49
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b69f9ac_0fd81dec",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45f0c740_810a6f3b",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 49
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25f72802_6fd1f0cc",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Here and below: This assertion is superfluous. We correctly set up the test data one line above.",
      "range": {
        "startLine": 141,
        "startChar": 4,
        "endLine": 141,
        "endChar": 52
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "effb714c_17fc90ec",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25f72802_6fd1f0cc",
      "range": {
        "startLine": 141,
        "startChar": 4,
        "endLine": 141,
        "endChar": 52
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6a0f85b_7b02ed7e",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Here and below: Do we care that those values match? Can\u0027t we simply use an arbitrary value here?",
      "range": {
        "startLine": 289,
        "startChar": 4,
        "endLine": 289,
        "endChar": 34
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cd3763a_03d3f16d",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 289,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I guess I wanted it to be \"more realistic\", in that the uploader of PS1 will always match the change owner, but you\u0027re right that it doesn\u0027t actually matter in a test of the low-level serialization format. Done.",
      "parentUuid": "e6a0f85b_7b02ed7e",
      "range": {
        "startLine": 289,
        "startChar": 4,
        "endLine": 289,
        "endChar": 34
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abb16ea7_c06dd544",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 589,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "In order to not depend on the logic of Serializer.GSON, we could generate the JSON once and paste it as string here.",
      "range": {
        "startLine": 589,
        "startChar": 20,
        "endLine": 589,
        "endChar": 47
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2271ea50_770c7392",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 589,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "It might be nice, but unfortunately, for Gson specifically, I don\u0027t think we can rely on the representation being deterministic across JVMs, due to field iteration order.\n\nA more detailed set of assertions might be able to compare all the fields in the serialized representation in a more fine-grained way, such that two serialized representations are considered equal if the parsed JSON representations compare equal, even though the sequence of bytes is slightly different. But that would be much more work, and arguably less readable, than the single call to assertRoundTrip that we have below.\n\nIMO, depending on the logic of Serializer.GSON is an acceptable tradeoff.",
      "parentUuid": "abb16ea7_c06dd544",
      "range": {
        "startLine": 589,
        "startChar": 20,
        "endLine": 589,
        "endChar": 47
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "436a4a8d_4c3bb7a4",
        "filename": "javatests/com/google/gerrit/server/notedb/ChangeNotesStateTest.java",
        "patchSetId": 2
      },
      "lineNbr": 606,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "unrelated: I wonder why we even have a map here. I was curious and checked the usages of ChangeNotesState#publishedComments. Outside of tests, all relevant usages call ImmutableMultimap#values.",
      "range": {
        "startLine": 606,
        "startChar": 16,
        "endLine": 606,
        "endChar": 90
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab96e494_8ec27eb2",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "Shouldn\u0027t we mention that fact somewhere (e.g. in config-gerrit)?",
      "range": {
        "startLine": 81,
        "startChar": 49,
        "endLine": 82,
        "endChar": 74
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8e959a_f9e56c81",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I\u0027m not sure why this potential for programmer error should be mentioned in the config documentation for admins?\n\nI think a reasonable, separate improvement might be to inject the NotesMigration into ChangeNotesState and throw ISE from #get when migration.readChanges() is false.",
      "parentUuid": "ab96e494_8ec27eb2",
      "range": {
        "startLine": 81,
        "startChar": 49,
        "endLine": 82,
        "endChar": 74
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "757032fc_e7f8042c",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-18T14:45:20Z",
      "side": 1,
      "message": "I thought that for open-source hosts, it\u0027s still possible to run on ReviewDb (but I might have a wrong timeline in my mind). As config-gerrit.txt now says \"change_notes: disk storage is disabled by default\", I would expect that some admins decide to switch on disk storage. If the host is still on ReviewDb, wouldn\u0027t that cause some issues?",
      "parentUuid": "ed8e959a_f9e56c81",
      "range": {
        "startLine": 81,
        "startChar": 49,
        "endLine": 82,
        "endChar": 74
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bcdaa94_14a04ff1",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-18T15:32:19Z",
      "side": 1,
      "message": "\u003e I thought that for open-source hosts, it\u0027s still possible to run on ReviewDb\n\nCorrect.\n\n\u003e As config-gerrit.txt now says \"change_notes: disk storage is disabled by default\", I would expect that some admins decide to switch on disk storage. If the host is still on ReviewDb, wouldn\u0027t that cause some issues?\n\nIt shouldn\u0027t cause problems. It will cause the cache database files to get created at startup time, but nothing actually goes into the cache unless something calls ChangeNotesCache#get, and calling #get when NoteDb is disabled is programmer error.\n\nI mean, I could explain what I just said in the previous paragraph in config-gerrit.txt, but I\u0027d be worried that would cause more confusion than it would solve.",
      "parentUuid": "757032fc_e7f8042c",
      "range": {
        "startLine": 81,
        "startChar": 49,
        "endLine": 82,
        "endChar": 74
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdf7aec3_3d8322fe",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "For strings, would it be possible to assume empty \u003d\u003d null \u003d\u003d unset? If so, we could do without the additional has_ fields. On the other hand, I\u0027m not sure if this added additional confusion as we would then use another approach for strings and other scalar values. What is your opinion?",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 105,
        "endChar": 24
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f8426f_ce29fc62",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I would love to get rid of has_* for string fields, but it\u0027s not immediately obvious that it is safe to do for all columns.\n\nFor example, a cursory glance at Change#getOriginalSubject() shows that it treats null and the empty string differently. So then we have to dig deeper to see if it is ever *really* possible to have originalSubject be the empty string.\n\nThat level of digging for every string field is more work than I wanted to tackle in this series. (As you\u0027ve seen, I did do it for some of the bool fields, but even that was a fair amount of work, so I had to draw the line somewhere.) In this change, there is a mechanical translation of the possibly-nullable ChangeColumns fields into proto, which does not require the author or reviewer of this change to understand the semantics of the fields.",
      "parentUuid": "cdf7aec3_3d8322fe",
      "range": {
        "startLine": 104,
        "startChar": 4,
        "endLine": 105,
        "endChar": 24
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f9a24d1_bea25bb6",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-05-08T15:45:12Z",
      "side": 1,
      "message": "What about omitting the verb here and below (e.g. just \u0027private\u0027)? This would result in nicer generated method (e.g. getIsPrivate() isn\u0027t that nice) and would reduce confusion for has_review_started with other has_ methods of nullable fields.",
      "range": {
        "startLine": 119,
        "startChar": 9,
        "endLine": 119,
        "endChar": 19
      },
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f551326e_d223b5fd",
        "filename": "proto/cache.proto",
        "patchSetId": 2
      },
      "lineNbr": 119,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-05-15T23:37:52Z",
      "side": 1,
      "message": "I prefer keeping these fields as close to the corresponding field names in ChangeNotesState/ChangeColumns as possible; I am personally ok with the slightly suboptimal generated proto method names.\n\nAlthough actually, I would even more prefer if the method names in ChangeColumns (the Java class) matched the actual column names in Change. In Change.java there is a mismatch between some field names (reviewStarted) and method names (hasReviewStarted()). Obviously having no mismatch would be best, but given that there is a mismatch, I would prefer if the field names in ChangeColumns match the field names in Change, not the method names. Did that in a predecessor.",
      "parentUuid": "3f9a24d1_bea25bb6",
      "range": {
        "startLine": 119,
        "startChar": 9,
        "endLine": 119,
        "endChar": 19
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "077f4848163dd3caf05be60399feb9b968084e39",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}