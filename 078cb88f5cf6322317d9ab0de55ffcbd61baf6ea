{
  "comments": [
    {
      "key": {
        "uuid": "ed7a73a9_740a087b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-05-03T21:07:26Z",
      "side": 1,
      "message": "A plain merge or do we want to follow the configured merge strategy of that project?",
      "range": {
        "startLine": 9,
        "startChar": 21,
        "endLine": 9,
        "endChar": 28
      },
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed7a73a9_3404906b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-05-03T21:19:34Z",
      "side": 1,
      "message": "I think we want a plain merge. For example, in a project using Fast-Forward Only strategy, this would still be useful for requesting a merge from one branh to another.",
      "parentUuid": "ed7a73a9_740a087b",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed7a73a9_14ff1478",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-05-03T21:07:26Z",
      "side": 1,
      "message": "The merge attribute is {0,1} heads? i.e. do we want to allow giving multiple heads. (\"Make an octopus merge of all the stable branches\")\n\nThe second parent is the target branch tip?",
      "range": {
        "startLine": 10,
        "startChar": 12,
        "endLine": 10,
        "endChar": 19
      },
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a83309d6_8adc0b2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-05-03T06:36:23Z",
      "side": 1,
      "message": "\"an empty\"",
      "range": {
        "startLine": 11,
        "startChar": 60,
        "endLine": 11,
        "endChar": 67
      },
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add23be5_92c47c52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-05-03T21:07:26Z",
      "side": 1,
      "message": "Please add an example query for a successful and a failed query to Documentation/rest-api-changes.txt\n\nI am trying to think of a good place to add tests for these. gerrit-reviewdb/src/test/java/com/google/gerrit/reviewdb/client/ChangeTest.java maybe?",
      "range": {
        "startLine": 12,
        "startChar": 7,
        "endLine": 12,
        "endChar": 61
      },
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6daf6390_7812c1a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-05-04T16:42:28Z",
      "side": 1,
      "message": "Most of the REST API has tests in gerrit-acceptance-tests. E.g. for POST /changes/{change}/revisions/{revision}/cherrypick, there is a test in\n\n gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java\n\nand some tests for the POST /changes call (e.g. createEmptyChangeOnNonExistingBranch) are in\n\n gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/change/ChangeIT.java",
      "parentUuid": "add23be5_92c47c52",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "add23be5_5205b469",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-05-03T21:36:09Z",
      "side": 1,
      "message": "What is the HTTP response code if\n* the change is already merged\n* the merge produced conflicts\n? Please add that information to the documentation + tests.",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed7a73a9_f4f5b894",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 4203,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-05-03T21:19:34Z",
      "side": 1,
      "message": "Bikeshedding a little: is this the right REST endpoint for this action? The action is very similar to what /changes/{change-id}/revision/{revision-id}/cherrypick does so it would be nice to have it in a similar place in the REST API if possible. Some other possibilities for comparison:\n\nSomething like\n\n POST /projects/{project-name}/branches/{branch}/merge\n\nwith input\n\n {\n    commit: \"1ab8c787a\"\n }\n\nor, imitating https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#cherry-pick,\n\n POST /changes/{change-id}/revisions/{revision-id}/merge\n\nwith input\n\n {\n     destination: \"release-branch\"\n }",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a83309d6_aae1cfe2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 4204,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-05-03T06:36:23Z",
      "side": 1,
      "message": "What about tags?",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4830cdcd_e7eb02bf",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/CreateChange.java",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-05-03T06:36:23Z",
      "side": 1,
      "message": "nit: long lines",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed7a73a9_14e634fa",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/CreateChange.java",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1012422
      },
      "writtenOn": "2016-05-03T20:44:08Z",
      "side": 1,
      "message": "Two questions:\n\n1. How can we tell the difference between this case (CL merge and the conflict case)?\n\n2. Is there any way to check in advance whether a CL will have a conflict before doing the merge? This would be extremely useful for Android automerger / presubmit system and would save us from having to build a whole service for this.",
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a83309d6_cae603f8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-05-03T06:36:23Z",
      "side": 1,
      "message": "unnecessary final",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 212,
        "endChar": 9
      },
      "revId": "078cb88f5cf6322317d9ab0de55ffcbd61baf6ea",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}