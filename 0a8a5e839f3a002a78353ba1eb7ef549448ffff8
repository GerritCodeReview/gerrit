{
  "comments": [
    {
      "key": {
        "uuid": "MZhzzdTE",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommits.java",
        "patchSetId": 1
      },
      "lineNbr": 338,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T22:20:52Z",
      "side": 1,
      "message": "this is modifying a singleton object, and will conflict with concurrent requests in different scopes.",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZjz4MQs",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T22:20:52Z",
      "side": 1,
      "message": "just return ListeningExecutorService",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZlz9-fk",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T22:20:52Z",
      "side": 1,
      "message": "inject a Provider\u003cRequestScopePropagator\u003e  to get around the scoping issue.",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZxvzezE",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2012-11-30T22:50:12Z",
      "side": 1,
      "message": "Actually the initial idea was to inject RequestScopePropagator directly, but this fails because the ReceiveCommitsExecutorModule is added in the system injector and at this time RequestScopePropagator is not bound yet. We can\u0027t bind RequestScopePropagator in a system injector module because the binding needs to be different for HTTP (GuiceRequestScopePropagator) and SSH (SshScope.Propagator). Injecting Provider\u003cRequestScopePropagator\u003e has the same problem, hasn\u0027t it? Any idea how to make this injection work?",
      "parentUuid": "MZlz9-fk",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZtwQLVw",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T23:20:47Z",
      "side": 1,
      "message": "right so you are in a hard spot.  I would probably not change the way the ExecutorService is constructed. Instead, I would add a method to RequestScopePropagator that can \"wrap\" an ExecutorService and call it in the constructor of this class.\n\nIn the implementation of submit you will need to save off the current thread and the wrapped callable.\n\n  public \u003cT\u003e ListenableFuture\u003cT\u003e submit(final Callable\u003cT\u003e task) {\n    final Thread caller \u003d Thread.currentThread();\n    final Callable\u003cT\u003e wrapped \u003d requestScopePropagator.wrap(task);\n    return super.submit(new Callable\u003cT\u003e() {\n      public T call() throws Exception {\n        if (caller \u003d\u003d Thread.currentThread()) {\n          return task.call();\n        } else {\n          return wrapped.call();\n        }\n      }\n    });\n  }\n\n\nnote this could also replace the default implementation of wrap(), if this sort of behavior is desired in general (which it may).",
      "parentUuid": "MZxvzezE",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZ1v9A-o",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2012-12-01T01:12:21Z",
      "side": 1,
      "message": "Thanks for the very good suggestions.\n\nAdding a wrap method to RequestScopePropagator that wraps the ExecutorService works, but I think you are right that this should be the default implementation of the wrap method that wraps the callable. I have done this in the new patch set.",
      "parentUuid": "MZtwQLVw",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZpwGpSU",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T22:20:52Z",
      "side": 1,
      "message": "remove the method.",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "MZnwCuRQ",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommitsExecutorModule.java",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1002517
      },
      "writtenOn": "2012-11-30T22:20:52Z",
      "side": 1,
      "message": "get the result of the Provider\u003cRequestScopePropagator\u003e here.",
      "revId": "0a8a5e839f3a002a78353ba1eb7ef549448ffff8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}