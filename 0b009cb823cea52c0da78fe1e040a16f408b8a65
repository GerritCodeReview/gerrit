{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "70e5760f_2942f963",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-06-30T17:28:15Z",
      "side": 1,
      "message": "if the change does not exist on the destination, does it auto create one?",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43f4126a_e4752596",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-01T11:05:00Z",
      "side": 1,
      "message": "+1. I think we first need to implement the API to create the change on top of destination branch/supplied base commit.\n\nThen we can extend it to upload new patchSets to existing changes.\n\n@Jinda, would this order makes sense for your use case?",
      "parentUuid": "70e5760f_2942f963",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19879603_03b67caa",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T05:56:44Z",
      "side": 1,
      "message": "I can add an API to create a new change here. However, it will rather be limited, or a duplication of the `create-change` function. Unlike `chery-pick`/`revert`, `apply-patch` have no inherited context from a source change, so every change-field will have to be provided explicitly in this case.\n\nIf that works for you, I think it makes more sense to call `create-change`, and then `apply-patch` on top of it.\nThis attitude will allow-\n1. Use the existing reach mechanism for creating change, with any custom params you might need.\n2. Applying multiple patches into the same change with exactly the same syntax (i.e. - not having a different syntax for the first patch).\n3. [internal Gerrit benefit] far less duplicated code.\nYou can see a usage example of this approach in the `ApplyPatchIT.java` file.",
      "parentUuid": "43f4126a_e4752596",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18bbfce2_42726e1d",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-04T08:47:12Z",
      "side": 1,
      "message": "\u003e or a duplication of the  create-change function\n\nWe could just extend the create-change with the patch param, that would allow to form a commit from the patch. Right now it either creates a merge commit or empty commit.",
      "parentUuid": "19879603_03b67caa",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d864ab46_a26aaec1",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T10:22:55Z",
      "side": 1,
      "message": "If we only need to support a single patch per change - adding a `patch` param sounds great.\nOtherwise - I think we better keep the creation and patching separated.",
      "parentUuid": "18bbfce2_42726e1d",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a9f912b_b22ec2e2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-07-06T16:32:38Z",
      "side": 1,
      "message": "When I asked this question, I was thinking about the case that if the change does not exist on the target host/branch, then our service will first get a 400s error when calling the apply patch api, and then our service will need to call the createChange api to create a base change and then re-call the applyPatch API again to actually add the patch. Since this is a rather common case for us to not having the change in the target host, would it make sense to create the base change by the api itself so it will be much simpler for our service (and potentially other customers)? Or if there is a flag to turn on/off this behavior.",
      "parentUuid": "d864ab46_a26aaec1",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bc1d4f4_d0d42b30",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-08T13:21:08Z",
      "side": 1,
      "message": "Maria, does it make sense to nest `ChangeInput` (AKA `create-change` input) within `ApplyPatch` input, then call the 2 methods sequentially (when creation is controlled by an input flag)?\nIf so - I think it will answer both Jinda\u0027s request and minimum code patching on our side.\nWDYT?",
      "parentUuid": "3a9f912b_b22ec2e2",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d80e5ad_bdcca1d2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-11T13:54:47Z",
      "side": 1,
      "message": "Re Jinda\u0027s comment: I think you are just trying to avoid calling the API multiple times,which makes since.\n\nWould this work for you:\n* New change needs to be created - call POST /changes/ endpoint with ApplyPatch input (new input field)\n* Existing change needs to be updated - call POST /changes/{change-id}/apply.patch to upload a new patch?\n\nTrying to better understand your requirements :)\n\nRe Nitzan: Could you, please, comment on your idea (which 2 methods will be called)?",
      "parentUuid": "4bc1d4f4_d0d42b30",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9573deb0_43d35ee9",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-07-11T16:11:13Z",
      "side": 1,
      "message": "Thanks Marija. Just to confirm that we the client side should check if the change exists or not before calling either of the two endpoints? I guess the ideal situation would be something similar to the cherrypickCommit api endpoint (https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#cherry-pick-commit), which handles both updatin existing change and create new change by the server.",
      "parentUuid": "4d80e5ad_bdcca1d2",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ff7af2_c3d5cc79",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-12T10:15:21Z",
      "side": 1,
      "message": "\u003e  Just to confirm that we the client side should check if the change exists or not before calling either of the two endpoints?\nNo, I don\u0027t think so.\nIf you don\u0027t want the patch to be applied in a specific, foreknown, change - you can just create a new change with no prior checks, then apply the patch in it (total of 2 calls, one for each step).\nNote this approach will be consistent with the [Merge API](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-merge-patch-set-for-change).\n\n\n\u003e I guess the ideal situation would be something similar to the cherrypickCommit api endpoint\nThe issue with this approach is that a new change needs more than an ID (at least branch and subject, but you\u0027re likely to need some optional fields as well).\nWhile `cherry-pick` has context from its source change, `apply-patch` input would have to clone [ChangeInput](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-input) (and its handling, including errors/retries handling) to allow proper change creation, and we would like to avoid that.",
      "parentUuid": "9573deb0_43d35ee9",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4672d4cd_723c3c33",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-12T12:29:25Z",
      "side": 1,
      "message": "\u003e (total of 2 calls, one for each step).\n\nNot necessarily. Similar to Merge, you can create a change with first PatchSet formed from the ApplyPatch input. Then only one call is needed for the new change (POST /changes/ )\n\nRe Jinda:How would you even check the change existence? Are you planning to use same Change-Ids across hosts for same changes? If the answer is yes, then you will have to check the change existence. As Nitzan already mentioned, this is exactly the behavior of merge api \n* [New change](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change)\n* [New patch](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-merge-patch-set-for-change)",
      "parentUuid": "d8ff7af2_c3d5cc79",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "526f778f_bca869fb",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-07-12T20:24:44Z",
      "side": 1,
      "message": "Thanks both for the detailed explanation!",
      "parentUuid": "4672d4cd_723c3c33",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b0f5867_189ff714",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2133,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-13T06:50:45Z",
      "side": 1,
      "message": "Jinda, is the described approach LGTM by you?",
      "parentUuid": "526f778f_bca869fb",
      "range": {
        "startLine": 2133,
        "startChar": 0,
        "endLine": 2133,
        "endChar": 43
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b89f838e_264a104a",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2149,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-01T11:05:00Z",
      "side": 1,
      "message": "We need to make sure this is not relevant for the apply implementation, since the patches will be generated from the changes on other hosts.",
      "range": {
        "startLine": 2149,
        "startChar": 29,
        "endLine": 2149,
        "endChar": 36
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dfb9168_61b9d788",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2149,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T05:56:44Z",
      "side": 1,
      "message": "Not sure I\u0027m following. What is \"this\"?",
      "parentUuid": "b89f838e_264a104a",
      "range": {
        "startLine": 2149,
        "startChar": 29,
        "endLine": 2149,
        "endChar": 36
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03720100_c61cdbbd",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2149,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-04T08:47:12Z",
      "side": 1,
      "message": "This is highlighted. The generated SHA1",
      "parentUuid": "3dfb9168_61b9d788",
      "range": {
        "startLine": 2149,
        "startChar": 29,
        "endLine": 2149,
        "endChar": 36
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4945ee11_5cfe7d08",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 2149,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T10:22:55Z",
      "side": 1,
      "message": "From what I understand, the SHA1 is only effected by the file content.\nWill double check that.",
      "parentUuid": "03720100_c61cdbbd",
      "range": {
        "startLine": 2149,
        "startChar": 29,
        "endLine": 2149,
        "endChar": 36
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e311e1ca_5209ae06",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 6494,
      "author": {
        "id": 1096475
      },
      "writtenOn": "2022-06-30T17:16:55Z",
      "side": 1,
      "message": "Should this be the original change topic?",
      "range": {
        "startLine": 6494,
        "startChar": 53,
        "endLine": 6494,
        "endChar": 64
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2980ccea_e7cfec66",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 6494,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-06-30T17:28:15Z",
      "side": 1,
      "message": "My uncerstanding is it should be destination change, basically this allows to override the topic for the destination change. But will let Nitzan confirm.",
      "parentUuid": "e311e1ca_5209ae06",
      "range": {
        "startLine": 6494,
        "startChar": 53,
        "endLine": 6494,
        "endChar": 64
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6033dc46_dc5ccf6f",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 4
      },
      "lineNbr": 6494,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T05:56:44Z",
      "side": 1,
      "message": "Yes, my intention was as Jinda suggested.\nDepending on what we agree on regarding creating changes (see the linked comment below) - I\u0027m not sure that\u0027s necessary. Same goes for the `message` field.\nLet\u0027s get back to this after the main discussion is resolved.\nhttps://gerrit-review.googlesource.com/c/gerrit/+/340065/comments/70e5760f_2942f963",
      "parentUuid": "2980ccea_e7cfec66",
      "range": {
        "startLine": 6494,
        "startChar": 53,
        "endLine": 6494,
        "endChar": 64
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb34e9ac_df0da90c",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchInput.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1096475
      },
      "writtenOn": "2022-06-30T17:16:55Z",
      "side": 1,
      "message": "Is the idea that we would first create a topic for the destination host / branch and then use this api? (Sorry if this is a naive question -- I\u0027m not super familiar)",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b321feb_c9cdf305",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchInput.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-07-04T05:56:44Z",
      "side": 1,
      "message": "I was not aware that topics should be created. I though you can just use any string here.\nMarija, can you please provide your input?",
      "parentUuid": "bb34e9ac_df0da90c",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4639375_72e5e20c",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchInput.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-07-04T08:47:12Z",
      "side": 1,
      "message": "Topics cannot be created on their own (without changes).\n\nThis will be up to your client to generate the topic and provide it in input, or leave it blank and keep the topic of the destination change, as Nitzan explained in other comment.\n\n\nIf I understand correctly, you wish to move changes around hosts using this new API. If you wish to keep the topic from the original change on other host, you will have to implement it in your automation (Automerger/cherrypicker)",
      "parentUuid": "6b321feb_c9cdf305",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd78c713_4c10d7d0",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchInput.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1041482
      },
      "writtenOn": "2022-07-06T16:37:28Z",
      "side": 1,
      "message": "Once we provide a value for the topic field when we call the patch api, it should be applied to the destination change. There is no need on our side to create the topic first.",
      "parentUuid": "a4639375_72e5e20c",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a269d5fb_df88de15",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchInput.java",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1096475
      },
      "writtenOn": "2022-07-06T17:59:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fd78c713_4c10d7d0",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 22
      },
      "revId": "0b009cb823cea52c0da78fe1e040a16f408b8a65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}