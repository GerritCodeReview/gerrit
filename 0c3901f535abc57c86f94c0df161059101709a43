{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1a9cee0e_8a786462",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2022-10-07T10:25:27Z",
      "side": 1,
      "message": "+see",
      "range": {
        "startLine": 13,
        "startChar": 12,
        "endLine": 13,
        "endChar": 13
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46de760b_c75072c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a9cee0e_8a786462",
      "range": {
        "startLine": 13,
        "startChar": 12,
        "endLine": 13,
        "endChar": 13
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f46c554d_1f480c87",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2022-10-07T09:06:38Z",
      "side": 1,
      "message": "for the sake of avoiding redundant data, i would store it *only* when it\u0027s provided explicitly.",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57247e9e_80974b43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "Yes, that would be better. Actually my change was even wrong as it would always use the same timestamp as the commit timestamp. I have fixed that.",
      "parentUuid": "f46c554d_1f480c87",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99368e32_d81f2337",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2022-10-07T10:25:27Z",
      "side": 1,
      "message": "as a completely alternative idea, how about using the fact that commits already come with two timestamps? the author timestamp could be \"faked\" by the schema update to simply repeat the last \"regular\" commit\u0027s timestamp, while the commit timestamp would represent the time of the schema update. or would this disrupt some other use?",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ea7c4f6_56deff10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "That is similar to what I have done in stable-3.5: https://gerrit-review.googlesource.com/c/gerrit/+/347439, where I implemented that the copy-approvals tool will use the commit timestamp of the last commit in the meta branch as the commit timestamp of the commit created during the copy approvals migration. However, by doing this, Gerrit is lying about the true commit time. And it might be indeed interesting to know when such a schema change was really committed. On the stable-branch this hack seemed to be the least disruptive solution, since the notedb schema did not have to be changed. To avoid such hacks in future schema migrations I created this change here.",
      "parentUuid": "99368e32_d81f2337",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffa89664_8d691095",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2022-10-07T19:51:46Z",
      "side": 1,
      "message": "well, you generally should not fake the commit timestamp. however, the author timestamp is fair game. there should be no problem if you (and gerrit) stick to this convention.",
      "parentUuid": "4ea7c4f6_56deff10",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "946d7860_62a98557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-10T08:42:58Z",
      "side": 1,
      "message": "This might be an idea. I am not too sure whether this approach would have side effects. @ekempin@google.com DO you think the author timestamp can be used for something like that in the notedb or is it already used in a different way? Is it ensured that the author timestamp for notedb commits is always the same as the commit timestamp?",
      "parentUuid": "ffa89664_8d691095",
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf3d074a_e8a35b28",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNoteUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2022-10-07T10:13:35Z",
      "side": 1,
      "message": "timestamp?",
      "range": {
        "startLine": 61,
        "startChar": 75,
        "endLine": 61,
        "endChar": 79
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c937d53_779da4db",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNoteUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf3d074a_e8a35b28",
      "range": {
        "startLine": 61,
        "startChar": 75,
        "endLine": 61,
        "endChar": 79
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5804a1e5_01094879",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2022-10-07T10:13:35Z",
      "side": 1,
      "message": "Should this condition be tested for updateTimestamp also?\nI.e. should you be able to move lastUpdatedOn for a change back in time with the update-time footer?",
      "range": {
        "startLine": 499,
        "startChar": 15,
        "endLine": 499,
        "endChar": 51
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e93e211_de327b70",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "Not sure what the usecase would be. For now I limited the use of the footer to preserve the timestamp of the previous commit. Thus, going even further back in time should not happen. Thus, at least until such a usecase turns up, I would leave that check in place.",
      "parentUuid": "5804a1e5_01094879",
      "range": {
        "startLine": 499,
        "startChar": 15,
        "endLine": 499,
        "endChar": 51
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fc51481_570ddaa2",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2022-10-10T06:55:48Z",
      "side": 1,
      "message": "My point was that currently the check is only performed for the commitTimestamp. My question was \"is there any reason why we shouldn\u0027t check that for the updateTimestamp from the footer as well?\"",
      "parentUuid": "0e93e211_de327b70",
      "range": {
        "startLine": 499,
        "startChar": 15,
        "endLine": 499,
        "endChar": 51
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "469ce375_7d89d500",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 499,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-10T08:42:58Z",
      "side": 1,
      "message": "I think it should be checked.\nDuring note parsing, Gerrit will walk through the refs/changes/../meta branch from the most recent towards the oldest commit. In case it parses a commit containing the Update-timestamp footer, it will disregard the commit-timestamp of this commit completely. However, it will still check, whether the parsed timestamp is actually more recent than the timestamps of the already parsed (more recent) commits. If we don\u0027t do this check, once set the footer would have to be set for every new commit to avoid being stuck with this timestamp.\nWhat can still happen is that the timestamp in the footer was to set to a time in the future. Then the timestamp would be used as the lastUpdatedOn timestamp, even if there is a newer commit. I am not sure, whether we should enforce that the Update-timestamp footer has to contain a timestamp between the commit timestamp of the last commit and the commit timestamp of the commit containing the footer (now()).",
      "parentUuid": "3fc51481_570ddaa2",
      "range": {
        "startLine": 499,
        "startChar": 15,
        "endLine": 499,
        "endChar": 51
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65ce8d45_03baa155",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 1293,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2022-10-07T10:13:35Z",
      "side": 1,
      "message": "You could make this more descriptive by adding the footer:\n\n    \"The value of the \" + FOOTER_UPDATE_TIME + \" footer,\\\"\" + footer + \"\\\", is not a valid timestamp\"\n    \nOr similar.",
      "range": {
        "startLine": 1293,
        "startChar": 39,
        "endLine": 1293,
        "endChar": 84
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "325a2e58_c7b808d3",
        "filename": "java/com/google/gerrit/server/notedb/ChangeNotesParser.java",
        "patchSetId": 1
      },
      "lineNbr": 1293,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2022-10-07T14:05:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65ce8d45_03baa155",
      "range": {
        "startLine": 1293,
        "startChar": 39,
        "endLine": 1293,
        "endChar": 84
      },
      "revId": "0c3901f535abc57c86f94c0df161059101709a43",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}