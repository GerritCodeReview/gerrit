{
  "comments": [
    {
      "key": {
        "uuid": "aa0f7f37_98531fd3",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T12:44:07Z",
      "side": 1,
      "message": "This is not a function. It should be:\nquery: Promise\u003cSuggestion[]\u003e \u003d Promise.resolve([])",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7319f936_20a07fc1",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T13:29:22Z",
      "side": 1,
      "message": "Why do you think this is not a function?\n\nThe docs say `Query for requesting autocomplete suggestions. The function should accept the input as a string parameter and return a promise`\n\nThe usage is also that we pass a string to this query() which returns a promise.\n\nThe usage also requires it to take `text` as an argument. In your example I don\u0027t see the `text` argument anywhere.",
      "parentUuid": "aa0f7f37_98531fd3",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a1b49d4_a7f848ee",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T14:43:24Z",
      "side": 1,
      "message": "I mean that \u0027query\u0027 itself must be a property, not a function; the value of a property is a function.\nIn my original comment I was slightly wrong, it should be:\nquery: () \u003d\u003e Promise.resolve([])",
      "parentUuid": "7319f936_20a07fc1",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ab9a5d7_8731d730",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T15:13:46Z",
      "side": 1,
      "message": "I tried fixing it but I\u0027m not sure if it\u0027s correct. PTAL.",
      "parentUuid": "2a1b49d4_a7f848ee",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "569ecf55_861bb7a6",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T15:39:15Z",
      "side": 1,
      "message": "It looks correct.",
      "parentUuid": "5ab9a5d7_8731d730",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 7
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0c4117b_aac59413",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 473,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T12:44:07Z",
      "side": 1,
      "message": "typescrtipt style guide:\nCode must use Number() to parse numeric values, and must check its return for NaN values explicitly, unless failing to parse is impossible from context.\n\nCode must also not use parseInt or parseFloat to parse numbers, except for non-base-10 strings.",
      "range": {
        "startLine": 473,
        "startChar": 41,
        "endLine": 473,
        "endChar": 65
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cd4d646_1209a770",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.ts",
        "patchSetId": 6
      },
      "lineNbr": 473,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T13:29:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0c4117b_aac59413",
      "range": {
        "startLine": 473,
        "startChar": 41,
        "endLine": 473,
        "endChar": 65
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef408011_23162f82",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T12:44:07Z",
      "side": 1,
      "message": "Do tests break without this change?",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c54215ab_582bb654",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T13:29:22Z",
      "side": 1,
      "message": "Yes, this part of the code\n```\nsuggestions[parseInt(suggestion.dataset.index!)].value\n```\n\u0027value\u0027 property is a string hence the return must also be a string.",
      "parentUuid": "ef408011_23162f82",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07d5f890_22268f13",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T14:43:24Z",
      "side": 1,
      "message": "What exactly goes differently in tests?\nI.e. I don\u0027t see how your changes can break non-modified tests and I am worried that I missed something and code works differently now.",
      "parentUuid": "c54215ab_582bb654",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "421a4900_406f66dc",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T14:51:22Z",
      "side": 1,
      "message": "It\u0027s the check of \n```\nconst completed \u003d suggestions[index].value;\n    if (!completed) return\n```\nif completed \u003d 0, then !0 is true\nHowever !\u00270\u0027 is false.",
      "parentUuid": "07d5f890_22268f13",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e712475_00ce496b",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T15:03:20Z",
      "side": 1,
      "message": "Ok. I think, that\u0027s not correct to check if(!completed).\nIn this code you want to check that value doesn\u0027t exists, so it is better to explicitly check if(completed \u003d\u003d\u003d undefined || completed \u003d\u003d\u003d null) ...\nIn this case tests remains unchanged.",
      "parentUuid": "421a4900_406f66dc",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7ff106e_d1de6a1d",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T15:13:46Z",
      "side": 1,
      "message": "Even so, the interface Suggestion requires value to be a string so it\u0027s better to have tests conform to our types.",
      "parentUuid": "7e712475_00ce496b",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e084c8aa_51d36a40",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-08-19T15:39:15Z",
      "side": 1,
      "message": "Changes in tests is a todo. We want to avoid any changes in behavior, because we can\u0027t be sure that Suggestion value is string and not a number in js code.\n\nI prefer to be a conservative - a test author wrote a number in the test and it doesn\u0027t look absolutely wrong. It can be a mistake in tests or maybe not. If possible, we shouldn\u0027t touch tests.\n\n\u003e\u003e interface Suggestion requires value to be a string\nYes, but the interface can be updated to value?: string | number. This interface is defined in the same file and is not used anywhere.",
      "parentUuid": "b7ff106e_d1de6a1d",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0285a57_68bb9660",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete_test.js",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2020-08-19T15:52:49Z",
      "side": 1,
      "message": "Conservatives it is then!\nreverted changes to the test and added check for undefined \u0026 null",
      "parentUuid": "e084c8aa_51d36a40",
      "range": {
        "startLine": 168,
        "startChar": 61,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "0e8b0f24ad0eb3fd4c8146b2c6da36bf6dd322bf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}