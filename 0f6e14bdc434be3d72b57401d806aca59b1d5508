{
  "comments": [
    {
      "key": {
        "uuid": "faf583f4_61311d97",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-14T15:37:29Z",
      "side": 0,
      "message": "The main thing I wanted to avoid with this change is having to write a @Before method for every class that uses SchemaUpgradeTestEnvironment. I am ok with requiring each test class to declare the @Rule field, that\u0027s not too much duplication for me.\n\nThe important thing this is doing is calling injectMembers. Is it possible to have SchemaUpgradeTestEnvironment automatically do this? A TestRule doesn\u0027t have access to the test class, only the Statement and Description, so it doesn\u0027t know what to call injectMembers on.\n\nOne possibility is to pass \"this\" into the SchemaUpgradeTestEnvironment constructor. That feels wrong but I can\u0027t state a concrete reason why. Is it possible that that would cause problems if we combine this with other TestRules and/or Runners?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc1d4914_ab03bc74",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-14T15:41:16Z",
      "side": 0,
      "message": "Looks like one answer is to use MethodRule:\n\nhttps://stackoverflow.com/questions/9825310/how-to-access-the-fields-of-a-test-class-with-in-an-rule-in-junit\n\nAlternatively, is there some general approach that doesn\u0027t involve adding a bunch of @Inject fields in the test class? This has been a valuable boilerplate-reduction strategy for us thus far.",
      "parentUuid": "faf583f4_61311d97",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7d10212_970c3d8f",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-14T16:00:01Z",
      "side": 0,
      "message": "I\u0027d say that if there are too many @Inject fields in a test class, we should either reduce the scope of the test class and/or think about a better design for the involved test/non-test classes.\n\nAs we can\u0027t change the design of all of the involved classes from one day to the other, I think it\u0027s still better that we feel the pain of having a suboptimal design than avoiding that pain and never improving the design because we forget about it.",
      "parentUuid": "cc1d4914_ab03bc74",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "247d4c96_9163d36c",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-14T16:07:40Z",
      "side": 0,
      "message": "I think I agree with you that too many @Inject fields is a smell, but I\u0027m not sure what you would consider too many. This class has 8 (after @Injecting ReviewDb); is that too many? Do you have any suggestions for how to improve this specific test by redesigning the classes under test? (If your only suggestion would involve a lot of refactoring, that\u0027s ok--I\u0027m not promising to undertake it now, I\u0027m just trying to understand the flavor of what you\u0027re suggesting.)",
      "parentUuid": "f7d10212_970c3d8f",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2509c0ea_aefc7275",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-14T16:40:43Z",
      "side": 0,
      "message": "It\u0027s probably difficult where to draw exactly the line when deciding how many @Inject fields are too many. For me, it would be more like: 4 fields - we\u0027re good; 11 fields - we should consider whether 11 are really necessary; 20 - we should definitely consider how we can reduce them.\n\nFor this test class:\n- I don\u0027t think that the serverUser is really necessary. The test could have used any PersonIdent.\n- We often need to access the All-Users repository in tests. Instead of injecting a GitRepositoryManager and AllUsersName, we should have a simpler/shorter way (e.g. one object which allows to access the All-Users repository in tests).\n- In addition to the previous suggestion: We could also include an easy way to access the All-Projects repository (and maybe even all of our special repositories). In addition, the names of our special repositories should be made available (which would be necessary for this test class). So all in all, we would have one class which aggregates the knowledge of all of our special repositories and helps to access them.\n\nIf that works, we will be down to 4 fields.",
      "parentUuid": "247d4c96_9163d36c",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6745e606_25273893",
        "filename": "javatests/com/google/gerrit/server/schema/Schema_161_to_162_Test.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-14T16:54:36Z",
      "side": 0,
      "message": "Thanks for the suggestions. So this is not really about changing the way that we write tests, it\u0027s more about aggregating related bits of functionality (\"opening special repos\") into nicer APIs so that we don\u0027t have to do such low-level things too often in tests. That sounds reasonable.\n\n\u003e It\u0027s probably difficult where to draw exactly the line when deciding how many @Inject fields are too many. For me, it would be more like: 4 fields - we\u0027re good; 11 fields - we should consider whether 11 are really necessary; 20 - we should definitely consider how we can reduce them.\n\nHeh, do people outside the US recognize the quote \"I know it when I see it\"? https://en.wikipedia.org/wiki/I_know_it_when_I_see_it\n\n\u003e For this test class:\n\u003e - I don\u0027t think that the serverUser is really necessary. The test could have used any PersonIdent.\n\nGood point. Actually, this is an issue you\u0027ve previously identified and want to correct: it\u0027s only used in the MetaDataUpdate, and we should instead consider injecting something like a @ServerInitiated ProjectConfigUpdate instead of manually managing ProjectConfig/MetaDataUpdate.\n\n\u003e - We often need to access the All-Users repository in tests. Instead of injecting a GitRepositoryManager and AllUsersName, we should have a simpler/shorter way (e.g. one object which allows to access the All-Users repository in tests).\n\u003e - In addition to the previous suggestion: We could also include an easy way to access the All-Projects repository (and maybe even all of our special repositories). In addition, the names of our special repositories should be made available (which would be necessary for this test class). So all in all, we would have one class which aggregates the knowledge of all of our special repositories and helps to access them.\n\nYes, this sounds great. Probably also useful outside of tests.\n\n\u003e If that works, we will be down to 4 fields.",
      "parentUuid": "2509c0ea_aefc7275",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 58,
        "endChar": 3
      },
      "revId": "0f6e14bdc434be3d72b57401d806aca59b1d5508",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}