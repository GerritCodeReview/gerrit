{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9724a3_7dbca97a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T18:17:45Z",
      "side": 1,
      "message": "I don\u0027t think this sentence is providing much value. Instead of saying what we couldn\u0027t previously do, just use the imperative to explain what this change does.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1708b548_1b70f01a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e9724a3_7dbca97a",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76183ef3_2b638e7b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-14T01:14:56Z",
      "side": 1,
      "message": "Can you add as a generic use case here a plugin wanting to provide its REST and/or SSH commands as APIs to other plugins so that those plugins don\u0027t need to go through REST or SSH?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f12a887_e1eaa9ef",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done. Added replication start command scenario. Do you think this scenario is good enough.?\n\nExample use-case: Consider the replication plugin exposing the\n\"replication start\" command as an API that another plugin could use.\nThis would allow another plugin to run replication start for a custom\nset of projects only on server startup.",
      "parentUuid": "76183ef3_2b638e7b",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "240626b0_00249b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-13T17:26:45Z",
      "side": 1,
      "message": "Looks good to me, but definitely still looking for input from others.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35924757_68f91e50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "Thanks for contributing this interesting idea.\nI didn\u0027t find the design proposal anywhere: could you include also the link?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d92a959_81b7912c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-13T19:00:03Z",
      "side": 1,
      "message": "Hi Luca... Can you kindly let us know what is missing in the change which you would like to find in design proposal doc..?",
      "parentUuid": "35924757_68f91e50",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e78b3e98_9979d9a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T21:13:25Z",
      "side": 1,
      "message": "\u003e I didn\u0027t find the design proposal anywhere: could you include also the link?\n\nThis change is 4 lines of code (2 of them imports) in core plus docs and tests. It would probably be a bit extreme to have a design doc for it?",
      "parentUuid": "9d92a959_81b7912c",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3d4038f_baa27195",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I think using reflection here is the wrong approach. If we want plugins to be able to call other plugins, we should rather accept the separation that exists between them today (class loaders) and design around it.\n\nWhat do you think about using Protocol buffers for plugin communication? It seems like a good fit to me: The interface definitions as well as request/response attributes sit in a proto file that can be shared between the plugins by means of compiling it in as proto Java lib.\n\nThat should make it so that you don\u0027t have to rely on reflection and you don\u0027t have to care about the different class loaders.\n\nI mean we would need to use both messages and rpc definitions. The latter is how APIs are described.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ab3d79b_a9eb04c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-01-14T13:26:16Z",
      "side": 1,
      "message": "Please excuse the noob question but how would one use protobuf to call API from different plugin? Interface definition and messages make sense but one would have to share callable instance between plugins anyway...\nI don\u0027t want to criticise any solution but better understand options to get there ;)",
      "parentUuid": "d3d4038f_baa27195",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99c9f40b_b3bab67c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:48:50Z",
      "side": 1,
      "message": "It\u0027s not a noob question, this would have to be figured out :-)\n\nYou can share a callable or establish a channel. My hope is, though, that we wouldn\u0027t have to mingle with reflection and class loaders. I don\u0027t think I\u0027ve found wisdom with this idea, but want to see what other options we have.\n\nDon\u0027t get me wrong: Personally, I\u0027d just rather not have inter-plugin dependencies at all but want to be open to ideas and solutions :-)",
      "parentUuid": "3ab3d79b_a9eb04c1",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7acc354a_5168ac72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:52:54Z",
      "side": 1,
      "message": "grpc has an in-process connection: https://github.com/grpc/grpc-java/tree/master/core/src/main/java/io/grpc/inprocess\n\nBut it\u0027s marked as internal.",
      "parentUuid": "99c9f40b_b3bab67c",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73376b61_b35f0a72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2021-01-14T16:23:07Z",
      "side": 1,
      "message": "\u003e I think using reflection here is the wrong approach. If we want plugins to be able to call other plugins, we should rather accept the separation that exists between them today (class loaders) and design around it.\n\nI see no reason to create an artificial barrier when there isn\u0027t one. Plugins share the same VM, why raise the barrier for development and pretend they don\u0027t? The reason for separate classloaders is for namespacing, to avoid naming collisions, not to prevent plugins from interacting with each other.\n\n\u003e What do you think about using Protocol buffers for plugin communication? It seems like a good fit to me: The interface definitions as well as request/response attributes sit in a proto file that can be shared between the plugins by means of compiling it in as proto Java lib.\n\n1) I don\u0027t want to have to use an RPC mechanism when I am not making remote calls, it is complicated and slow with large amounts of data (requires serialization). We have real use cases that are easily addressed with a reflection based proxy. Imagine calling another plugin on a large query (status:merged) to get data about each change in the query, such a thing can be done efficiently with reflection since the data types are known to Gerrit. Many plugins are interacting with Gerrit data types, Branch.NameKeys, Changes... and they only need to share info about these types, Strings, Booleans... these plugins can do well with just reflection and would get no benefit from using RPCs. \n\n2) I don\u0027t want to have to use a heavier RPC mechanism than what is necessary, java provides built in RPCs which are much lighter weight and easier to use than protobuf, they would be more appropriate if RPCs are needed as it reduces the plugin development barrier compared to any non native java RPC mechanism.\n\nThat being said, I am not against protopuf being available for plugins to use, as it would allow them to communicate with the outside world, it\u0027s that just like I wouldn\u0027t want to have to use an RPC to make calls within my own plugin, I don\u0027t want to have to use an RPC to make simple calls to another plugin. I don\u0027t want a solution that is not fit for what I need to do.\n\n\u003e That should make it so that you don\u0027t have to rely on reflection and you don\u0027t have to care about the different class loaders.\n\nThis is just the gateway, step 1. It enables any sort of framework that you want. There are many ways to take further steps to make things easier after this, steps that depend on the specific use case and that require only the complexity that the specific use case needs. It likely would even enable a more efficient protobuf implementation that does not require serializing common data types if anyone were so inclined to build one. \n\n\u003e I mean we would need to use both messages and rpc definitions. The latter is how APIs are described.\n\nI think you are describing remote APIs. Non remote APIs (including libraries) are often described with classes (and interfaces sometimes), or sometimes with java 8 without classes just methods.",
      "parentUuid": "7acc354a_5168ac72",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f04662_de7176c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-14T17:25:37Z",
      "side": 1,
      "message": "\u003e Don\u0027t get me wrong: Personally, I\u0027d just rather not have inter-plugin dependencies at all but want to be open to ideas and solutions :-)\n\nI don\u0027t understand the hesitancy here. Do you have some reason to believe this will cause problems for Google\u0027s Gerrit servers?\n\nIf it\u0027s not a problem for Google specifically, what from a software engineering best practice perspective is objectionable? To us, it seems like this change facilitates and encourages code sharing and a good separation of concerns.\n\nPlease help me understand your concerns.",
      "parentUuid": "73376b61_b35f0a72",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64a08995_387adb57",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1480,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "s/Consider/Suppose/?",
      "range": {
        "startLine": 1480,
        "startChar": 3,
        "endLine": 1480,
        "endChar": 11
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5423ca8_edc4871d",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1480,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64a08995_387adb57",
      "range": {
        "startLine": 1480,
        "startChar": 3,
        "endLine": 1480,
        "endChar": 11
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87a2c30_22ba8058",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "To do that, you need a binary definition of that API. How do you get that?\n\nIf through a library, then why not just package the implementation into that library as well?",
      "range": {
        "startLine": 1499,
        "startChar": 9,
        "endLine": 1499,
        "endChar": 39
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e580069d_3b12a9a3",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2021-01-14T18:39:26Z",
      "side": 1,
      "message": "\u003e To do that, you need a binary definition of that API. \n\nUnless you use pure reflection... \n\n\u003e How do you get that?\n\nHowever to make things easier to develop, you can share the interface definitions at compile time, and then use a reflection based proxy. This is possible without having to use a gerrit.config library (which requires filesystem access and a server restart to use).\n\nInternally, we already share interface definitions when using @Options annotations in our plugins by placing our interfaces in an \"extensions\" subdirectory of the plugin defining the extension and then we soft link to that from the other plugin. A real world example for us is like this:\n\nDirectory in \"propagator\" plugin providing extensions:  \n\n  plugins/propagator/src/main/java/com/googlesource/gerrit/plugins/propagator/extensions/\n\nSoft link in \"manifest\" plugin using \"propagator\" extension:\n\n  plugins/manifest/src/main/java/com/googlesource/gerrit/plugins/propagator/extensions - \u003e\n    ../../../../../../../../propagator/src/main/java/com/googlesource/gerrit/plugins/propagator/extensions/\n\nThis allows the \"manifest\" plugin to bundle any definitions in the \"propagator\" plugin\u0027s \"extensions\" directory into its jar file. We keep those mostly limited to bare minimum interfaces so that there is very little \"vendoring\" going on. I would suggest a similar method for anyone wanting to share interface definitions for a reflection based proxy. We will try to capture these suggestions in the follow on change to this one which will provide helpers to create those proxies. Of course, we welcome suggestions to improve this, since even an RPC based solution would need a convenient solution to share API definitions.\n\n\u003e If through a library, then why not just package the implementation into that library as well?\n\nThis suffers all the downsides of \"vendoring\", it would not allow for bug fixes on a running system.",
      "parentUuid": "f87a2c30_22ba8058",
      "range": {
        "startLine": 1499,
        "startChar": 9,
        "endLine": 1499,
        "endChar": 39
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be1752f0_afbf2a2a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1503,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I don\u0027t think this is a great solution.",
      "range": {
        "startLine": 1502,
        "startChar": 60,
        "endLine": 1503,
        "endChar": 49
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35df7f97_dc7fec44",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1503,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-14T17:25:37Z",
      "side": 1,
      "message": "\u003e I don\u0027t think this is a great solution.\n\nCan you please provide the technical justification for that opinion?",
      "parentUuid": "be1752f0_afbf2a2a",
      "range": {
        "startLine": 1502,
        "startChar": 60,
        "endLine": 1503,
        "endChar": 49
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab219e1_1901affb",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "How the API consumer plugin can access MyApi which extends PluginProvidedApi definition?\nI guess it must be accessible at compile-time and runtime.",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aebcdc3f_707b043b",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-13T19:00:03Z",
      "side": 1,
      "message": "The DynamicMap collects all the APIs registered from the plugins... thus they are available to the consumer at the runtime...",
      "parentUuid": "eab219e1_1901affb",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "568a438d_b9684bc1",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "\u003e How the API consumer plugin can access MyApi which extends PluginProvidedApi definition?\n\u003e I guess it must be accessible at compile-time and runtime.\n\nWith this mechanism, the consuming plugin cannot access the MyAPI class at compile time, only at runtime. Because of this, the example uses reflection to access it. However, it sometimes would also possible to create a proxy to access it (we did that in a previous PS). With a proxy, the interface can be compiled to from the consuming plugin, but that has some restrictions and requires the plugins to coordinate how to share the interface at compile time. We plan to add a follow on change that shows this as an example and also adds a helper in core to facilitate creating such a proxy, however since direct reflection usage without a proxy is more flexible and powerful we don\u0027t want to limit the use case of this change to the proxy use case. Although these docs mention that the classloaders are different, it would be good to clarify that this means that the consuming plugin cannot access the MyAPI class at compile, maybe around line 1502?",
      "parentUuid": "aebcdc3f_707b043b",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bacab7b_39de7811",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "568a438d_b9684bc1",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9c8d3d0_57522719",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1516,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "I think you probably want to show the example handling the case when the API is not available also?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af2ddf12_b9d6a909",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1516,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9c8d3d0_57522719",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5a2247_4c085af6",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "Don\u0027t repeat the code.",
      "range": {
        "startLine": 1522,
        "startChar": 3,
        "endLine": 1522,
        "endChar": 54
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a2c91c_0ba3a7f2",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I think the use of reflection heavily hints towards the need to do this differently.",
      "range": {
        "startLine": 1522,
        "startChar": 9,
        "endLine": 1522,
        "endChar": 53
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1fc2290_b6ad380c",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-14T17:25:37Z",
      "side": 1,
      "message": "\u003e I think the use of reflection heavily hints towards the need to do this differently.\n\nI\u0027m seeing an anti-reflection theme here 😊 Is this comment different from the one on line 1503? I want to make sure you\u0027re getting unique replies to your comments if they\u0027re different.",
      "parentUuid": "86a2c91c_0ba3a7f2",
      "range": {
        "startLine": 1522,
        "startChar": 9,
        "endLine": 1522,
        "endChar": 53
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fe4b1c6_77d010ba",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2021-01-14T18:39:26Z",
      "side": 1,
      "message": "Using reflection directly can be a pain, however due to its flexibility, it is the foundation of many powerful frameworks, many which are easy to use (gwtorm was such an example).",
      "parentUuid": "f1fc2290_b6ad380c",
      "range": {
        "startLine": 1522,
        "startChar": 9,
        "endLine": 1522,
        "endChar": 53
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43ff8eb8_51e07641",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd5a2247_4c085af6",
      "range": {
        "startLine": 1522,
        "startChar": 3,
        "endLine": 1522,
        "endChar": 54
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86766d9d_7f8f33d9",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "Plugins are loaded in different Guice injectors from different class loaders: reflection would help and I believe you may be getting other security issues in accessing a class from another class loader?",
      "range": {
        "startLine": 1523,
        "startChar": 0,
        "endLine": 1523,
        "endChar": 98
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd34af5d_dc31af63",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T18:17:45Z",
      "side": 1,
      "message": "The classloader are all created by Gerrit, not by individual plugins, so Gerrit is in charge of the security settings of the classloaders. I don\u0027t think Gerrit changes the security settings of the classloaders. Did you have a specific concern in mind?",
      "parentUuid": "86766d9d_7f8f33d9",
      "range": {
        "startLine": 1523,
        "startChar": 0,
        "endLine": 1523,
        "endChar": 98
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f7a33bd_16142ec0",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1524,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "I would show the specific exceptions expected here to show that the plugin needs to deal with these potential miss matches, and then I would make sure the plugin is handling that situation, likely the same way that it handles the API not being available.",
      "range": {
        "startLine": 1524,
        "startChar": 6,
        "endLine": 1524,
        "endChar": 13
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73385b21_2d3077c5",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1524,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-22T12:33:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f7a33bd_16142ec0",
      "range": {
        "startLine": 1524,
        "startChar": 6,
        "endLine": 1524,
        "endChar": 13
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}