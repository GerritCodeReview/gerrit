{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7e9724a3_7dbca97a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T18:17:45Z",
      "side": 1,
      "message": "I don\u0027t think this sentence is providing much value. Instead of saying what we couldn\u0027t previously do, just use the imperative to explain what this change does.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76183ef3_2b638e7b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-14T01:14:56Z",
      "side": 1,
      "message": "Can you add as a generic use case here a plugin wanting to provide its REST and/or SSH commands as APIs to other plugins so that those plugins don\u0027t need to go through REST or SSH?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "240626b0_00249b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-01-13T17:26:45Z",
      "side": 1,
      "message": "Looks good to me, but definitely still looking for input from others.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35924757_68f91e50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "Thanks for contributing this interesting idea.\nI didn\u0027t find the design proposal anywhere: could you include also the link?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d92a959_81b7912c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-13T19:00:03Z",
      "side": 1,
      "message": "Hi Luca... Can you kindly let us know what is missing in the change which you would like to find in design proposal doc..?",
      "parentUuid": "35924757_68f91e50",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e78b3e98_9979d9a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T21:13:25Z",
      "side": 1,
      "message": "\u003e I didn\u0027t find the design proposal anywhere: could you include also the link?\n\nThis change is 4 lines of code (2 of them imports) in core plus docs and tests. It would probably be a bit extreme to have a design doc for it?",
      "parentUuid": "9d92a959_81b7912c",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3d4038f_baa27195",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I think using reflection here is the wrong approach. If we want plugins to be able to call other plugins, we should rather accept the separation that exists between them today (class loaders) and design around it.\n\nWhat do you think about using Protocol buffers for plugin communication? It seems like a good fit to me: The interface definitions as well as request/response attributes sit in a proto file that can be shared between the plugins by means of compiling it in as proto Java lib.\n\nThat should make it so that you don\u0027t have to rely on reflection and you don\u0027t have to care about the different class loaders.\n\nI mean we would need to use both messages and rpc definitions. The latter is how APIs are described.",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64a08995_387adb57",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1480,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "s/Consider/Suppose/?",
      "range": {
        "startLine": 1480,
        "startChar": 3,
        "endLine": 1480,
        "endChar": 11
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87a2c30_22ba8058",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1499,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "To do that, you need a binary definition of that API. How do you get that?\n\nIf through a library, then why not just package the implementation into that library as well?",
      "range": {
        "startLine": 1499,
        "startChar": 9,
        "endLine": 1499,
        "endChar": 39
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be1752f0_afbf2a2a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1503,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I don\u0027t think this is a great solution.",
      "range": {
        "startLine": 1502,
        "startChar": 60,
        "endLine": 1503,
        "endChar": 49
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab219e1_1901affb",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "How the API consumer plugin can access MyApi which extends PluginProvidedApi definition?\nI guess it must be accessible at compile-time and runtime.",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aebcdc3f_707b043b",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2021-01-13T19:00:03Z",
      "side": 1,
      "message": "The DynamicMap collects all the APIs registered from the plugins... thus they are available to the consumer at the runtime...",
      "parentUuid": "eab219e1_1901affb",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "568a438d_b9684bc1",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1508,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "\u003e How the API consumer plugin can access MyApi which extends PluginProvidedApi definition?\n\u003e I guess it must be accessible at compile-time and runtime.\n\nWith this mechanism, the consuming plugin cannot access the MyAPI class at compile time, only at runtime. Because of this, the example uses reflection to access it. However, it sometimes would also possible to create a proxy to access it (we did that in a previous PS). With a proxy, the interface can be compiled to from the consuming plugin, but that has some restrictions and requires the plugins to coordinate how to share the interface at compile time. We plan to add a follow on change that shows this as an example and also adds a helper in core to facilitate creating such a proxy, however since direct reflection usage without a proxy is more flexible and powerful we don\u0027t want to limit the use case of this change to the proxy use case. Although these docs mention that the classloaders are different, it would be good to clarify that this means that the consuming plugin cannot access the MyAPI class at compile, maybe around line 1502?",
      "parentUuid": "aebcdc3f_707b043b",
      "range": {
        "startLine": 1508,
        "startChar": 23,
        "endLine": 1508,
        "endChar": 40
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9c8d3d0_57522719",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1516,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "I think you probably want to show the example handling the case when the API is not available also?",
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd5a2247_4c085af6",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "Don\u0027t repeat the code.",
      "range": {
        "startLine": 1522,
        "startChar": 3,
        "endLine": 1522,
        "endChar": 54
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a2c91c_0ba3a7f2",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1522,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-14T13:12:28Z",
      "side": 1,
      "message": "I think the use of reflection heavily hints towards the need to do this differently.",
      "range": {
        "startLine": 1522,
        "startChar": 9,
        "endLine": 1522,
        "endChar": 53
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86766d9d_7f8f33d9",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-01-13T17:37:26Z",
      "side": 1,
      "message": "Plugins are loaded in different Guice injectors from different class loaders: reflection would help and I believe you may be getting other security issues in accessing a class from another class loader?",
      "range": {
        "startLine": 1523,
        "startChar": 0,
        "endLine": 1523,
        "endChar": 98
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd34af5d_dc31af63",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T18:17:45Z",
      "side": 1,
      "message": "The classloader are all created by Gerrit, not by individual plugins, so Gerrit is in charge of the security settings of the classloaders. I don\u0027t think Gerrit changes the security settings of the classloaders. Did you have a specific concern in mind?",
      "parentUuid": "86766d9d_7f8f33d9",
      "range": {
        "startLine": 1523,
        "startChar": 0,
        "endLine": 1523,
        "endChar": 98
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f7a33bd_16142ec0",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 2
      },
      "lineNbr": 1524,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-01-13T19:29:09Z",
      "side": 1,
      "message": "I would show the specific exceptions expected here to show that the plugin needs to deal with these potential miss matches, and then I would make sure the plugin is handling that situation, likely the same way that it handles the API not being available.",
      "range": {
        "startLine": 1524,
        "startChar": 6,
        "endLine": 1524,
        "endChar": 13
      },
      "revId": "10b72e1850890e11abc9082987a5fc01a71447fa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}