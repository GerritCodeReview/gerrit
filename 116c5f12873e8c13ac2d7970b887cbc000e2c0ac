{
  "pushCert": "certificate version 0.1\npusher A0D0EF51 1535973007 +0200\nnonce ACQ0HpxIEbeC8UvTtYKpPDUSIKo+mtvZGl9epod6ySXmiCDmZZB0KC9PfDnr32pdeOiglBW8HtKO\n\n0000000000000000000000000000000000000000 116c5f12873e8c13ac2d7970b887cbc000e2c0ac refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEjcOJ9ZBmQPrFqZA3UbX9l6DQ71EFAluNFo8ACgkQUbX9l6DQ\n71G4GQf9HjG/+UIiXA8FaWzQ8vPgySlIoHhCvn9oDn1EWt2glrH+vl/ncp2YEiJK\nNqdgH1MKtOEbDcc0zdecsX/1mU/siK2Fa4MiRAVGaM7X+iGl//18eCyKu1bOe01h\npC7doGGwX8mFwMYrSnkpux8hkqUPc943Nh8NJhLpfWo7l5OzPz70/XD2k2TwsctN\nRt5Y/uUM1YGAkTFNEmbk1TMpSXKzZJUcw4d48RImAH+to5gJY9k6jg3CXDzyQvwB\nWI1OCq32ONGK81asmDEyVYYPUBXFyo1u2KYaekKNtRWSIoPvnNOxU8nRJGuarHpY\ndVSSpoU26UKDMrNjqDhslejP1tqC3A\u003d\u003d\n\u003dqL6U\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "2787422a_f9473dc9",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-05T17:23:35Z",
      "side": 1,
      "message": "Is toSet() the right choice here? The behavior may differ based on whether the particular Callable type implements equals. What\u0027s wrong with toList?",
      "range": {
        "startLine": 304,
        "startChar": 78,
        "endLine": 304,
        "endChar": 85
      },
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "002c07d6_01d2b7c9",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-06T09:55:57Z",
      "side": 1,
      "message": "I agree it should be toList(). Also fixed it in the other places.\n\nDone.",
      "parentUuid": "2787422a_f9473dc9",
      "range": {
        "startLine": 304,
        "startChar": 78,
        "endLine": 304,
        "endChar": 85
      },
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1735e07c_f5ba348e",
        "filename": "java/com/google/gerrit/server/logging/LoggingContextAwareCallable.java",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-05T17:23:35Z",
      "side": 1,
      "message": "This makes a copy of the context at construction time, but I honestly don\u0027t know whether that\u0027s what we want.\n\nConsider:\n\n someContextAwareExecutor.submit(callable);\n LoggingContext.addTag(\"foo\", \"bar\");\n\nSuppose callable sits in a queue for a while, such that the addTag call runs before the callable gets called. Should its logging context include foo\u003dbar, or not?\n\nIn your implementation, it definitely won\u0027t. If OTOH you stored a reference to the LoggingContext in this class, then it may or may not depending on thread scheduling. Do you have any thoughts on which is preferable?",
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab8da345_4841b0d0",
        "filename": "java/com/google/gerrit/server/logging/LoggingContextAwareCallable.java",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-06T09:55:57Z",
      "side": 1,
      "message": "\u003e This makes a copy of the context at construction time, but I honestly\n\u003e don\u0027t know whether that\u0027s what we want.\n\nThat\u0027s what I intended.\n\nI think it\u0027s better because it always produces the same result. E.g. for the example that you have given foo\u003dbar would always not be set for the callable. With the other approach it depends on when the callable is executed and you can\u0027t know whether the tag will be there or not.\n\nLet me turn your example around:\n\n  try (TraceContext ctx \u003d TraceContext.newTrace()) {\n    someContextAwareExecutor.submit(callable);\n  }\n\nIn this case I would expect that tracing is enabled for the callable, but with the other approach we don\u0027t know if it happens.",
      "parentUuid": "1735e07c_f5ba348e",
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7875146c_b183a40a",
        "filename": "java/com/google/gerrit/server/logging/LoggingContextAwareCallable.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-05T17:23:35Z",
      "side": 1,
      "message": "What if this thread\u0027s logging context had a non-empty set of tags before the setTags call? Would you want to restore that instead of clearing the list?",
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdd76bee_c4c63518",
        "filename": "java/com/google/gerrit/server/logging/LoggingContextAwareCallable.java",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-06T09:55:57Z",
      "side": 1,
      "message": "I thought that should not happen. But better to be on the safe side.\n\nDone.",
      "parentUuid": "7875146c_b183a40a",
      "revId": "116c5f12873e8c13ac2d7970b887cbc000e2c0ac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}