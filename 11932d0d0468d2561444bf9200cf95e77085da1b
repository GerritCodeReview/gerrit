{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f3344963_33d02879",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-06-10T09:07:18Z",
      "side": 1,
      "message": "I don\u0027t think this is the right thing to expose in Gerrit core.\n\nReading your justification in modules/index-elasticsearch in change 339115:\n\n  By default, refresh param is true in all write API requests, which\n  ensures the reindex operation waits for the relevant ES primary \n  and replica shards to refresh after each write operation.\n\nGerrit Core only suports Apache Lucene now, what other secondary index backends are doing is not relevant for the core. Google\u0027s secondary index backend is also doesn\u0027t care about it. Probably because they don\u0027t have offline reindex operation.\n\nIf someone would add say Apache Solr or Amazon CloudSearch as yet another secondary index backends for Gerrit, we wouldn\u0027t want to expose in Gerrit core any specifics to those backends either.\n\nThe only thing we could expose in Gerrit core, is the operation mode: OFFLINE or ONLINE index operation. What the dedicated backends will do with it, is not business of Gerrit core.",
      "range": {
        "startLine": 7,
        "startChar": 13,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "305392fd_adb97e0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-10T18:06:38Z",
      "side": 1,
      "message": "\u003e If someone would add say Apache Solr or Amazon CloudSearch as yet another secondary index backends for Gerrit, we wouldn\u0027t want to expose in Gerrit core any specifics to those backends either.\n\nI completely agree that we don\u0027t want implementation only relevant to other indexes in core.\n\nHowever, I think exposing desired *Gerrit behavior/policy* as information to any index backend is a generic Gerrit core thing. Specific to this change, I think Gerrit core policy for when an index should/shouldn\u0027t ensure read/write consistency is a generic concept and is not specific to any backend.\n\n\u003e \n\u003e The only thing we could expose in Gerrit core, is the operation mode: OFFLINE or ONLINE index operation. What the dedicated backends will do with it, is not business of Gerrit core.\n\nI disagree. We did consider this path at first, but realized it\u0027s not presenting the necessary information to the index backend. From Gerrit core, we can clearly inform any index backend that consistency is not required during an offline reindex, but the inverse isn\u0027t true: a backend shouldn\u0027t assume that because core told it we\u0027re doing \"offline reindex\" that consistency isn\u0027t required.\n\nThis follows the same pattern as the IsFirstInsertForEntry option added in Change I140c88125bb5. In that change core is also describing a behavior/policy that an index backend can implement around in whatever way is appropriate for that index backend.",
      "parentUuid": "f3344963_33d02879",
      "range": {
        "startLine": 7,
        "startChar": 13,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0afc83bc_229fcbc9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T21:26:07Z",
      "side": 1,
      "message": "\u003e \u003e If someone would add say Apache Solr or Amazon CloudSearch as yet another secondary index backends for Gerrit, we wouldn\u0027t want to expose in Gerrit core any specifics to those backends either.\n\u003e \n\u003e I completely agree that we don\u0027t want implementation only relevant to other indexes in core.\n\u003e \n\u003e However, I think exposing desired *Gerrit behavior/policy* as information to any index backend is a generic Gerrit core thing. Specific to this change, I think Gerrit core policy for when an index should/shouldn\u0027t ensure read/write consistency is a generic concept and is not specific to any backend.\n\nAgreed, however, we don\u0027t have it at the moment in Gerrit and we do not have any issues without it. Can you foresee a non-ES use-case where we can use this flag and provides benefits today?\n\n\u003e \u003e The only thing we could expose in Gerrit core, is the operation mode: OFFLINE or ONLINE index operation. What the dedicated backends will do with it, is not business of Gerrit core.\n\u003e \n\u003e I disagree. We did consider this path at first, but realized it\u0027s not presenting the necessary information to the index backend. From Gerrit core, we can clearly inform any index backend that consistency is not required during an offline reindex, but the inverse isn\u0027t true: a backend shouldn\u0027t assume that because core told it we\u0027re doing \"offline reindex\" that consistency isn\u0027t required.\n\nI am open to a solution where we define two configurations \n\n\u003e This follows the same pattern as the IsFirstInsertForEntry option added in Change I140c88125bb5. In that change core is also describing a behavior/policy that an index backend can implement around in whatever way is appropriate for that index backend.\n\nI see, however, the I140c88125bb5 had some value in Gerrit regardless of the backend. I am open to see and review a change that provides value and shows some use inside Gerrit without ES.",
      "parentUuid": "305392fd_adb97e0d",
      "range": {
        "startLine": 7,
        "startChar": 13,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2524680f_315cc873",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-15T00:51:36Z",
      "side": 1,
      "message": "\u003e \u003e \u003e If someone would add say Apache Solr or Amazon CloudSearch as yet another secondary index backends for Gerrit, we wouldn\u0027t want to expose in Gerrit core any specifics to those backends either.\n\u003e \u003e \n\u003e \u003e I completely agree that we don\u0027t want implementation only relevant to other indexes in core.\n\u003e \u003e \n\u003e \u003e However, I think exposing desired *Gerrit behavior/policy* as information to any index backend is a generic Gerrit core thing. Specific to this change, I think Gerrit core policy for when an index should/shouldn\u0027t ensure read/write consistency is a generic concept and is not specific to any backend.\n\u003e \n\u003e Agreed, however, we don\u0027t have it at the moment in Gerrit and we do not have any issues without it.\n\nMaybe you don\u0027t have issues, but there\u0027s simple use cases that fail because we\u0027re not enforcing consistency with Lucene. I would not be able to support our (planned to be upgraded) production server with the current Gerrit+Lucene implementation.\n\n\u003e Can you foresee a non-ES use-case where we can use this flag and provides benefits today?\n\nYes. Requiring consistency with Lucene. If I were trying to deploy a production solution with Lucene today, I would 100% be pursuing that.\n\n\u003e \n\u003e \u003e \u003e The only thing we could expose in Gerrit core, is the operation mode: OFFLINE or ONLINE index operation. What the dedicated backends will do with it, is not business of Gerrit core.\n\u003e \u003e \n\u003e \u003e I disagree. We did consider this path at first, but realized it\u0027s not presenting the necessary information to the index backend. From Gerrit core, we can clearly inform any index backend that consistency is not required during an offline reindex, but the inverse isn\u0027t true: a backend shouldn\u0027t assume that because core told it we\u0027re doing \"offline reindex\" that consistency isn\u0027t required.\n\u003e \n\u003e I am open to a solution where we define two configurations \n\nWhat two configurations are you suggesting (that I assume are different from the ones proposed in this change)?\n\n\u003e \n\u003e \u003e This follows the same pattern as the IsFirstInsertForEntry option added in Change I140c88125bb5. In that change core is also describing a behavior/policy that an index backend can implement around in whatever way is appropriate for that index backend.\n\u003e \n\u003e I see, however, the I140c88125bb5 had some value in Gerrit regardless of the backend. I am open to see and review a change that provides value and shows some use inside Gerrit without ES.\n\nSince we have a pluggable index backend, I think we have to accept that Gerrit core needs to provide policy information (generically) to indexes, even if not all of those indexes can (or choose to) do something interesting with the information. \n\nJust as we ensure our plugin APIs have sufficient information so that plugins can implement their desired behaviors, we need to ensure this module API has sufficient information for the modules to implement their correct behaviors.",
      "parentUuid": "0afc83bc_229fcbc9",
      "range": {
        "startLine": 7,
        "startChar": 13,
        "endLine": 7,
        "endChar": 43
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa1444cc_7a3ab808",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-17T13:56:41Z",
      "side": 1,
      "message": "This needs to be removed here: we need to introduce something that is intended to provide benefit to Gerrit and its indexing backends (Lucene or any other, including ElasticSearch ...)",
      "range": {
        "startLine": 10,
        "startChar": 17,
        "endLine": 10,
        "endChar": 59
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2bca367_52c23da8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-22T23:10:47Z",
      "side": 1,
      "message": "I\u0027m not understanding why you seem to think it\u0027s harmful to note where and how something will be used? If I were to be just now adding the avatar extension point, I would be noting in my commit message that the extension is intended to be used with the avatars-external and avatars-gravatar plugins to provide avatar images in Gerrit for those kinds of sources. To me, this message says a very similar kind of thing.",
      "parentUuid": "fa1444cc_7a3ab808",
      "range": {
        "startLine": 10,
        "startChar": 17,
        "endLine": 10,
        "endChar": 59
      },
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "127fa5e1_a616ae46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2022-06-14T05:40:18Z",
      "side": 1,
      "message": "ping",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a2d6973_78fb0e84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T09:58:52Z",
      "side": 1,
      "message": "This is not needed because Gerrit already notifies to the index module that the instantiation is for an off-line reindex.\n\nYou can just leverage that for any ES-specific optimisation.\n\nSee an example of this with Change-Id: Idbac8c910b",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a7c9c6d_6746ded8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-14T16:03:59Z",
      "side": 1,
      "message": "\u003e This is not needed because Gerrit already notifies to the index module that the instantiation is for an off-line reindex.\n\nHi Luca, please read and respond to my comment above in response to David: https://gerrit-review.googlesource.com/c/gerrit/+/339114/comments/f3344963_33d02879\n\nI specifically address the difference there between knowing offline reindex vs a desired index behavior. I do not believe they are the same, but please add comments there if you disagree.",
      "parentUuid": "5a2d6973_78fb0e84",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b336c9b6_50e4f102",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-14T21:26:07Z",
      "side": 1,
      "message": "Keeping a format -2 until we find a value in Gerrit, without ES, given that we can achieve the same result without any change in Gerrit core.\n\nHappy to continue the review though, I am always open to a constructive and respectful technical discussion on this topic :-)",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85b558fb_9382678e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-15T00:51:36Z",
      "side": 1,
      "message": "\u003e Happy to continue the review though, I am always open to a constructive and respectful technical discussion on this topic :-)\n\n+1 😊",
      "parentUuid": "b336c9b6_50e4f102",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f388bf00_de059b2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-06-17T13:51:44Z",
      "side": 1,
      "message": "I\u0027m opened to remove the -2 under the conditions:\n\n1. This change is moved to master\n2. We introduce the non-consistent write API in the indexing, which defaults to the consistent API\n3. We leverage the new API in the off-line reindex\n4. We add tests that run the off-line reindex with consistent and non-consistent writes\n5. We implement the non-consistent API in Lucene using some lower-level high-performance primitives\n\nWith the above, I agree with Nasser that it makes sense in core and would provide benefit to Gerrit regardless of ES.",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "553fa3f5_ab513655",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-22T23:10:47Z",
      "side": 1,
      "message": "\u003e I\u0027m opened to remove the -2 under the conditions:\n\nThanks for outlining what you\u0027re looking for.\n\n\u003e \n\u003e 1. This change is moved to master\n\nThis is change intended to enable reasonable offline indexing performance with ES. To me, that makes this more of a fix. If you can help me understand why it\u0027s not a fix, I\u0027m open to moving it to master.\n\n\u003e 2. We introduce the non-consistent write API in the indexing, which defaults to the consistent API\n\nWhat \"non-consistent write API\" are you referring to? I don\u0027t see an earlier reference to this concept.\n\n\u003e 3. We leverage the new API in the off-line reindex\n\u003e 4. We add tests that run the off-line reindex with consistent and non-consistent writes\n\u003e 5. We implement the non-consistent API in Lucene using some lower-level high-performance primitives\n\nGerrit\u0027s Lucene behavior is currently non-consistent and no changes are required for that. Changes are required if we want to ensure that Gerrit APIs guarantee reads contain data for any completed writes. To be very clear on what this looks like, it\u0027s a simple sequence like this:\n\n # start with change 1234 which has no Code-Review votes\n POST /changes/1234/revisions/1/review # set Code-Review+2 on change 1234\n GET /changes/?q\u003dchange:1234+label:Code-Review\u003d2 # returns change 1234\n\nWith the current Lucene implementation, it\u0027s not guaranteed that the GET returns 1234. With the current ES implementation, it is guaranteed (because refresh\u003dtrue).\n\n\u003e \n\u003e With the above, I agree with Nasser that it makes sense in core and would provide benefit to Gerrit regardless of ES.\n\nI\u0027m not clear on what\u0027s different in your proposal vs this change. Specifically, what\u0027s the new benefit to Gerrit in your proposal?",
      "parentUuid": "f388bf00_de059b2c",
      "revId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. \t\t      Make sure your change is forward compatible and add the footer \t\t      \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "11932d0d0468d2561444bf9200cf95e77085da1b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}