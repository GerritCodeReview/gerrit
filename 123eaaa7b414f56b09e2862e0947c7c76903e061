{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "860c1128_ab64f636",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2021-01-08T16:05:05Z",
      "side": 1,
      "message": "Could we have DELETED and, instead of ADDED, RENAMED? Wouldn\u0027t that trigger the same bug?",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f369952_bce7bc0f",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-01-08T16:16:27Z",
      "side": 1,
      "message": "Thanks for the note. Yes that should trigger the same bug.\n\nI\u0027m not sure if there is a scenario that will produce two entries {DELETED, RENAMED} for the same file. If that happens, the \"DELETED\" entry will be returned and that would cause the same bug (undesired behaviour). However, I think when a file is renamed, JGIT will return a single \"RENAMED\" entry. Even for this change, having two {DELETED, ADDED} entries is a behaviour of JGIT for this specific case. \n\nI\u0027m not sure if we got a report for this, but if this happens, I will need to write a reproducing test and think of a fix for it.\n\nNote: a quick fix would just be to swap the order of values in the ChangeType enum, so that RENAMED comes before DELETED. If we do this, and with this change submitted, the code would pick the enum value that comes first, which is \u0027RENAMED\u0027. For now, I prefer to keep that in a separate change, and if we found a scenario that causes this behaviour I can look into it further.",
      "parentUuid": "860c1128_ab64f636",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b4176b9_7034d716",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-01-08T16:31:08Z",
      "side": 1,
      "message": "I think for the specific symlink case, JGIT produces two entries because, even if the file has the same name, it has different file modes at the two commits:\n  * A symlink that is removed at the old commit.\n  * A regular file that is added at the new commit.\n\nMaybe that\u0027s why JGIT treats them as two different files and returns two diff entries for them.\n\nAt our side, the diff endpoint is used to request the diff for a single file (identified by its name), so that when you expand the file in the change page view, you are able to see the modified content. The inputs to the endpoint does not let the caller differentiate between which file mode we want for this case, hence backend just needs to choose and return one of them.\n\nGiven that, I\u0027m not sure if JGIT would have a similar behaviour for renames, hopefully not.",
      "parentUuid": "7f369952_bce7bc0f",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b01f018_a3fd920a",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2021-01-11T09:45:33Z",
      "side": 1,
      "message": "It seems brittle to rely on sorting order, where ADDED just happens to come first. Why do we need to keep more than one entry per file at all? If JGit\u0027s behavior isn\u0027t specified by API contract it seems this change is a good opportunity to implement an algorithm on our side to pick the one file that the user should see. ADDED probably has the highest priority, but we should look at other enums/combinations too. Currently ISTM we\u0027re fixing one bug but we\u0027re not 100% certain there can\u0027t be similar bugs now or in the future.",
      "parentUuid": "8b4176b9_7034d716",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e82c758_3c8d9ebf",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-01-11T13:37:52Z",
      "side": 1,
      "message": "From my understanding, the problem can only happen when the file type changed. Otherwise, JGit will return just a single DiffEntry. There\u0027s multiple triggers that could lead to a file type change:\n\nRENAME symlink, ADD new file with same name as old symlink\nDELETE symlink, ADD new file with same name as old symlink\nRENAME symlink, RENAME a file so that it ends up with the name of the old symlink\n...\n\nSo the bug report is just one variant of a larger problem that ideally JGit would solve for us.\n\nSo, one option would be to stop keying PatchLists by filename and start keying them by (filename, filetype). Then we\u0027d hand that to the frontend which could show the file twice in the file list, once as deleted (symlink) and once as added (regular file). Actually, this looks like the cleanest solution to me, but it requires an API change.\n\nI the security context, I think we mostly care about presenting the correct end state of the change so that you can spot and prevent new code, potentially undesired, code from being committed. If so, we could sort DffEntries in PatchListLoader around l.224 and create patch lists such that we later select the most recent modification (the DiffEntry/PatchList that corresponds to the more recent patch set and hence is shown on the right side of the diff page).\n\nWDYT?",
      "parentUuid": "7b01f018_a3fd920a",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aad1a18_1df821b4",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-01-11T14:17:49Z",
      "side": 1,
      "message": "Thanks Joerg and Patrick for your opinions here.\n\nRE#4:\nJGit does not specify the API behaviour in Javadocs (implemented in [1]).\nI agree that this change fixes a bug for a probable broader category of bugs that we don\u0027t know about.\n\nRE#5: \n+1 to the proposed solution. I also agree that\u0027s the cleanest one but requires a re-work of the API.\n\nLast paragraph: If I understood you correctly, I think you have a small misconception; PatchListLoader creates a PatchList of all relevant entries (i.e. all entries are the diff\u0027ed files between the two patchsets), so there are no recent vs. non-recent patchsets.\nIn the current implementation we get two entries for the same file from JGit, but we return only one of them to the user (I wrote exact details on b/171597097#comment13). I\u0027d presume the required modifications will occur outside PatchListLoader, i.e. in [2] (for the list files endpoint) and [3] (for the diff endpoint).\n\nI see this change does not hurt anyway and I\u0027d submit it to fix the reported bug. I\u0027d add a todo then to implement the proposed solution. Otherwise, I\u0027ll abandon this change.\n\n[1] https://git.eclipse.org/r/plugins/gitiles/jgit/jgit/+/refs/heads/master/org.eclipse.jgit/src/org/eclipse/jgit/diff/DiffFormatter.java#437\n[2] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/change/FileInfoJson.java#102\n[3] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/patch/PatchScriptFactory.java#196",
      "parentUuid": "7e82c758_3c8d9ebf",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef0b0d99_da3b71bf",
        "filename": "java/com/google/gerrit/server/patch/PatchList.java",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2021-01-11T17:18:17Z",
      "side": 1,
      "message": "I realize that this is unplanned extra work and you may want to postpone/shedule it. IMHO the issue is not so obscure/unlikely that we can treat this as a one-in-a-million problem, so it should still be addressed in time. I\u0027d be OK with just fixing the reported case for now and sheduling the remaining work.\n\nOne thing about the current implementation that should be changed is that it sorts alphabetically and ADDED just happens to sort before DELETED. This is brittle in case the order is ever changed, and it\u0027s also non-obvious when reading the code. Can we find a more robust implementation for that? E.g. a list that contains all operation types sorted by priority, and then we add that one indirection to the sorting.\n\nDo we ever need to return multiple operations per file at all, or could we just remove all but the highes priority?",
      "parentUuid": "7aad1a18_1df821b4",
      "revId": "123eaaa7b414f56b09e2862e0947c7c76903e061",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}