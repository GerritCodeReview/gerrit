{
  "comments": [
    {
      "key": {
        "uuid": "9972f48f_74b6c8c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2015-06-17T15:03:05Z",
      "side": 1,
      "message": "are you aware that pgp key ids are just shortened key fingerprints?",
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9c5f8ce_6590c61e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-17T15:35:20Z",
      "side": 1,
      "message": "Sure, but the purpose of this data structure is to look up the key used to sign a push certificate, and PGP signature packets only contain the 64-bit key ID, not the full key fingerprint.\n\nhttps://tools.ietf.org/html/rfc4880#section-5.2.2",
      "parentUuid": "9972f48f_74b6c8c6",
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de80d2c6_b6d0a83e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2015-06-18T08:08:59Z",
      "side": 1,
      "message": "it would still seem more correct to look up the full key independently, but of course that may pose an unacceptable performance (or complexity) trade-off.",
      "parentUuid": "b9c5f8ce_6590c61e",
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ea36680_43b6462f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-18T13:50:39Z",
      "side": 1,
      "message": "You\u0027re right that there is a correctness issue in that we have to deal with multiple keys having the same key ID. There is currently a TODO in the code about this.\n\nAFAIK every OpenPGP implementation has to deal with this same issue. If you\u0027re trying to verify a signature, literally the only thing you have in the signature which tells you who signed it is the key ID. So you have to look up all the keys with that key ID and try them all to see which one produced that signature. It\u0027s a hashtable lookup, essentially.\n\nIf all entries in the note map were full key IDs, we wouldn\u0027t be able to do this lookup in constant time. It would have to be either:\n\n* a linear scan of all keys, which is unacceptable performance\n* indirection through an entry using the padded key ID to find the full fingerprint, which is unnecessary complexity\n\nNote also that it is possible to create multiple keys with the same fingerprint[1]. So even if the filenames in the note map were full fingerprints, we would still have to deal with the case where multiple matching keys are stored in the map.\n\n[1] http://www.pgp.net/pgpnet/pgp-faq/pgp-faq-keys.html#key-public-key-forgery",
      "parentUuid": "de80d2c6_b6d0a83e",
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a1cc0d_2e134766",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-06-16T20:43:53Z",
      "side": 1,
      "message": "signed",
      "range": {
        "startLine": 22,
        "startChar": 55,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e3a6af6_60c5d27f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/SignedPushPreReceiveHook.java",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-06-18T17:38:22Z",
      "side": 1,
      "message": "I don\u0027t see how this is checking the content.",
      "range": {
        "startLine": 114,
        "startChar": 6,
        "endLine": 115,
        "endChar": 19
      },
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e3a6af6_80c0d671",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/SignedPushPreReceiveHook.java",
        "patchSetId": 4
      },
      "lineNbr": 222,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-06-18T17:38:22Z",
      "side": 1,
      "message": "Odd way to write this. Isn\u0027t buf.getShort() \u0026 0xffff more typical?",
      "range": {
        "startLine": 222,
        "startChar": 14,
        "endLine": 222,
        "endChar": 37
      },
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e33ae21_a1c6be88",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/SignedPushPreReceiveHook.java",
        "patchSetId": 4
      },
      "lineNbr": 223,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-06-18T17:38:22Z",
      "side": 1,
      "message": "So leading 0\u0027s are collapsed within each 4 character run?",
      "revId": "12f6f1b6ea99870a89aab991fc2850a7b618a3a9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}