{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "186f61bb_a3db36cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-06-05T16:05:53Z",
      "side": 1,
      "message": "Could you please point to a bug or write a steps when this fix is required?\nFrom the code I realised, that you want to reload the page if change is explicitly clicked.\nBut I can\u0027t find a scenario when the same parameters are assigned and we don\u0027t want to reload page.\n\nAdding \u0027\u0026reload\u0027 looks hackish for me without this information.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 70
      },
      "revId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0150cb82_44bd1750",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-06-05T15:11:13Z",
      "side": 1,
      "message": "When the router handles this it should also remove the \"reload\" from the URL, probably using https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState",
      "revId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a3ca6da_a6e2307d",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 1366,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-06-05T15:11:13Z",
      "side": 1,
      "message": "reload should be part of the query, not the path",
      "range": {
        "startLine": 1366,
        "startChar": 40,
        "endLine": 1366,
        "endChar": 46
      },
      "revId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b6bad4c_f24bc8d0",
        "filename": "polygerrit-ui/app/scripts/util.js",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-06-05T14:33:38Z",
      "side": 1,
      "message": "Add tests to this function, it has some bugs.\nFor example:\nWrong:\n1. deepEqual({x:undefined}, {y:3}) returns true\n\nQuestionable:\n2. deepEqual({x:undefined}, {y:undefined}) returns true;\n3. deepEqual({x:undefined}, {}) returns false;\n\nExamples 2 and 3 are inconsistent. If non-existing property and undefined property are equals, then both cases must return true.\nIf undefined value is different from non-existing property, then both cases must return false (i would prefer this behavior, but in some situation this is not what we want).",
      "range": {
        "startLine": 209,
        "startChar": 2,
        "endLine": 209,
        "endChar": 11
      },
      "revId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader",
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMIN"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMAX"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMIN"
        ],
        "failingAtoms": [
          "label:Verified\u003dMAX"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "13a7e02996eec9e47ac4a24adb68980b790e2101",
      "legacy": {
        "value": false
      }
    }
  ]
}