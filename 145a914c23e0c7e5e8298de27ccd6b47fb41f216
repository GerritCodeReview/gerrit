{
  "comments": [
    {
      "key": {
        "uuid": "8fb4e243_7fd6a0ef",
        "filename": "polygerrit-ui/app/behaviors/gr-account-display-name-behavior/gr-account-display-name-behavior.html",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T09:34:40Z",
      "side": 1,
      "message": "About both, gr-account-display-name-behavior.html and gr-group-display-name-behavior.html:\n\nThe three utilities AccountDisplayNameBehavior, AnonymousNameBehavior, GroupDisplayNameBehavior are very small. Maybe we can have just one AccountBehavior that encapsulates everything related to accounts and could potentially be used in a lot of components? Generally I like the idea of moving such code into domain oriented utilities.\n\nAlso, GroupDisplayNameBehavior is extremely small. Even though I enjoy the symmetry in gr-reviewer-suggestions-provider.js very much (great code style!), the mapping \"(group) \u003d\u003e group.name + \u0027 (group)\u0027\" is so simple that it should either go into a bigger group related utility class (if you think the method is useful elsewhere) or could just be inlined in gr-reviewer-suggestions-provider.js.",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "397a0921_b056bbc8",
        "filename": "polygerrit-ui/app/behaviors/gr-account-display-name-behavior/gr-account-display-name-behavior.html",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T12:31:14Z",
      "side": 1,
      "message": "Good idea, will do it. Only things which worries me a little bit with this idea - if polymer component itself doesn\u0027t do anything with group, it anyway receives group-related methods from behavior. But I think this is not a big problem.",
      "parentUuid": "8fb4e243_7fd6a0ef",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "450ebfc4_6856c533",
        "filename": "polygerrit-ui/app/behaviors/gr-account-display-name-behavior/gr-account-display-name-behavior.html",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-11T18:38:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "397a0921_b056bbc8",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b59250_a6656bd2",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T09:34:40Z",
      "side": 1,
      "message": "It would be great, if this (and other components) would have at least one line of comment explaining what the component is supposed to do. It is the one thing that drives me crazy about the state of the current code base.",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fe1b0e7_33dcadcf",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T12:31:14Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "a2b59250_a6656bd2",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2bb63f_99309162",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-11T18:38:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fe1b0e7_33dcadcf",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a51be0d1_353036f0",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T09:34:40Z",
      "side": 1,
      "message": "While somewhat self explaining the filter function would still benefit from documented parameter and return types.",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d3fa026_8ad99fe2",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T12:31:14Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "a51be0d1_353036f0",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5fdbeef_0c958a89",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-11T18:38:24Z",
      "side": 1,
      "message": "filter was removed",
      "parentUuid": "5d3fa026_8ad99fe2",
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "788e9cb3_079421a2",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T09:34:40Z",
      "side": 1,
      "message": "gr-account-entry seems unnecessarily complex, because it requires three input properties (filter, querySuggestions, makeSuggestionItem) and translates them here into _autocompleteQuery. What about just moving this code into gr-account-list? Would it make the components simpler maybe?\n\nSide note: The term \"query\" relates to something with \"string\" type IMO. I know this is just existing code, but I would prefer even something ugly as inputToSuggestionFunction. You have chosen querySuggestionsCallback, which is also pretty good.",
      "range": {
        "startLine": 112,
        "startChar": 3,
        "endLine": 122,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea892843_a1e6c571",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T12:31:14Z",
      "side": 1,
      "message": "Yes, agree. This method doesn\u0027t do anything with the state of the object and doesn\u0027t depend on the state. Makes sense to move it from gr-account-entry.",
      "parentUuid": "788e9cb3_079421a2",
      "range": {
        "startLine": 112,
        "startChar": 3,
        "endLine": 122,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8696e327_12b675cc",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-entry/gr-account-entry.js",
        "patchSetId": 11
      },
      "lineNbr": 122,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-11T18:38:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea892843_a1e6c571",
      "range": {
        "startLine": 112,
        "startChar": 3,
        "endLine": 122,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d660d320_124e012f",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T09:34:40Z",
      "side": 1,
      "message": "This is weird. The suggestion provider consists of two static functions with no associated DOM. Maybe instead of making it a slotted component, could gr-account-list just get a suggestionProvider property?",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e867f56e_158b4ac3",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T12:31:14Z",
      "side": 1,
      "message": "I would like to keep it as a separate component because:\n\n1. gr-reviewer-suggestions-provider requires gr-rest-api-interface to work. And gr-rest-api-interface itself is a Polymer component\n\n2. Keeping suggestion-provider as a separate component allows to change functionality without touching .js code. The code is more declarative in this case.",
      "parentUuid": "d660d320_124e012f",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67981f40_7847dd5b",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-09T16:21:27Z",
      "side": 1,
      "message": "Re 1: Ok, so the suggestion provider is not static (could be a singleton, but we don\u0027t have an injector, so not helpful). The component creating a suggestion provider instance could pass the restapi to the constructor though.\n\nRe 2: Declarative changes are nice, but it still does not really convince me. The lines between html and js are blurred. You could still put ...provider\u003d\"new ReviewerProvider(restapi)\"... or something similar into the template and be fairly declarative.\n\nAlso the current way of slotting and looking up what is in the slot seems a bit hacky. That would definitely need a better solution. At least a named slot or something.\n\nLet me raise this design question on the Polymer chat room and see what they say.",
      "parentUuid": "e867f56e_158b4ac3",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "074db4f0_9a461905",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-09T16:37:13Z",
      "side": 1,
      "message": "One more use-case - if provider is a Polymer component, we can bind provider\u0027s properties directly in html. To bind it in JS code, I can\u0027t suggest anything better then creating a new provider in a function:\n_getProvider(prop1, prop2) {\n   return new Provider(prop1, prop2)\n}\n\n\u003e\u003eprovider\u003d\"new ReviewerProvider(restapi)\"...\nIs it possible? I can\u0027t find any example. This would be really nice to have.\n\n\u003e\u003eAlso the current way of slotting and looking up what is in the slot seems a bit hacky. That would definitely need a better solution. At least a named slot or something.\nI agree that this is a hacky, but gr-endpoint-param is following the same pattern; can\u0027t find anything better in Polymer.\n\n\n\u003e\u003eLet me raise this design question on the Polymer chat room and see what they say.\nOk, may be they can suggest something else.",
      "parentUuid": "67981f40_7847dd5b",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a42ad6e3_925f0ea6",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-09-10T06:48:08Z",
      "side": 1,
      "message": "Summing up the discussion below. I would still go for property.\n\nAdvantages of making it a property:\n  - more straightforward, uses familiar mechanisms\n  - can just pass in a function without needing to wrap it in an element\n  - the function can be available from the moment the element has booted up\n  - more amenable to type checking (no way to annotate the types of slots)\n\nAdvantages of passing in with a slot\n  - Functions can\u0027t be serialized, but elements can, so with the slot strategy you could swap out elements when rendering with a system that can\u0027t write properties (e.g. server side rendering, some client side template systems)",
      "parentUuid": "074db4f0_9a461905",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52694630_04121925",
        "filename": "polygerrit-ui/app/elements/shared/gr-account-list/gr-account-list.js",
        "patchSetId": 11
      },
      "lineNbr": 123,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-09-11T18:38:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a42ad6e3_925f0ea6",
      "range": {
        "startLine": 110,
        "startChar": 3,
        "endLine": 123,
        "endChar": 6
      },
      "revId": "145a914c23e0c7e5e8298de27ccd6b47fb41f216",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}