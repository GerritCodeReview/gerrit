{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "516d3001_3768a633",
        "filename": "java/com/google/gerrit/server/CommentContextLoader.java",
        "patchSetId": 21
      },
      "lineNbr": 103,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-05T15:03:27Z",
      "side": 1,
      "message": "Not this change: I\u0027d have expected end() to be exclusive; that\u0027s more common in C++ and I think also in Java (e.g. substring()). WDYT about changing that (and documenting at the API)?",
      "range": {
        "startLine": 103,
        "startChar": 72,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ead5c09_6335587b",
        "filename": "java/com/google/gerrit/server/CommentContextLoader.java",
        "patchSetId": 21
      },
      "lineNbr": 103,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-07T09:24:21Z",
      "side": 1,
      "message": "Agree. Will do.",
      "parentUuid": "516d3001_3768a633",
      "range": {
        "startLine": 103,
        "startChar": 72,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6a9f584_096b2ce8",
        "filename": "java/com/google/gerrit/server/CommentContextLoader.java",
        "patchSetId": 21
      },
      "lineNbr": 103,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-07T12:37:16Z",
      "side": 1,
      "message": "Resolved.",
      "parentUuid": "1ead5c09_6335587b",
      "range": {
        "startLine": 103,
        "startChar": 72,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2229c53a_3fa5273a",
        "filename": "java/com/google/gerrit/server/CommentContextLoader.java",
        "patchSetId": 21
      },
      "lineNbr": 103,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-08T13:38:18Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "b6a9f584_096b2ce8",
      "range": {
        "startLine": 103,
        "startChar": 72,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd376acc_de5cc21b",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 60,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "not needed",
      "range": {
        "startLine": 60,
        "startChar": 53,
        "endLine": 60,
        "endChar": 69
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58d0f525_e921c5a9",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-05T15:03:27Z",
      "side": 1,
      "message": "I think it would be cleaner to have a package visible getHashedPath() method in CommentContextKey. That way we don\u0027t have to store the hashed path in path and at the same time the public API of CommentContextKey doesn\u0027t expose this implementation detail.",
      "range": {
        "startLine": 98,
        "startChar": 25,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2bab139_1f211fb1",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-07T09:24:21Z",
      "side": 1,
      "message": "The problem is that we are using this class (CommentContextKey) as the cache key, and also as a part of the public API. In previous patchsets, I used to have 2 different classes that were very similar, except for the path, and I moved to a single class after your suggestion.\n\nThe cache key needs to be serialized and deserialized, and deserialization means that it should be reconstructed exactly from the serialized version. During serialization, if the path was plain then it needs to be hashed, and consequently we won\u0027t be able to reconstruct the plain path again because hashing is 1 way. Hence the entity to be serialized (with a hashed path) should be different than the entity having the path as a plain text.\n\nNote: With this current implementation, this detail is not exposed to the public API: The cache implementation just re-uses this class while overriding the path to a different meaning, but that\u0027s hidden inside the cache implementation.",
      "parentUuid": "58d0f525_e921c5a9",
      "range": {
        "startLine": 98,
        "startChar": 25,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61b10d44_8b8d2d37",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-07T12:37:16Z",
      "side": 1,
      "message": "I was thinking:\n\nclass CommentContextKey {\n  // ... like now ...\n\n\n  @Nullable private String hashedPath; // lazily initialized\n  String hashedPath() {\n    if (hashedPath \u003d\u003d null) hashedPath \u003d hash(path());\n    return hashedPath;\n  }\n  @AutoValue.Builder\n  ... Builder {\n    @Nullable String hashedPath;\n    setHashedPath(String hashedPath) {\n      this.hashedPath \u003d hashedPath);\n    }\n    CommentContextKey build() {\n      CommentContextKey key \u003d autoBuild();\n      key.hashedPath \u003d hashedPath;\n    }\n  }\n}\n\nThen in serialization or for cache access you just use hashedPath(), and in deserialization you set the hashedPath field by means of the custom setHashedPath() method (and corresponding field) in the Builder.\n\nI hope I haven\u0027t overlooked anything.",
      "parentUuid": "c2bab139_1f211fb1",
      "range": {
        "startLine": 98,
        "startChar": 25,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "474e4d17_43f5d4b1",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-08T13:38:18Z",
      "side": 1,
      "message": "Resolving as per our offline discussion. Left it as is.\n\nCallers would pass in a List\u003cCommentContextKey\u003e with plain file paths, and get back a Map\u003cCommentContextKey, CommentContext\u003e as output, where the map keys are the same input entities with plain text.\n\nIn the cache implementation, we create another set of keys with the hashed paths and pass them to the cache getAll(). After retrieving the values, they are mapped again to the input keys.\n\nThis hashing is required because we don\u0027t want to store private data in cache keys, as recommended by the storage layer that is used in google3.",
      "parentUuid": "61b10d44_8b8d2d37",
      "range": {
        "startLine": 98,
        "startChar": 25,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c72636e_15a64a75",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "So I think what I had in mind, avoiding the mapping back and forth, could be made to work (e.g. https://github.com/google/auto/blob/master/value/userguide/howto.md#ignore), but would add too much complexity to be worth it. The current solution is more readable because it doesn\u0027t require thinking strange things about AutoValue and LoadingCache (like, does it access fields by reflection, or why doesn\u0027t it return the input keys themselves but recreates them, which it turns out it actually does). So let\u0027s keep it.",
      "parentUuid": "61b10d44_8b8d2d37",
      "range": {
        "startLine": 98,
        "startChar": 25,
        "endLine": 98,
        "endChar": 80
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aeda1b81_10cf1e9f",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 110,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "This isn\u0027t needed.",
      "range": {
        "startLine": 110,
        "startChar": 39,
        "endLine": 110,
        "endChar": 46
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdb408b6_c1460f52",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 121,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "You can do forEach() directly on the map.",
      "range": {
        "startLine": 121,
        "startChar": 29,
        "endLine": 121,
        "endChar": 48
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0e5301_c11bc12d",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 167,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "This is marked unstable. How about:\nStreamSupport.stream(inputKeys.spliterator(), false)",
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9a88a25_46bde171",
        "filename": "java/com/google/gerrit/server/comment/CommentContextCacheImpl.java",
        "patchSetId": 21
      },
      "lineNbr": 207,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "Map.Entry::getValue",
      "range": {
        "startLine": 207,
        "startChar": 73,
        "endLine": 207,
        "endChar": 91
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21ddfed0_47c3b5e5",
        "filename": "java/com/google/gerrit/server/comment/CommentContextKey.java",
        "patchSetId": 21
      },
      "lineNbr": 42,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "nameKey (also below)",
      "range": {
        "startLine": 42,
        "startChar": 44,
        "endLine": 42,
        "endChar": 49
      },
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adad4c73_ecd11492",
        "filename": "javatests/com/google/gerrit/acceptance/server/change/CommentsIT.java",
        "patchSetId": 21
      },
      "lineNbr": 1110,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T13:54:30Z",
      "side": 1,
      "message": "String.join(\"\\n\", content.build()),",
      "revId": "16574086d615651ab93475e662b3963031bc3563",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}