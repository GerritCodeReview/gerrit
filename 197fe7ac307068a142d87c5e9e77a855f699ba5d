{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "474b9bec_928e1fb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "AFAIU this is happening because we implement loading multiple diffs (with getAll) which might cause this racing when the diff formatter is reused between different files, i.e. when one file timing out might continue processing on a different thread while we start processing the next file.\n\nAt a first glance, I wrongly thought the discrepancy is caused by different requests to the cache.\n\nIf my understanding is inline with yours, can we mention it in the CM?",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ba6619b_4a7f7889",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "474b9bec_928e1fb9",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f0e5d18_70c7cf8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-07T14:28:14Z",
      "side": 1,
      "message": "Does this only apply to DFS? AFAIK plain JGit is more thread-safe.",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d403787f_acc3018d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-04-07T15:49:38Z",
      "side": 1,
      "message": "We\u0027re pretty sure we\u0027ve seen this issue during offline reindex on 3.5 (probably should move to stable-3.5). We\u0027re testing it out to confirm if it fixes it.",
      "parentUuid": "9f0e5d18_70c7cf8d",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebc653dd_5dd42d66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "Nice! Curious about the test results when you have them. Explained some more about dfs vs file based setup in the commit message.",
      "parentUuid": "d403787f_acc3018d",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 13
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2f43d65_b53e3406",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-07T09:12:13Z",
      "side": 1,
      "message": "thanks for digging ",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b39a9492_e6f8b7d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "Thanks for the detailed analysis and fix!",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "832d0876_7f5ecd44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-04-07T14:16:29Z",
      "side": 1,
      "message": "Apologies for the delayed validation: the RBE tests got stuck in the middle of the Jenkins CI restart and I had to re-trigger the check.",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98a91761_ac804d01",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-07T15:50:48Z",
      "side": 1,
      "message": "is this thread-safe? If there is an exception in this thread, we\u0027ll unwind the stack, and close the closer here, but the other thread might still be using the reader.",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 66
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75bb78c8_39ec0a51",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "We could get into the case where we close a reader that is still used in the thread that timed out. But I don\u0027t think we want for wait for this thread. Closing e.g. the DFS reader sets members to null and releases a pointer to a cache. It seems at worst this will create NPEs in that zombie thread.\n\nThe only other alternative I see is waiting for the zombie thread which bears the risk of waiting for a very long time which seems like it would go against the idea of a timeout in the first place? WDYT?",
      "parentUuid": "98a91761_ac804d01",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 66
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68e1bdaf_bd1b61c6",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:49:37Z",
      "side": 1,
      "message": "We could (and think that\u0027s what you suggested) take the reader of the pool and in case of time outs not close these readers instead.\n\nSo the tradeoff is: Not close the reader used by the zombie thread (risk not closing a resource that should be closed) vs close it (risk threading problem).",
      "parentUuid": "75bb78c8_39ec0a51",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 66
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7e77ac5_ad8f580a",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-08T17:25:23Z",
      "side": 1,
      "message": "I had something like this in mind:\n\n```\npublic abstract class Pool\u003cT extends AutoCloseable\u003e implements AutoCloseable {\n  ArrayList\u003cT\u003e ts;\n  synchronized Handle get() {\n    if (ts.isEmpty()) {\n      return new Handle(newT());\n    }\n    return new Handle(ts.remove(ts.size()-1));\n  }\n  synchronized boolean discard(T t) {\n    if (ts !\u003d null) {\n      ts.add(t);\n      return true;\n    }\n    return false;\n  }\n\n  @Override\n  public synchronized void close() {\n    for (T t : ts)\n      try {\n        t.close();\n      } catch (Exception e) {\n        \n      }\n    ts \u003d null;\n  }\n  \n  abstract T newT();\n  \n  public class Handle implements AutoCloseable {\n    T t;\n    Handle(T t) { this.t \u003d t; }\n    T get() { return t; } \n    @Override\n    public void close() {\n      if (!discard(t)) {\n        try {\n          t.close();\n        } catch (Exception e) {\n        \n        }\n      }\n    }\n  }\n}\n```\n\n(untested)",
      "parentUuid": "68e1bdaf_bd1b61c6",
      "range": {
        "startLine": 263,
        "startChar": 12,
        "endLine": 263,
        "endChar": 66
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "931ca33e_cd44ca58",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "Optional: these 3 lines could be extracted (used multiple times).",
      "range": {
        "startLine": 264,
        "startChar": 8,
        "endLine": 267,
        "endChar": 84
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84399a94_6f9edf8f",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 267,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "Removed them :-)",
      "parentUuid": "931ca33e_cd44ca58",
      "range": {
        "startLine": 264,
        "startChar": 8,
        "endLine": 267,
        "endChar": 84
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "071063cb_cd30ca85",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-07T09:12:13Z",
      "side": 1,
      "message": "this function doesn\u0027t have futures or threads. Is there a way to tie this workaround to the code that does the future/timeout? I assume it\u0027s the one in l.394",
      "range": {
        "startLine": 287,
        "startChar": 27,
        "endLine": 287,
        "endChar": 33
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cceac91d_633b4fba",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "Right, the future is at l.394",
      "parentUuid": "071063cb_cd30ca85",
      "range": {
        "startLine": 287,
        "startChar": 27,
        "endLine": 287,
        "endChar": 33
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d84d308_0aa404e2",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "Solved with a Pool as you suggested. Done.",
      "parentUuid": "cceac91d_633b4fba",
      "range": {
        "startLine": 287,
        "startChar": 27,
        "endLine": 287,
        "endChar": 33
      },
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e98acad_c47ed1b4",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "While we swap reader/formatter for fresh instances, why do we need to use the DynamicAutoCloseable? It looks to me the logic will work without it. Otherwise, could you please add a one-liner of Javadoc to DynamicAutoCloseable explaining why it\u0027s needed?",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "405c1820_8348acab",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-04-07T15:50:48Z",
      "side": 1,
      "message": "Would it be an alternative to use a pool instead? The thread starts by getting a objectReader from the pool (if the pool is empty, a new reader is created), does the computation and then returns the reader to the pool. \n\nThe pool has to be thread-safe. It also has to wait for all outstanding readers to be returned before closing them. \n\nIf there are no mishaps, then we\u0027ll reuse a single reader all the time. If there are timeouts, we\u0027ll create more readers.",
      "parentUuid": "1e98acad_c47ed1b4",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cdd44c63_4615d6d6",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 292,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "The pool is a nice idea that simplifies the code. Done.\n\nYoussef: We need to close any reader we instantiate because that needs to release resources it reserved.",
      "parentUuid": "405c1820_8348acab",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9b86765_14213867",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 306,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-04-07T10:41:13Z",
      "side": 1,
      "message": "nit: duplicate comment. maybe better to extract these 3 lines (as mentioned above) and add the comment only once for why this is needed.",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "000ff3e7_1b39a4da",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 306,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2022-04-08T12:46:55Z",
      "side": 1,
      "message": "Solved differently.",
      "parentUuid": "d9b86765_14213867",
      "revId": "197fe7ac307068a142d87c5e9e77a855f699ba5d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}