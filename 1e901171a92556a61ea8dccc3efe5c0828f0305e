{
  "comments": [
    {
      "key": {
        "uuid": "0ec842eb_7d909303",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "I was a bit skeptical too but then found this [1] interesting discussion. If even Brian Goetz recommends using streams as return values, we should probably give them a try. However, we should stay with return values and not use streams as method parameters or fields.\n\n[1] http://stackoverflow.com/questions/24676877/should-i-return-a-collection-or-a-stream",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 22,
        "endChar": 51
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68cdf5ca_aeb32b0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "What do you mean by this? Does your comment refer to streams which are used as method parameters or instance fields?",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 23,
        "endChar": 53
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1daf1737_8156aea4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-03-15T12:35:14Z",
      "side": 1,
      "message": "I am referring to precisely the issue you raise here: https://gerrit-review.googlesource.com/c/99713/3/gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java#67",
      "parentUuid": "68cdf5ca_aeb32b0d",
      "range": {
        "startLine": 22,
        "startChar": 59,
        "endLine": 23,
        "endChar": 53
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e30b111f_8ca41a4a",
        "filename": "gerrit-elasticsearch/src/main/java/com/google/gerrit/elasticsearch/AbstractElasticIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "Did you adjust this code to have a better error message? If not, we could still use Iterables#getOnlyElement on the collected list.",
      "range": {
        "startLine": 199,
        "startChar": 8,
        "endLine": 208,
        "endChar": 9
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb09c9b8_9609e01b",
        "filename": "gerrit-lucene/src/main/java/com/google/gerrit/lucene/AbstractLuceneIndex.java",
        "patchSetId": 3
      },
      "lineNbr": 345,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "optional: Could be replaced by map(toField).forEach(doc::add).",
      "range": {
        "startLine": 345,
        "startChar": 36,
        "endLine": 345,
        "endChar": 75
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b2e1e6_fc6183ce",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "As streams can only be consumed once, I don\u0027t think it\u0027s a good idea to use a stream as a field and expose it via a public getter.",
      "range": {
        "startLine": 67,
        "startChar": 12,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "415afd7a_21609bb6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-03-15T12:35:14Z",
      "side": 1,
      "message": "The way I think of Values is it really is just a Stream with a FieldDef attached to it describing where the stream came from.. In this implementation it is a value class that has public getters for the associated Stream/FieldDef.\n\nIt would be nice if we had a type that implemented Stream but also had an additional getField() method indicating where it came from. Then we wouldn\u0027t have a getter for the Stream, we would just be passing around FieldValueStreams.\n\nIs it feasible to have a delegating wrapper implementation of Stream? I haven\u0027t looked into it.",
      "parentUuid": "66b2e1e6_fc6183ce",
      "range": {
        "startLine": 67,
        "startChar": 12,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "868b0533_a2d768ca",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-17T16:40:02Z",
      "side": 1,
      "message": "\u003e The way I think of Values is it really is just a Stream with a FieldDef attached to it describing where the stream came from.. In this implementation it is a value class that has public getters for the associated Stream/FieldDef.\n\nIf we stay with this implementation, we should add a warning that Values#getValues may only be called once and the Values instance shouldn\u0027t be used or passed along afterwards anymore.\n\n\u003e It would be nice if we had a type that implemented Stream but also had an additional getField() method indicating where it came from. Then we wouldn\u0027t have a getter for the Stream, we would just be passing around FieldValueStreams.\n\nI would prefer that much more.\n\n\u003e Is it feasible to have a delegating wrapper implementation of Stream? I haven\u0027t looked into it.\n\nAs Stream is an interface, providing a delegating wrapper implementation should be possible. We would only need to delegate about 40 methods. ;-)",
      "parentUuid": "415afd7a_21609bb6",
      "range": {
        "startLine": 67,
        "startChar": 12,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "373e9a06_dc4ec705",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-03-17T16:47:14Z",
      "side": 1,
      "message": "\u003e As Stream is an interface, providing a delegating wrapper implementation should be possible. We would only need to delegate about 40 methods. ;-)\n\nI wouldn\u0027t feel that bad about the boilerplate, but it does seems like a lot of extra allocations. It would have to be:\n\n @Override\n public ValueStream\u003cT\u003e filter(Predicate\u003cT\u003e p) {\n   return ValueStream.wrap(delegate.filter(p));\n }\n\ni.e. adding one allocation per method call.",
      "parentUuid": "868b0533_a2d768ca",
      "range": {
        "startLine": 67,
        "startChar": 12,
        "endLine": 67,
        "endChar": 28
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e006c1a_fc13db7f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "We should try to avoid using peek as Stream#peek mainly exists for debugging purposes.",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 20
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a043c6ad_e4846319",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-03-15T12:35:14Z",
      "side": 1,
      "message": "I don\u0027t disagree, but I couldn\u0027t think of another way to implement ChangeSubIndex#toDoc without materializing the stream to a list. Specifically, that method needs to add additional fields to the document only for a subset of the values in the stream, and then delegate to the superclass implementation to get the rest of the values.",
      "parentUuid": "9e006c1a_fc13db7f",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 20
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "882cdc97_8410d470",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-17T16:40:02Z",
      "side": 1,
      "message": "Would materializing the list hurt us so much? I\u0027d rather take on the overhead of materialization than use peek. To keep it limited, we could materialize the list in ChangeSubIndex#add and recreate the stream for the super call.\n\nAnother possibility would be to refactor AbstractLuceneIndex and ChangeSubIndex. Instead of overriding the add() method, we could collect all consumers of values first, combine them with Consumer#andThen and then use the stream only once.\n\nI found another reason [*] why we shouldn\u0027t use peek: The terminal operation determines when the consumer given to peek is executed and whether it\u0027s executed at all.\n\n[*] http://stackoverflow.com/a/33636377",
      "parentUuid": "a043c6ad_e4846319",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 20
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1851af37_11860762",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/Schema.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-03-17T16:47:14Z",
      "side": 1,
      "message": "\u003e Would materializing the list hurt us so much? I\u0027d rather take on the overhead of materialization than use peek.\n\nHonestly, I would rather drop this whole idea than materialize the list. Not materializing is the main benefit we would be getting from using Stream instead of Iterable, since in many current FieldDef implementations it returns a materialized Collection.\n\n(I\u0027m not trying to sound whiny--this is an RFC change, and I\u0027m fine if we decide the benefits do not outweigh the costs.)",
      "parentUuid": "882cdc97_8410d470",
      "range": {
        "startLine": 82,
        "startChar": 16,
        "endLine": 82,
        "endChar": 20
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "428de0a7_8403acce",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "What about Stream.empty()? If you adjust it, please also replace the other newly introduced occurrences.",
      "range": {
        "startLine": 143,
        "startChar": 13,
        "endLine": 143,
        "endChar": 24
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0256fcaf_530de5ea",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 3
      },
      "lineNbr": 659,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "This doesn\u0027t really feel good and also doesn\u0027t comply with the rule that map operations should be stateless and side-effect free. I understand why it\u0027s necessary but I would rather use a different approach if possible.",
      "range": {
        "startLine": 657,
        "startChar": 4,
        "endLine": 659,
        "endChar": 81
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "361b4418_b7e525ba",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/index/change/ChangeFieldTest.java",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-03-14T11:41:03Z",
      "side": 1,
      "message": "The stream has been consumed at this point and will throw an exception.",
      "range": {
        "startLine": 65,
        "startChar": 52,
        "endLine": 65,
        "endChar": 58
      },
      "revId": "1e901171a92556a61ea8dccc3efe5c0828f0305e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}