{
  "comments": [
    {
      "key": {
        "uuid": "ed3ae193_0daf8d38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-28T14:02:30Z",
      "side": 1,
      "message": "so manually created \u0026 pushed picks are missed?",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b2035d6_6b2786c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1012449
      },
      "writtenOn": "2020-05-28T16:48:06Z",
      "side": 1,
      "message": "Yes, they will be missed.\n\nIn the previous change where cherrypickof was introduced, we created a data set which contains the source \u0027change number\u0027 and \u0027patchset\u0027. Right now, only changes created using the cherry-pick functionality populate that data. There could be other sources that populate that data(like manual cherry-picks), but, it would be a feature in itself.\n\nIf you have any good ideas on how one would be able to improve the data set by supporting manual cherry-picks, it would certainly be a good addition to this functionality.",
      "parentUuid": "ed3ae193_0daf8d38",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39af4425_387c7edb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-28T17:09:50Z",
      "side": 1,
      "message": "\u003e If you have any good ideas on how one would be able to improve the data set by supporting manual cherry-picks, it would certainly be a good addition to this functionality.\n\nwell, one semi-reliable way to detect picks is to parse cherry-pick -x footers (cherry-picks without these are a crime against humanity anyway).\nadditionally, as this is gerrit, we have change-ids - a change which is created after another change with the same id was integrated is pretty much by definition a cherry-pick.",
      "parentUuid": "7b2035d6_6b2786c9",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6a2ee20_50785fa5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-05-28T17:23:22Z",
      "side": 1,
      "message": "\u003e well, one semi-reliable way to detect picks is to parse cherry-pick -x footers (cherry-picks without these are a crime against humanity anyway).\n\nYet they are everywhere, I don\u0027t believe Gerrit adds these footers during a cherry-pick?\n\n\u003e additionally, as this is gerrit, we have change-ids - a change which is created after another change with the same id was integrated is pretty much by definition a cherry-pick.\n\nUnfortunately, while this is the \"natural\" way of things, this cannot be relied upon to always be true. There are many ways that a human can make this not be the case. In the early days of Gerrit, some people reused change-id across projects to show that changes were related. I believe Shawn wanted to even make it a \"submit together\" policy. I specifically advocated against it for the exact reason that it was unnatural since the change-id is naturally there during a cherry-pick. \n\nThe other more serious problem with this, is that it does not convey direction, i.e. which change was cherry-picked from which one, and might there have been other cherry-picks in the middle, or perhaps both have a common commit they were both cherry-picked from?",
      "parentUuid": "39af4425_387c7edb",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a511b18_eb4361eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-05-29T00:18:26Z",
      "side": 1,
      "message": "\u003e I don\u0027t believe Gerrit adds these footers during a cherry-pick?\n\nIt does, but only when the source is a merged change.",
      "parentUuid": "e6a2ee20_50785fa5",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d17a9c76_f81aab3c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-29T12:10:28Z",
      "side": 1,
      "message": "\u003e change-id across projects\n\nthis is trivially recognizable as not being a cherry-pick, because these have to be within the same repo (ok, i actually did a lot of cross-repo picks due to code having been moved, but this is a bit of a corner case and doesn\u0027t really need to work. also, i marked these with \"(cherry picked from qtbase/1a2a3a4a1a2a34aa12a3a4a2a3)\", so they would be still recognizable).\n\n\u003e submit together\n\nthese would naturally break the condition of the latter change\u0027s upload being subsequent to the integration of the former.\n\n\u003e it does not convey direction\n\nthe sequence requirement above deals with that as well.\n\n\u003e there have been other cherry-picks in the middle\n\none could calculate the git-patch-id to \"down-rank\" modified picks. where ambiguity remains, the earliest committer timestamp should be used.",
      "parentUuid": "8a511b18_eb4361eb",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac583e5_e7cc92a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-05-29T13:06:04Z",
      "side": 1,
      "message": "I think you likely have some useful ideas that would lead to good guesses.  The current policy tracks known facts without making assumptions. Since the fields now exist to track these relationships in Gerrit, they could be populated by any policy. I would encourage you to share your ideas with code, perhaps with a cherry-tracker plugin?",
      "parentUuid": "d17a9c76_f81aab3c",
      "range": {
        "startLine": 9,
        "startChar": 30,
        "endLine": 10,
        "endChar": 13
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b48d79_2153912b",
        "filename": "java/com/google/gerrit/server/query/change/CherryPickOfRefPredicate.java",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-06-03T22:53:31Z",
      "side": 1,
      "message": "I think the is guaranteed to return a fullname.",
      "range": {
        "startLine": 35,
        "startChar": 29,
        "endLine": 35,
        "endChar": 61
      },
      "revId": "1f17a147d8e3560719a8956628c2d3dc9f906f7c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}