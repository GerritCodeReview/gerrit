{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "37460580_c4ab7029",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-04-03T08:30:13Z",
      "side": 1,
      "message": "This test does not end up using `isAlreadyMergedInAnyBranch(c)`, since `!c.has(canMergeFlag) || !incoming.contains(c)` evaluates to false for all changes.\n\n@sven.selberg@axis.com do you have a scenario in mind, which could be used to test this?",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "779859ca_733dafc4",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-04-03T08:46:19Z",
      "side": 1,
      "message": "IIUC the test-case [submitMergeOfNonChangeBranchTip](https://gerrit-review.googlesource.com/c/gerrit/+/366462/2/javatests/com/google/gerrit/acceptance/rest/change/AbstractSubmit.java#759) from the [change where the functionality of isAlreadymergedInAnyBranch was introduced](https://gerrit-review.googlesource.com/c/gerrit/+/91610) should test this. I.e. with this commit that test-case \"should\" only pass with `@TestProjectInput(createNewChangeForAllNotInTarget \u003d InheritableBoolean.TRUE)`.",
      "parentUuid": "37460580_c4ab7029",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c4f497d_d0bd9c90",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-04-03T13:42:59Z",
      "side": 1,
      "message": "It is actually the test AbstractSubmit.submitChangeWhenParentOfOtherBranchTip() that verifies it.\n\nSince the test I added here did not add any further value, I will remove it.",
      "parentUuid": "779859ca_733dafc4",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d39ec5ad_af5bfa31",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-04-03T14:11:27Z",
      "side": 1,
      "message": "But!? [If those two tests](https://gerrit-review.googlesource.com/c/gerrit/+/366462/5/javatests/com/google/gerrit/acceptance/rest/change/AbstractSubmit.java#759) doesn\u0027t fail with this patch when `createNewChangeForAllNotInTarget` isn\u0027t set then I don\u0027t understand anything...\nThat suggests to me that the whole extra \"Is merged into any branch\" step is unnecessary. Or am I missing something?.",
      "parentUuid": "7c4f497d_d0bd9c90",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5a5fae1_b363f115",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-04-03T14:26:28Z",
      "side": 1,
      "message": "I don\u0027t get it, but perhaps I don\u0027t have to...",
      "parentUuid": "d39ec5ad_af5bfa31",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77e8f484_6252c339",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-04-03T14:28:33Z",
      "side": 1,
      "message": "If the tests pass they pass!",
      "parentUuid": "b5a5fae1_b363f115",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5cd87d5_32b086de",
        "filename": "javatests/com/google/gerrit/acceptance/rest/change/SubmitByRebaseIfNecessaryIT.java",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-04-04T07:17:46Z",
      "side": 1,
      "message": "Lets look at the test `submitMergeOfNonChangeBranchTip()`:\n\nDebugging with this change:\n\n```\n    // M  -- mergeCommit (pushed for review and submitted)\n    // | \\\n    // |  S -- stable (pushed directly to refs/heads/stable)\n    // | /\n    // I   -- master\n    \n    alreadyAccepted: [S(stable), I(master)]\n    uninterestingBranchTips: [S(stable), I(master)]\n    incoming: [M(mergeChange)]\n    toSort: [M(mergeChange)]\n    \u003d\u003e I and S will be marked as uninteresting \u003d\u003e RevWalk rw will only reach M.\n    sort[0] (n): M(mergeChange)\n    c[0]: M(mergeChange) (c.has(canMergeFlag): true; incoming.contains(c): true)\n    \u003d\u003e isAlreadyMergedInAnyBranch(c) is not reached\n    \n    Done.\n```\n\nThis works, because stable is a branch tip, which is marked uninteresting and thus the sort only cares about the merge commit. At a later point (RebaseSubmitStrategy L113) it detects. a merge and switches to MergeIfNecessaryOp.\n\nAs a comparison the same before this change:\n\n```\n    // M  -- mergeCommit (pushed for review and submitted)\n    // | \\\n    // |  S -- stable (pushed directly to refs/heads/stable)\n    // | /\n    // I   -- master\n    \n    alreadyAccepted: [S(stable), I(master)]\n    initialTip: I(master)\n    incoming: [M(mergeChange)]\n    toSort: [M(mergeChange)]\n    \u003d\u003e I will be marked as uninteresting \u003d\u003e RevWalk rw will reach M and S.\n    sort[0] (n): M(mergeChange)\n    c[0]: M(mergeChange) (c.has(canMergeFlag): true; incoming.contains(c): true)\n    \u003d\u003e isAlreadyMergedInAnyBranch(c) is not reached\n    c[1]: S(stable) (c.has(canMergeFlag): false; incoming.contains(c): false)\n    \u003d\u003e isAlreadyMergedInAnyBranch(c) is reached\n    \u003d\u003e S(stable) is marked as uninteresting\n    \n    Done.\n```\n\nThus, this case is handled by marking S as uninteresting from the start.\n\nThe test case `submitChangeWhenParentOfOtherBranchTip` is different. With this change:\n\n```\n    // Chain of two commits\n    // Push both to topic-branch\n    // Push the first commit for review and submit\n    //\n    // C2 -- tip of topic branch\n    //  |\n    // C1 -- pushed for review\n    //  |\n    // C0 -- Master\n    //\n    enableCreateNewChangeForAllNotInTarget();\n    \n    alreadyAccepted: [C0(master), C2(topic)]\n    uninterestingBranchTips: [C0(master)]\n    incoming: [Change1 (C1 as change)]\n    toSort: [Change1 (C1 as change)]\n    \u003d\u003e C0(master) will be marked as uninteresting \u003d\u003e RevWalk rw will reach C1.\n    sort[0] (n): Change1 (C1 as change)\n    c[0]: Change1 (C1 as change) (c.has(canMergeFlag): true; incoming.contains(c): true)\n    \u003d\u003e isAlreadyMergedInAnyBranch(c) is not reached\n    \n    Done.\n```\n\nThis is exactly equal to what happens without this change.\nIf we disable `enableCreateNewChangeForAllNotInTarget`, this test fails already while validating the change.\n\nIf I let `uninterestingBranchTips\u003d\u003dalreadyAccepted` (the state before your fix in 2016), the test fails:\n\n```\n    // Chain of two commits\n    // Push both to topic-branch\n    // Push the first commit for review and submit\n    //\n    // C2 -- tip of topic branch\n    //  |\n    // C1 -- pushed for review\n    //  |\n    // C0 -- Master\n    //\n    enableCreateNewChangeForAllNotInTarget();\n    \n    alreadyAccepted: [C0(master), C2(topic)]\n    uninterestingBranchTips: [C0(master), C2(topic)]\n    incoming: [Change1 (C1 as change)]\n    toSort: [Change1 (C1 as change)]\n    \u003d\u003e C0(master) and , C2(topic) will be marked as uninteresting \u003d\u003e RevWalk rw will reach no commit\n    \u003d\u003e the sorter returns an empty list\n    \u003d\u003e NullPointerException: change 1: change not processed by merge strategy\n    \n    Done.\n```\n\nI hope that helps wrapping your head round it a bit. I also have to do the debugging and write it down. Otherwise, I only get confused.",
      "parentUuid": "77e8f484_6252c339",
      "revId": "1f5cd2b9f62347ebe01f8ae616845932314dab42",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}