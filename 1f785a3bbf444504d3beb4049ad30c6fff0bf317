{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2b5094d8_7bd29ded",
        "filename": "polygerrit-ui/app/models/view/view-model.ts",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-31T14:11:47Z",
      "side": 1,
      "message": "Add a comment about this state property. What is it used for? What exactly are these strings and numbers? Can they be empty or 0?",
      "revId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8d8217f_d4562b20",
        "filename": "polygerrit-ui/app/models/view/view-model.ts",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-31T14:11:47Z",
      "side": 1,
      "message": "A map only makes sense, if you want to retain this view state information even when dashboards are destroyed and then created again. Otherwise you could just have one ViewModel per dashboard, and the dashboard would create the model in the constructor. The change-list would be able to resolve the dependency on the correct model via its parent.\n\nSo do we actually have a use case for that? How often do users go from one dashboard to another dashboard and then go back to the first dashboard with the expectation that the selected change is still retained?\n\nOr is the problem that the dashboard is destroyed when going from dashboard to change page and back? I would expect Lit to keep the dashboard view around.",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fa003fa_f8c72246",
        "filename": "polygerrit-ui/app/models/view/view-model.ts",
        "patchSetId": 12
      },
      "lineNbr": 14,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2022-06-09T08:38:15Z",
      "side": 1,
      "message": "SG, we did have the use case of supporting index for multiple dashboards but that seems like a use case we can stop supporting in favour of simplifying our codebase quite a bit.\nAbandoning this change.",
      "parentUuid": "b8d8217f_d4562b20",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9041a60_a68ea70d",
        "filename": "polygerrit-ui/app/models/view/view-model.ts",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-31T14:11:47Z",
      "side": 1,
      "message": "Add a comment clarifying what the purposes of this model is.\n\nMaybe also consider finding a different name than just \"view\". Why \"view\" in this context?",
      "revId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ec8645b_a2a3eb1a",
        "filename": "polygerrit-ui/app/models/view/view-model.ts",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-31T14:11:47Z",
      "side": 1,
      "message": "Maybe `user` can just be renamed to `viewId`? Could this then be re-used also for change-list-view?",
      "range": {
        "startLine": 47,
        "startChar": 31,
        "endLine": 47,
        "endChar": 35
      },
      "revId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "1f785a3bbf444504d3beb4049ad30c6fff0bf317",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}