{
  "pushCert": "certificate version 0.1\npusher A0D0EF51 1519636852 +0100\nnonce AFD2Vu1HKQUj39xgr4W2YQQvIVKL3uuUPifyHA3pfyBjCz/t2R+hZ3K/KI87/hCRZLpiI2vL02k3\n\n0000000000000000000000000000000000000000 1ff501cd4cd3288250e82785a6a8ca92018dd008 refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEjcOJ9ZBmQPrFqZA3UbX9l6DQ71EFAlqT0XQACgkQUbX9l6DQ\n71Fg4wgAvBqLYAeHXJuHYnfajwlGMfLdlsg7RFVWKdZrehpMj1GiIMsMxCR6XhrK\nIRhC8VSptgxVDZvNhL8vPBr4ItNfitlEWRl7q/KUgSBEVG0WX5BXukReLk4dMvj/\nQmGTT/9C4XlCdPxROTfwMQt8eqsNZhKJNK0okLJzA/vi5uDwyZrhj2If9Fq+jWH8\nYv9PhbRqA6b4vW+H2quoI2u0Yotyh8qKQjjHGhwxk9x13KYKiJJbU06J2Nh/Y0gh\n7u49rAjdSV23LDoZrkifYXQkZqCDjF3SaSU0ufqtDHYDMJbMP/s6/HVM6LaCbCvZ\nA7dB5cFxw48kZvyR39fBLIFDOSKYIw\u003d\u003d\n\u003dLdJB\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "7e48faae_7a55a995",
        "filename": "java/com/google/gerrit/common/BUILD",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T10:40:45Z",
      "side": 1,
      "message": "I would rather avoid this source selection and exlusion below and extract tracing in its own package:\n\n  java/com/google/gerrit/common/tracing/BUILD\n\nThen the BUILD for traing package would just be:\n\n  java_library(\n    name \u003d \"tracing\",\n    srcs \u003d glob([\"**/*.java\"]),\n    visibility \u003d [\"//visibility:public\"],\n    [...]\n  )",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 1
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0861e837_b60f4b21",
        "filename": "java/com/google/gerrit/common/BUILD",
        "patchSetId": 7
      },
      "lineNbr": 18,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T10:58:58Z",
      "side": 1,
      "message": "SGTM, will do will the next patch set.",
      "parentUuid": "7e48faae_7a55a995",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 1
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60cd4b21_6125c8a0",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T10:40:45Z",
      "side": 1,
      "message": "Move it in its own package, like \"tracing\", \"trace\" or just \"log\"?",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5a269bc_18fcad43",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T10:58:58Z",
      "side": 1,
      "message": "SGTM, will do will the next patch set.",
      "parentUuid": "60cd4b21_6125c8a0",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 32
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6633c89_b8ee6dfa",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T10:58:58Z",
      "side": 1,
      "message": "This class still misses JavaDoc.",
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7adbe2f6_6df02e3d",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T10:40:45Z",
      "side": 1,
      "message": "I find this promotion very confusing. I understand, why it\u0027s needed, but I wonder if there are alternatives? Can we also put a comment on this line or Javadoc on this method, explaining that?",
      "range": {
        "startLine": 473,
        "startChar": 8,
        "endLine": 477,
        "endChar": 9
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3547515_ee9581f4",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T10:58:58Z",
      "side": 1,
      "message": "Yeah, this should definitely be explained by a comment. Also this class still misses JavaDocs.\nLet me know if you have a better idea for this.",
      "parentUuid": "7adbe2f6_6df02e3d",
      "range": {
        "startLine": 473,
        "startChar": 8,
        "endLine": 477,
        "endChar": 9
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0790230_a9db3a08",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T11:06:57Z",
      "side": 1,
      "message": "I think that in emergency production issue inverstigation, I would like to see/gather as much information as I can get from the system. So it wouldn\u0027t hurt if we log too much. Say Jetty logs, and other layers. So that one approach would be not to do the severity level propagation at all. And just log everything. We knos if we would detect the problem in such layer, or get hints on another problem.\n\nOTOT, I see your point saying too much is too much. So may be we could do it conditionally? And find out a way (two request parameters?), one with severity propagation and another without it (bad news: this would probably complicate things)?",
      "parentUuid": "f3547515_ee9581f4",
      "range": {
        "startLine": 473,
        "startChar": 8,
        "endLine": 477,
        "endChar": 9
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a21fefd_5fe4d4eb",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T11:12:10Z",
      "side": 1,
      "message": "\u003e I think that in emergency production issue inverstigation, I would like to see/gather\n\u003e as much information as I can get from the system.\n\nSure, you can still do this by setting the general log level to DEBUG. Then you get debug logs for all requests.\n\nThis feature is not about investigating emergency production issues, but investigation single failing requests, or single requests with unexpected response. \n\n\u003e So it wouldn\u0027t hurt if we log too much. Say Jetty logs, and other layers. So that\n\u003e one approach would be not to do the severity level propagation at all. And just log \n\u003e everything. We knos if we would detect the problem in such layer, or get hints on\n\u003e another problem.\n\nI think it\u0027s definitely too much log spam if we include debug logs for each permission check, each index query etc.",
      "parentUuid": "e0790230_a9db3a08",
      "range": {
        "startLine": 473,
        "startChar": 8,
        "endLine": 477,
        "endChar": 9
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549fd2d9_a9271fc0",
        "filename": "java/com/google/gerrit/common/DebugTraceFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 477,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T11:20:02Z",
      "side": 1,
      "message": "\u003e This feature is not about investigating emergency production\n \u003e issues, but investigation single failing requests, or single\n \u003e requests with unexpected response.\n\nIf one single request is consitently failing (say Submit a change, for all changes), then it is emergency production issue ;)\n\n \u003e I think it\u0027s definitely too much log spam if we include debug logs\n \u003e for each permission check, each index query etc.\n\nEven for one single request or what am I missing?",
      "parentUuid": "7a21fefd_5fe4d4eb",
      "range": {
        "startLine": 473,
        "startChar": 8,
        "endLine": 477,
        "endChar": 9
      },
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0da9037e_7bec6b94",
        "filename": "java/com/google/gerrit/index/query/QueryProcessor.java",
        "patchSetId": 7
      },
      "lineNbr": 257,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-26T10:56:31Z",
      "side": 1,
      "message": "This and other places in this change could be de-coupled from tracing facility as they already helpfu on their own. The idea is to use the existing logger and add mor debg traces, or add a standard logger, like here:\n\n  private static final Logger log \u003d Logger.getLogger(QueryProcessor.class);\n\nand add additional debug statements.\n\nIn a second change only those loggers are replace.",
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2088ad9_d92cc33a",
        "filename": "java/com/google/gerrit/index/query/QueryProcessor.java",
        "patchSetId": 7
      },
      "lineNbr": 257,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-26T11:01:25Z",
      "side": 1,
      "message": "Marking as non-resolved.",
      "parentUuid": "0da9037e_7bec6b94",
      "revId": "1ff501cd4cd3288250e82785a6a8ca92018dd008",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}