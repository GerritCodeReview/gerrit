{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3c6b0141_42b5d19f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-11-19T09:53:49Z",
      "side": 1,
      "message": "I would prefer if this was made into a separate change. Makes for easier reviewing.\nI think a separate change would also allow for a better explanation of why this is required, what problem it\u0027s solving and wouldn\u0027t block the already approved changes.\nIf it\u0027s too much effort the feel free to Ack and resolve.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 0
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48296200_daafd351",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Unless I keep the hacky cache in place for the registry, this is necessary. Dmitrii suggested I actually use the new finalize logic as part of this change so I had to fix all the tests and subscriptions.",
      "parentUuid": "3c6b0141_42b5d19f",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 0
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ea76a35_e7dba428",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 22,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-11-22T14:14:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "48296200_daafd351",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 22,
        "endChar": 0
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4296481c_e8d9caaa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-11-19T09:53:49Z",
      "side": 1,
      "message": "I don\u0027t understand this.\nHow were they leaking and how were the stack-overflow-errors happening?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 14
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4de21ab1_2ae2d9e9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "When running unit-tests I would get stack overflows in the test-log output related to \u0027subscribe\u0027 methods called by \u0027next\u0027 methods. I don\u0027t fully understand the internals of rxjs so I\u0027d have to dig deeper as to why this leaking happens.",
      "parentUuid": "4296481c_e8d9caaa",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 14
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d318a2ea_fa2a8f9b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 27,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-11-22T14:14:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4de21ab1_2ae2d9e9",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 27,
        "endChar": 14
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e46f8d7_ea92a76a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "Thanks, looking great!",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7734a244_c54bf6e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Thanks",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34677e5d_d0ad843a",
        "filename": "polygerrit-ui/app/elements/admin/gr-create-change-dialog/gr-create-change-dialog.ts",
        "patchSetId": 17
      },
      "lineNbr": 91,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "For LitElements maybe use SubscroptionController\u0027s subscribe() function.",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec09964c_8b708893",
        "filename": "polygerrit-ui/app/elements/admin/gr-create-change-dialog/gr-create-change-dialog.ts",
        "patchSetId": 17
      },
      "lineNbr": 91,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34677e5d_d0ad843a",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b75da5d0_3e4cba4f",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "So far I have used the pattern\n\n  .pipe(takeUntil(this.disconnected$))\n  \nfor subscriptions in PolymerElements. We are migrating to Lit anyway, so consistency for a few months does not matter much. So feel free to ignore.\n\nOh, I see you have actively converted everything to the new pattern of collecting subscriptions. TBH I like `takeUntil(this.disconnected$)` better, but again, let\u0027s not discuss PolymerElement too much. The design of SubscriptionController is more interesting to discuss. :-)\n\nOh, and now I have read the commit message. :-) I would be interested in why subscriptions were leaking and why the new pattern prevents that.",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdcfd73e_9fefef37",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "I\u0027d have to delve deeper into rxjs code-base to get an idea as to why. But subscriptions have logic that remove themselves from their \u0027parents\u0027 so presumably if you just do .pipe(takeUntil...) and then subscribe to that, you\u0027re still pushing values through it\u0027s just that takeUntil acts like a gate.",
      "parentUuid": "b75da5d0_3e4cba4f",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1fd60f8_be8a0adb",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-22T14:32:29Z",
      "side": 1,
      "message": "takeUntil() causes the observable to complete and thus the subscription to terminate. It is a recommended pattern, but it does also have pitfalls:\n\nhttps://benlesh.medium.com/rxjs-dont-unsubscribe-6753ed4fda87\nhttps://cartant.medium.com/rxjs-avoiding-takeuntil-leaks-fb5182d047ef",
      "parentUuid": "bdcfd73e_9fefef37",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8540d042_a00a3410",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 17
      },
      "lineNbr": 611,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-22T14:52:30Z",
      "side": 1,
      "message": "As discussed offline, let\u0027s revisit this when we have something that cleans up services for us.  For elements, the migration to Lit should introduce our usage of SubscriptionController so that should remove all the takeUntil logic from components.",
      "parentUuid": "e1fd60f8_be8a0adb",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5df74de_52a5e80f",
        "filename": "polygerrit-ui/app/services/change/change-service.ts",
        "patchSetId": 17
      },
      "lineNbr": 38,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "It would be nice to have something similar to SubscriptionController for services. Maybe something like\n\n  private readonly subscriptions \u003d new Subscriptions();\n  \n  ...\n  \n  this.subcriptions.add(change$, x \u003d\u003e this.change \u003d x);\n  \n  ...\n  \n  finalize() {\n    this.subscriptions.removeAll();\n  }",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a268b62a_5dc08fa5",
        "filename": "polygerrit-ui/app/services/change/change-service.ts",
        "patchSetId": 17
      },
      "lineNbr": 38,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Agreed, though maybe as a follow-up.",
      "parentUuid": "a5df74de_52a5e80f",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e54f9b_af11aafc",
        "filename": "polygerrit-ui/app/services/registry.ts",
        "patchSetId": 17
      },
      "lineNbr": 39,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "What about defining Context as a type explicitly:\n\n  export type Context \u003d Record\u003cstring, Finalizable\u003e;  \n  \n  export type AppContext \u003d AppContextInterface \u0026 Context;\n  \nAnd then replace all of `TContext` by `TContext extends Context`.\n\nMaybe then you can go even further and do\n\n  export type Context \u003d Record\u003cstring, Finalizable\u003e \u0026 Finalizable;",
      "range": {
        "startLine": 39,
        "startChar": 31,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1096266a_bf9b4e1b",
        "filename": "polygerrit-ui/app/services/registry.ts",
        "patchSetId": 17
      },
      "lineNbr": 39,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "So... ideally all I have to check is that the Registry only has string keys but my Typescript Foo is not strong enough.\n\nI\u0027m not sure I like introducing a new Context type. \n\nTContext extends Context also doesn\u0027t guarantee that it\u0027s *only* string keys afaiu",
      "parentUuid": "d8e54f9b_af11aafc",
      "range": {
        "startLine": 39,
        "startChar": 31,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76c69ea9_1e0d8015",
        "filename": "polygerrit-ui/app/services/registry.ts",
        "patchSetId": 17
      },
      "lineNbr": 39,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-22T14:32:29Z",
      "side": 1,
      "message": "I had downloaded your change and applied my suggestions, and it was surprisingly easy. I find it a bit weird that TContext can by anything and that you have \"as\" and \"any\" too much in the code. But I won\u0027t block the change. I can send a follow-up, if it bugs me and I find the time. :-)",
      "parentUuid": "1096266a_bf9b4e1b",
      "range": {
        "startLine": 39,
        "startChar": 31,
        "endLine": 39,
        "endChar": 50
      },
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95b63bd8_67ed75b4",
        "filename": "polygerrit-ui/app/services/registry.ts",
        "patchSetId": 17
      },
      "lineNbr": 52,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "Maybe `unknown` instead of `any` would work here?",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0859e850_e9ee53cc",
        "filename": "polygerrit-ui/app/services/registry.ts",
        "patchSetId": 17
      },
      "lineNbr": 52,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Found an even better solution.",
      "parentUuid": "95b63bd8_67ed75b4",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f38fd4c0_9988950a",
        "filename": "polygerrit-ui/app/services/shortcuts/shortcuts-service.ts",
        "patchSetId": 17
      },
      "lineNbr": 116,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "Forgot to call `removeEventListener` in finalize?",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d27bb56_ed67399a",
        "filename": "polygerrit-ui/app/services/shortcuts/shortcuts-service.ts",
        "patchSetId": 17
      },
      "lineNbr": 116,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f38fd4c0_9988950a",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8fdb042_95a32693",
        "filename": "polygerrit-ui/app/services/shortcuts/shortcuts-service.ts",
        "patchSetId": 17
      },
      "lineNbr": 116,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f38fd4c0_9988950a",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60844667_196bf28a",
        "filename": "polygerrit-ui/app/test/mocks/gr-rest-api_mock.ts",
        "patchSetId": 17
      },
      "lineNbr": 281,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-11-19T08:00:56Z",
      "side": 1,
      "message": "Can you add comments why you are returning `Promise.resolve(undefined)` here?\n\nWould this be an option?\n\n  return Promise.resolve({});",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "552d719e_82a6431a",
        "filename": "polygerrit-ui/app/test/mocks/gr-rest-api_mock.ts",
        "patchSetId": 17
      },
      "lineNbr": 281,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Changed and added a comment.",
      "parentUuid": "60844667_196bf28a",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8f92cfc_32bd5b38",
        "filename": "polygerrit-ui/app/test/mocks/gr-rest-api_mock.ts",
        "patchSetId": 17
      },
      "lineNbr": 281,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-11-19T14:46:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60844667_196bf28a",
      "revId": "204b9ac5bfa414ae9c5c18d765a961f8cbf59e38",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}