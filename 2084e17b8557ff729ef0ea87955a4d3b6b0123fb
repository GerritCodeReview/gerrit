{
  "comments": [
    {
      "key": {
        "uuid": "AAAHJH///bM\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommits.java",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2012-07-11T05:09:40Z",
      "side": 1,
      "message": "This change feels a bit like feature creep, it seems like something that should be doable as a plugin instead.  A plugin could fire off of an event, perhaps this event right here?",
      "revId": "2084e17b8557ff729ef0ea87955a4d3b6b0123fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHL3///+Y\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommits.java",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2012-07-11T08:11:43Z",
      "side": 1,
      "message": "I understand your concern, you expressed the same during the hackathon. With this change we would have notes in the same refs/notes/review branch both for commits that were submitted after passing code review and those pushed without code review. It would feel strange for me if one set of these notes comes from a core feature and another set of notes from a plugin... because both kind of notes are of the same level of abstraction i.e. they give additional info on how a commit reached a branch.\n\nI see two possibilities: either this change becomes core gerrit feature (like the one already existing for creation of code review notes) or I make both of them as one plugin?",
      "parentUuid": "AAAHJH///bM\u003d",
      "revId": "2084e17b8557ff729ef0ea87955a4d3b6b0123fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHJH///MI\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommits.java",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2012-07-12T03:02:35Z",
      "side": 1,
      "message": "Well that depends a bit.  For reviews if the note is a stepping stone towards storing review data in git, it would be worth keeping it in core.  If not, then I kind of agree, it would likely be better if both features were plugins.  Either way, I think it should work off events, not hooks into the core.",
      "parentUuid": "AAAHL3///+Y\u003d",
      "revId": "2084e17b8557ff729ef0ea87955a4d3b6b0123fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAHL3///9k\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReceiveCommits.java",
        "patchSetId": 6
      },
      "lineNbr": 530,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2012-07-12T14:31:15Z",
      "side": 1,
      "message": "\u003e For reviews if the note is a stepping stone towards storing review data in git, it would be worth keeping it in core.\n\nThe stepping stone was adding the NoteMap and NoteMapMerger in JGit. From Gerrit we just make use of that to easily create review notes. Recently I factored out a method in Gerrit to make creation of review notes even simpler.\n\nHowever, review note itself is not a precondition for storing review data in git. This code can become a plugin... and it seems it must as otherwise I can\u0027t convince some people to get this change through ;-)",
      "parentUuid": "AAAHJH///MI\u003d",
      "revId": "2084e17b8557ff729ef0ea87955a4d3b6b0123fb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}