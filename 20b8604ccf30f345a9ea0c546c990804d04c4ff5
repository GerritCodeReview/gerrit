{
  "comments": [
    {
      "key": {
        "uuid": "a3083eda_3a01c1cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-12-09T07:46:09Z",
      "side": 1,
      "message": "Can you add a bit more detail here about what this does and how it\u0027s used?\n\n(also in /Documentation if necessary)",
      "revId": "20b8604ccf30f345a9ea0c546c990804d04c4ff5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d00689_68fc23e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T08:00:28Z",
      "side": 1,
      "message": "Java Melody is a monitoring tool. As each monitoring tools it can only reports and protocolls about events that she is aware of. On a container (like Tomcat, etc) where jndi is involved (DataSource) it should work out of the box (didn\u0027t test it though ,-).\n\nThat means that if you go to JavaMelody page you should be able to see all (!) SQL statements that were executed.\n\nUnfortunately, on jetty, where Gerrit dos the whole magic itself, javamelody is not aware and can not intercept and thus reports and protocoll SQL activities.\n\nTo rectofy that, artificially Proxy must be created to give javamelody a chance to intercept.\n\njavamelody ships JdbcWrapper class, that i used to create the proxy do Gerrit\u0027s own Datasource.\n\nThis way, now we have SQL reports also on Gerrit@Jetty.\n\nIOW, if you deploy javamelody plugin on Gerrit@Jetty, then without this change, the SQL part of repoart are empty. With this change: you would see each and every SQL satement in the SQL statistic report, a l√°:\n\n http://imgur.com/8EyAA9u",
      "parentUuid": "a3083eda_3a01c1cb",
      "revId": "20b8604ccf30f345a9ea0c546c990804d04c4ff5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3083eda_1a503def",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/schema/DataSourceProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-09T05:10:53Z",
      "side": 1,
      "message": "When you install the plugin is javamelody in lib/? or part of the plugin?\n\nIf its in lib we can get the class by reflection. So you could put something into the database section of gerrit.config telling us what class and method to invoke in order to wrap the data source. This would be similar to having a database plugin anyway, which we sort of already support, so long as the driver code is in lib/.\n\nIt might be necessary to define some sort of interface inside of gerrit init package or something that you can implement in order to bridge between a trivial reflection based wrapping process here, and this JdbcWrapper.SINGLETON.createDataSourceProxy() call in javamelody.",
      "revId": "20b8604ccf30f345a9ea0c546c990804d04c4ff5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d00689_e8e77353",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/schema/DataSourceProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T06:07:58Z",
      "side": 1,
      "message": "\u003e When you install the plugin is javamelody in lib/? or part of the plugin?\n\nThey are currently part of plugin. We never split plugin code from the dependencies untill now, including everything inside the plugin.  Tmake your suggestion work, we would need to split it. May be just have two version of plugin: one with all-in-one JAR, where you can\u0027t do SQL interception; and second without dependencies included, and addition step for copying artifacts to $gerrit_site/lib and setting up datasource interception tool chain, like you\u0027ve suggested.",
      "parentUuid": "a3083eda_1a503def",
      "revId": "20b8604ccf30f345a9ea0c546c990804d04c4ff5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}