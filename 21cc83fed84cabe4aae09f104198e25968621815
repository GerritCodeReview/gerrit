{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7c0a248c_f2daf371",
        "filename": "java/com/google/gerrit/metrics/proc/ProcMetricModule.java",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2021-04-21T20:56:41Z",
      "side": 1,
      "message": "if both these metrics aren\u0027t supported by the JVM we could skip adding this metric",
      "revId": "21cc83fed84cabe4aae09f104198e25968621815",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6aa7226_43a049b6",
        "filename": "java/com/google/gerrit/metrics/proc/ProcMetricModule.java",
        "patchSetId": 4
      },
      "lineNbr": 323,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-04-22T05:03:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7c0a248c_f2daf371",
      "revId": "21cc83fed84cabe4aae09f104198e25968621815",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10065256_f4ccd14e",
        "filename": "java/com/google/gerrit/metrics/proc/ProcMetricModule.java",
        "patchSetId": 4
      },
      "lineNbr": 330,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-04-22T07:37:19Z",
      "side": 1,
      "message": "Can\u0027t we use existing ThreadDeadlockHealthCheck: [1] from metrics-healthchecks library: [2]?\n\nLooking into the implementation, ThreadDeadlockHealthCheck is using: ThreadDeadlockDetector: [3], that is using ThreadMXBean#findDeadlockedThreads(): [4]. There is also ThreadMXBean#findMonitorDeadlockedThreads(): [5].\n\n[1] https://www.javadoc.io/doc/io.dropwizard.metrics/metrics-healthchecks/4.0.3/com/codahale/metrics/health/jvm/ThreadDeadlockHealthCheck.html\n[2] https://repo1.maven.org/maven2/io/dropwizard/metrics/metrics-healthchecks/4.1.19/\n[3] https://github.com/dropwizard/metrics/blob/release/4.1.x/metrics-jvm/src/main/java/com/codahale/metrics/jvm/ThreadDeadlockDetector.java#L41\n[4] https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/ThreadMXBean.html#findDeadlockedThreads()\n[5] https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/ThreadMXBean.html#findMonitorDeadlockedThreads()",
      "revId": "21cc83fed84cabe4aae09f104198e25968621815",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1045eaa5_491f3297",
        "filename": "java/com/google/gerrit/metrics/proc/ProcMetricModule.java",
        "patchSetId": 4
      },
      "lineNbr": 330,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-04-22T09:02:15Z",
      "side": 1,
      "message": "\u003e Can\u0027t we use existing ThreadDeadlockHealthCheck: [1] from metrics-healthchecks library: [2]?\n\u003e \n\u003e Looking into the implementation, ThreadDeadlockHealthCheck is using: ThreadDeadlockDetector: [3], that is using ThreadMXBean#findDeadlockedThreads(): [4]. There is also ThreadMXBean#findMonitorDeadlockedThreads(): [5].\n\nThe all point of this change is to create a metric with the number of *BLOCKED* threads and not of deadlocks.\n\nYou may have a zombie Gerrit with 90% of BLOCKED threads that aren\u0027t technically in deadlock: we don\u0027t have a metric to detect that situation.",
      "parentUuid": "10065256_f4ccd14e",
      "revId": "21cc83fed84cabe4aae09f104198e25968621815",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}