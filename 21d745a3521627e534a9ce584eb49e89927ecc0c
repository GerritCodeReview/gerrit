{
  "comments": [
    {
      "key": {
        "uuid": "2043bf51_8f479590",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "(spidey senses tingling)\nHow about breaking this down into individual properties?\nAlternatively, use a class?",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_cfda3df3",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:44:43Z",
      "side": 1,
      "message": "Personally, I really like having this constrained to just one declared property because it makes it clear where the side-effects are. Perhaps it would be better if it were more clearly indicated as a temporary storage just for when the processing promise is in flight.\n\nOne of the struggles I had when tidying this file up is the surprisingly many places that the helper functions queried the state. If this were split into a number of volatile state properties, it would not be as clear when it should or should-not be accessed.\n\nMaybe I should add a comment, but since it\u0027s just one property, then you should expect to only see it used in the effectful functions (`process` and `_processContentStep`), and by nobody else.\n\nWhat about it makes your spidey senses tingle?",
      "parentUuid": "2043bf51_8f479590",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_4fcf6d36",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "Consider breaking this method down.",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_afe7f9b4",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:44:43Z",
      "side": 1,
      "message": "I feel like this is a good size. It\u0027s really only doing one of two things and then recursing. Breaking it apart could mean distributing the state info more.",
      "parentUuid": "2043bf51_4fcf6d36",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_2fed4990",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:52:41Z",
      "side": 1,
      "message": "Maybe it\u0027s my FP bias, but when I try to constrain side-effect code I like having it all localized so it\u0027s easier to understand.",
      "parentUuid": "2043bf51_afe7f9b4",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_4ff88d52",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T23:05:00Z",
      "side": 1,
      "message": "On second thought, nothing criminal, so up to you.\nIt\u0027s feels a bit weird that the function has two branches and is named processSomething.\n\nHere\u0027s my reading of what it\u0027s doing:\n- processes shared section, or\n- processes delta sections, and\n- advances section index, and either\n- kicks of next iteration, or\n- finishes processing by calling resolve callback.",
      "parentUuid": "2043bf51_afe7f9b4",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_8ffd553f",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T23:11:42Z",
      "side": 1,
      "message": "I\u0027d say that reading is accurate, and I see what you mean w/r/t the name. I can change it to `_processNextStep` if that helps.",
      "parentUuid": "2043bf51_4ff88d52",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_2fa2e961",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T23:16:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2043bf51_8ffd553f",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_2fd429ca",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "I wonder if code could be restructured so the Promise handler does looping and async, while other processing functions are dumb and straightforward.",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_8fe435b1",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:44:43Z",
      "side": 1,
      "message": "Does this seem like it isn\u0027t straightforward? Do you mean the promise creator handles looping? The handler is all the way over in gr-diff-builder, so I don\u0027t think it should be concerned with looping.",
      "parentUuid": "2043bf51_2fd429ca",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_6ef34f7a",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T23:05:00Z",
      "side": 1,
      "message": "Mmm, at the first place I was hoping that moving async logic into Promise would make other functions more dumb. Something like this:\n\n  process: function(content) {\n    return new Promise(function(resolve) {\n       this._prepareContent();\n       if (this._hasNextStep()) {\n         this.async(this._processNextStep(), 1);\n       } else {\n         resolve(this.groups);\n       }\n     }\n  }\n\nAnd then (with minimal changes):\n\n_processNextStep: function() {\n  // processing part of processContentStep\n  if (rows.both) {\n    // \n  } else {\n  };\n  this._state.sectionIndex++;\n},\n\n_hasNextStep: function() {\n  return this._state.sectionIndex \u003c this._content.length;\n},",
      "parentUuid": "2043bf51_8fe435b1",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_0ef28b72",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T23:11:42Z",
      "side": 1,
      "message": "It looks like there is no recursion in this case. Am I not seeing it? It only calls `_processNextStep` once.",
      "parentUuid": "002a3b7a_6ef34f7a",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_af95b9fc",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T23:41:57Z",
      "side": 1,
      "message": "Sorry, that was just explaining the idea, not the actual code.\nHere\u0027s the one that works, but I\u0027m not sure it\u0027s better.\nThe upside is that resolve and async are only used here.\n\nprocess: function(content) {\n  return new Promise(function(resolve) {\n    this._prepareContent();\n\n    var nextStep \u003d function() {\n      if (this._hasNextStep()) {\n        this._processNextStep();\n        this.async(nextStep, 1);\n      } else {\n        resolve(this.groups);\n      }\n    }.bind(this);\n\n    nextStep();\n    \n  }.bind(this));\n},\n\nAnyways, up to you.",
      "parentUuid": "002a3b7a_0ef28b72",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_2ea2e761",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-29T00:55:37Z",
      "side": 1,
      "message": "Thank you Viktar, this is such a great suggestion. Not only does this clean up the promise usage, it allows me to remove the state properties and greatly simplify the `_processNext` method.\n\nNow, only the `process` method is effectful.",
      "parentUuid": "2043bf51_af95b9fc",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_ef18617d",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor.js",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-29T16:42:28Z",
      "side": 1,
      "message": "Nice! Looks much better now, also concealing the state is the right choice.",
      "parentUuid": "002a3b7a_2ea2e761",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_ee505f4e",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "Just FYI: if you provide a string as a third parameter here, it will be an error message, making it easier to understand when a test breaks.",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_6ff3517a",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:52:41Z",
      "side": 1,
      "message": "What message would you use?",
      "parentUuid": "002a3b7a_ee505f4e",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_4ef89352",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T23:05:00Z",
      "side": 1,
      "message": "The comment from the above line.",
      "parentUuid": "2043bf51_6ff3517a",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2043bf51_0fa72572",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 441,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T23:16:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "002a3b7a_4ef89352",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_ce4da3b2",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "Just FYI: Generally it\u0027s a better practice to compare to precalculated values.\nWhat if rows array is corrupted for whatever reason?\nUp to you, of course.",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_eeddffec",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:52:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "002a3b7a_ce4da3b2",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_ae4a5796",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2016-06-28T22:29:29Z",
      "side": 1,
      "message": "Just FYI: You can have suit() blocks inside other suit() blocks, and have narrower setup() methods to reduce copy-paste.",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_ceda43f3",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-processor/gr-diff-processor_test.html",
        "patchSetId": 1
      },
      "lineNbr": 455,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2016-06-28T22:52:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "002a3b7a_ae4a5796",
      "revId": "21d745a3521627e534a9ce584eb49e89927ecc0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}