{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "75fbfbb0_3c4c6e72",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T11:53:07Z",
      "side": 1,
      "message": "How will this change help callers in better understanding the error? Apart from bullet \"3\", we are only changing the response code.",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c915d1_a4bfe759",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-27T12:36:08Z",
      "side": 1,
      "message": "No we are also changing messages. Before this change all cases were rejected with \"invalid revision \u003crevision\u003e\", now we return \"base revision \u003crevision\u003e not found\", \"base revision \u003crevision\u003e is invalid\", \"base revision \u003crevision\u003e is not a commit\" or 500 ISE, so from the message you can understand now better which of the cases is hit.",
      "parentUuid": "75fbfbb0_3c4c6e72",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4f82d59_fc7f4a5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T14:30:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "91c915d1_a4bfe759",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcf4da60_3443165d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T11:53:07Z",
      "side": 1,
      "message": "I\u0027d argue that 400 also makes sense: it\u0027s a bad request w.r.t user\u0027s input (i.e. user is supplying wrong SHA-1s in the request). 5xx should be used when server itself fails, i.e. due to a bug.\n\nMaybe what we could do is to enhance the error messages only, but leave the response codes as is?",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 65
      },
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d17329e9_87c26aab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-27T12:36:08Z",
      "side": 1,
      "message": "No, specifying a wrong SHA1 doesn\u0027t trigger an IOException, hence we will (still) not return a 500 ISE in this case. An IOException is only thrown if there is a bug in the code that prevents us from checking if the SHA1 exists, but then 500 ISE is correct.",
      "parentUuid": "fcf4da60_3443165d",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 65
      },
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65e8b7d0_48428b1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T14:30:59Z",
      "side": 1,
      "message": "OK, thanks for clarifying. I\u0027ll post comments on the code change in case I doubt something.",
      "parentUuid": "d17329e9_87c26aab",
      "range": {
        "startLine": 10,
        "startChar": 2,
        "endLine": 10,
        "endChar": 65
      },
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0425d432_534c5f67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T11:53:07Z",
      "side": 1,
      "message": "I missed this review. Apologies for the delay.\n\nI left few comments.",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "646198d6_2beb4deb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-27T12:36:08Z",
      "side": 1,
      "message": "No worries, this was not urgent at all.",
      "parentUuid": "0425d432_534c5f67",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37975430_3695d236",
        "filename": "java/com/google/gerrit/server/project/RefUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T11:53:07Z",
      "side": 1,
      "message": "As an example on why this makes sense to map to 400, the baseRevision is supplied by users of the REST API, and this exception happens if baseRevision is invalid.",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68c39ddd_15747425",
        "filename": "java/com/google/gerrit/server/project/RefUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-27T12:36:08Z",
      "side": 1,
      "message": "All 4xx response codes mean that it\u0027s a \"user error\", whereas 5xx is used when it\u0027s a \"server error\". This means if it\u0027s a \"user error\" it doesn\u0027t mean that it should always be a 400, but it can also be another 4xx response code.\n\nYeah, I guess \u0027400 Bad Request\u0027 would be okay too as it\u0027s the most generic response code for \"user error\", but 422 is more specific, and hence I think better. We use 422 when a resource ID that is specified in the response body cannot be resolved [1], which is exactly this case here, the base revision that is specified in the response cannot be resolved. On the other hand 400 should be used is the request is not understood by the server due to malformed syntax [2], which is not the case here.\n\nFWIW this case here is about revid \u003d\u003d null (which is means the specified revision was not found), this is different from the specified revision being \"invalid\" (aka not a parseable SHA1) which is handled below in l. 49 - 51.\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api.html#_422_unprocessable_entity\n[2] https://gerrit-review.googlesource.com/Documentation/rest-api.html#_400_bad_request",
      "parentUuid": "37975430_3695d236",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5f28fd6_62f9597c",
        "filename": "java/com/google/gerrit/server/project/RefUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-07-27T14:30:59Z",
      "side": 1,
      "message": "Sorry, by 400 I meant 4xx as BadRequestException ...\n\n\u003e Yeah, I guess \u0027400 Bad Request\u0027 would be okay too as it\u0027s the most generic response code for \"user error\", but 422 is more specific, and hence I think better.\n\nOK I just figured out that UnprocessableEntity maps to 422. LGTM.\n\nOK makes sense. Thanks for explaining.",
      "parentUuid": "68c39ddd_15747425",
      "revId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. \t\t      Make sure your change is forward compatible and add the footer \t\t      \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "22247dced7a2a0a37e41a4cd117988c8f799c6eb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}