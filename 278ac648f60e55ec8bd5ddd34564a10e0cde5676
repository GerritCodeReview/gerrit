{
  "comments": [
    {
      "key": {
        "uuid": "RpD4iqbE",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "s/do/to",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpZ1eYyU",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpD4iqbE",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpB4lbbg",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "s/eclipse/Eclipse",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpb1jH-A",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpB4lbbg",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpH4oMZE",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "These lines are too long.  I suggest replacing the whole section with something like:\n\n As using PowerMock from within eclipse raises warnings about\n multiple SLF4J bindings when running the tests with slf4j \u003c1.6.2,\n slf4j has been bumped to 1.6.2, which fixed the warnings.",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpV1Zuzo",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpH4oMZE",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpf13Z54",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/errors/ProjectRenamingFailedException.java",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-03-13T16:18:45Z",
      "side": 1,
      "message": "s/failed/failing ?",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpd3Aa3U",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/errors/ProjectRenamingFailedException.java",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T19:52:15Z",
      "side": 1,
      "message": "Done.\n\nI went for \"generic failure\".",
      "parentUuid": "Rpf13Z54",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpN47hds",
        "filename": "gerrit-server/pom.xml",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "We might need to add powermock in the licenses file.\n\n Documentation/licenses.txt",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpX1W9w0",
        "filename": "gerrit-server/pom.xml",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "PowerMock is only used for testing (See \u003cscope\u003etest\u003c/scope\u003e below). So it\u0027s not included in the final war file. We do not distribute it.\n\nHence (just as we do not add JUnit, or EasyMock in the licenses.txt), I think PowerMock is not needed in licenses.txt.",
      "parentUuid": "RpN47hds",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpP5AwUs",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/GitRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "s/be/by",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpR1TMx0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/GitRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpP5AwUs",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpJ5F-Vo",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/GitRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "s/be/by",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpT1Qbw0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/GitRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 124,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpJ5F-Vo",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpL5KOWY",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "These variables could be better named.  `sourceLock` and `destLock`?",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpd2JS28",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 434,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Whether lock1 will hold the lock for the source or the destination depends on the result of the comparison of the source and destination names (see lines 460, and 464). Same for lock2.\n\nSince we\u0027re locking quite late in the rename process, this approach is necessary, as otherwise two different threads could enter this part of the code and deadlock themselves [1]. We could try to lock earlier, but that would open another can of worms, with having to wait for error messages, etc.\n\nSo in the end, sorting the locks and predictable starting with the \"smaller\" lock, is the most viable solution. The price we have to pay is not knowing whether lock1 refers to the source or the destination. But we can live with that lack of knowledge.\n\n\n\n[1] Assume we\u0027d start by locking the source lock.\n\n* Thread 1 is trying to rename repoA to repoB.\n\n* Just as Thread 1 is grabbing the source lock (repoA), Thread 2 deletes repoA.\n\n* Now Thread 1 gets its source lock (repoA) and waits for its destination lock (repoB).\n\n* Thread 2 creates repoB and tries to rename repoB to repoA.\n\n* Thread 2 gets its source lock (repoB) and waits on its destination lock (repoA).\n\nSo Thread 1, and Thread 2 are dead locked.",
      "parentUuid": "RpL5KOWY",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpF4w1fQ",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 508,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "Unnecessary line break.",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpf2Oh3Q",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/LocalDiskRepositoryManager.java",
        "patchSetId": 4
      },
      "lineNbr": 508,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpF4w1fQ",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpZ3hgyM",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/RenameProject.java",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-03-13T16:18:45Z",
      "side": 1,
      "message": "instead of iterating over the cacheMap.byPlugin(\"gerrit\") map entries and then checking if they are contained in the cachesToClear coulnd\u0027t we directly access the members of the map which need to be invalidated?\n\nSomething like:\n\n  private void purgeCaches(Project sourceProject) {\n    Map\u003cString, Provider\u003cCache\u003c?, ?\u003e\u003e\u003e m \u003d cacheMap.byPlugin(\"gerrit\");\n    for (String n : new String[] {\"adv_bases\", \"changes\", \"git_tags\", \"project_list\"}) {\n      m.get(n).get().invalidateAll();\n    }\n    projectCache.remove(sourceProject);\n  }",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpf3FJ4I",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/RenameProject.java",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T19:52:15Z",
      "side": 1,
      "message": "They are both small and have a favorable hit/miss ratio for now. So why not :-)\n\nDone.",
      "parentUuid": "RpZ3hgyM",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpb3mvzY",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/renaming/Task.java",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-03-13T16:18:45Z",
      "side": 1,
      "message": "Could the source and destination be the parameters of the carryOut method?\nThen we could just register the Tasks in guice and wouldn\u0027t need the factories just to pass these two parameters?",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpX2ydyY",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/renaming/Task.java",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T19:52:15Z",
      "side": 1,
      "message": "At first, I was tempted to implement it just that way.\n\nBut in the end, it\u0027s the other way round. We want that factory, as it makes otherwise implicit requirements explicit (yay for making information machine readable) and it reduces the burden for Task implementations.\nYay for inversion of control :-)\n\nNow we have a natural coupling between the carryOut and rollback methods.\n\nAssume they were not coupled, and we\u0027d have source and destination as parameters to carryOut. Could I use a Task instance to rename projectA to projectB, and afterwards (with the same instance) rename projectC to projectD?\nProbably not, but after killing the Factory and adding the parameters, the interface would hint toward such usage.\n\nWell maybe the documentation explicitly states that this is forbidden, but it\u0027s at least tempting that some plugin, extension whatsoever tries this. Maybe not now, but maybe in a year?\n\nFurthermore, what about rollback? Now they are clearly symmetric. Adding source and destination to carryOut, should we add the same to rollback? Consider two instances (instanceA, and instanceB) of classA, which implements Task. After using instanceA to rename projectA to projectB, can I expect that I can use instanceB to do the rollback? After all, I could pass the correct parameters to rollback ...\n\nAnd finally, source and destination are not adjustable parameters for a Task. They are fixed well known objects. So the natural place to put them is in the constructor.",
      "parentUuid": "Rpb3mvzY",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpV3MW7E",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/renaming/TaskModule.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2013-03-13T16:18:45Z",
      "side": 1,
      "message": "It look to me that all we need is to register N concrete rename tasks.\nThis class looks quite complex and I am not sure if this complexity justifies itself.\n\nMaybe:\n\n  bind(RenameParentsTask.class);\n  bind(RenameChangesTask.class);\n...\n\nis enough?",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpd0ly4c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/renaming/TaskModule.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T19:52:15Z",
      "side": 1,
      "message": "\u003e It look to me that all we need is to register N concrete rename tasks.\n\nWe do not register N concrete rename tasks.\n\nInstead, we bind factories to a DynamicSet. Thereby, we can have extensions (e.g.: replication) register additional Task implementations (well ... actually it\u0027s more like registering special factories for the tasks)\n\nAnd yes, you are right, we could simplify the taskFactory method a bit, if we did not care too much about typing. But we want to make sure that the factory is of the correct type and that additionally it produces a Task instance. But I agree that having all that in five lines (32–36) is quite dense.\n\nNevertheless, this code allows for simple registration (see lines 46–50), and additionally buys us type safety and easy injection.",
      "parentUuid": "RpV3MW7E",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpT3vD.k",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/renaming/TaskModule.java",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T21:27:28Z",
      "side": 1,
      "message": "Hi Saša,\n\nI misread your comment. Sorry.\n\nSo the point for this factory registration construction is that we\nwant to inject using constructor injection, as this creates a natural\nbinding between carryOut and rollback, as discussed in\nTask.java.\nSince source and destination are of the same type, we have to use\nannotations for source and destination. But letting Guice create a\nTask instance for us, Guice does not know where to get values for\nsource, and destination from. Hence, we take advantage of\nfactories. Thereby, we can tell the factory to create an instance for\na given source and name and let Guice inject the other required\nconstructor parameters.\n\nSo what we could do is something like\n\n  DynamicSet.setOf(binder(), Task.Factory.class);\n  DynamicSet.bind(binder(), Task.Factory.class).to(Task1.Factory.class);\n  DynamicSet.bind(binder(), Task.Factory.class).to(Task2.Factory.class);\n  [...]\n\n. While looks harmless ... Guice cannot know where to\ntake an implementation for TaskN.Factory from.\n\nSo we have to teach Guice about it. We could construct those instances\nby ourselves, but that nixes most of the benefit of having an\ninjector. So we\u0027d want Guice to construct the factory instance for\nus. All the nastiness that comes with that is already dealt with by\nFactoryModule. So it\u0027s tempting to just add\n\n\n  FactoryModuleBuilder builder;\n\n  builder \u003d new FactoryModuleBuilder();\n  install(builder.build(Task1.Factory.class));\n\n  builder \u003d new FactoryModuleBuilder();\n  install(builder.build(Task2.Factory.class));\n\n  [...]\n\n. This however does not suffice, as Guice fails to construct such\nfactories, as the factories inherit from Task.Factory [1], and there the create method\nreturns Task (it cannot return anything else at that point). But as\nTask is not a concrete class, Guice does not know how to create the\nfactory. So we need to hint the builder that we want to create a concrete\nclass:\n\n  FactoryModuleBuilder builder;\n\n  builder \u003d new FactoryModuleBuilder();\n  builder.implement(Task.class, Task1.class);\n  install(builder.build(Task1.Factory.class));\n\n  builder \u003d new FactoryModuleBuilder();\n  builder.implement(Task.class, Task2.class);\n  install(builder.build(Task2.Factory.class));\n\n  [...]\n\nWhile this works, it\u0027s tedious. We could abstract that to something\nlike\n\n  taskFactory( A, B ) {\n    FactoryModuleBuilder builder \u003d new FactoryModuleBuilder();\n    builder.implement(Task.class, A);\n    install(builder.build(B));\n  }\n\n  taskFactory(Task1.class, Task1.Factory.class);\n  taskFactory(Task2.class, Task2.Factory.class);\n  [...]\n\nBut we\u0027d have to provide both the concrete class and the factory as\nparameter, which is error prone. And given the factory (e.g.:\nTask1.Factory.class), we can obtain the concrete class (e.g.:\nTask1.class) by looking at the factory\u0027s declaring class, as that typically yields the required concrete class (See doclet of taskFactory).\n\nAnd that\u0027s how I ended up at this Patch Set\u0027s implementation of\ntaskFactory. Finally, we get all the magic by just\n\n  taskFactory(Task1.Factory.class);\n  taskFactory(Task2.Factory.class);\n  [...]\n\n. No need to pass the concrete class.\n\n\n  \n\n---------------\n\n[1]  This is inheritance necessary, to be able to uniformly treat the factories in RenameProject.java",
      "parentUuid": "Rpd0ly4c",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpH4tkZc",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/git/LocalDiskRepositoryManagerTest.java",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "Extra space before the comma.",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpZ2Tw58",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/git/LocalDiskRepositoryManagerTest.java",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpH4tkZc",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "RpB46TdM",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/project/RenameProjectTest.java",
        "patchSetId": 4
      },
      "lineNbr": 500,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2013-03-13T07:46:42Z",
      "side": 1,
      "message": "s/thi/the",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Rpb2Y-7k",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/project/RenameProjectTest.java",
        "patchSetId": 4
      },
      "lineNbr": 500,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-03-13T15:30:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "RpB46TdM",
      "revId": "278ac648f60e55ec8bd5ddd34564a10e0cde5676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}