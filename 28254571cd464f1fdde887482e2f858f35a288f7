{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cf0b9848_c5fe4397",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 129,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T14:33:14Z",
      "side": 1,
      "message": "This creates a new array; I think we want to avoid that.",
      "range": {
        "startLine": 129,
        "startChar": 19,
        "endLine": 129,
        "endChar": 39
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52a8aa55_89d0a766",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 129,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T15:38:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf0b9848_c5fe4397",
      "range": {
        "startLine": 129,
        "startChar": 19,
        "endLine": 129,
        "endChar": 39
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fbccea6_ffed1c88",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T14:33:14Z",
      "side": 1,
      "message": "I\u0027m not sure if we can rely on this not allocating memory for the content. The fact that it writes through to the backing array suggests it doesn\u0027t, but there is no explicit guarantee. I think if you don\u0027t go for an RE anyway then then original loop was actually better because it avoids extra memory allocation.\n\nI\u0027m still concerned that this will loop over the entire content. Isn\u0027t that potentially very slow? I assume git has that limit the comment mentions precisely for that reason.",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45f1d50b_e9214c0c",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T15:38:29Z",
      "side": 1,
      "message": "ArrayUtils.toObject creates a new array, which is not really needed.\n\ncontains() performance depends on the list implementation, but for ArrayList it just returns as soon as it finds the element, so it doesn\u0027t necessarily loop on the whole buffer.\n\nI added this modification for the code to become slightly more readable. I reverted back to the loop implementation of PS#8 to avoid the extra memory allocation of here and line 129.",
      "parentUuid": "5fbccea6_ffed1c88",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1591cddb_682055c5",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T15:47:08Z",
      "side": 1,
      "message": "Why does git limit its scanning horizon?",
      "parentUuid": "45f1d50b_e9214c0c",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "480816a5_ebb3430a",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T18:04:57Z",
      "side": 1,
      "message": "Well, I spent some time trying to understand how Git detects binary files [1]. It looks like it scans the header line by line looking for BIN_TRAILER or BIN_HEADERS match within that line. I\u0027m trying to follow up on the logic here but I don\u0027t want this to take too much time.\n\nSince this is the behaviour in the old caches and I copied it over, then the behaviour here is not supposed to produce a regression. I added a TODO for myself and can take a look again with a follow up. \n\nI also added a limit on the number of characters we parse anyway as per our discussion on chat.\n\nhttps://github.com/eclipse/jgit/blob/master/org.eclipse.jgit/src/org/eclipse/jgit/patch/Patch.java#L297",
      "parentUuid": "1591cddb_682055c5",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "598f0d89_c2b2028f",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2020-11-19T18:09:08Z",
      "side": 1,
      "message": "git scans only the first bits of a file to avoid slowness when handling large files.",
      "parentUuid": "1591cddb_682055c5",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff53e1f_8d2d2d1c",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/FileHeaderUtil.java",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T18:18:59Z",
      "side": 1,
      "message": "Thanks Hanwen. Is the limit I added here reasonable?",
      "parentUuid": "598f0d89_c2b2028f",
      "range": {
        "startLine": 130,
        "startChar": 10,
        "endLine": 130,
        "endChar": 23
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83146d78_30fdfe58",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiff.java",
        "patchSetId": 10
      },
      "lineNbr": 86,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T14:33:14Z",
      "side": 1,
      "message": "nit: two (also below)",
      "range": {
        "startLine": 86,
        "startChar": 91,
        "endLine": 86,
        "endChar": 92
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95e1cbd6_a1905e66",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiff.java",
        "patchSetId": 10
      },
      "lineNbr": 86,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T15:38:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83146d78_30fdfe58",
      "range": {
        "startLine": 86,
        "startChar": 91,
        "endLine": 86,
        "endChar": 92
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73434f89_1bd91273",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T14:33:14Z",
      "side": 1,
      "message": "I still think you don\u0027t need this. If you just remove it then compilation will fail if a new DiffAlgorithm is added, which is likely preferable to a runtime error.",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 88,
        "endChar": 92
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "560aead1_a477351a",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T15:38:29Z",
      "side": 1,
      "message": "ah OK, thanks. I didn\u0027t notice this.\n\nDone.",
      "parentUuid": "73434f89_1bd91273",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 88,
        "endChar": 92
      },
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "297521d6_013093b0",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 10
      },
      "lineNbr": 91,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T14:33:14Z",
      "side": 1,
      "message": "You can do this in the switch by moving the corresponding case to the top and then falling through.",
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a5b107a_888a5340",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 10
      },
      "lineNbr": 91,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-11-19T15:38:29Z",
      "side": 1,
      "message": "This will then become what I had in PS#8 (minus the throw statement)?\n\nI think for this small implementation we don\u0027t need the switch statement anyway, so I got rid of it and simplified the method.\n\nDone.",
      "parentUuid": "297521d6_013093b0",
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e7eb3bc_56965353",
        "filename": "java/com/google/gerrit/server/patch/gitfilediff/GitFileDiffCacheImpl.java",
        "patchSetId": 10
      },
      "lineNbr": 91,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-11-19T15:47:08Z",
      "side": 1,
      "message": "Now, however, we no longer have the compiler check that we handle all enums. I think one of the nice things of a switch statement is this compile time check that will fail if a new enum value is added (and there is no \"case default:\"). But given that this will likely not change, and is declared right above, and it\u0027s also read-only, I think it\u0027s OK.",
      "parentUuid": "5a5b107a_888a5340",
      "revId": "28254571cd464f1fdde887482e2f858f35a288f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}