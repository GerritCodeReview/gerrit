{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c236aa4b_0494ebae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-02-17T13:14:23Z",
      "side": 1,
      "message": "Friendly ping.",
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55f88d73_871feef4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-03-01T10:26:26Z",
      "side": 1,
      "message": "Please merge this when it\u0027s a good time for you to do the internal upgrade right afterwards.",
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb36ea3d_b29a9b5d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-03-02T09:29:14Z",
      "side": 1,
      "message": "would it be possible to fold this change in with the diffcache upgrade, so we save ourselves one cache flush?",
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaab2c0a_e129bf13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-03-02T10:39:27Z",
      "side": 1,
      "message": "Yes we can. I think that would actually mean not merging this change and having file modes available in the new diff cache right away.\n\nI\u0027ll postpone this change for now and see if it needs to be merged/abandoned later.",
      "parentUuid": "eb36ea3d_b29a9b5d",
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a3f659_e471a2a3",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 7088,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-02-23T09:21:16Z",
      "side": 1,
      "message": "I think we aren\u0027t current exposing file modes in octal representation and wonder if we should restify this. After all, this would be taking a unix-level representation and just serve it on the REST API.\n\nWDYT?\n\naccess_modes \u003d {\n  \"owner\": [\"read\",\"execute\"]\n  \"others\": [\"execute\"]\n}",
      "range": {
        "startLine": 7088,
        "startChar": 45,
        "endLine": 7088,
        "endChar": 51
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "121926f8_948ea544",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 7088,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-02-23T10:43:26Z",
      "side": 1,
      "message": "Git actually stores the textual representation of octal directly, ie. \n\n$ git cat-file tree 1bd6cfbd3dadd2d5c3c1f10eae82f25b86983f64\n100644 .bazelignorei�K��v�)��a��c�10064\n\ntrying to interpret is more work, and breaks if a new mode is ever added.\n\nnote that the \u0027read\u0027 access mode is not a thing. You can only have \n\n100644 (file), 100755 (executable), 40000 (directory) and 120000 (symlink)",
      "parentUuid": "b5a3f659_e471a2a3",
      "range": {
        "startLine": 7088,
        "startChar": 45,
        "endLine": 7088,
        "endChar": 51
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70c4e2a7_552a7a17",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 7088,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-02-23T10:45:11Z",
      "side": 1,
      "message": "\u003e Git actually stores the textual representation\n\nI think this is a good reason to serve as-is. Ben, how will we surface this on the UI?",
      "parentUuid": "121926f8_948ea544",
      "range": {
        "startLine": 7088,
        "startChar": 45,
        "endLine": 7088,
        "endChar": 51
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d37d6aac_13379bf2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 7088,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-02-25T22:28:40Z",
      "side": 1,
      "message": "Git does not store, e.g., write permissions as Hanwen said. Also the git command line returns the mode in octal.\n\n$ git diff HEAD^\ndiff --git $file\nold mode 100644\nnew mode 100755\n\nI quickly checked this on Windows and it also shows permissions in octal.",
      "parentUuid": "70c4e2a7_552a7a17",
      "range": {
        "startLine": 7088,
        "startChar": 45,
        "endLine": 7088,
        "endChar": 51
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ddd3ef9_b0fe8e32",
        "filename": "java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-02-26T09:09:27Z",
      "side": 1,
      "message": "Does this require us to flush a (persisted) cache internally?",
      "range": {
        "startLine": 36,
        "startChar": 46,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d4d2120_64e4c5a2",
        "filename": "java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-02-26T09:24:11Z",
      "side": 1,
      "message": "Yes.\n\nCache value is PatchList -\u003e contains a list of PatchListEntry.\n\nSince we\u0027re adding two new fields to PLE, cache values need to be flushed. Thanks to Edwin who pointed out this fact.",
      "parentUuid": "8ddd3ef9_b0fe8e32",
      "range": {
        "startLine": 36,
        "startChar": 46,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97d6e526_6517da97",
        "filename": "java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-02-26T09:26:53Z",
      "side": 1,
      "message": "Ok, thanks.\n\nMy -2 is actually a +2 with a request :-)\n\nCan we wait until next week with merging this? I\u0027d like to resolve the ongoing latency issues before we flush any caches because that in itself might make latency worse. Please just ping me to turn the -2 into a +2 when you have the time to flush the internal caches and babysit the rollout.",
      "parentUuid": "0d4d2120_64e4c5a2",
      "range": {
        "startLine": 36,
        "startChar": 46,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:\"Release-Notes\""]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "28fa5432a0bb999ed886bddad9d36bc6658f7b0c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}