{
  "pushCert": "certificate version 0.1\npusher 5FAD9330 1472257192 -0700\nnonce AE+e84YliGAr8658kKivlMDjzx0ZlVu/9bshsa5QUmkrY/2+dqvluQ0sc6iL/ljgbK2FqoFb+5qS\n\n0000000000000000000000000000000000000000 392ad4df6cb7f01963177220d22b4bbb19abebd7 refs/for/master\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXwNyoAAoJECdUrmNLj+szRXsP+gMn+FiqQ1UdoSwJRjY1WEKu\n5Hd16ZHCpqRFgW8jq9zotzsKWRI1uCJSZYga4H/01jwHv1WoE7d8DzMHp0aPt5P0\nmWR7zCYLZI3kdk2gZZPvGEjONe8t1zrvbEMF5NU5f3qDCnzpdWoZL1MWnjLw2Qvl\nXuA/rx38m3Hib+m5VBMVbth95bl2vxTdFm+du+vs+vZuGnf/BtPXjFXf3axKogXv\nkwBzf2XRrU62xnMrwAhqQm2KFm+GBfEihcd2anfzjqAjXBO2+hRIcv/j5SBc2pv2\nSqSA8wZI3Zi96gld4C5/xclUN8MkkZY1hLY48ojmH5dQbqAjuUxX8x29deYbkdYk\n6Y0sXjCUiL+NRgWeMndh5++TqGO4VS7Z1970ek9WBCuc11smkOlUmDzenWZxJWmT\n1RkKjRaQiM3FVAUGnA11hGtyq3SY/CNIaPPLN53klsPSod5jnZA4TuZZhwe0iHPO\nEwM8Ti8ziiUYA0LWC54GneKPcz0CMZCycf85eFAXNFlYw0duNruY/RvcLB+O1oug\nj2DP0uhIw89TyL2W2kvVdEBNh2lPkha3EksAOzHm6a1RkkLEj6+J7tQ6Ski2dTFz\niLSUFuYmTlWV9un1XoovF8dmewRJ2PlR+7BEKjQH0RSkMf39NoWncMG1QD2m31gH\nu6DIEw2Gck/pBKO91XTS\n\u003dWrcp\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "457a8ef7_083d07e2",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 8
      },
      "lineNbr": 408,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-08-29T16:02:21Z",
      "side": 1,
      "message": "This isn\u0027t a dry run, this is skipping a giant chunk of work.",
      "revId": "2c9e8aeccf1c36885db9ebc4b6f0b5dbbae2a2d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1178ddfe_669dce59",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 8
      },
      "lineNbr": 408,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-08-31T23:39:13Z",
      "side": 1,
      "message": "Well it comes close to it in a way that it doesn\u0027t execute the ref updates as well as not running the changeOps ?\n\nSo what would be a more appropriate flag name?\n\nMaybe `[no]PermanentChanges`, `applyPermanently` or rather descriptive on what it does `skipChangeOpsAndDryRunRefUpdates`?",
      "parentUuid": "457a8ef7_083d07e2",
      "revId": "2c9e8aeccf1c36885db9ebc4b6f0b5dbbae2a2d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1177fd47_eea23f9d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 8
      },
      "lineNbr": 408,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-09-01T19:14:11Z",
      "side": 1,
      "message": "\u003e Well it comes close to it in a way that it doesn\u0027t execute the ref updates as well as not running the changeOps ?\n\nI disagree that it comes close. The purpose of a dry run is to exercise a complex code path, but avoid any side effects. It doesn\u0027t count if you just skip exercising half of the complex code path (the updateChange half).\n\n\u003e So what would be a more appropriate flag name?\n\nI don\u0027t think it\u0027s a naming problem, I think if you want to do this you should actually implement a dry run of all of BatchUpdate. That means calling updateChange but rolling back the transactions before committing.",
      "parentUuid": "1178ddfe_669dce59",
      "revId": "2c9e8aeccf1c36885db9ebc4b6f0b5dbbae2a2d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "111e1d18_f68000fa",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 8
      },
      "lineNbr": 408,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-09-01T21:25:24Z",
      "side": 1,
      "message": "I see, so you\u0027re saying we\u0027d want to propagate the dry run flag to executeChangeOps, and there we do a local decision for each action. We also want to call listener.afterUpdateChanges();\n\nMeanwhile I refactored this to not be an internal flag any more, but we\u0027d rather put it into the SubmitInput, which carries all the flags for merging.",
      "parentUuid": "1177fd47_eea23f9d",
      "revId": "2c9e8aeccf1c36885db9ebc4b6f0b5dbbae2a2d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "910a0dd1_7aacd98c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 8
      },
      "lineNbr": 408,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-09-01T22:15:26Z",
      "side": 1,
      "message": "So I looked more into the ChangeOps part again. And for the intended use case of providing a submitPreview we do not need any of the code as it is all about modifying a change and not about calculating the desired outcome for the underlying git object.\n\nWhich is why I do think it is a naming issue. (I do not want to provide a \"dry run\" actually, but rather have an easy way to reuse all the code that deals with constructing the git objects and history.",
      "parentUuid": "111e1d18_f68000fa",
      "revId": "2c9e8aeccf1c36885db9ebc4b6f0b5dbbae2a2d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}