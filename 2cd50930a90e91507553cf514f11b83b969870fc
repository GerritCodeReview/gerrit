{
  "comments": [
    {
      "key": {
        "uuid": "98059200_7c6ad999",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyStore.java",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "Why do we need to have a `do ... while(found)` here?",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 131,
        "endChar": 22
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_bc6741cb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyStore.java",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-07-09T17:22:26Z",
      "side": 1,
      "message": "I found out the hard way that an ArmoredInputStream only reads up until the first \"---- END * ----\" block, ignoring the rest of its stream. So if we concatenate blocks together, we need to wrap a new ArmoredInputStream around each one.\n\n(In case you were wondering, BcPGPObjectFactory can also be used with other non-armored streams that definitely do contain multiple objects, like reading from a pubring.gpg file.)",
      "parentUuid": "98059200_7c6ad999",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 131,
        "endChar": 22
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_5c583d00",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyStore.java",
        "patchSetId": 2
      },
      "lineNbr": 131,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:36:25Z",
      "side": 1,
      "message": "I see, maybe you could mention the behavior of ArmoredInputStream in a comment?\n\nKnowing this behavior, I would have expected a construction like\n\n    while (in.available() \u003e 0) {\n        // ArmoredInputStream only reads one block at a time\n        Object obj : new BcPGPObjectFactory(new ArmoredInputStream(in));\n        if (obj instanceof PGPPublicKeyRing) {\n            keys.add((PGPPublicKeyRing) obj);\n        }\n    }\n\nHaving 2 loops inside each other feels weird knowing the inner loop just has one iteration. Are we working around a bug there?",
      "parentUuid": "98059200_bc6741cb",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 131,
        "endChar": 22
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_5c6f1da8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "What exactly do we verify? (This method seems to do validation as well as verification as well as reporting a list of warnings)",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_9c6485c7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-07-09T17:22:26Z",
      "side": 1,
      "message": "I\u0027m happy to explain in the class javadoc what kinds of checks we\u0027re doing.\n\nWhat distinction are you making between \"validation\" and \"verification\" here? I\u0027ve read https://en.wikipedia.org/wiki/Verification_and_validation a couple times now and I still don\u0027t think there\u0027s a meaningful difference, it sounds like standards organization mumbo jumbo to me. But if you can explain it in a way that makes sense, I\u0027ll buy it.\n\nThat said I am not going to change the set of checks this class does, nor am I going to change this method name to \"validateAndVerify\". So maybe we should just come up with a term that is not so loaded. Like \"check\".\n\nAs for reporting a list of problems, yeah, that\u0027s the output of the process. What would the output of a validation/verification process be, other than a status report of what we found?",
      "parentUuid": "98059200_5c6f1da8",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f6d649_fd5dc7f6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:36:25Z",
      "side": 1,
      "message": "That article is mumbo jumbo to me as well.\n\nSo IMHO validation is getting the formal aspects right.\n * proper formal syntax (formatting)\n * using a key which matches its ID,\n * and is not expired nor revoked\n * proper user name\n * and all the other stuff which is not \"crypto\"\n\nVerification on the other hand just answers the question:\n * Could this signature be forged or is it legit (i.e. we can be sure the holder of the key is in possession of the private key)\n * Do we trust the key (i.e. is there a chain of trust or other means we trust it) ?\n\nI admit this is still a bit hand waving, but that\u0027s the distinction I remember from classes.",
      "parentUuid": "98059200_9c6485c7",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 25
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_3c745178",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "This will allow using expired keys after 2038 (end of epoch).\nI am not sure if this code will be around at that time though. Maybe a todo note will do?",
      "range": {
        "startLine": 64,
        "startChar": 28,
        "endLine": 64,
        "endChar": 45
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f6d649_3d744f78",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-07-09T17:22:26Z",
      "side": 1,
      "message": "System.currentTimeMillis() returns a long. If it were an int, we\u0027d have been in trouble before either of us was born:\nhttps://www.google.com/search?q\u003d4+billion+milliseconds+in+days",
      "parentUuid": "98059200_3c745178",
      "range": {
        "startLine": 64,
        "startChar": 28,
        "endLine": 64,
        "endChar": 45
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_1c79956e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PublicKeyVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "Going by the code in this method, this sounds more like validateCertifications?",
      "range": {
        "startLine": 91,
        "startChar": 22,
        "endLine": 91,
        "endChar": 42
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f6d649_7d6ad799",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/PushCertificateVerifier.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "/./g./",
      "range": {
        "startLine": 102,
        "startChar": 40,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98059200_fc5dc9f6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/gpg/VerificationResult.java",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-07-09T17:08:17Z",
      "side": 1,
      "message": "I am debating whether this should be `isVerified()`, although this includes both problems of validation and verification.",
      "range": {
        "startLine": 38,
        "startChar": 17,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "2cd50930a90e91507553cf514f11b83b969870fc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}