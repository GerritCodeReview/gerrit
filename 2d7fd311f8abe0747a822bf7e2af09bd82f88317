{
  "comments": [
    {
      "key": {
        "uuid": "c1877c93_379d4ee6",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 585,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-09T23:25:55Z",
      "side": 1,
      "message": "The spacebar also toggles the state of a checkbox when it\u0027s focused. (That\u0027s the key I typically use.)\n\nI note in my other comment, though, maybe we don\u0027t want to try to track all the different keys that can change this.",
      "range": {
        "startLine": 584,
        "startChar": 6,
        "endLine": 585,
        "endChar": 39
      },
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e9fdab7_89cc32ee",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-03-09T19:14:11Z",
      "side": 1,
      "message": "Why are we setting the checked state here, instead of toggling the value of the property to which the checkbox is bound (this.resolved)?",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aeaf0be_59988b22",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2018-03-09T19:15:51Z",
      "side": 1,
      "message": "Because at this point, the value of the checkbox, and hence this.resolved has not changed yet.",
      "parentUuid": "5e9fdab7_89cc32ee",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "325353d9_d3ee2c50",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-03-09T21:31:48Z",
      "side": 1,
      "message": "I know that we have to toggle the value. Why are we changing the DOM state directly, as opposed to the bound boolean property that exists for this purpose already?",
      "parentUuid": "1aeaf0be_59988b22",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f26e89b2_5c938231",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-03-09T21:36:21Z",
      "side": 1,
      "message": "Let me explain why I think this is a problem: modifying the checkbox state directly could result in a situation in which this.resolved !\u003d\u003d this.$.resolvedCheckbox.checked, which seems like a confusing situation to me. Especially because the state is already bound.",
      "parentUuid": "325353d9_d3ee2c50",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d268eab_dbb50d94",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2018-03-09T23:05:25Z",
      "side": 1,
      "message": "Here\u0027s the issue that I need to solve\n\nThere are two scenarios that need to be accounted for:\n\n1. User takes an explicit action to toggle the checkbox. This can be either via clicking, or the enter key if focused.  In this case, this.resolved should toggle and if the draft is not being edited, it will trigger a save action\n\n2. comment.unresolved is updated externally. This can occur when syncing between one comment view to another (a comment in the diff view is marked as resolved, so the thread view will mark its as resolved also). In this case, it\u0027s already been saved, so we do not want to trigger that again.\n\nThis change separates allows the action taken to trigger the save, but still always update this.resolved when an explicit or implicit change takes place",
      "parentUuid": "f26e89b2_5c938231",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7630dd6_77a2c6fc",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-09T23:25:55Z",
      "side": 1,
      "message": "I think I share Kasper\u0027s concern. It seems like this method shouldn\u0027t need to toggle the checked state, since the browser will already do that for whichever keypress is used.\n\nWould it work if we removed the `on-tap` and `on-keydown` handlers, then in the `on-change` handler just do ..\n\n_handleResolvdChanged() {\n  this.resolved \u003d this.$.resolvedCheckbox.checked;\n},\n\n.. ? That way, the checkbox still gets updated by the binding, but even if the binding triggers an `on-change` call, the `_handleResolvdChanged` method would set the value of the underlying boolean to itself, which shouldn\u0027t cause a feedback loop.\n\nWithout the full context, it\u0027s hard for me to evaluate whether that would fix the cascading feedback loop issue, but if it would work, then we don\u0027t have to keep track of the various ways a checkbox can be toggled.",
      "parentUuid": "0d268eab_dbb50d94",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de11de13_397f9e99",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2018-03-09T23:28:49Z",
      "side": 1,
      "message": "The browser doesn\u0027t seem to be doing this though for the enter key at all, even now without this change.",
      "parentUuid": "e7630dd6_77a2c6fc",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02e9e6b8_4e2af681",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-09T23:34:25Z",
      "side": 1,
      "message": "\u003e The browser doesn\u0027t seem to be doing this though for the enter key at all, even now without this change.\n\nAt least I wasn\u0027t aware of the enter interaction for checkboxes. The spacebar does seem to work though.\n\nAt any rate, I think this lends to the argument that we might not want to manually interpret key events.",
      "parentUuid": "de11de13_397f9e99",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e9b73dc_f7cfa614",
        "filename": "polygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.js",
        "patchSetId": 5
      },
      "lineNbr": 586,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2018-03-09T23:43:07Z",
      "side": 1,
      "message": "Totally fine with the key thing. It still does cause the cascading feedback loop though. the second item tries to save it, and results in an error because it tries to save a draft with an invalid ID because the synced draft has already been updated to the new one returned by the server.\n\nhttp://recordit.co/Fuy4Dw9onO",
      "parentUuid": "02e9e6b8_4e2af681",
      "revId": "2d7fd311f8abe0747a822bf7e2af09bd82f88317",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}