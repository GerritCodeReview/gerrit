{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0cadf5c1_8a4a3b27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-09-13T16:22:11Z",
      "side": 1,
      "message": "FYI, there are some changes to AndSource on stable-3.4 that will conflict with this. We\u0027re working to merge them up [1] now so that you\u0027re not blocked here and the merge doesn\u0027t end up messier than necessary.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/344234",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2746e9e4_1b02bd21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-09-14T09:34:13Z",
      "side": 1,
      "message": "OK, thanks for the FYI. I can wait a bit. Do you have an estimate when this can be merged in master?",
      "parentUuid": "0cadf5c1_8a4a3b27",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12d26da5_a3b5b8eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-09-14T18:26:30Z",
      "side": 1,
      "message": "The 3.5 stuff should be done today (added some tests that were harder to add on 3.4) and a 3.6 merge up for review today or early tomorrow. master should be very soon after that.",
      "parentUuid": "2746e9e4_1b02bd21",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "718a2575_17cb60a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-09-15T04:16:25Z",
      "side": 1,
      "message": "Actually got it all done today, master merge was https://gerrit-review.googlesource.com/c/gerrit/+/345695",
      "parentUuid": "12d26da5_a3b5b8eb",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79aa0209_1f429f20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2022-10-12T12:42:06Z",
      "side": 1,
      "message": "This was a cool idea, I know we could definitely make use of it to look up changes in our bug tracker in bulk.\n\n\u003e See attached bug for more info.\n\nThe bug link doesn\u0027t work. ðŸ˜ž",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "819c0cb8_4e369cf9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-10-12T12:58:51Z",
      "side": 1,
      "message": "Hi Martin, the reason I abandoned this change is that it was needed as part of the series (the 4 linked changes) to move the \u0027edits\u0027 field outside of the change index. Now that we don\u0027t need to proceed with these series right now, I abandoned.\n\n\u003e This was a cool idea, I know we could definitely make use of it to look up changes in our bug tracker in bulk.\n\nPer my understanding, change search does not hit the match methods, but rather uses the field name and value available in the predicate. The match (and matchAll of this change) methods should\u0027ve been called since the EditPredicate is a \u0027post filter predicate\u0027 and I needed to implement it to optimise the matching for multiple changes at once.\n\nHow do you think this is needed? Happy to receive your feedback and re-consider this feature if it\u0027s going to be useful.\n\n\u003e The bug link doesn\u0027t work.\n\nUnfortunately, the link is google internal. Pasting my analysis in the attached bug here at the end for your reference.\n\n--\n\n\nWe discussed this FR in the team meeting. Pasting the main points for future reference:\n\nHere are the important points / concerns:\n\n* do we really need to move edits out of the index? What\u0027s the benefit? consensus: no clear benefit compared to e.g. drafts, nice to have. It\u0027s OK to leave edits in the index. This is no blocker for the \u003cindexing backend migration at Google\u003e.\n\n* concern: are we OK with the new restriction (has:edit query will return changes where user is in {owner, reviewer, cc})? consensus: look at existing data and verify that this assumption is OK.\n\n* concern: what if I have an edit, and I\u0027m e.g. in CC, then someone removed me from CC. Should the edit be automatically removed? should removing from CC be disallowed? consensus: we didn\u0027t reach an agreement here. one suggestion is to do just nothing and the change will not be returned in has:edit queries. claim: user needs to re-add themselves as CC, reply: but user can\u0027t know these change IDs because has:edit will no longer match with the change ... Â¯_(ãƒ„)_/Â¯\n\nPoint 3 might overcomplicate this FR more than needed hence might not justify the extra effort.",
      "parentUuid": "79aa0209_1f429f20",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b01c771c_76116b1d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2022-10-12T16:04:37Z",
      "side": 1,
      "message": "\u003e Hi Martin, the reason I abandoned this change is that it was needed as part of the series (the 4 linked changes) to move the \u0027edits\u0027 field outside of the change index. Now that we don\u0027t need to proceed with these series right now, I abandoned.\n\nMakes sense.\n\n\u003e \u003e This was a cool idea, I know we could definitely make use of it to look up changes in our bug tracker in bulk.\n\u003e \n\u003e Per my understanding, change search does not hit the match methods, but rather uses the field name and value available in the predicate. The match (and matchAll of this change) methods should\u0027ve been called since the EditPredicate is a \u0027post filter predicate\u0027 and I needed to implement it to optimise the matching for multiple changes at once.\n\nI think that is only true of index predicates. We have many plugin provided predicates which are not index predicates and they rely on match being called (and it works).\n\n\u003e How do you think this is needed? Happy to receive your feedback and re-consider this feature if it\u0027s going to be useful.\n\nWe have a bug tracker which stores changes in a DB. If want to search on changes associated with a bug, it requires querying the DB with something like \"SELECT change_number FROM bugtable WHERE change_number \u003d ?\". If that query is done in the match for each change, that ends up being a round trip to the DB for each change. However, if we try to get all the changes with bugs like this \"SELECT change_number FROM bugtable\" we can get all the changes with bugs in one query up front, but that takes a long time ~10s because we have a lot of changes with bugs. With a matchAll(List\u003cChangeData\u003e) interface, we could instead do something a single query like \"SELECT change_number FROM bugtable WHERE change_number in (?, ?, ?, ...)\" up front, and that would be fast since it would be a restricted set. \n\n\u003e Unfortunately, the link is google internal. Pasting my analysis in the attached bug here at the end for your reference.\n\nThanks.",
      "parentUuid": "819c0cb8_4e369cf9",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90185d25_c80ddecb",
        "filename": "java/com/google/gerrit/index/query/OrPredicate.java",
        "patchSetId": 12
      },
      "lineNbr": 113,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2022-09-14T02:06:14Z",
      "side": 1,
      "message": "This would be a lot cheaper if inputSet were a LinkedHashSet.",
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d73f3485_5c9cdef5",
        "filename": "java/com/google/gerrit/index/query/OrPredicate.java",
        "patchSetId": 12
      },
      "lineNbr": 115,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2022-09-14T02:06:14Z",
      "side": 1,
      "message": "I don\u0027t think order will be maintained if you return this. Probably better to make resultSet a HashSet, and then iterate over objects and return those in resultSet?",
      "range": {
        "startLine": 115,
        "startChar": 11,
        "endLine": 115,
        "endChar": 20
      },
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8b6976_6407b84c",
        "filename": "java/com/google/gerrit/server/query/change/EditPredicate.java",
        "patchSetId": 12
      },
      "lineNbr": 74,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2022-09-14T02:06:14Z",
      "side": 1,
      "message": "Here also order is not maintained?",
      "range": {
        "startLine": 74,
        "startChar": 11,
        "endLine": 74,
        "endChar": 17
      },
      "revId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f23edf9d54bcf79b3401daa1726f76678e8bc6a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}