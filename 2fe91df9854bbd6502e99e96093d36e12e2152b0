{
  "comments": [
    {
      "key": {
        "uuid": "9433cdd6_4a1933c9",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/SubmittedTogetherIT.java",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-06-16T01:47:00Z",
      "side": 1,
      "message": "Isn\u0027t it possible to use exception.expect(..) and exception.expectMessage(...) here?",
      "range": {
        "startLine": 137,
        "startChar": 6,
        "endLine": 144,
        "endChar": 7
      },
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_7485481b",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/SubmittedTogetherIT.java",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-06-16T18:11:02Z",
      "side": 1,
      "message": "Those are expectations over e, not over e.getCause(). There is expectCause(Matcher) but IMHO using Hamcrest matchers does not improve readability over this explicit try/catch/assert.\n\nHowever, that said: I am not sure why this code is catching Exception and asserting over the cause. What is the expected type of e? Is it not AuthException? This code would allow it to be pretty much anything.",
      "parentUuid": "9433cdd6_4a1933c9",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_348fd03d",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/SubmittedTogetherIT.java",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-06-16T18:25:10Z",
      "side": 1,
      "message": "It\u0027s because the extension API (ChangeApiImpl) catches the RestApiException from the underlying API call and wraps it in another RestApiException. Which is IMHO a bug (but I didn\u0027t want to bite off too much at once in a single change).\n\nI\u0027ll change this to catch RestApiException instead of Exception.",
      "parentUuid": "c91e8c59_7485481b",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_d4953c46",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/SubmittedTogetherIT.java",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-06-16T18:27:42Z",
      "side": 1,
      "message": "\u003e Which is IMHO a bug\n\nAgreed, elsewhere we don\u0027t wrap those.",
      "parentUuid": "c91e8c59_348fd03d",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "542dd575_68e8c3af",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/SubmittedTogether.java",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-06-16T01:47:00Z",
      "side": 1,
      "message": "\"that you cannot see\"?",
      "range": {
        "startLine": 108,
        "startChar": 51,
        "endLine": 108,
        "endChar": 65
      },
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_1494d449",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeSuperSet.java",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-06-16T18:24:51Z",
      "side": 1,
      "message": "As I pointed out in the original attempt, this can produce different results if an invisible change would have brought in new visible ancestors.\n\nIn the interest of avoiding 500s I could be convinced to allow this, but I would like a comment and/or TODO explaining the situation.",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_74fe6875",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeSuperSet.java",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-06-16T21:14:18Z",
      "side": 1,
      "message": "Can you elaborate more? I agree this is a behavior change --- previously it would 500 if an invisible change would have brought in new visible ancestors, and now it would produce a result instead. The question is what that result should be.\n\nAre you saying that it\u0027s misleading to say \"... and additional changes which are not visible to you\" when the set of changes to be submitted together would actually also contain additional changes which are visible to the current user? I wanted to avoid the user being able to learn additional information about non-visible changes through this endpoint, so I stopped traversal there.\n\nFor example, suppose PublicTeam made a public change with no topic:\n\n X --- introduce time travel interface\n\nIt\u0027s an april fools day joke change that introduces an API for time travel. It is open and unsubmitted. Now SuperSecretTeam makes a private (e.g., draft) commit\n\n Y --- implement time travel interface\n\non top of X that implements that interface. They set the topic to \"topic\" because they\u0027re not very creative.\n\nNow I make my own change with topic \"topic\". Should the \"submitted together\" display tell me that someone else has a change with the same topic depending on the time travel interface? I think that leaks too much information.\n\nI\u0027m about to upload a patch that would expose the number of non-visible changes that would be submitted together. It includes X in that count --- even though I can see the change, the fact of it being submitted together is not visible to me.",
      "parentUuid": "c91e8c59_1494d449",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c91e8c59_7421c802",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeSuperSet.java",
        "patchSetId": 2
      },
      "lineNbr": 195,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2016-06-16T22:36:34Z",
      "side": 1,
      "message": "More precisely, before it would 500 and now it would 403. But a later patch in the series returns a result when you pass o\u003dNON_VISIBLE_CHANGES.",
      "parentUuid": "c91e8c59_74fe6875",
      "revId": "2fe91df9854bbd6502e99e96093d36e12e2152b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}