{
  "comments": [
    {
      "key": {
        "uuid": "a83cd000_193b628a",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-29T21:26:56Z",
      "side": 1,
      "message": "Why not using directly the same GsonBuilder of the StreamEvents?",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 48,
        "endChar": 20
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04b415f6_bc81688c",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-04-29T23:06:34Z",
      "side": 1,
      "message": "I did that in master. In the stable branches, I wanted to limit the set of affected files, to make it easier to cherry-pick while reducing the risk of merge conflicts.",
      "parentUuid": "a83cd000_193b628a",
      "range": {
        "startLine": 44,
        "startChar": 0,
        "endLine": 48,
        "endChar": 20
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa64f9b7_6c75281b",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-29T21:26:56Z",
      "side": 1,
      "message": "Out of curiosity: why is this needed?",
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af449649_45d3c8e5",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-29T21:27:30Z",
      "side": 1,
      "message": "Gotcha, to get a consistent timestamp value :-)",
      "parentUuid": "aa64f9b7_6c75281b",
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09af1ad5_7b2f69bd",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-04-29T23:06:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "af449649_45d3c8e5",
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3389ddaf_fae96c3a",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-29T21:26:56Z",
      "side": 1,
      "message": "It would be useful to have all those literals as shared constant fixtures in the test.",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb4b9bc0_610caf45",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-04-29T23:06:34Z",
      "side": 1,
      "message": "What do you have in mind? Personally I like the explicitness of only having string constants in the JSON objects.",
      "parentUuid": "3389ddaf_fae96c3a",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2e4cd9e_5435c76f",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-30T16:25:51Z",
      "side": 1,
      "message": "Yes, constants are fine, just literals copy \u0026 pasted all around would be subject to typos.\n\nExample:\n\n  public static final SOME_USER_AT_DOMAIN \u003d \"some.user@domain.com\"\n\nIf you have a typo, then it won\u0027t compile at all :-)",
      "parentUuid": "eb4b9bc0_610caf45",
      "range": {
        "startLine": 64,
        "startChar": 29,
        "endLine": 64,
        "endChar": 51
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c56b7c3_a76fece6",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-29T21:26:56Z",
      "side": 1,
      "message": "This is very elegant, however less readable than plan JSON text that could be checked against the one generated by a simple \u0027gerrit stream-events\u0027 command.\n\nWhy not using JSONAssert?",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d174918_f3ad8874",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-04-29T23:06:34Z",
      "side": 1,
      "message": "\u003e This is very elegant, however less readable than plan JSON text that could be checked against the one generated by a simple \u0027gerrit stream-events\u0027 command.\n\nPersonally I don\u0027t find JSON string literals in Java particularly readable, mostly because the lack of raw string literals means you have a zillion \\\"s.\n\nThat said, of the two concerns noted in the implementation of assertThatJsonMap, readability is the lesser of the two. The bigger issue is that Gson relies on Java field iteration and therefore the ordering of elements is not guaranteed.\n\n\u003e Why not using JSONAssert?\n\nNeat, I had never heard of JSONAssert. Unfortunately, we don\u0027t currently have it imported at Google, so waiting on that would further delay fixing the regression in master.\n\nAlso, I am not 100% convinced that the JSON string literals are more readable. Less boilerplate, sure. But if you look at the example in JSONAssert\u0027s own documentation (https://github.com/skyscreamer/JSONassert#error-messages), I would argue that that is in fact less readable than what I have here.\n\nOne thing we could do to improve readability here would be:\n\n .isEqualTo(\n     ImmutableMap.builder()\n         .put(\"submitter\", ImmutableMap.of(\"email, \"some.user@domain.com\"))\n         .put...\n\n(I actually thought that google-java-format would pair up key/values on the same line, but apparently not.)\n\nOr even:\n\n .isEqualTo(\n     mapBuilder()\n         .put(\"submitter\", map(\"email\", \"some.user@domain.com\"))",
      "parentUuid": "3c56b7c3_a76fece6",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "037fe092_07dfd7bf",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-04-30T16:23:01Z",
      "side": 1,
      "message": "Hopefully PS2 is more readable. We can continue the discussion about whether to add JSONAssert as a dependency in master, but I don\u0027t think we want to add it to stable-2.16 in any case.",
      "parentUuid": "5d174918_f3ad8874",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 76,
        "endChar": 25
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90e9e0cb_d9acb6da",
        "filename": "javatests/com/google/gerrit/server/events/EventJsonTest.java",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-30T16:25:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "037fe092_07dfd7bf",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "30527cbe7ce14a9c7b9184a54126b027c02ab4a3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}