{
  "comments": [
    {
      "key": {
        "uuid": "a765b216_f6b7e3b7",
        "filename": "java/com/google/gerrit/acceptance/AbstractDaemonTest.java",
        "patchSetId": 4
      },
      "lineNbr": 905,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-16T16:52:07Z",
      "side": 1,
      "message": "Nit: Here and below, could be a static import.",
      "range": {
        "startLine": 905,
        "startChar": 28,
        "endLine": 905,
        "endChar": 45
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0df943c2_d139d585",
        "filename": "java/com/google/gerrit/acceptance/AbstractDaemonTest.java",
        "patchSetId": 4
      },
      "lineNbr": 905,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-17T08:09:58Z",
      "side": 1,
      "message": "No actually, because there is already an allow method in this class. (I think this behavior changed in Java 8.)",
      "parentUuid": "a765b216_f6b7e3b7",
      "range": {
        "startLine": 905,
        "startChar": 28,
        "endLine": 905,
        "endChar": 45
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56ae0b3f_6e9c1785",
        "filename": "java/com/google/gerrit/acceptance/AbstractDaemonTest.java",
        "patchSetId": 4
      },
      "lineNbr": 905,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-17T10:35:34Z",
      "side": 1,
      "message": "Well, what you\u0027re referring to is only an issue if the names are the same. In this case, we don\u0027t have a method named allowCapability(..) somewhere else in this class. Hence, we could omit it. For other methods (like some allow() ones), we certainly have the issue you described. I\u0027m also fine if we don\u0027t care about those imports in this series and switch to static imports later (after the removal of the methods in AbstractDaemonTest) whenever we stumble upon them in tests.",
      "parentUuid": "0df943c2_d139d585",
      "range": {
        "startLine": 905,
        "startChar": 28,
        "endLine": 905,
        "endChar": 45
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49412ab2_f473214b",
        "filename": "java/com/google/gerrit/acceptance/AbstractDaemonTest.java",
        "patchSetId": 4
      },
      "lineNbr": 905,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-17T11:05:43Z",
      "side": 1,
      "message": "Ah, I missed that this line was allowCapability and not allow.\n\nBy the end of this series I have already cleaned up almost all of them:\n\n $ git grep \u0027TestProjectUpdate\\.[a-zA-Z]\\+(\u0027 94ef00d923775ae7c17208c4bc2aba0dce981af1\n 94ef00d923775ae7c17208c4bc2aba0dce981af1:java/com/google/gerrit/acceptance/testsuite/project/ProjectOperationsImpl.java:      return TestProjectUpdate.builder(this::updateProject);\n 94ef00d923775ae7c17208c4bc2aba0dce981af1:java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java:    return new AutoValue_TestProjectUpdate.Builder().projectUpdater(projectUpdater);\n 94ef00d923775ae7c17208c4bc2aba0dce981af1:javatests/com/google/gerrit/acceptance/testsuite/project/ProjectOperationsImplTest.java:        TestProjectUpdate.allow(Permission.ABANDON).ref(\"refs/foo\").group(REGISTERED_USERS).build();",
      "parentUuid": "56ae0b3f_6e9c1785",
      "range": {
        "startLine": 905,
        "startChar": 28,
        "endLine": 905,
        "endChar": 45
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd26059f_9ce1e4e3",
        "filename": "java/com/google/gerrit/acceptance/AbstractDaemonTest.java",
        "patchSetId": 4
      },
      "lineNbr": 905,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-17T12:12:03Z",
      "side": 1,
      "message": "Great. üëç",
      "parentUuid": "49412ab2_f473214b",
      "range": {
        "startLine": 905,
        "startChar": 28,
        "endLine": 905,
        "endChar": 45
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4faed0aa_b836da18",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/ProjectOperationsImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-17T08:09:58Z",
      "side": 1,
      "message": "Also made this a for loop for consistency.",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ae38e4d_8558f4ae",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/ProjectOperationsImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 136,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-17T10:35:34Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "4faed0aa_b836da18",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab41f5b4_9f9fd13f",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-16T16:52:07Z",
      "side": 1,
      "message": "Would it make sense to check here that a capability really allows to define a range if a range is provided (via GlobalCapability#hasRange)? On the other hand, silently ignoring the set range would also be fine in my opinion. Especially for the latter, it would be good to have a test which guarantees the desired the behavior.",
      "range": {
        "startLine": 80,
        "startChar": 28,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346f60ff_a1012897",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-17T08:09:58Z",
      "side": 1,
      "message": "I think having that check somewhere would be reasonable. I also think that if we have that check, it should live in the same place as the WithDefaults computation. In other words, given your comment below, we should but both the hasRange and getRange here, or put them both in ProjectOperationsImpl. Either the AutoValue is a completely dumb value type that doesn\u0027t know anything about capability ranges, or it knows everything about all the capability ranges supported by Gerrit.\n\nI am leaning towards leaving both checks in this class, since the total set of behavior living here is still pretty small.\n\nI agree there should be a test. As in the previous change, I\u0027ll work on small tests after finishing the rest of the rebase.",
      "parentUuid": "ab41f5b4_9f9fd13f",
      "range": {
        "startLine": 80,
        "startChar": 28,
        "endLine": 80,
        "endChar": 33
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9472c6d_7892a96c",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-17T10:35:34Z",
      "side": 1,
      "message": "SGTM. Let\u0027s include the hasRange check here and keep the other code.",
      "parentUuid": "346f60ff_a1012897",
      "range": {
        "startLine": 80,
        "startChar": 28,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92fe3295_40bd91f7",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-16T16:52:07Z",
      "side": 1,
      "message": "Would it be possible to move this logic into ProjectOperationsImpl (e.g. use Optional\u003cInteger\u003e for min() and max() within the AutoValue)?",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 87,
        "endChar": 9
      },
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa06acb_131100d0",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 4
      },
      "lineNbr": 87,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-17T08:09:58Z",
      "side": 1,
      "message": "See previous comment.",
      "parentUuid": "92fe3295_40bd91f7",
      "range": {
        "startLine": 81,
        "startChar": 8,
        "endLine": 87,
        "endChar": 9
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "31037ab49295d3ed228ef4181e6ef6eb450a24dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}