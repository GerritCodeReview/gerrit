{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1552516136 -0700\nnonce AC6AUtNdVi7DxINX1D9sHkakTwAAFIQYMFQdojpfKwlw7elvFslooLlscu9TvoOWVbBAx7sAtdnJ\n\n0000000000000000000000000000000000000000 32da182b55e804a0211dbf281fcbdb1c2ba44cd8 refs/for/master%r\u003dekempin@google.com,r\u003dmfick\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlyJhCgVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMlhYP/Rn8recJJfpcUCdIXY+s+wOb78YG\nUcSjLcPMNB/HuDnpSdw815slHQYtC1VAu4y49x6ZT6590eYaA3wNSFi4VtjWR6y0\nwPSFO1lLphGU59MBv1gJjQx+4OgSOX74Grc4Gq/sAWpZhfjwgsm5AiY3aDON2IoL\n2ebUpV58ytGoygKLZ0QErCo9u0Uj9rchoQS6of7iUbfj9KDD+3xC46gxAur3jTJA\nADzLJZ2kr2g1zlY/0Zi4BEhLgaKYjMqV9MKfPsu+HfrKbl8fD1w6Q/AbFL4ASeev\nRT361K3pTEr+JiNGkjKLRjp9G9KtQjHpAkkvUexAkIT4OQKm5btVCJtkJTEtkwoO\n9qntVCoUM/vmQhWpQWw2hc0D00hhlk9apag5W6xOqCPgnt40poRjSpic8WixOy2t\nGGctavXzUTKNdn84px223QoBM4ZveKp6J2q1DTc4Iu2KKc10v8O9UZtv1JAQOJdF\nxQFLuQGHyY8zPXNV5AlbHBZbSh7h/QqK9KnkDKlwgr5SgKu+0BP21AogbU9z4qZB\ndkqYVR0tJ0qmsYAwcpTsKXbN/LU87foi+0br148eLe8WL0hrRGtXaifds/XmU0Hw\nSVlK5mMuP1ZOIK1fzOClBxonOxqjFXF//4Ux7hccix9l6zssvqCiN5qPGuRr4rEa\nV0G7kvDvq2DTNhHY\n\u003d9YOH\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "5124ff95_30fdf540",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-03-14T00:04:53Z",
      "side": 1,
      "message": "The downside here is that if the plugin has a higher latency, it will affect the change screen loading time and that screen is the most loaded screen.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 69
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e46e1db2_2349059f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T14:21:27Z",
      "side": 1,
      "message": "Sure. It\u0027s still up to the plugin author to decide which approach is going to have better performance.\n\nI will point out that if the plugin code is fast enough to produce results for N changes on the dashboard (e.g. it has some kind of cache), it\u0027s also likely fast enough to produce results for a single change on the change screen.",
      "parentUuid": "5124ff95_30fdf540",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 69
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53dab8e8_d8936d46",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-03-14T00:04:53Z",
      "side": 1,
      "message": "Perhaps a different solution would be to allow plugins to annotate there factory with the places they want it \"considered\"\n\nAlso for queries, we tend to makes someone have to add a switch to make a plugin add data, so plugins can always use this as the differentiator.",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8c52b5f_77946694",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T14:21:27Z",
      "side": 1,
      "message": "Interesting idea. I\u0027ll give that a shot.\n\nI don\u0027t want to require an annotation on the factory type itself, because right now it works just fine if the factory is a lambda. But I think we can do this with export names, like we already do for DynamicBeans.",
      "parentUuid": "53dab8e8_d8936d46",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c8f5afd_26be75af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T15:17:51Z",
      "side": 1,
      "message": "BTW forgot to respond to:\n\n\u003e Also for queries, we tend to makes someone have to add a switch to make a plugin add data, so plugins can always use this as the differentiator.\n\nYou mean pass one switch in the query path and a different switch in the get path? That would work in theory. But my first guess as a user would be for the switch to be the same. If I want the \"foo\" field, you pass \"--myplugin-foo\", regardless of which endpoint I\u0027m hitting. It\u0027d feel weird to have to pass \"--myplugin-query-foo\" in query and \"--myplugin-get-foo\" in get.",
      "parentUuid": "a8c52b5f_77946694",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e3455b4_caca1947",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T15:23:41Z",
      "side": 1,
      "message": "Summing up, here are the proposals so far:\n\n1. Separate interfaces with the same name and similar methods.\n\n2. Single interface, explicit Context option to the #create method.\n\n3. Single interface, plugins declare which codepaths to support via .annotatedWith(Exports.named(...))\n\n4. Single interface, plugins declare which codepaths to support via custom annotation on the impl class.\n\nI\u0027ve documented various specific downsides of these proposals elsewhere, so let\u0027s take a step back and look at a bigger picture.\n\nIMO the major advantage of 1/2 (especially 2) compared to 3/4 is less magic. If I\u0027m a plugin author and I want to distinguish between the get/query codepaths, I don\u0027t have to go back to the plugin docs and look up the name of the annotation or the classname I need to export. I get all the information I need from the interface itself. It\u0027s obvious that ChangeQueryProcessor.ChangeAttributeFactory/Context.QUERY is about query, and GetChange.ChangeAttributeFactory/Context.GET is about get.",
      "parentUuid": "9c8f5afd_26be75af",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fd7ffc_089a57ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-03-14T15:32:38Z",
      "side": 1,
      "message": "I am not sure why you would want your factory to behave differently in different contexts. My point about the switch was not to make it behave differently in different contexts, but rather whether to output data or not. In other words, the behavior should always be the same for a specific switch, regardless of context, and if you want different data, send a different switch. If you want no data, don\u0027t send a switch.",
      "parentUuid": "3e3455b4_caca1947",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4dc3e8_95ee8308",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T15:41:31Z",
      "side": 1,
      "message": "I see. IIUC what you\u0027re saying is you would prefer:\n\n5. Single interface, identical behavior in all codepaths. Callers can control behavior with an explicit option rather than depending on the context.\n\nAm I interpreting correctly?\n\nThe use case we have is we have a single field we want to add, where:\n\n* On the dashboard we want to populate the field from a cache (eventually from an index once we figure out how to do that), for fast performance at the risk of staleness.\n* On the change screen we want to reread the field from primary storage. This is too slow to do for N changes on the dashboard, but not absolutely slow so we\u0027re not worried about adding latency to /detail.\n\nI think our implementation will not be especially complicated under any of these proposals, so I\u0027m happy to go with (5) if that\u0027s your preference.",
      "parentUuid": "44fd7ffc_089a57ed",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ac287a_5cac9215",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-03-14T16:42:51Z",
      "side": 1,
      "message": "Yes, that was my preference because it seems cleaner and yet still flexible with less implied behavior.\n\nI suspect that even for speed, you could always just add a --cache... switch if needed in the dashboard path. Would your dashboard concerns go away if you had a bulk interface? i.e. could you prefetch the data for all the changes in parallel instead of caching it?",
      "parentUuid": "9f4dc3e8_95ee8308",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befaebb1_63343ac0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T16:52:14Z",
      "side": 1,
      "message": "\u003e Yes, that was my preference because it seems cleaner and yet still flexible with less implied behavior.\n\nThanks for the discussion, I\u0027ll go ahead with this.\n\n\u003e Would your dashboard concerns go away if you had a bulk interface?\n\nUnfortunately no. We need to read data from a repo (NoteDb), and opening arbitrarily many repos in a single request path is problematic.\n\n(I\u0027m in no way opposed to a bulk interface, though.)",
      "parentUuid": "92ac287a_5cac9215",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aacaa0a4_6eb9e608",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-15T16:03:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "befaebb1_63343ac0",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 23
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "419abaf4_c05107b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-03-14T00:04:53Z",
      "side": 1,
      "message": "single.\n\nWe could always support both APIs for queries, that way for simple cases the code can be shared for queries and single changes.",
      "range": {
        "startLine": 44,
        "startChar": 3,
        "endLine": 44,
        "endChar": 9
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45008467_b24402f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-14T14:21:27Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "419abaf4_c05107b7",
      "range": {
        "startLine": 44,
        "startChar": 3,
        "endLine": 44,
        "endChar": 9
      },
      "revId": "32da182b55e804a0211dbf281fcbdb1c2ba44cd8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}