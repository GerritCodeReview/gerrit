{
  "comments": [
    {
      "key": {
        "uuid": "2401a0b5_65cf6974",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-11T12:22:30Z",
      "side": 1,
      "message": "There is a three-in-one proposal here:\n\n* 1. Drop draft changes and draft patch set workflow\n* 2. Extend Edits feature set\n* 3. Introduce unconditionally (!) private changes workflow in Gerrit core (!)\n\nI have concerns, that we are replacing one hard-coded crap workflow, that nobody seems to need, with another one in Gerrit core (!). I object to add it unconditionally. It took years to be able to disable draft workflow in all channels: GIT, UI, REST per configuration.\n\nNote, that other alternative change workflows, like WIP-workflow, is what is urgently needed for open source projects, like OpenStack and LibreOffice, see the wip-plugin implementation: [1]. FTR: I extracted this plugin implementation from another abandoned attempt, done by OpenStack infra team to add such a featue to Gerrit core. Thousands developers, working on the same projects produce hundreds of changes per day and it\u0027s incredibly hard to keep track of what to review in dashboard. WIP bit can be set and unset and as the consequence wip changes disappear from the reviewer\u0027s dashboard.\n\nI don\u0027t fully understand what exactly problem you are trying to solve with private changes feature (if you want to duscuss something secret with your colleague about specific change, talk to her offline, done), but I already have strong impression that none of open source projects I\u0027m aware of (OpenStack, LibreOffice and other) and non open source Gerrit customers, I\u0027m aware of, would ever need it.\n\nThat why I\u0027m sceptical to add it in Gerrit core. If you really need \"private changes workflow\" (can you point me to some public feature requests, discussions, previous attempts to introduce that feature, abandoned changes?) then consider implementing it as a plugin. Of course that would require some efforts. But get right once this support for generic worflows approach could be re-used for different worklfows implementations, like mentioned WIP workflow and would be a huge step forward for this project.\n\nOswald Buddenhagen, told us during Gerri hackathon in Berlin last year, that for QT project he needs stage-tracking workflow per change level: Development, Integration, Pre-Production, Production. After some discussion during the hackaton, we agreed, to enable plugins to contribute to secondary index fields and Dave wrote proposal to repo-discuss what would be needed to make it possible.\n\nMoreover, Dave added this interesting extenion point for visitor pattern in ActionInfos before returning: [2]. ReceiveCommits would need to be extended to allow to set plugin-provided secondary index bits on push, like in:\n\n $ git push origin HEAD:refs/for/master%private-changes-workflow-plugin:private\n $ git push origin HEAD:refs/for/master%private-changes-workflow-plugin:promote-to-public\n $ git push origin HEAD:refs/for/master%private-changes-workflow-plugin:demote-to-private\n\nWith visitor pattern filtering, similar to: [2], ChangeJson could filter the changes marked by the plugins, based on visibility check for current user or (what not),  returned to change list and change screen.\n\nIn the end, instead of disabling/enabling different supported worklows in gerrit config offered in core:\n\n* changes.stage_tracking_workflow \u003d off\n* changes.private_change_workflow \u003d off\n* changes.wip_workflow \u003d on\n\nsite admin just say:\n\n  cp wip-wokflow-plugin.jar \u003cgerrit_site\u003e/plugins\n\nDone.\n\n* [1] https://gerrit.googlesource.com/plugins/wip/+/master/src/main/resources/Documentation/about.md\n* [2] https://gerrit-review.googlesource.com/#/c/91571/",
      "range": {
        "startLine": 7,
        "startChar": 10,
        "endLine": 7,
        "endChar": 55
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edf8c3a9_79096e12",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-12T19:20:01Z",
      "side": 1,
      "message": "\u003e FTR: I extracted this [WIP] plugin implementation from another abandoned attempt, done by OpenStack infra team to add such a featue to Gerrit core.\n\nI missed to add a pointer to David Shrewsbury\u0027s WIP implementation in gerrit core 4 years ago: [1], that wasn\u0027t accepted; it is also meaningful to read Monty Taylor\u0027s (OpenStack Infra Team Lead) explanation for \"Why OpenStack project requires that feature\": [2].\n\n\u003e [...] can you point me to some public feature requests, discussions, previous attempts to introduce that feature, abandoned changes?\n\nFound it in our issue tracker: \"Protected code reviews\": [3]. Is it justified that it is marked as restricted? Link it to this CL? So, seems like other code review systems at Google had this feature in the past.\n\nStill, it is a good idea to check \"What Your Competitors Are Doing\", before adding yet another feature. So, where is the \"private issues or pull requests for public repositories\" feature on GitHub? Here: [4]. That feature request wasn\u0027t even accepted. So, IMHO, \"private/protected changes feature\" is not a core gerrit feature, and could be added as a plugin.\n\n* [1] https://gerrit-review.googlesource.com/36091\n* [2] https://gerrit-review.googlesource.com/#/c/36091/1//COMMIT_MSG@7\n* [3] https://bugs.chromium.org/p/gerrit/issues/detail?id\u003d4537\n* [4] https://github.com/isaacs/github/issues/37",
      "parentUuid": "2401a0b5_65cf6974",
      "range": {
        "startLine": 7,
        "startChar": 10,
        "endLine": 7,
        "endChar": 55
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dcda962_e29e1f8d",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-17T08:05:18Z",
      "side": 1,
      "message": "Note to the reviewers: There are two alternative porposlas for repacing/fixing current draft workflow: from PolyGerrit Team and me.\n\n* [1] https://gerrit-review.googlesource.com/#/c/97490/ reviewable patch set. Different implementation details for current draft workflow, that emulate review workflow for existing code review system at Google in Gerrit Code Review. Most important different to this proposal, the reviewable bit is set on patch set level, allowing me to hide intermediate (or called non reviewable) pach set from the world. It also introduces a concept of soft/hard privacy.\n* [2] https://gerrit-review.googlesource.com/#/c/97245/ straight forward WIP workflow, without privacy aspect from: [1]. Main difference, suggested bit/state is on cange level. soft/hard privacy aspect wasn\u0027t considered, but cuold be easily added, made configurable.\n\nAll in one, it is unfortunate, that the alternative proposals were published later as this one. I think that [1] and [2] (probably merged) better fit the needs of gerrit community. Private change workflow (security issues), is highly specialized workflow and it\u0027s not obvious to me, that something very basic and needed by everyone should be solved by something highly specialized, needed by 2 people from security team. Code review system is software for collaboration. The whole aspect of top secrecy, soft or hard privacy, conspiracy feels very wrong to me in this context. And it feels very broken to me to build draft/work-in-progress workflow on top of it.\n\nHere are the major proposal problems, or even bugs I\u0027ve found, why I think this proposal is not suited as a replacement for current draft workflow. It\u0027s also meaningfull to read: [1], [2], [3] and discussion on those changes before making the decision how to proceeed.\n\n* (A) Major problem with this proposal: Because the private bit can be flipped back and force in every step of workflow process, it will lead to obscure behaviour: public change that I as a non reviewer can see and even write a comment to, but havn\u0027t voted yet, and thus am not a reviewer. It will be hidden from me, after the change owner flipped the private bit. Of course, someone could just remove a change, that is possible now, but it\u0027s different, because, after flipping the private bit to public again, it will show up again.\n\n* (B) Next major problem with this proposal: replacement of draft patch set with change edits is simply wrong and broken proposal. I\u0027m surprized, that this proposal bug wasn\u0027t seen and discovered earlier by reviewers who commented on that change. I seriously recommend to every one, stop here, take a cup of coffee and read Logan\u0027s proposal! See Logan\u0027s proposal how to get it right: I do stage my changes not only for me, I could do that with gitk/git show, I do it for the tool chains: CI, lints, robots. For example LibreOffice is built on multiple platforms, that the change owner doesn\u0027t posses (nobody has Windows_32 bit|Windows_64 bit VMs here). Yet, the change owner would like to have a chance to fix all problems on all platforms the tools reported and polish her change before the reviewers will look at it. Yet, CI doesn\u0027t see my change edit. Also note that change edits concept cannot be unconditionally \"fixed\" to be visible from CI. During I work on change edit, and press 100 times save button, the CI (with dozen verification plattforms) must *not* start, as it would be too expensive, and not every project has its own cloud, but pay the provider bills from public donations. Avoid using the change edits altogether, and just using private change phase alone wouldn\u0027t solve the staging proposal bug either. Why? It\u0027s hard to see why, but it would only work once (before adding the reviewers) and never again: \n\n* 1. Upload private change (no change edits involved)\n* 2. CI, lint and other tool provided feedback\n* 3. Change is polished\n* 4. Change is \"published\" turned to be public, 42 reviewers were added\n* 5. Reviewers found problems that need to be addressed\n* 6. Change owner would like to upload another draft patch set, and repeat the polishing phase of it, *without* attracting reviewer attention and causing noise in their dashboard and notification channels. Turning that change again to be private wouldn\u0027t solve it either, as it would only hide the change from the public but not from the 42 reviewers. Change edits wouldn\u0027t help here, see above why.\n\n* (C) Next major problem with this proposal: suggested migration path is broken. In this CL: [3] alternative WIP apporach was suggested to replace DRAFT workflow, without \"soft\" or \"hard\" privacy requiremenet, and different migration path, that would effectively publish all draft change and all draft patch sets. One comment was that users may be surprized, when all their draft changes and draft patch sets are published. However, with this proposal the opposite effect would happen: too many changes are going to be turned to be private, as the private bit is set on change level and not on patch set level. This would be very surprising for users that all non draft changes are now hidden, when they have draft patch sets. Logan\u0027s reviewable patch sets proposal better fit that migration path problem, as this would allow more granularity control on \"soft\" privacy, because reviewable bit is set on patch set level.\n\n* (D) Next major problem with this proposal: privacy bit is set on change level. I have concerns, after reading Logan\u0027s porposal, that was effectively derived from existing code review system at Google, that the granularity control on change level might not be sifficient. I expect that later, another requirement may show up: \"Provide private patch set feature and not only private changes.\"\n\n* [3] https://gerrit-review.googlesource.com/97230",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20fc8d9f_7bf0b9b3",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-02-17T13:18:28Z",
      "side": 1,
      "message": "David, I thought that we agreed during our discussion on [1], that the concept of private changes is orthogonal to supporting a WIP workflow?\n\nAnd that it makes sense to migrate current draft changes to private changes as the default migration, simply because draft changes are private now and users expect them to stay private after the migration.\n\nI think it\u0027s important that we agree on the details of a WIP workflow too, but I see this as independent of implementing private changes as an replacement for current draft changes. Private changes are a really simple concept (much simpler than WIP) and I don\u0027t see how it can disturb anyone (if we even allow to switch it off completely by configuration). \n\n[1] https://gerrit-review.googlesource.com/#/c/97230/3//COMMIT_MSG",
      "parentUuid": "2dcda962_e29e1f8d",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dbcb354_e8b5af91",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-17T15:23:52Z",
      "side": 1,
      "message": "\u003e David, I thought that we agreed during our discussion on [1], that the concept of private changes is orthogonal to supporting a WIP workflow?\n\nYes, indeed, they are orthogonal, so why compare something totally different, and try hard to find a migration path in combination with change edits?\n\n\u003e And that it makes sense to migrate current draft changes to private changes as the default migration, simply because draft changes are private now and users expect them to stay private after the migration.\n\nCan we make this migration optional? We modify this proposal in term that draft workflow is not removed, but deprecated. We provide optional migration path from current draft workflow to private changes workflow in upcoming release. We release that version. In the next version we offer fixed WIP/reviewable patch set workflow and provide again optional migration path from deprecated draft workflow to new wip/rewviewable patch set workflow for those sites who haven\u0027t migrated from draft workflow to private change workflow in previous upgrade.\n\nWould it make sense to you? Basically (optionally) migrate to private changes in 2.14, and just set changes.allowdrafts \u003d false, without actually removing draft workflow until proper wip/reviewable patch set workflow implemented? Or, alternatively, don\u0027t migrate draft changes to private changes, but use them in addition. changes.private_changes_workflow \u003d true, changes.allowdrafts \u003d true.",
      "parentUuid": "20fc8d9f_7bf0b9b3",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e608f156_c626f3fe",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-02-17T15:50:53Z",
      "side": 1,
      "message": "\u003e Yes, indeed, they are orthogonal, so why compare something totally different,\n\u003e and try hard to find a migration path in combination with change edits?\n\nCurrent drafts are 2 things: privacy + they can be deleted\nSince we allow deletion of normal changes and change edits are deletable patch sets, the only thing that still differentiates drafts from normal changes with change edits is privacy, hence I do think drafts are similar to private changes, and this is why I think they should be migrated to private changes ( don\u0027t hate me yet, but read my reply to the end ;-) )\n\nAs already discussed a migration of draft changes to change edits is not possible, because a user can have at most one change edit per change. This means:\n- for changes with multiple draft patch sets only one could be converted to a change edit\n- for changes with draft patch sets and a change edit, none of the draft patch sets could be converted to a change edit, since a change edit already exists.\n\nI agree that an alternate migration of draft changes to new WIP changes is likely possible. I don\u0027t like it for standard Gerrit instances because draft changes are private now and users expect them to stay private after the migration, but I understand and agree that for Gerrit instances that use the WIP plugin today, a migration of draft changes to WIP changes is preferred (because for those Gerrit instances draft changes are already now not private, but WIP changes).\nDo I understand it correctly that all you want is a possibility for those Gerrit instances to migrate draft changes to WIP changes?\nSo if we make the migration configurable, so that an admin can decide if drafts should be migrated to private change or WIP changes, it should be ok, right?\n\nI would then try to get all of this (private changes, WIP changes, enhanced change edits + removal of drafts) done within one release.",
      "parentUuid": "0dbcb354_e8b5af91",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "457a8bcf_33e1d5a0",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2017-02-10T21:22:10Z",
      "side": 1,
      "message": "have grown over time and are",
      "range": {
        "startLine": 9,
        "startChar": 17,
        "endLine": 9,
        "endChar": 43
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d265230_b13cdd22",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "I think these could use a little more explanation. By \"staging environment\" you mean a place for users to push early versions of changes or patch sets that are not yet ready for review? And \"in private\" specifically refers to restricting visibility to a whitelist of reviewers.",
      "range": {
        "startLine": 10,
        "startChar": 10,
        "endLine": 11,
        "endChar": 49
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ef9d8b_f0f6b892",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "Maybe use \"draft preview\", or \"alterable preview\" instead of staging?",
      "parentUuid": "6d265230_b13cdd22",
      "range": {
        "startLine": 10,
        "startChar": 10,
        "endLine": 11,
        "endChar": 49
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_35199033",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-17T11:02:55Z",
      "side": 1,
      "message": "During the last week I had several such cases and questions from Gerrit users... and today I see your proposal on how to approach this issue :-)",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 63
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_16169c01",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-17T12:31:42Z",
      "side": 1,
      "message": "Cool :)",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 63
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2a261ec_c21e4ef6",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "It\u0027s actually even worse when the current patch set is a draft, or all patch sets are drafts. Some server and/or UI code assumes that the current patch set always exists, and gets confused/errors when it doesn\u0027t.",
      "range": {
        "startLine": 19,
        "startChar": 39,
        "endLine": 19,
        "endChar": 44
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a2339d9_9cd29ad4",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "I think this flaw merits its own bullet point. If a change owner thinks a draft patch set on a change with non-draft patch sets is private, they are wrong, because anybody can see the draft by adding themselves as a reviewer.",
      "range": {
        "startLine": 22,
        "startChar": 22,
        "endLine": 23,
        "endChar": 31
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_750f08e8",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2017-01-17T12:28:10Z",
      "side": 1,
      "message": "what does \u0027staging\u0027 mean?  What is the purpose of staging?",
      "range": {
        "startLine": 37,
        "startChar": 20,
        "endLine": 37,
        "endChar": 27
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d37948_75bdc8c3",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-17T12:31:42Z",
      "side": 1,
      "message": "Staging means an environment where they can prepare changes before other people see them. When they are satisfied, they want to make their changes visible to others.",
      "range": {
        "startLine": 37,
        "startChar": 20,
        "endLine": 37,
        "endChar": 27
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41f08547_97870255",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2017-01-25T12:03:54Z",
      "side": 1,
      "message": "right- can you make this clear in the doc?",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d5be53c_97ea2b55",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "I highlighted the same issue in the very first paragraph, so I think if you lay out the terms a little more clearly there it will go a long way :)",
      "parentUuid": "41f08547_97870255",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f13d4177_b8dccdf9",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-11T12:22:30Z",
      "side": 1,
      "message": "What is wrong with gitk or git show before pushing? Or, if everything else fail, you can do it already on stable-2.13 with change edit:\n\n  $ git commit --allow-empty -m \"Let me try something\"\n  $ git push origin HEAD:refs/for/master\n  $ emacs foo.txt\n  $ git add -u\n  $ git commit --amend\n  $ git push origin HEAD:refs/for/master%edit\n\nDone.",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dd9a484_c2623059",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "How will this work?  How will these changes be pushed?   \n\nWhat happens to these changes if no one has permissions to code-review or verify (...or other approval bit) these changes?  I guess that can happen on normal changes too, but it seems like this will be more likely with \"private\" changes.  It might be worth thinking about this from a workflow perspective a bit more?",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 43
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1274fe3e_14841c22",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-11T12:22:30Z",
      "side": 1,
      "message": "Fewer features the better. I disagree that this feature is needed and belong to gerrit core. Already today if someone push confidential change, delete it, done.",
      "parentUuid": "7dd9a484_c2623059",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 43
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "117d4494_0b7b3d8e",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-11T12:22:30Z",
      "side": 1,
      "message": "Fewer feature the better. I disagree, this feature is needed and belong to gerrit core.",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cf78c05_7c40a2bd",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "I am not sure this part makes sense. Can you explain why this is important, are we tyring to keep the comments private after merge (the code will no longer be)? If so, that feels like perhaps a separate feature \"private comments\" (I am not suggesting we need to implement that, just trying to keep things simple and scoped)?",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 49,
        "endChar": 9
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_f6e1e0e2",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2017-01-17T12:29:57Z",
      "side": 1,
      "message": "if the change is private, it can also not be cloned through notedb. I assume this needs some acrobatics, because we normally determine visibility from the ACLs and the ref\u0027s name (and not its contents)?",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fa27e05_50d59fcb",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "We already do equivalent acrobatics today in the case of draft changes. We have to read a change and its reviewers[1] to see if it\u0027s a draft and filter visibility appropriately if so. All of this happens already in ChangeControl#isVisible, so we just have to change the implementation of that method.\n\n[1] preferably from the index, see e.g. https://gerrit-review.googlesource.com/96890",
      "parentUuid": "63d6bd38_f6e1e0e2",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3454abb2_ee725390",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "This feels like feature creep, can you explain why this is needed?",
      "range": {
        "startLine": 59,
        "startChar": 1,
        "endLine": 61,
        "endChar": 5
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3884975_51d0d4d7",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-18T12:44:49Z",
      "side": 1,
      "message": "Replacing change edits without a warning is the current behavior when using a git push but is this really sensible? On the UI, I didn\u0027t find a way to completely replace a previous change edit. Why don\u0027t we allow it at all on the UI but don\u0027t issue even a warning when using git push? Would it be possible to reject a git push of a new edit with a detailed warning message if another already exists and add a specific parameter with which a user can enforce the replacement?",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3884975_71cdd83c",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-18T12:51:30Z",
      "side": 1,
      "message": "I think it\u0027s a good idea to reject a push of a new edit over an existing one with a good error message and then allow it with a force push",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c719edf6_7e0327a3",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "I don\u0027t think \"force push\" is the right terminology here, since in the wire protocol that just means a non-ff push. Pushes to refs/for/* are always fast-forwards because the server never advertises refs with that prefix.\n\nI agree with Alice\u0027s concern however. I think it\u0027s possible to use a mechanism other than passing -f to \"git push\" to imply \"forcing\". Something like \"git push -o edit HEAD:refs/for/master\" to push an edit, which would fail if there is an existing edit; and \"git push -o overwrite-edit HEAD:refs/for/master\" to overwrite an existing edit.\n\nThough honestly, my concern with this approach would be that people will just learn to always type \"overwrite-edit\", because that\u0027s what you want most of the time anyway. A person who has learned to always type \"overwrite-edit\" no longer gets any safety from this feature.\n\nI\u0027m not sure what the best solution is here. However, since it seems like figuring this behavior out is just a detail of push option handling in the protocol, I don\u0027t think settling on a best solution needs to block the rest of the implementation.",
      "parentUuid": "c3884975_71cdd83c",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 67,
        "endChar": 25
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6846caad_d84398fb",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-02-10T10:18:39Z",
      "side": 1,
      "message": "Just a small addition here: When a change is private, we will create a new ref for the owner and all reviewers: refs/private/shardeduserid/changeid.\n\nThis way we can easily check if private refs should be advertised in VisibleRefsFilter by checking if the usersId is contained in the ref name.\n\nThis makes it so that the check in VisibleRefsFilter is efficient and doesn\u0027t create a bottleneck.",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4efe685c_6c88d5eb",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "Changing the advertised refname is a little tricky because you then have to make sure that it\u0027s advertised properly in the UI. This might be more effort than it\u0027s worth.\n\nHave you looked at how we do visibility checking for draft changes today? Will that not continue to work?",
      "parentUuid": "6846caad_d84398fb",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3346dc0_4ab3f3d6",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-18T12:44:49Z",
      "side": 1,
      "message": "Did you mean \"refs/for/master%edit\" as specified in the documentation [1].\n\n[1] https://gerrit-review.googlesource.com/Documentation/user-inline-edit.html#change-edit-actions",
      "range": {
        "startLine": 78,
        "startChar": 44,
        "endLine": 78,
        "endChar": 61
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3346dc0_8adb2b01",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-18T12:51:30Z",
      "side": 1,
      "message": "Yes",
      "range": {
        "startLine": 78,
        "startChar": 44,
        "endLine": 78,
        "endChar": 61
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d6bd38_9652acd0",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-01-17T11:02:55Z",
      "side": 1,
      "message": "The whole proposal sounds good to me. I like the concept of private change and how the edits are used.",
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb205302_470610dc",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "Perhaps it makes sense to add here what features need to be built before migration?  It sounds like to me, that their really are two new primary features that need to be built 1) change edits (for new changes, not just existing changes), and 2) private changes.  Both of those seem like nice independent features that can be developed. \n\nSo far, most of this document has been written from a migration perspective, but it might be nice to also have a section which outlines these 2 new features (if that is really what is being proposed) as new features, ignoring migration a bit, just to make sure it is well understood what you will be building.  In other words, what are the features that as a user I can expect pretending that the draft feature never existed?",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 12
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd5abf45_6165962f",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-11T12:22:30Z",
      "side": 1,
      "message": "+1. I would like suggest to consider just \"dropping/discontinuation/removal without replacement\" the draft changes/draft patch set workflow feature. We already support disable draft workflow feature per configuration. The migration process has two phases:\n\n* 1. Site admins announce deprecation of uploading/publishing/deletion drafts, from date A.\n* 2. Date A reached: draft workflow is disabled. Site admins publish all existing drafts",
      "parentUuid": "cb205302_470610dc",
      "range": {
        "startLine": 87,
        "startChar": 3,
        "endLine": 87,
        "endChar": 12
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88432cdb_1e94f8a7",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "Congratulations! You get to be the first person to write a schema migration that has to work when changes are only in NoteDb and not ReviewDb. As of this morning, gerrit-review is no longer using ReviewDb for change storage.",
      "range": {
        "startLine": 88,
        "startChar": 8,
        "endLine": 88,
        "endChar": 32
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa79a12_390f02c2",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2017-02-10T21:07:43Z",
      "side": 1,
      "message": "Hmm, I would only do this if it has reviewers, otherwise, why not assume it is a new change edit?  I am not sure, but how will new change edits be handled?  i.e. If I push an edit to a new (non-existing) change, should it effectively be an invisible change to others until the edit is \"published\"?",
      "range": {
        "startLine": 90,
        "startChar": 18,
        "endLine": 90,
        "endChar": 19
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "034c2113_5ba2238c",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-18T02:02:09Z",
      "side": 1,
      "message": "Is this actually possible?",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 93,
        "endChar": 35
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23e395d7_68d743b3",
        "filename": "Documentation/proposal-remove-drafts.txt",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-02-10T15:32:53Z",
      "side": 1,
      "message": "Good question. I think it is. Maybe we should have a test of the existing behavior? Might not be worth it at this point, though.",
      "parentUuid": "034c2113_5ba2238c",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 93,
        "endChar": 35
      },
      "revId": "3564ecb4afc9e9c8f537098aebe265a62acad188",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}