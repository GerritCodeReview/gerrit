{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "08fa7c02_7c4a14f7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-01-24T16:00:36Z",
      "side": 1,
      "message": "I observed the following 2 tests fail on Mac OS 12.1 using JDK 17, they don\u0027t fail using JDK 11:\n\nThere were 2 failures:\n1) newAdapterCanParseOutputOfLegacyAdapter(com.google.gerrit.server.notedb.CommentTimestampAdapterTest)\njava.time.format.DateTimeParseException: Text \u0027Feb 7, 2017 2:20:30 AM\u0027 could not be parsed at index 20\n\tat java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2052)\n\tat java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1880)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapter.read(CommentTimestampAdapter.java:65)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapter.read(CommentTimestampAdapter.java:48)\n\tat com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199)\n\tat com.google.gson.Gson.fromJson(Gson.java:988)\n\tat com.google.gson.Gson.fromJson(Gson.java:953)\n\tat com.google.gson.Gson.fromJson(Gson.java:902)\n\tat com.google.gson.Gson.fromJson(Gson.java:873)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapterTest.newAdapterCanParseOutputOfLegacyAdapter(CommentTimestampAdapterTest.java:121)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat com.google.testing.junit.runner.internal.junit4.CancellableRequestFactory$CancellableRunner.run(CancellableRequestFactory.java:108)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat com.google.testing.junit.runner.junit4.JUnit4Runner.run(JUnit4Runner.java:116)\n\tat com.google.testing.junit.runner.BazelTestRunner.runTestsInSuite(BazelTestRunner.java:159)\n\tat com.google.testing.junit.runner.BazelTestRunner.main(BazelTestRunner.java:85)\n2) newAdapterDisagreesWithLegacyAdapterDuringDstTransition(com.google.gerrit.server.notedb.CommentTimestampAdapterTest)\njava.time.format.DateTimeParseException: Text \u0027Nov 3, 2013 1:10:24 AM\u0027 could not be parsed at index 20\n\tat java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2052)\n\tat java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:1880)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapter.read(CommentTimestampAdapter.java:65)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapter.read(CommentTimestampAdapter.java:48)\n\tat com.google.gson.TypeAdapter$1.read(TypeAdapter.java:199)\n\tat com.google.gson.Gson.fromJson(Gson.java:988)\n\tat com.google.gson.Gson.fromJson(Gson.java:953)\n\tat com.google.gson.Gson.fromJson(Gson.java:902)\n\tat com.google.gson.Gson.fromJson(Gson.java:873)\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapterTest.newAdapterDisagreesWithLegacyAdapterDuringDstTransition(CommentTimestampAdapterTest.java:133)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat com.google.testing.junit.runner.internal.junit4.CancellableRequestFactory$CancellableRunner.run(CancellableRequestFactory.java:108)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat com.google.testing.junit.runner.junit4.JUnit4Runner.run(JUnit4Runner.java:116)\n\tat com.google.testing.junit.runner.BazelTestRunner.runTestsInSuite(BazelTestRunner.java:159)\n\tat com.google.testing.junit.runner.BazelTestRunner.main(BazelTestRunner.java:85)",
      "revId": "37776436472be73683679de7a86f65a3f6ac4af9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34612a5d_96349d5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-25T06:59:55Z",
      "side": 1,
      "message": "Thanks for looking into it. The problem seems to be related to compatibility mode of Locale Sensitive Service Provider Implementations, see: [1].\n\nI don\u0027t have currently access to a Mac. Can you try to change the order of values in: tools/bzl/junit.bzl. For example if I change the constant from:\n\n  -    \"-Djava.locale.providers\u003dCOMPAT,CLDR,SPI\",\n  +    \"-Djava.locale.providers\u003dSPI,COMPAT,CLDR\",\n\nIt\u0027s still passing on Linux.\n\nIf I comment out the option:\n\n  diff --git a/tools/bzl/junit.bzl b/tools/bzl/junit.bzl\nindex e16039513f..5cf8cee5f0 100644\n--- a/tools/bzl/junit.bzl\n+++ b/tools/bzl/junit.bzl\n@@ -72,7 +72,7 @@ _gen_suite \u003d rule(\n POST_JDK8_OPTS \u003d [\n     # Enforce JDK 8 compatibility on Java 9, see\n     # https://docs.oracle.com/javase/9/intl/internationalization-enhancements-jdk-9.htm#JSINT-GUID-AF5AECA7-07C1-4E7D-BC10-BC7E73DC6C7F\n-    \"-Djava.locale.providers\u003dCOMPAT,CLDR,SPI\",\n+    #\"-Djava.locale.providers\u003dCOMPAT,CLDR,SPI\",\n ]\n\nit\u0027s failing for me as well, but with a different error message:\n\n  $ bazeldev test \\\n    --test_filter\u003dcom.google.gerrit.server.notedb.CommentTimestampAdapterTest \\\n    javatests/com/google/gerrit/server:server_tests\n    [...]\n  1) newAdapterCanParseOutputOfLegacyAdapter(com.google.gerrit.server.notedb.CommentTimestampAdapterTest)\nexpected: \"Feb 7, 2017 2:20:30 AM\"\nbut was : \"Feb 7, 2017, 2:20:30 AM\"\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapterTest.newAdapterCanParseOutputOfLegacyAdapter(CommentTimestampAdapterTest.java:120)\n2) legacyAdapterViaZonedDateTime(com.google.gerrit.server.notedb.CommentTimestampAdapterTest)\nexpected: \"Feb 7, 2017 2:20:30 AM\"\nbut was : \"Feb 7, 2017, 2:20:30 AM\"\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapterTest.legacyAdapterViaZonedDateTime(CommentTimestampAdapterTest.java:106)\n3) legacyGsonBehavesAsExpectedDuringDstTransition(com.google.gerrit.server.notedb.CommentTimestampAdapterTest)\nexpected: \"Nov 3, 2013 12:10:24 AM\"\nbut was : \"Nov 3, 2013, 12:10:24 AM\"\n\tat com.google.gerrit.server.notedb.CommentTimestampAdapterTest.legacyGsonBehavesAsExpectedDuringDstTransition(CommentTimestampAdapterTest.java:87)\n\nFAILURES!!!\nTests run: 8,  Failures: 3\n\nAdding Bazel/Java experts here:\n\n@Liam Miller-Cushon, @Ivo List: do you have access to Mac, and may be know, what\u0027s going on, and why on JDK 17 the above two tests are failing only on JDK 17?\n\n[1] https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/spi/LocaleServiceProvider.html",
      "parentUuid": "08fa7c02_7c4a14f7",
      "revId": "37776436472be73683679de7a86f65a3f6ac4af9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8812cdc9_e5ed1bd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2022-01-26T07:33:35Z",
      "side": 1,
      "message": "reordering entries in \"-Djava.locale.providers\u003dCOMPAT,CLDR,SPI\" doesn\u0027t fix the problem on JDK 17 but setting it to only \"-Djava.locale.providers\u003dCOMPAT\" fixes the test errors on MacOS",
      "parentUuid": "34612a5d_96349d5b",
      "revId": "37776436472be73683679de7a86f65a3f6ac4af9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}