{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b16c5d88_66e8fe23",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "If we add \u0027changeNum\u0027 to other Params or add a new Params, it is very easy to forget update this method.\nInstead you can use Extract:\n  function hasChangeNum(\n    params: AppElementParams | GenerateUrlParameters\n  ): params is Extract\u003c\n    AppElementParams | GenerateUrlParameters,\n    {changeNum: NumericChangeId}\n  \u003e {\n    return \u0027changeNum\u0027 in params;\n  }\n\nOr maybe just inline this method?\n\nThe same for hasPatchNum.",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0fc4e6c_30193673",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:45:17Z",
      "side": 1,
      "message": "If you really just want to have a type guard that will reject any type that does not have a field of this type and name, would it not be even simpler to just say:\n\nparams is {changeNum: NumericChangeId}\n\nWhat does the Extract add?",
      "parentUuid": "b16c5d88_66e8fe23",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bde91fc2_4bd5277c",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T11:58:34Z",
      "side": 1,
      "message": "Yes, params is {changeNum: NumericChangeId} works here too (argument type must also be adjusted a little bit).\nThe Extract doesn\u0027t add anything in this change, but in some situations it doesn\u0027t \"delete\" type information. Example:\n  if(hasChangeEnum(param)) {\n    // With Extract, other properties of param are accessible\n    // With  {changeNum: NumericChangeId} only changeNum are accessible\n  }",
      "parentUuid": "d0fc4e6c_30193673",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ab529f3_8b26e985",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T12:01:07Z",
      "side": 1,
      "message": "That is a good point.\nIt does add some odd dependencies, where something called `hasChangeEnum` actually tests whether it\u0027s one of a specific set of types that happen to be narrowed down by requiring them to have the changeNum...\nBut maybe that is useful in this case, I am not sure.",
      "parentUuid": "bde91fc2_4bd5277c",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26b0d96b_97ece6b4",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Nice, did not know about Extract\u003c\u003e. And surprised that inlining also works fine. Inlined. :-)",
      "parentUuid": "b16c5d88_66e8fe23",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b938801a_4f984296",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "Let\u0027s not use \u0027_\u0027 prefix for new non-polymer properties and use private modifier instead.\nThe ts style guide doesn\u0027t allow it, so we shouldn\u0027t add it in a new code.",
      "range": {
        "startLine": 333,
        "startChar": 2,
        "endLine": 333,
        "endChar": 8
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7caba5d5_f42db809",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Yeah, was just doing that for consistency, but maybe it is better to start using private. Done.",
      "parentUuid": "b938801a_4f984296",
      "range": {
        "startLine": 333,
        "startChar": 2,
        "endLine": 333,
        "endChar": 8
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e418a1ef_12784fe9",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "Can\u0027t find any call/reference to this method.",
      "range": {
        "startLine": 354,
        "startChar": 2,
        "endLine": 354,
        "endChar": 14
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c48e5ed_206971fe",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:45:17Z",
      "side": 1,
      "message": "Is this the only place you would ever want to write this? If not, I think I would move this method to the model file, call it privateUpdateState or something like that, and then pass in some kind of changes object. Otherwise it will be easy to forget not to mutate and to always call next afterwards.",
      "range": {
        "startLine": 354,
        "startChar": 2,
        "endLine": 354,
        "endChar": 14
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb0878e9_0098f972",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c48e5ed_206971fe",
      "range": {
        "startLine": 354,
        "startChar": 2,
        "endLine": 354,
        "endChar": 14
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "57f7d3a3_444b0fc3",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.ts",
        "patchSetId": 1
      },
      "lineNbr": 354,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Oops, should be called from _setParams().",
      "parentUuid": "e418a1ef_12784fe9",
      "range": {
        "startLine": 354,
        "startChar": 2,
        "endLine": 354,
        "endChar": 14
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88fcb481_61c7e32d",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "Same comments as for router-model",
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2923628a_4caac627",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88fcb481_61c7e32d",
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1aa7d60_c37ce95c",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:45:17Z",
      "side": 1,
      "message": "change service?",
      "range": {
        "startLine": 36,
        "startChar": 28,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d993239_f2759d98",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1aa7d60_c37ce95c",
      "range": {
        "startLine": 36,
        "startChar": 28,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8460427_3a08a201",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "If I understand this code correctly, there is a race condition here:\nif patchNum is set first and a change is loaded later, the currentPatchNum can\u0027t be used with a change in the model, because it can point to a non-existing patch.\n\nOne options is too pass the whole RouterState and ensure that change is valid:\n  currentPathNum \u003d combineLatest(routerState, change).pipe(\n    map([routerState, change] \u003d\u003e {\n       if(!change || change.id !\u003d\u003d routerState.changeNum) return undefined;\n       ...\n    });  \n\nBut maybe there are another solutions/recommended approach for this problem.",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb6f59d0_aaaabd2f",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:45:17Z",
      "side": 1,
      "message": "In NGRX we often make sure that the action that changes the changeNum also clears the change from the changeState. But the check you recommend here should work, too.",
      "parentUuid": "e8460427_3a08a201",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b36cbc9_d4553cce",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "patchNum being available before the change is loaded was done on purpose. For example the Checks API calls just need the patchset number, not the change. So if you just need that, then you can kick off calling/processing before the change info is even loaded. Added a comment for that.\n\nI have also added `!change` to the if-clause, such we avoid inconsistencies: Change is still loaded/set (old change) and route already has new change number and new patchset number. So only accept the patchNum from the route, if change is undefined.",
      "parentUuid": "e8460427_3a08a201",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b642a33_7037f0c5",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T14:55:35Z",
      "side": 1,
      "message": "Let\u0027s assume there is an element:\n  class GrElement extends GrLitElement {\n    private currentPatchNum;\n    private change;\n    render() {\n       return getShaForPatchset(this.change, this.currentPatchNum);\n    }\n    connectedCallback() {\n      subscribe(\u0027currentPatchNum\u0027, currentPatchNum$);\n      subscribe(\u0027change\u0027, change$);\n    }\n  }\n\nAssign a new params to router.\npatchNum$ is updated, change is loading;\nthe currentPatchNum$ combines the *new* patchNum and the *old* change and returns the new patchNum.\nIt triggers render and passes the old change and the new currentPatchNum to the getShaForPatchset, that\u0027s not we want.\n\nPlease correct me where I am wrong.",
      "parentUuid": "2b36cbc9_d4553cce",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "916870a9_325e331b",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T16:18:14Z",
      "side": 1,
      "message": "In response to your feedback I have added the `!change` clause, so the new change number will only be emitted when change is undefined.",
      "parentUuid": "8b642a33_7037f0c5",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47f619ca_443082b9",
        "filename": "polygerrit-ui/app/services/change/change-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T16:37:16Z",
      "side": 1,
      "message": "Oh, I see. It fixes the issue when patchNum and change doesn\u0027t match. But still don\u0027t understand the whole flow.\n\n1. Let\u0027s open URL https://gerrit-review.googlesource.com/c/gerrit/+/291142/3 in browser\n2. routerService assigns changeNum\u003d291142, patchNum\u003d3\n3. change is loading, and currentPatchNum returns 3\n4. change has been loaded and updated. currentPatchNum is recalculated and now it is 4 (latest patch num), but the url says 3.\n\nAccording to the method name and comments I expect currentPatchNum to be 3.",
      "parentUuid": "916870a9_325e331b",
      "range": {
        "startLine": 58,
        "startChar": 4,
        "endLine": 58,
        "endChar": 45
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e29accf_1e110912",
        "filename": "polygerrit-ui/app/services/change/change-service.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "You should wrap getChangeDetail in a cancelable promise, not the whole promise.\nWhen you wrap the chain of promises, only the last Promise in the chain is rejected.\nIn this code this means, that an ongoing request assigns change even if changeLoadingPromise.cancel() were called.\n\nP.S. Seems the same problem can be solved with switchMap (example: https://medium.com/@teebszet/recurse-with-rxjs-observables-and-switchmap-de5942532ea). Can we use it instead of cancallable promise?",
      "range": {
        "startLine": 45,
        "startChar": 37,
        "endLine": 45,
        "endChar": 51
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a36d12e2_f1b10c94",
        "filename": "polygerrit-ui/app/services/change/change-service.ts",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Good catch wrapping the wrong portion of the promise! Changed that.\n\nYes, once we change API calls to be observables instead of promises I agree, we should be using switchMap. That is the easier and better way than the fairly ugly makeCancelable() util. But I would like to defer this and make that in a separate change. Otherwise I am turning too much upside down. :-)",
      "parentUuid": "3e29accf_1e110912",
      "range": {
        "startLine": 45,
        "startChar": 37,
        "endLine": 45,
        "endChar": 51
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cb58c5b_c9987c3f",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:45:17Z",
      "side": 1,
      "message": "I wonder what the rule is for when to put stuff into the model vs constants/constants. I actually like in the model better (I would completely remove constants/constants.ts because it creates this central dumping ground for stuff and defeats encapsulation and layering), but that is a tangential discussion.",
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8da3f038_cc3247b7",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Totally agree. That is one benefit of adding models: We can also put all the relevant types here. Alternative: router-types.ts file in the same directory. But yeah, common.ts and constants.ts are dumping grounds that are not well thought out.",
      "parentUuid": "9cb58c5b_c9987c3f",
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ff4ac8b_74cf0e1e",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "Maybe initialState: Readonly\u003cRouterState\u003e\nAlso, maybe we should try to adapt this https://stackoverflow.com/questions/41879327/deepreadonly-object-typescript for nested objects",
      "range": {
        "startLine": 44,
        "startChar": 27,
        "endLine": 44,
        "endChar": 38
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8b5c763c_f90457d7",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Yeah, I don\u0027t want to enforce immutability somewhere and not everywhere. All states should be immutable, not just the initial state. And deeply too. DeepReadOnly is an interesting option, but maybe we should also consider a library like Immer. Added a TODO for that.",
      "parentUuid": "8ff4ac8b_74cf0e1e",
      "range": {
        "startLine": 44,
        "startChar": 27,
        "endLine": 44,
        "endChar": 38
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df79ccbd_7aa7e862",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-09T15:31:35Z",
      "side": 1,
      "message": "Why not \n  export interface RouterState {\n    view?: GerritView;\n    changeNum?: NumericChangeId;\n    patchNum?: PatchSetNum;\n  }\n\n  export const initialState: RouterState \u003d {};",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eab4859_47da5e60",
        "filename": "polygerrit-ui/app/services/router/router-model.ts",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T13:03:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df79ccbd_7aa7e862",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 48,
        "endChar": 1
      },
      "revId": "38916f41833234f4062c6a4c2c95ecfb4f8e9ddf",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}