{
  "comments": [
    {
      "key": {
        "uuid": "bb5c2765_59fb63a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "Commit message summary should fit on one line (I think we\u0027re supposed to warn about that on push?)",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5c2765_3915cf8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:43Z",
      "side": 1,
      "message": "Assume your readers don\u0027t understand Polymer bindings. Can you explain a bit more in the commit message?",
      "range": {
        "startLine": 7,
        "startChar": 13,
        "endLine": 7,
        "endChar": 20
      },
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5c2765_b9df1f28",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "Is this an unrelated bugfix? IIUC what this would do is change this to a two-way binding, causing the search bar\u0027s value to be updated when the URL changes.",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db59db74_1af1ddc3",
        "filename": "polygerrit-ui/app/elements/gr-change-list-item.html",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "Of the changes here, it seems like this one is the only one that was actually causing a bug.\n\nIIUC, the computed binding is only recomputed when one of the arguments changes (only after all of them become defined). So a computed binding with no arguments is never recomputed.\n\nContrast this with e.g. [[_computeAvatarURL(change.owner)]] below, which should be recomputed when change.owner changes. This was working already.",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db59db74_badf1128",
        "filename": "polygerrit-ui/app/elements/gr-change-list-item.html",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1021482
      },
      "writtenOn": "2015-11-21T02:26:02Z",
      "side": 1,
      "message": "Yes youâ€™re correct. Splitting this part off into another change to localize the bug.",
      "parentUuid": "db59db74_1af1ddc3",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5c2765_99dcdb34",
        "filename": "polygerrit-ui/app/elements/gr-change-list-item.html",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "IIUC this is the only change that\u0027s needed, and you could have put this in [[]] above instead of creating a separate property. Or am I missing something?\n\n(Ok, I think what I was missing is that there is another component that was calling .changeURL().)",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 54
      },
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db59db74_9adccd34",
        "filename": "polygerrit-ui/app/elements/gr-change-list-item.html",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1021482
      },
      "writtenOn": "2015-11-21T02:26:02Z",
      "side": 1,
      "message": "The reason I moved these to computed properties is that it makes it easier to test. Otherwise when you set the change property to something new you have to query the inner DOM properties to make sure the values are correctly calculated, which according to the Polymer team, is not super hygienic.",
      "parentUuid": "bb5c2765_99dcdb34",
      "range": {
        "startLine": 123,
        "startChar": 21,
        "endLine": 123,
        "endChar": 54
      },
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5c2765_f9e997d4",
        "filename": "polygerrit-ui/app/elements/gr-search-bar.html",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "I think having an observer here is cleaner than using a value-changed handler, but I don\u0027t see a behavior change. Am I missing something?",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5c2765_9905fb58",
        "filename": "polygerrit-ui/app/elements/gr-search-bar.html",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1021482
      },
      "writtenOn": "2015-11-21T03:51:27Z",
      "side": 1,
      "message": "It\u0027s more specific. `value-changed` could be fired by any child element. Should the search bar become more complex (and I imagine it will with autocomplete), then it could contain elements that fire a value-changed event.",
      "parentUuid": "bb5c2765_f9e997d4",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db59db74_7af619bd",
        "filename": "polygerrit-ui/app/test/gr-search-bar-test.html",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-20T21:18:19Z",
      "side": 1,
      "message": "I don\u0027t understand these tests. What is _preventDefaultAndNavigateToInputVal? What does done() do? Why is the last thing in the test the interaction, rather than testing that something happened (\"triggers nav\")?",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bafab61_46c7326c",
        "filename": "polygerrit-ui/app/test/gr-search-bar-test.html",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1022867
      },
      "writtenOn": "2015-11-20T22:03:53Z",
      "side": 1,
      "message": "This test is written in the form prescribed by WCT (Web Component Tester). The syntax for describing a test suite is the same as that used by Mocha (a popular JavaScript testing framework). This test appears to be doing the following things:\n\n1) Describing an asynchronous Mocha test. This is done by providing passing a callback that deliberately accepts a single argument. Conventionally, this argument is called `done`. Mocha notices that the callback has a parameter and calls it with a callback argument. This callback argument (`done`) can be called by the tester to notify when asynchronous operations are complete. The test will not be considered finished until `done` is called, or a (configurable) timeout elapses. A tester can also call `done` with an argument, and Mocha will fail the test with the argument as the reason.\n\n2) Stubbing a method on `element`. Since DOM events dispatch and propagate synchronously, this has to be done before events are fired (3), otherwise it would not be possible to observe their side-effects. As a side note, WCT brings Sinon.js into the test environment. This library makes creating stubs / spies / mocks etc a little easier and more semantically consistent. For example, this test could achieve the same effect with:\n\n```js\nsinon.stub(element, \u0027_preventDefaultAndNavigateToInputVal\u0027, function() {\n  element._preventDefaultAndNavigateToInputVal.restore();\n  done();\n});\n```\n\nMore on Sinon.js here: http://sinonjs.org/docs/\n\n3) Firing an event on a DOM target to cause expected side-effects to happen.",
      "parentUuid": "db59db74_7af619bd",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db59db74_3a3ae118",
        "filename": "polygerrit-ui/app/test/gr-search-bar-test.html",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-11-23T14:35:20Z",
      "side": 1,
      "message": "Thanks for the explanation. It took me a bit to wrap my head around the idiom but I think I get it now. (It helped when I actually looked at gr-search-bar.html to see what _preventDefaultAndNavigateToInputVal did.)",
      "parentUuid": "5bafab61_46c7326c",
      "revId": "3b8a12ce3b01f318618edd23a96bb5a0e7ff234c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}