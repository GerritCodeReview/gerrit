{
  "comments": [
    {
      "key": {
        "uuid": "43d5c277_87e22645",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "How this scales. To only persist a review, other entities must be saved too, like list of comments and message. Should it go to other refs namespace?\n\nWhat about ORM layer, with schema support and things like upgrades: add an attribute to the schema with a default value, and it propagate the changes down to the data, etc. I have a name already \"gitorm\" ;-) \n\nI\u0027ve thought about something like: have different refs as object dir \n\n refs/gerrit/changes/PatchSetApprovals/10/1/\n refs/gerrit/changes/ChangeMessage/10/1/\n refs/gerrit/changes/PatchLineComment/10/1/\n\nand in the object dir have json files, that correspond to the  records in the table:\n1.json, 2.json,...\n\nWhere *.json looks like:\n\n 1.json: {\u0027ps\u0027: \"1\", \"account\": \"1000\", \"vote\": \"code-review\u003d+1\"}\n 2.json: {\u0027ps\u0027: \"2\", \"account\": \"2000\", \"vote\": \"verified\u003d+1\"}\n [...]\n\nFor one JSON is very easy to parse, for another we could implement hierarchical data structures, like lists and maps.",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_c20b623c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Re David Ostrovsky\u0027s comment. No. :-)",
      "parentUuid": "43d5c277_87e22645",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_27209ab2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-10T07:59:18Z",
      "side": 1,
      "message": "Another requirement on the new backend: to be easy usable from plugins. For example, currently PatchSetApprovals is ab(used) for both humans and bots verifications (Jenkins trigger plugin, Zuul anf buildbot-plugin have no other chance as use `ssh gerrit review --verify`firehose to report build start and end notifications.\n\nThe idea is to replace/extend it with verification-status plugin and shutdown bots notification in review command, providing seperate channel for them. In the end no one want to see 27 messages from build started/ended in history of human reviews. Instead all bots specific notifications are presented in its own table (on change screen per patch set) or on its own screen, with statistics, searches and what not.\n\nThe only reason why this plugin is not there (after JS plugin solved the core UI extension): is unsolved peristence problem. Where how to persist these notifications? Basically they are the same as PatchSetApprovals, except that label categories are different: they are job or platform specific or both. But still the usual suspects: CRUD operation should be supported. It is not clear to me from this change, how can we achieve that, i. e. to be able to persist notifications per patch set in PatchSetVerifications namespace and qery them per patch set base (to render them on change screen)?\n\nAnother question: how can we even make this extended persistence space searcheable from secondary index? To answer question like: sort the list of suported platform in verification notifications in descendant order of breakage rates (verification -1 report).\n\nShould plugins do all the above on its own? I am asking all these questions, because we are replacing database, and all these can be done very easy there...",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_e200661b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "If plugins want their own database they should use their own database. This has always been the case, and will always be the case. :-(\n\nAs for labels for specific builds, projects should declare them in the project.config and allow them to be used by the verification tools. The long-term plan for labels is to have them be even more flexible and generic storage for short strings attached to revisions, with some access controls around who is allowed to set specific labels, e.g. restricting the label set by the automated build system to only that system.",
      "parentUuid": "43d5c277_27209ab2",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_e7e7a253",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "This statement is kind of obvious and can be removed. Every data format in Git would lack usual database features.",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_86e22a45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "no \"Gerrit-\" prefix? Your refs already called \"refs/gerrit/\".",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_03ef4e2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Ack, I don\u0027t think we need Gerrit- prefix?",
      "parentUuid": "23ca8ede_86e22a45",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_43f946f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Label",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_63fc42e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Code-Review+2. If you want to case normalize labels do it in the read path. The write path should be using the case preferred in project.config at the time the write happened.",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_02062a34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "I think its OK to machine generate the subject line, but we should maybe try harder to be descriptive of what the change was. I am especially thinking about major actions like adding a new patch set, editing the commit message, rebasing the change, and adding/removing labels. These should worked into the subject so a git shortlog on the branch is descriptive.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_a3063a35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Instead of the account ID in the footer, what about the committer being \"${full_name} \u003caccount-${id}@${gerrit-server}\u003e\", where gerrit-server is canonical web url or some string set by the admin in gerrit.config?",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_476e6ed4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T15:18:34Z",
      "side": 1,
      "message": "What happens if a reviewer votes on the same patch set first Code-Review+1 but then Code-Review-1?\n\nIf I got this right this will result in one commit for each vote. Semantically the second vote should overwrite the first vote. After parsing the votes how do we know which vote counts, Code-Review+1 or Code-Review-1? We could see this of course from the commit history, but the code doesn\u0027t seem to look at this.",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_a4b00212",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T18:00:20Z",
      "side": 1,
      "message": "Yep, just forgot this check, it should ignore older commits by the same user. This might even be enough to make me use a Table instead of a Multimap.\n\n(There is an interesting question what happens when there is enough clock skew between branches in the commit history that commits might get iterated out of timestamp order. Not sure what to do about that, but for now we\u0027re just ensuring a linear history.)",
      "parentUuid": "43d5c277_476e6ed4",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_c661c2e9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T19:56:10Z",
      "side": 1,
      "message": "Since all the timestamps are based on the server clock I think it\u0027s not bad to rely on them. But I\u0027m wondering if we need to rely on the timestamps here. If we have a linear history couldn\u0027t we just take the vote from the commit which is closer to the tip of the branch (in case there several votes from the same user on the same label and same patch set)?",
      "parentUuid": "e3c316c9_a4b00212",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_e4aafa9b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T20:01:03Z",
      "side": 1,
      "message": "We can\u0027t rely on server clocks being synchronized in a multi-master setup :)\n\nWe could skip the timestamp check but then nonlinear histories are even less likely to work, and it\u0027s barely any more code.",
      "parentUuid": "23ca8ede_c661c2e9",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_2677f6ae",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T20:15:41Z",
      "side": 1,
      "message": "Right, I wasn\u0027t thinking about multimaster.\n\nYes, if we want to be prepared for nonlinear histories we do need the timestamp check and it\u0027s really not much code. Maybe in a multimaster setup we may even end up with a nonlinear history.",
      "parentUuid": "e3c316c9_e4aafa9b",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c74ad6_e53836b8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T21:34:23Z",
      "side": 1,
      "message": "googlesource.com\u0027s multi-master implementation has a global state for each ref (modified using paxos), so this is a non-issue for us. But this is not the only approach, e.g. Luca\u0027s suggestion on repo-discuss last week about merging state between masters.\n\nAnother potential source of clock skew (and potentially nonlinear history) is if we allow users to modify the database locally and then push their changes, which is something that would be neat but is a ways in the future.",
      "parentUuid": "23ca8ede_2677f6ae",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}