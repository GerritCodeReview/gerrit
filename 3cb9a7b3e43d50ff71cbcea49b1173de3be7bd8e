{
  "comments": [
    {
      "key": {
        "uuid": "43d5c277_87e22645",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "How this scales. To only persist a review, other entities must be saved too, like list of comments and message. Should it go to other refs namespace?\n\nWhat about ORM layer, with schema support and things like upgrades: add an attribute to the schema with a default value, and it propagate the changes down to the data, etc. I have a name already \"gitorm\" ;-) \n\nI\u0027ve thought about something like: have different refs as object dir \n\n refs/gerrit/changes/PatchSetApprovals/10/1/\n refs/gerrit/changes/ChangeMessage/10/1/\n refs/gerrit/changes/PatchLineComment/10/1/\n\nand in the object dir have json files, that correspond to the  records in the table:\n1.json, 2.json,...\n\nWhere *.json looks like:\n\n 1.json: {\u0027ps\u0027: \"1\", \"account\": \"1000\", \"vote\": \"code-review\u003d+1\"}\n 2.json: {\u0027ps\u0027: \"2\", \"account\": \"2000\", \"vote\": \"verified\u003d+1\"}\n [...]\n\nFor one JSON is very easy to parse, for another we could implement hierarchical data structures, like lists and maps.",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_c20b623c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Re David Ostrovsky\u0027s comment. No. :-)",
      "parentUuid": "43d5c277_87e22645",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_04a2b6c2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "To elaborate. This new data format is _not_ intended to be a drop-in replacement for the traditional DB. Two main goals are:\n\n-The data representation is reasonably parsimonious.\n\n-The data representation is human-readable in that reading the commit history and notes gives a human (or a computer for that matter) a reasonable understanding of the state of the data without too much additional context.\n\nI think that replicating the SQL database structure with lots of opaque IDs and \"foreign keys\" is counterproductive to either of these goals. Also, see my comment below on the model of applying an atomic set of updates to the current state of the change applies better conceptually and programmatically to the way clients (UI and otherwise) interact with the web UI.",
      "parentUuid": "a37bde5e_c20b623c",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_466e72d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-10T22:55:11Z",
      "side": 1,
      "message": "\u003e -The data representation is reasonably parsimonious.\n\nBut wouldn\u0027t you have to mark a record as insert update or delete, CRUD operations in the end? PatchSetApprovals is kind straight forward, because it is always only insert, but, as always hard things first ;-) how would you implement\n\n update foo set bar \u003d 42 where baz \u003d 4711;\n update foo set bar \u003d null where baz \u003d 4711;\n update foo set bar \u003d 43 where baz \u003d 4711;\n\nhow that would work?",
      "parentUuid": "e3c316c9_04a2b6c2",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438a229e_bf0bd73c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T23:58:21Z",
      "side": 1,
      "message": "Remember this is not general-purpose relational storage. So \"update foo set bar where baz\" has no meaning unless you are talking about specific entities.\n\nI see no reason why we have to record CRUD operations explicitly; all we care about is being able to get the proper instantaneous state out.\n\nHere are a few concrete examples off the top of my head. I haven\u0027t thought of any so far that won\u0027t work but like you said, let\u0027s get the hard things out of the way now :)\n\nChange: First commit is insert, everything else is update (e.g. change state, change topic, etc.). No delete, unless we want to obliterate the ref.\n\nPatchSetApproval: Most things are upsert (note, not insert as you claim). There is also \"delete\" which is represented by a vote of 0.\n\nPatchSet: Everything is insert.\n\nChangeMessage: Everything is insert.",
      "parentUuid": "23ca8ede_466e72d4",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_27209ab2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-10T07:59:18Z",
      "side": 1,
      "message": "Another requirement on the new backend: to be easy usable from plugins. For example, currently PatchSetApprovals is ab(used) for both humans and bots verifications (Jenkins trigger plugin, Zuul anf buildbot-plugin have no other chance as use `ssh gerrit review --verify`firehose to report build start and end notifications.\n\nThe idea is to replace/extend it with verification-status plugin and shutdown bots notification in review command, providing seperate channel for them. In the end no one want to see 27 messages from build started/ended in history of human reviews. Instead all bots specific notifications are presented in its own table (on change screen per patch set) or on its own screen, with statistics, searches and what not.\n\nThe only reason why this plugin is not there (after JS plugin solved the core UI extension): is unsolved peristence problem. Where how to persist these notifications? Basically they are the same as PatchSetApprovals, except that label categories are different: they are job or platform specific or both. But still the usual suspects: CRUD operation should be supported. It is not clear to me from this change, how can we achieve that, i. e. to be able to persist notifications per patch set in PatchSetVerifications namespace and qery them per patch set base (to render them on change screen)?\n\nAnother question: how can we even make this extended persistence space searcheable from secondary index? To answer question like: sort the list of suported platform in verification notifications in descendant order of breakage rates (verification -1 report).\n\nShould plugins do all the above on its own? I am asking all these questions, because we are replacing database, and all these can be done very easy there...",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_e200661b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "If plugins want their own database they should use their own database. This has always been the case, and will always be the case. :-(\n\nAs for labels for specific builds, projects should declare them in the project.config and allow them to be used by the verification tools. The long-term plan for labels is to have them be even more flexible and generic storage for short strings attached to revisions, with some access controls around who is allowed to set specific labels, e.g. restricting the label set by the automated build system to only that system.",
      "parentUuid": "43d5c277_27209ab2",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_649f2a77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "Shawn\u0027s objections aside, I don\u0027t think it would be too hard for plugins to insert arbitrary commits in the history of a change in a way that is ignorable by the Gerrit core.",
      "parentUuid": "a37bde5e_e200661b",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_0318ee8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T22:25:12Z",
      "side": 1,
      "message": "Yes, I agree with what Dave Borowitz said. Eventually plugins should be able to add their own data into this Git storage, once we get it stable and can adopt some sort of convention so everyone can play along in the same sandbox without stepping on each other\u0027s data accidentally (e.g. accidental naming collisions).",
      "parentUuid": "e3c316c9_649f2a77",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_67c61283",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-10T22:55:11Z",
      "side": 1,
      "message": "Agreed. But, that\u0027s where i wanted to start from and not like to end with, kind waiting two years until we have all these conventions and utilities ;-) So this change is putting \nthe content from PatchSetApprovals table into\n\n refs/gerrit/changes/10/1/\n\nnamespace. Where other approval parts like patch comments and messages are going to be inserted in this model? And where would plugin, put their data? A lá PatchSetVerifications, i. e. like PatchSetApprovals but for bots? Or should we think about plugin refs namespaces in Git world, like we have in web world?\n\n refs/gerrit/plugins/cookbook/changes/10/1/\n\n;-)\n\nAnd you didn\u0027t answer the question about searching? Plugin owned secondary index?",
      "parentUuid": "c3c0d2c1_0318ee8d",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438a229e_5ffc8be5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T23:19:37Z",
      "side": 1,
      "message": "No, this change is putting *all* change data into refs/gerrit/changes/10/1. Right now it\u0027s just PatchSetApprovals because that was a convenient place to start. In the future we will move more tables into these refs (and during the migration we will rewrite history).\n\nIn the gwtorm world, \"all change data\" means \"every entity such that calling getParentKey() zero or more times on that entity\u0027s key/id eventually resolves to a Change.Id\".\n\nIf plugins want to make additional commits on refs/gerrit/changes/10/1, they are free to. The thing we have not nailed down is how to ensure those commits are ignored by the ChangeNotes parser if necessary.\n\nAs for searching...haven\u0027t thought about it. Plugins might want to make their own indexes. Or we might allow plugins to add ChangeFields to the schemas, but then keeping track of the core version + set of plugin versions might be tricky. Or since Lucene is schemaless we might just have some standard way of parsing out indexable fields from commit messages without them having to be specified in the ChangeSchema. Or plugins can still use SQL if they like :)",
      "parentUuid": "43d5c277_67c61283",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2378ce6e_b6e22845",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-10T23:48:50Z",
      "side": 1,
      "message": "Thanks, that helps.",
      "parentUuid": "438a229e_5ffc8be5",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_e7e7a253",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "This statement is kind of obvious and can be removed. Every data format in Git would lack usual database features.",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c74ad6_25536eff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "It\u0027s true that every data format in git would lack indexes, yes. But that still leaves the objection that we can\u0027t move away from a SQL database _at all_ because of the lack of arbitrary query support. This statement is intended to counter that objection :)",
      "parentUuid": "43d5c277_e7e7a253",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_86e22a45",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2013-12-09T21:23:59Z",
      "side": 1,
      "message": "no \"Gerrit-\" prefix? Your refs already called \"refs/gerrit/\".",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_03ef4e2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Ack, I don\u0027t think we need Gerrit- prefix?",
      "parentUuid": "23ca8ede_86e22a45",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c74ad6_0550f2ee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "Ok, I was thinking it would disambiguate in case these overlapped with any \"standard\" footers but that seems pretty unlikely.",
      "parentUuid": "c3c0d2c1_03ef4e2a",
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_43f946f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Label",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_63fc42e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Code-Review+2. If you want to case normalize labels do it in the read path. The write path should be using the case preferred in project.config at the time the write happened.",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c74ad6_c53d3aa6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "I started this but it was actually uglier to parse. I can go back to it.\n\nAlso note that \"Code-Review-0\", while technically not ambiguous, a) feels weird due to negative zero and b) is a valid label name.",
      "parentUuid": "c3c0d2c1_63fc42e6",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_a22bbe99",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T22:25:12Z",
      "side": 1,
      "message": "We already parse it elsewhere in the system. Its the format currently used when writing comments. I\u0027d prefer to try and keep it.\n\nThe label direction is to try and get away from the value suffixes anyway. \"Verified+1\" is a weird statement, we should just say \"Verified\".\n\nWe don\u0027t ever say \"Code-Review-0\". We do say \"-Code-Review\" when you change a \u003e0 score to be 0.",
      "parentUuid": "03c74ad6_c53d3aa6",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438a229e_dfe7bb53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:49:29Z",
      "side": 1,
      "message": "Do we actually parse it anywhere, or we just emit it in PostReview?\n\nI would be ok with:\n\n Code-Review-2\n Code-Review-1\n -Code-Review\n Code-Review\n Code-Review+2\n\ni.e. 0 and +1 are special. Or maybe even just 0 is special.",
      "parentUuid": "a37bde5e_a22bbe99",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_47c30e71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T22:55:54Z",
      "side": 1,
      "message": "I thought the search label predicate parsed the value like this? Maybe I am wrong.\n\nI am happy with what you wrote. The direction we wanted to move towards was more of a binary label state of \"Code-Review\" and \"-Code-Review\" for add and remove. Verified makes sense like that. But not verified doesn\u0027t. I think we were considering something like \"Build-Fails\" for Verified-1 and having the submit rule require \"Build-Fails\" to be not present.",
      "parentUuid": "438a229e_dfe7bb53",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438a229e_7ff94ff4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T23:19:37Z",
      "side": 1,
      "message": "Discussed in person. The label predicate parser is similar but not exact, e.g. it has \u003e\u003c which do not apply here. I will factor out the formatting code from PostReview and the parsing code from here and LabelPredicate so it\u0027s all in one tidy place.",
      "parentUuid": "43d5c277_47c30e71",
      "range": {
        "startLine": 28,
        "startChar": 15,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a37bde5e_02062a34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "I think its OK to machine generate the subject line, but we should maybe try harder to be descriptive of what the change was. I am especially thinking about major actions like adding a new patch set, editing the commit message, rebasing the change, and adding/removing labels. These should worked into the subject so a git shortlog on the branch is descriptive.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_449cae80",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "Ack, will do.",
      "parentUuid": "a37bde5e_02062a34",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 65
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_a3063a35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T21:55:02Z",
      "side": 1,
      "message": "Instead of the account ID in the footer, what about the committer being \"${full_name} \u003caccount-${id}@${gerrit-server}\u003e\", where gerrit-server is canonical web url or some string set by the admin in gerrit.config?",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_a415a226",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:12:04Z",
      "side": 1,
      "message": "I\u0027m actually a bit surprised that git allows this, but so it does.\n\n $ git log -1\n commit 8d2527bb8e211a634c27c50768e8b6e9469c8bb9\n Author: Dave Borowitz \u003c12345@https://gerrit-review.googlesource.com/\u003e\n Date:   Tue Dec 10 14:09:43 2013 -0800\n\n     Add a\n\nThis does seem like it would complicate command-line clients that are editing the data, however, if they want to depend on user.name/email set in ~/.gitconfig.",
      "parentUuid": "c3c0d2c1_a3063a35",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c0d2c1_63156256",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-12-10T22:25:12Z",
      "side": 1,
      "message": "I was suggesting committer, not author line. Author line should be built with the user\u0027s preferred email address.\n\nAnd I was suggesting the host name from canonical web URL, not the full URL. And only if the admin hasn\u0027t supplied a different name. E.g. for AOSP we might be happy to say \"@android-review.googlesource.com\" but for an internal server we might instead prefer to write \"@${company}\" rather than our host name if there is any risk that we will share the /meta branch.\n\nAnd the long term plan is to be able to share (or partially share) /meta branches across servers.",
      "parentUuid": "e3c316c9_a415a226",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "238feeae_dee7c553",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T22:51:15Z",
      "side": 1,
      "message": "Ok, so if a user creates a commit locally with themself as committer, then pushes it to Gerrit, does Gerrit rewrite the committer? Or rejects it?",
      "parentUuid": "c3c0d2c1_63156256",
      "range": {
        "startLine": 38,
        "startChar": 20,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d5c277_476e6ed4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T15:18:34Z",
      "side": 1,
      "message": "What happens if a reviewer votes on the same patch set first Code-Review+1 but then Code-Review-1?\n\nIf I got this right this will result in one commit for each vote. Semantically the second vote should overwrite the first vote. After parsing the votes how do we know which vote counts, Code-Review+1 or Code-Review-1? We could see this of course from the commit history, but the code doesn\u0027t seem to look at this.",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_a4b00212",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T18:00:20Z",
      "side": 1,
      "message": "Yep, just forgot this check, it should ignore older commits by the same user. This might even be enough to make me use a Table instead of a Multimap.\n\n(There is an interesting question what happens when there is enough clock skew between branches in the commit history that commits might get iterated out of timestamp order. Not sure what to do about that, but for now we\u0027re just ensuring a linear history.)",
      "parentUuid": "43d5c277_476e6ed4",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_c661c2e9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T19:56:10Z",
      "side": 1,
      "message": "Since all the timestamps are based on the server clock I think it\u0027s not bad to rely on them. But I\u0027m wondering if we need to rely on the timestamps here. If we have a linear history couldn\u0027t we just take the vote from the commit which is closer to the tip of the branch (in case there several votes from the same user on the same label and same patch set)?",
      "parentUuid": "e3c316c9_a4b00212",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c316c9_e4aafa9b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T20:01:03Z",
      "side": 1,
      "message": "We can\u0027t rely on server clocks being synchronized in a multi-master setup :)\n\nWe could skip the timestamp check but then nonlinear histories are even less likely to work, and it\u0027s barely any more code.",
      "parentUuid": "23ca8ede_c661c2e9",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ca8ede_2677f6ae",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-12-10T20:15:41Z",
      "side": 1,
      "message": "Right, I wasn\u0027t thinking about multimaster.\n\nYes, if we want to be prepared for nonlinear histories we do need the timestamp check and it\u0027s really not much code. Maybe in a multimaster setup we may even end up with a nonlinear history.",
      "parentUuid": "e3c316c9_e4aafa9b",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c74ad6_e53836b8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ChangeNotes.java",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2013-12-10T21:34:23Z",
      "side": 1,
      "message": "googlesource.com\u0027s multi-master implementation has a global state for each ref (modified using paxos), so this is a non-issue for us. But this is not the only approach, e.g. Luca\u0027s suggestion on repo-discuss last week about merging state between masters.\n\nAnother potential source of clock skew (and potentially nonlinear history) is if we allow users to modify the database locally and then push their changes, which is something that would be neat but is a ways in the future.",
      "parentUuid": "23ca8ede_2677f6ae",
      "range": {
        "startLine": 118,
        "startChar": 3,
        "endLine": 121,
        "endChar": 5
      },
      "revId": "3cb9a7b3e43d50ff71cbcea49b1173de3be7bd8e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}