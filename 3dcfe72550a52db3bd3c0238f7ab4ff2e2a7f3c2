{
  "comments": [
    {
      "key": {
        "uuid": "0ccb4b0d_9d304bff",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:04:29Z",
      "side": 1,
      "message": "Here and below: public is unnecessary.",
      "range": {
        "startLine": 26,
        "startChar": 2,
        "endLine": 26,
        "endChar": 8
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d0fda4_35f64efb",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:04:29Z",
      "side": 1,
      "message": "from",
      "range": {
        "startLine": 28,
        "startChar": 35,
        "endLine": 28,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63174942_ecc77fe7",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:04:29Z",
      "side": 1,
      "message": "What about calling this \u0027serialize\u0027 too?",
      "range": {
        "startLine": 44,
        "startChar": 22,
        "endLine": 44,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f774feea_6df50e5a",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:04:29Z",
      "side": 1,
      "message": "What we probably have to find out by using it is whether InputStream, byte[], or ByteBuffer is more handy for use.",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aae6abb9_77f3e071",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-04-25T12:26:14Z",
      "side": 1,
      "message": "I think byte[] is actually better. The choice of InputStream was based on an incorrect assumption about our internal API that I just checked.\n\nI assumed our internal implementation would be serializing to a ByteString (to put in a proto that we send to Bigtable). If that were true, we could call call ser.serialize(obj, ByteString.newOuptut()). and avoid the need for this method entirely. But that doesn\u0027t work. The API we have just takes byte[]s, so what we will need is a method to convert a T to a byte[].\n\nFrom the upstream perspective, the JDBC implementation just puts the result in a PreparedStatement, where using byte[] or InputStream is equally easy.",
      "parentUuid": "f774feea_6df50e5a",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 21
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21dc7197_34936f43",
        "filename": "java/com/google/gerrit/server/cache/CacheSerializer.java",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-04-25T12:26:14Z",
      "side": 1,
      "message": "I was on the fence about calling it \"serialize\" if it returns an InputStream, but given my comments below, I think it should return byte[], in which case \"serialize\" is definitely a better name.",
      "parentUuid": "63174942_ecc77fe7",
      "range": {
        "startLine": 44,
        "startChar": 22,
        "endLine": 44,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89fe7987_376129ee",
        "filename": "java/com/google/gerrit/server/cache/PersistentCacheBinding.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:12:57Z",
      "side": 1,
      "message": "What I forgot to mention so far: I really like the idea of specifying the serializers here. It\u0027s close to where the cache is defined and at the same time allows a lot of flexibility (e.g. special serializer for enums).",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 40,
        "endChar": 83
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed21637f_fd633bf7",
        "filename": "java/com/google/gerrit/server/cache/h2/EntryType.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-24T16:52:18Z",
      "side": 1,
      "message": "I\u0027m not sure whether we should have the serializers as a part of EntryType. In [1], I mentioned why I wouldn\u0027t put the value serializer here. I also don\u0027t see very much benefit from having the key serializer in this class. We rather have some drawbacks: EntryTypes can\u0027t be singletons anymore and we need an explicit cast for the key serializer in case of strings.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/173115/2//COMMIT_MSG#10",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 40,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71e29f18_40932c26",
        "filename": "java/com/google/gerrit/server/cache/h2/EntryType.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-04-24T18:26:51Z",
      "side": 1,
      "message": "I agree that it\u0027s not necessary to have the key/value serializers returned by these methods. However, due to the issues I described in [1], I think the cleanest way forward will be to pass the keySerializer to the ObjectKeyTypeImpl constructor, even though this means there won\u0027t be a singleton KeyType.\n\nIn the long term, frankly, I would much rather get rid of the KeyType/StringType dichotomy and just store all String-valued keys as UTF-8 bytes. I really don\u0027t think it\u0027s buying us anything, and it\u0027s unnecessarily complicating the code. I don\u0027t think admins frequently manually query the cache databases, and even if they do, surely they can manage casting the byte array columns to strings using SQL.\n\nWith that in mind, even though having non-singleton KeyTypes is suboptimal, I\u0027d prefer to keep it that way in the short term.\n\n(Still totally fine with removing these methods from this class.)\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/173550/1/java/com/google/gerrit/server/cache/h2/StringKeyTypeImpl.java#b42",
      "parentUuid": "ed21637f_fd633bf7",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 40,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3f87ecb_7a0057ef",
        "filename": "java/com/google/gerrit/server/cache/h2/EntryType.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-25T12:04:29Z",
      "side": 1,
      "message": "I totally agree.",
      "parentUuid": "71e29f18_40932c26",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 40,
        "endChar": 39
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f4f4215_1c001dab",
        "filename": "java/com/google/gerrit/server/cache/h2/H2CacheFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 209,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-04-24T16:52:18Z",
      "side": 1,
      "message": "Do we still need this?",
      "range": {
        "startLine": 209,
        "startChar": 4,
        "endLine": 209,
        "endChar": 81
      },
      "revId": "3dcfe72550a52db3bd3c0238f7ab4ff2e2a7f3c2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}