{
  "comments": [
    {
      "key": {
        "uuid": "ba51a0aa_5cc69d52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2016-07-14T08:24:46Z",
      "side": 1,
      "message": "it\u0027s good practice to explain why you are doing that.",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba51a0aa_fc28c9e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-14T09:32:37Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ba51a0aa_5cc69d52",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a4cdc15_9bf42b8e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-14T09:32:37Z",
      "side": 1,
      "message": "I think I understand why you need that but I am not sure if this is the best way to do it. Have you checked the GitOverHttpServlet which extends JGit\u0027s GitServlet? The GitServlet is configured with RepositoryResolver, UploadFilter, etc.. \n\nCould we try to follow that pattern for the LfsProtocolServlet?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 44
      },
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a4cdc15_9b2d0bf4",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-14T09:47:06Z",
      "side": 1,
      "message": "This looks like a missing functionality in JGits LfsProtocolServlet.\nEvery LFS implementation which extends the LfsProtocolServlet would have to do a similar thing.\n\nJGit\u0027s LfsProtocolServlet would extract the (project,operation) and it could provide a callback interface which it calls to check if the operation should be allowed. Then the application can implement that callback and apply permission control.",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a2db077_0894a74d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-15T03:55:29Z",
      "side": 1,
      "message": "In Gerrit the LfsProtocolServlet is implemented at plugin level. The LfsPluginServlet only extends HttpServlet. As far as I can see the only thing LfsPluginServlet knows about the LFS plugin is its name; it doesn\u0027t do anything to verify that the given plugin actually implements LfsProtocolServlet.\n\nSo unless I\u0027m missing something, this means that per the current implementation each LFS plugin would need to supply the implementation of the callback.",
      "parentUuid": "9a4cdc15_9b2d0bf4",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aee1374_e1e406d7",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-15T12:58:10Z",
      "side": 1,
      "message": "\u003e In Gerrit the LfsProtocolServlet is implemented at plugin level.\n\nYes. This was intentional.\n\n \u003e The LfsPluginServlet only extends HttpServlet. As far as I can see\n \u003e the only thing LfsPluginServlet knows about the LFS plugin is its\n\nCorrect.\n\nIdeally, Gerrit core doesn\u0027t need and doesn\u0027t want to know anything about LFS.\nEven before the LfsPluginServlet was added to Gerrit it was possible\nto implement an LFS Gerrit plugin which implements the LFS protocol.\nOne small issue in that case would be that plugins can only expose\nservlets under /plugins/\u003cplugin-name\u003e. This would require that every user\nconfigures its LFS client to use this non-default LFS endpoint.\nThis is exactly the issue which is solved by the LfsPluginServlet:\nIt allows a plugin to expose a servlet under the standard LFS endpoint i.e:\n\n  https://gerrit/\u003cproject\u003e/info/lfs/*\n\nFor me, this is also the only purpose of the LfsPluginServlet in Gerrit core.\nEverything else should be done by LFS plugin(s).\n\n\n \u003e name; it doesn\u0027t do anything to verify that the given plugin\n \u003e actually implements LfsProtocolServlet.\n\nCorrect.\n\n \u003e \n \u003e So unless I\u0027m missing something, this means that per the current\n \u003e implementation each LFS plugin would need to supply the\n \u003e implementation of the callback.\n\nYes. Assuming JGit\u0027s LFS protocol implementation provides a callback\nlike:\n\n  public interface LfsOperationFilter {\n    public boolean accept(project, operation);\n  }\n\na LFS plugin could implement such callback if it wants to filter\nwhich operations are allowed or not allowed.",
      "parentUuid": "3a2db077_0894a74d",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a2db077_c8a28fab",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-15T14:16:46Z",
      "side": 1,
      "message": "\u003e a LFS plugin could implement such callback if it wants to filter\n\u003e which operations are allowed or not allowed.\n\nThis isn\u0027t ideal if we want to do something like allowing to configure per project if LFS is enabled or not.  This should be independent of which LFS backend (provided by the plugin) is used. If the callback must be implemented by the plugin, the same has to be implemented in each plugin.",
      "parentUuid": "4aee1374_e1e406d7",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a348866_c2a722b9",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-14T05:14:07Z",
      "side": 1,
      "message": "This is only called once, from the constructor.  Inline it there?",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 77,
        "endChar": 3
      },
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a348866_a2a21eaa",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestValidator.java",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-14T05:14:07Z",
      "side": 1,
      "message": "nit: wrong indentation",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 89,
        "endChar": 6
      },
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a348866_82ba7acc",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestWrapper.java",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-14T05:14:07Z",
      "side": 1,
      "message": "inline this in the call to toByteArray on the next line",
      "range": {
        "startLine": 34,
        "startChar": 21,
        "endLine": 34,
        "endChar": 43
      },
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a348866_62bdf6c4",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestWrapper.java",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-14T05:14:07Z",
      "side": 1,
      "message": "nit: missing blank line between methods.",
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a348866_22b7eee6",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/plugins/lfs/LfsRequestWrapper.java",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-14T05:14:07Z",
      "side": 1,
      "message": "listener",
      "range": {
        "startLine": 56,
        "startChar": 47,
        "endLine": 56,
        "endChar": 51
      },
      "revId": "3f821a8a9e6f1f675480cbde127fa0e1055538e9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}