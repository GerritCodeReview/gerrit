{
  "comments": [
    {
      "key": {
        "uuid": "ffefac37_30adcbcd",
        "filename": "tools/setup_gjf.sh",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-01-28T08:06:16Z",
      "side": 1,
      "message": "This update approach: just replace the current gjf 1.3 version with the new one is way too disruptive. I suggest to use multiple gjf versions in parallel: [1]. \n\nMoreover, we could even support different gjf versions on different branches dynamically, by putting a marker in gerrit tree and wsitch CI dynamically, e.g.:\n\n $ cat version.bzl \n  GERRIT_VERSION \u003d \"2.16-SNAPSHOT\"\n  GJF_VERSION \u003d \"1.5\"\n\nI think we should not adjust all stable (and even obsolete gerrit branches) to newer gjf versions. We started to use gjf since 2.14 and say gjf will change the indentation rule entirely, from blanks to tabs (please don\u0027t), like it\u0027s in JGit now and current gerrit version is 17.0. Should we really apply the \"everything changing formatting change\" on all 15 stable obsolete branches and try to merge and resolve all those non trivial conflicts? What would be the benefit for doing that? Can we merge any commits today to stable-2.6 or even older? Our policy is not to reject any changes to obsolete stable branches.\n\nInstead, we could select gjf version dynamically during CI check.\n\nMoreover, we could extend the ./tools/format/google-java-format facility to also dynamically switch the user gjf verion depending on the gjf version used on the current branch.\n\n* [1] https://gerrit-review.googlesource.com/#/c/gerrit/+/155330",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "4037d773277ad1ec932ce419a45baccbb2fef81a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7219817_ae1119d7",
        "filename": "tools/setup_gjf.sh",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-01-28T08:09:11Z",
      "side": 1,
      "message": "Type in: \"Our policy is not to reject any changes to obsolete stable branches.\" This should have been: \"Our policy is to reject any changes to obsolete stable branches.\"",
      "parentUuid": "ffefac37_30adcbcd",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "4037d773277ad1ec932ce419a45baccbb2fef81a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88c156bb_53c67550",
        "filename": "tools/setup_gjf.sh",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-29T15:19:29Z",
      "side": 1,
      "message": "\u003e Instead, we could select gjf version dynamically during CI check.\n\nAgreed, this is definitely the way to go for now.\n\nOriginally, I thought that the output of gjf would remain very stable over time, but it appears that this was not true as much as I\u0027d hoped. Given that, it definitely makes sense to pin versions on stable branches to avoid unnecessary churn.\n\nAnother (largely orthogonal) option is to run google-java-format-diff.py[1] during CI instead. I had kinda always planned on doing that but never got around to it.\n\n[1] https://github.com/google/google-java-format/blob/master/scripts/google-java-format-diff.py",
      "parentUuid": "c7219817_ae1119d7",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "4037d773277ad1ec932ce419a45baccbb2fef81a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9320790c_22c12c00",
        "filename": "tools/setup_gjf.sh",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-04-10T09:10:45Z",
      "side": 1,
      "message": "I\u0027m in favor of using the same gjf version for all branches \u003e\u003d 2.14.\n\nMerging and cherry-picking is already now a pain due to different directory and package structures, if we start having different formatting rules in addition, this will get even more painful.\n\nAlso then as a developer I need to switch the gjf version depending on which branch I\u0027m working on. I would prefer to not worry about this.\n\nThe number of files that we need to modify to get to gjf 1.5 is kind of moderate [1]. So I think it\u0027s worth keeping the gjf version the same for all branches (I would probably think differently if it was a very invasive change that needs to reformat everything).\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/170870",
      "parentUuid": "88c156bb_53c67550",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "4037d773277ad1ec932ce419a45baccbb2fef81a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fad7dc9e_515cc485",
        "filename": "tools/setup_gjf.sh",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-04-10T09:42:46Z",
      "side": 1,
      "message": "Why \u003e\u003d 2.14 and not \u003e\u003d 2.15?\nAre we considering the 2.14 an \"active development branch\"?",
      "parentUuid": "9320790c_22c12c00",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 21,
        "endChar": 47
      },
      "revId": "4037d773277ad1ec932ce419a45baccbb2fef81a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}