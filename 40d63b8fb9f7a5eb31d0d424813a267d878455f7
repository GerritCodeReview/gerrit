{
  "comments": [
    {
      "key": {
        "uuid": "7ed93590_693de10d",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-30T16:19:23Z",
      "side": 1,
      "message": "not that it would matter much, but this seems terribly inefficient. i\u0027d call git name-rev with a suitable ref filter and then match the tags instead of repeatedly calling git.",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ff63695_9bedd5a7",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2020-05-30T19:17:24Z",
      "side": 1,
      "message": "Not sure `git name-rev` is a good match.\n\nAs far as I know:\n* `git name-rev` does not allow to have `--dirty`,\n* `git name-rev` does not have `--long` (used in follow-up commits),\n* `git name-rev` may use tags that were added on child commits.\n\nSince I might be missing the obvious, could you show me how to\nuse `git name-rev` to get output similar to `git describe`?",
      "parentUuid": "7ed93590_693de10d",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "493670f4_bf20ccfc",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-30T20:46:10Z",
      "side": 1,
      "message": "that was just an idea. maybe git tag --contains would be a better fit. or maybe git describe is already optimal, but a way to avoid calling it repeatedly can be found. or maybe neither.",
      "parentUuid": "8ff63695_9bedd5a7",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b03d270a_4b68da08",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2020-05-30T21:24:55Z",
      "side": 1,
      "message": "Unfortunately, I think `git tag` is not a good match either. It searches in the\nwrong direction, as `--contain` only looks at tags that contain a certain commit, not\ntags that come before a given commit (as we would need here).\n\nBut `git tag` is of course nice to list tags that follow a given pattern. But from this set of tags, we\u0027d need to derive descriptions of the relevant commits (E.g.: \"3 commits after tag `v1.2.3` and the tree is dirty\"), which `git tag` does not do on\nit\u0027s own. In the end, we\u0027d be re-implementing `git describe`, which really matches\nour needs here.\n\nIdeally, we could do with a single call to `git describe` (as we have in the past).\nBut since we\u0027re all humans and we\u0027re way too busy to properly tag each and every build,\nand since we have to deal with CI, where tagging is infeasible, the single call to\n`git describe` ends up not giving the best among the possible choices to describe\na commit. We have lots of conventions on how we use git. Like tagging versions\nstarting in `v`. Like using `stable-$MAJOR.$MINOR` branches. git does not know about\nthese conventions. So `git describe` cannot use them to refine commit descriptions.\nHence, we have to do it manually ... or rather through this dedicated script.",
      "parentUuid": "493670f4_bf20ccfc",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90610adb_3810f63b",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-06-11T06:04:27Z",
      "side": 1,
      "message": "\u003e not that it would matter much, [...]\n\nIt matters a lot to me. Performance is a feature, in your application and in your build. On my main gerrit tree I have 35 plugins. The way how stamping works in Bazel: it will always stamp, if then you wouldn\u0027t actually build any plugin at .\n\nSo even if I run: `bazel build :headless` that would create headless.war artifact without the UI and without the plugin, it would stamp all 35 plugins: [1].\n\nThat why, I would strongly object to any heuristic, that exceed max(2) of bash command issued per plugin directory.\n\nMoreover, we are trying to improve something that we don\u0027t control. I will never tag my plugins. In fact, for many of my plugins, I wouldn\u0027t even create a stable branch. Consider saml plugin (may be a bad example, while it doesn\u0027t touch a lot of plugin API surface, but still). You upgrade gerrit from foo to bar? Fine. Go to the CI and pick up the right version, e.g. 3.2 is here: [2]. With new extension to API version in tree build I could check now, that the plugin was built against the right plugin API version. Done.\n\nAnyway, were I see place for improvement, if one single commit, like in commit-message-length-validator, is tagged with 100 tags, and we are building on stable-3.0 but get v2.16.10 as result.\n\nFor that specific use case, I would probably agree to issue one single additional command in the standard workspace_status.py file:\n\n  $ git tag --points-at HEAD | grep v3.0.9\n  v3.0.9\n\nAnd if it\u0027s found, I would get v3.0.9 instead of v2.16.10. If not found/no tags on the latest commit we are building from, fall back to git describe.\n\nAlso note, that workspace_status.py is used for developers daily work, and thus must be performance optimized. Nevertheless we could add another workspace status command, say workspace_status_release.py and use it on the CI and/or release build. You could probably even suggest to add workspace_status_release.py to contribs directory.\n\nThat way you wouldn\u0027t even need to fork gerrit for Wikimedia, but would just say:\n\n  $ bazel build --workspace_status_command\u003d\"python ./contribs/heuristic_based_plugin_tags_detection.py\"\n\n* [1] http://paste.openstack.org/show/794618\n* [2] https://gerrit-ci.gerritforge.com/view/Plugins-stable-3.2/job/plugin-saml-bazel-master-stable-3.2",
      "parentUuid": "b03d270a_4b68da08",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "856b3017_373629d4",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-06-11T06:11:45Z",
      "side": 1,
      "message": "\u003e In fact, for many of my plugins, I wouldn\u0027t even create a stable branch. [...]\n\u003e Go to the CI and pick up the right version, e.g. 3.2 is here: [2].\n\nIn case you are not aware of that feature of GerritForge-CI, \"build plugin from master branch against permutations of stable branches\" was added here: [3].\n\n[3] https://gerrit-review.googlesource.com/c/gerrit-ci-scripts/+/268640",
      "parentUuid": "90610adb_3810f63b",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b4f03a7_b9da3e4f",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1013267
      },
      "writtenOn": "2020-05-30T16:19:23Z",
      "side": 1,
      "message": "a break would be a lot more readable than that.\nin fact, i\u0027d opt for early returns.",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ab65c1a_1502df48",
        "filename": "tools/workspace_status.py",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2020-05-30T19:17:24Z",
      "side": 1,
      "message": "There goes my poor `single-exit` :-D\n\nDone in PS3.",
      "parentUuid": "1b4f03a7_b9da3e4f",
      "revId": "40d63b8fb9f7a5eb31d0d424813a267d878455f7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}