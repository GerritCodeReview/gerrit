{
  "comments": [
    {
      "key": {
        "uuid": "23927b8a_82495576",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2017-11-14T11:22:11Z",
      "side": 1,
      "message": "As we are doing it here https://gerrit-review.googlesource.com/#/c/plugins/codemirror-editor/+/141052/1/external_plugin_deps.bzl\n\nwe doint need to do it in this change.\n\nyou copy external_plugin_deps.bzl into plugins/ which gerrit will then load it into WORKSPACE automatically :).",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 36
      },
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1873b62f_57eaf1f2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T06:21:25Z",
      "side": 1,
      "message": "This is not how this supposed to work. Check this example, how such an optional depndency added in oauth plugin: [1]. Note, that there is no mention of \"org.scribe:scribe:1.3.7\" in gerrit core WORKSPACE file to be used from optional oauth-plugin.\n\nIt shouldn\u0027t be needed to add optional dependency in WORKSPACE file in gerrit core to be used from plugin. external_plugin_deps.bzl is a normal include that it referenced by the WORKSPACE file, so that everything you add there, is basically the same as to add it in WORKSPACE in gerrit core, as you did here: [2].\n\nI think that the problem is not to add new JS dependency to  WORKSPACE, but the other places, the JS dependency is added. Those places are needed for minification to work and themself generated from the WORKSPACE content.\n\nI think, what should happen is that similar to the extension point extending custom java and other library dependency from plugin with external_plugin_deps.bzl, the needed extension points should be added to add optional JS library to PG, that extend the exsisting minification machinery.\n\n* [1] https://github.com/davido/gerrit-oauth-provider/blob/master/external_plugin_deps.bzl#L4-L8\n* [2] https://gerrit-review.googlesource.com/#/c/plugins/codemirror-editor/+/141052/1/external_plugin_deps.bzl",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "516bc753_057ca404",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T06:21:25Z",
      "side": 1,
      "message": "Adding this dependency in gerrit core for an optional plugins is, well, unfortunate. If we don\u0027t know how to get it right, this should be documented as a hack. I will not oppose to add  it here, but this would mean, that the only way to extend PG with plugin that depends on non provided JS library is to fork gerrit. Long term we should find a way to add the dependency in gerrit core without forking gerrit. For this change: add a comment saying that this is a hack.",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43d89b2b_a969305d",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-14T18:21:14Z",
      "side": 1,
      "message": "Should I explore building with bazel standalone, instead?\n\nhttps://gerrit-review.googlesource.com/Documentation/dev-build-plugins.html#_bazel_standalone_driven\n\nI stayed away from that process mostly because it wasn\u0027t documented at all. I realize that adding a dependency here is suboptimal, but I didn\u0027t know what else was possible. If you think this approach is bad for the health of the project, I\u0027m totally willing to explore other avenues.",
      "parentUuid": "516bc753_057ca404",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48128236_7f524d7a",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2017-11-14T18:46:20Z",
      "side": 1,
      "message": "You wont need to use standalone though it will probaly be a good idea to support it :).",
      "parentUuid": "43d89b2b_a969305d",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0b8375f_dde8b96e",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T18:57:50Z",
      "side": 1,
      "message": "I\u0027m not sure if standalone mode is easier to implement for JS plugin with external bower archive dependency. My guess it should be easier to do in gerrit tree build, or at least I would try to provide in gerrit tree build first. But my main point is, that ideally, optional plugin in either build mode shouldn\u0027t touch any files in gerrit core. In gerrit tree build mode (that always assumes that the whole gerrit source tree is available) could be implemented like this:\n\n* 1. clone gerrit\n* 2. clone js-plugin into gerrit/plugins directory\n* 3. copy js-plugin/external_plugins_deps.bzl to gerrit plugins directory\n* 4. copy js-plugin/external_bower_deps.bzl to gerrit plugins directory\n* 5. re-generate python tools/js/bower2bazel.py -w lib/js/bower_archives.bzl -b lib/js/bower_components.bzl\n* 6. run bazel build polygerrit\n\nAt this point I would expect, that the external bower dependencies are fetched and minified and the plugin is fully functional. Note that with these steps above we wouldn\u0027t touch any gerrit core files (nothing to commit).",
      "parentUuid": "43d89b2b_a969305d",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03fa0c9d_bc36dd44",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-14T19:08:18Z",
      "side": 1,
      "message": "@David that sounds awesome to me!\n\nIs there any technical way I could squash steps 2 or 3 through 6 into one big step with bazel?",
      "parentUuid": "c0b8375f_dde8b96e",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "037c9ef0_a19efe70",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T20:10:29Z",
      "side": 1,
      "message": "We do have some special handling in tree build for so-called core plugins. And we recently added some means to extend core plugins with custom plugins. Say gerrit site would like to add delete-project and lfs-plugin, then those plugins could be added to: CUSTOM_PLUGINS in tools/bzl/plugins.bzl:\n\n  CUSTOM_PLUGINS \u003d [\n    # Add custom core plugins here\n  ]\n\nSo, something similar could be added for JS plugins with external dependencies. I would also recommend to talk to Dave and Han-Wen as they implemented Buck/Bazel build tool chain for PG.",
      "parentUuid": "03fa0c9d_bc36dd44",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c8e1157_12f05f91",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2017-11-14T21:22:19Z",
      "side": 1,
      "message": "Oh that would be great if this plugin is at least added by default :).",
      "parentUuid": "037c9ef0_a19efe70",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "660182f7_30fc0de0",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-16T19:52:44Z",
      "side": 1,
      "message": "What defines a \"core plugin\"? Can \"core plugins\" be optionally excluded by site admins?\n\nI think that, if that\u0027s the case, this editor plugin is perfect as a core plugin.",
      "parentUuid": "3c8e1157_12f05f91",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbbf21e8_26776569",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-16T20:32:34Z",
      "side": 1,
      "message": "Core plugins are submodules, with plugin java source code. Those core plugins are defined here, and gerrit build process aware of them and the core plugin final artifacts (JAR files) are provided in gerrit.war. You can use `java -jar gerrit.war ls` to list te content of gerrit and the core plugins are shown.\n\nUntil now, we only define core java plugins. Example: replication plugin.\n\nWenn site admin first time initialize gerrit.war, by running:\n\n  $ java -jar gerrit.war init -d \u003csite_path\u003e\n\nshe is asked whether or not core plugins should be installed. So far, all core plugins don\u0027t have any external dependency. There is one excepton, though: replication plugin.\n\nHowever, the dependency, that is needed for replication plugin to work properly (commons-io.jar) is *not* shipped within gerrit.war but included as shaded JAR in the replication plugin itself.\n\nBut, because all core plugins are built during normal gerrit build process, and because, in Bazel, all external dependency must be specified in analysis phase, it must be specified in gerrit own WORKSPACE file: [2], so that the plugin can specify this transitive dependency in its own build process that is done here: [3].\n\n* [1] https://github.com/GerritCodeReview/gerrit/blob/master/tools/bzl/plugins.bzl#L1-L8\n* [2] https://github.com/GerritCodeReview/gerrit/blob/master/WORKSPACE#L878-L882\n* [3] https://github.com/GerritCodeReview/plugins_replication/blob/master/BUILD#L17",
      "parentUuid": "660182f7_30fc0de0",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f6877b9_cc6e16fe",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-11-16T21:44:41Z",
      "side": 1,
      "message": "Very helpful! Thanks.\n\nI think, for now, I\u0027m going to try to get the plugin building at all (using script tags to load the dependencies), and integrate it as a \u0027custom plugin\u0027.\n\nOne thing I\u0027m not too sure about -- what is the difference between a \u0027core\u0027 and a \u0027custom\u0027 plugin? They seem to be treated the same way by the build process.",
      "parentUuid": "bbbf21e8_26776569",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dfcbfc6_3aee2cd1",
        "filename": "WORKSPACE",
        "patchSetId": 2
      },
      "lineNbr": 1153,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-16T22:02:04Z",
      "side": 1,
      "message": "\u003e One thing I\u0027m not too sure about -- what is the difference between\n \u003e a \u0027core\u0027 and a \u0027custom\u0027 plugin? They seem to be treated the same\n \u003e way by the build process.\n\nYes, exactly, besides that, the custom plugins set is empty. So, that gerrit user would have to do two things to add a custom plugin to their custom gerrit WAR distribution:\n\n* 1. Clone the custom plugin to plugins directory\n* 2. Add cutsom plugin name to the plugins.bzl file in: [1]\n\nSomething like:\n\n  CUSTOM_PLUGINS \u003d [\n    \"gerrit-oath-provider\"\n  ]\n\nLet\u0027s assume some company forked gerrit and added my gerrit-oauth-provider plugin as custom plugin: [2] with two steps described above. Now, when `bazel build release` is issued, gerrit.war would contain all core plugins + gerrit-oauth-provider.jar. When `java -jar gerrit.war init -d \u003csite_path\u003e` is executed, site admin would have a chance to install the gerrit-oauth-provider.jar during gerrit initialization (it would be copied to \u003csite_path\u003e/plugins directory + init plugin step would be executed, annd secret key for OAuth2 provider could be entered during gerri set-up process). Alternative way would be to download the plugin from some external locations and install and initialize it later.\n\n* [1] https://github.com/GerritCodeReview/gerrit/blob/master/tools/bzl/plugins.bzl#L11\n* [2] https://github.com/davido/gerrit-oauth-provider",
      "parentUuid": "7f6877b9_cc6e16fe",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78bc3262_ca22f529",
        "filename": "lib/js/bower_archives.bzl",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T06:21:25Z",
      "side": 1,
      "message": "You have added it already in: [1]. Current WORKSPACE file in gerrit core saying:\n\n  load_bower_archives()\n  external_plugin_deps()\n\nSo that adding it to external_plugin_deps.bzl is the same as add it here.\n\n* [1] https://gerrit-review.googlesource.com/#/c/plugins/codemirror-editor/+/141052/1/external_plugin_deps.bzl",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 29,
        "endChar": 54
      },
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59225dc7_c0690629",
        "filename": "lib/js/bower_archives.bzl",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-11-14T04:31:28Z",
      "side": 1,
      "message": "Is this change intentional?",
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b05a5f12_4a64c183",
        "filename": "lib/js/bower_components.bzl",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T06:21:25Z",
      "side": 1,
      "message": "Extension point canidate would be to include external_bower_components.bzl from with the JS plugins. Just add above the line:\n\n  load(\"//plugins:external_bower_components.bzl\", \"external_bower_deps\")\n\nand invoke:\n\n  external_bower_deps()\n\nat the end of this file. Now, create a new file plugins:external_bower_components.bzl, with similar content to plugins/external_plugin_deps.bzl:\n\n  def external_bower_deps():\n    pass",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba5dd611_8f532337",
        "filename": "tools/js/bower2bazel.py",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-11-14T06:21:25Z",
      "side": 1,
      "message": "Extension point candidate would be: external_package_listeners.bzl.\n\nTo add extension point here for Bazel would either mean to add some way in external_plugin_deps.bzl to register external package listeners or, copy external_package_listeners.bzl to plugins and include it here.",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 36,
        "endChar": 47
      },
      "revId": "40de18c7e48bc0ddfc640c976f2ca8bf91ae655a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}