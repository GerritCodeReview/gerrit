{
  "comments": [
    {
      "key": {
        "uuid": "AAABE3///fU\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-29T09:49:37Z",
      "side": 1,
      "message": "New file means (C) 2011",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///fI\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-29T09:49:37Z",
      "side": 1,
      "message": "Unused",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///fM\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-29T09:49:37Z",
      "side": 1,
      "message": "Unused",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///fQ\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-29T09:49:37Z",
      "side": 1,
      "message": "Unused",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///e8\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-29T09:49:37Z",
      "side": 1,
      "message": "Since any ancestors should not be added several times, perhaps a Set will do?\n\nIn that case the seen-logic can be re-factored away?",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///as\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-08-29T18:07:55Z",
      "side": 1,
      "message": "To get them to display in order, an ordered Collection is needed.  Do you have an ordered Set to suggest?   I don\u0027t think a TreeSet would work because it seems to rely on sorting to achieve order, I don\u0027t think it can handle an arbitrary ordering.",
      "parentUuid": "AAABE3///e8\u003d",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///MI\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/project/ProjectAncestors.java",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2011-08-30T07:20:38Z",
      "side": 1,
      "message": "LinkedHashSet?\n\n\"Hash table and linked list implementation of the Set interface, with predictable iteration order. This implementation differs from HashSet in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is the order in which elements were inserted into the set (insertion-order). Note that insertion order is not affected if an element is re-inserted into the set.\"",
      "parentUuid": "AAABE3///as\u003d",
      "revId": "416efc2902bbe02e3524bc9daf066f1da2b311d9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}