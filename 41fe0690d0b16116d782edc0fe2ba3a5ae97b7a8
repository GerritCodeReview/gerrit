{
  "comments": [
    {
      "key": {
        "uuid": "af46b048_68906efc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-12-05T04:41:37Z",
      "side": 1,
      "message": "Please replace this with reference to a publicly visible issue on crbug.com",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 17
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2c1cc44_23e36f2c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1070962
      },
      "writtenOn": "2020-01-09T00:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af46b048_68906efc",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 17
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2f98691_034a99ac",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-12-05T04:41:37Z",
      "side": 1,
      "message": "I see several places in the code where null is passed, so this should be annotated as @Nullable and should probably have a javadoc @param tag explaining it.\n\nAlso, it would be better to add a new method with this new signature and make the existing one have a default implementation that passes null.",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 70
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b99aaa0_9b32373e",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-12-05T08:09:19Z",
      "side": 1,
      "message": "This should not be a ChangeInfo. Please pass Change.Id and Project.NameKey only.",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f33ab7b6_52ea911f",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-12-05T08:24:43Z",
      "side": 1,
      "message": "Using ChangeInfo here is by analogy with ChangeEvent. Is the idea that you\u0027d prefer that the caller use the Change.Id and Project.NameKey to look up the change (in particular since this makes validation cheaper if the caller doesn\u0027t need some fields from ChangeInfo)? That makes sense to me.\n\n(not about this change) Should we update ChangeEvent with getChangeNumber and getProject methods and make the getChange method lazy?\n\n(about this change) Can we encapsulate the validateComments args into an interface or struct to make it easier to add additional context info later? E.g.\n\n interface CommentValidationEvent {\n   ImmutableList\u003cCommentForValidation\u003e getComments();\n   Change.Id getChangeId();\n   Project.NameKey getProject();\n }\n\n ImmutableList\u003cCommentValidationFailure\u003e validateComments(CommentValidationEvent event);",
      "parentUuid": "6b99aaa0_9b32373e",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d06fc7_5bbc560b",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-12-05T08:36:07Z",
      "side": 1,
      "message": "There are different issues with ChangeInfo in plugin APIs (and also events) that make me prefer identifiers (other than the general premise in preferring identifiers in APIs instead of rich objects for having more stable APIs):\n1) ChangeInfo is a type we expose on the public APIs. So every time it gains or looses a field, that affects the plugin/event API\n2) ChangeInfo rendering is conditional depending on the provided options - at least on the public API. In plugin APIs, there is no such query option. In events, there is a default option, but the fact as a whole doesn\u0027t feel right\n3) Rendering ChangeInfo can be expensive: If you include \u0027mergeable\u0027 or any diff info or files, the caller of the plugin API is forced to compute these fields at a high cost without knowing if the callee needs them at all. \n4) Gerrit is pretty good with caching these days, so if you want say the ProjectState and have just a Project.NameKey, that lookup is for free (in-memory).\n5) Identifiers are less likely to change, so using only these makes the API more stable. ChangeInfo can gain or loose fields more quickly.",
      "parentUuid": "f33ab7b6_52ea911f",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e0fa423_ce7d7843",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1070962
      },
      "writtenOn": "2020-01-09T00:28:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10d06fc7_5bbc560b",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a533ebfb_d67ba852",
        "filename": "java/com/google/gerrit/extensions/validators/CommentValidator.java",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1070962
      },
      "writtenOn": "2020-01-09T00:37:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2f98691_034a99ac",
      "range": {
        "startLine": 34,
        "startChar": 52,
        "endLine": 34,
        "endChar": 70
      },
      "revId": "41fe0690d0b16116d782edc0fe2ba3a5ae97b7a8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}