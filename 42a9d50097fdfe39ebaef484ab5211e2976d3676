{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "efe5fba6_7d6c3752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T10:42:00Z",
      "side": 1,
      "message": "Thanks for all the comments, PTAL",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d89d448_a38683b0",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T11:08:53Z",
      "side": 1,
      "message": "You\u0027re computing the sharedPrefix and sharedSuffix indices twice (once inside of trimMatching) and once down-below.\n\nWhat about inlining the logic of trimMatching so you avoid recomputing?\n\nAlternatively, have a single function called \u0027splitCommonPrefixAndSuffix\u0027 that returns a 3-tuple or record.",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bbd32d8_b43796c7",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T12:01:38Z",
      "side": 1,
      "message": "This is part of an overall complicated logic and JS is lightning fast when not doing DOM operations, so it is far more important to simplify wherever possible than to avoid rechecking a few characters on a few strings.\n\nIf you are confident there will be real performance gains to optimizing this I can take some time and do a benchmark, but on face value it is not right to trade off any readability here even if some duplication is apparent and we have an itch to make that go away.",
      "parentUuid": "6d89d448_a38683b0",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "213c4058_d7e913a7",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T12:09:02Z",
      "side": 1,
      "message": "I disagree that performance and readability are at odds here.\n\nPerformance is death by a thousand paper cuts, where we can easily avoid duplicative effort we should.\n\nDon\u0027t optimize prematurely !\u003d write code that computes things more than necessary.",
      "parentUuid": "4bbd32d8_b43796c7",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5b302c2_62afc2f3",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T13:44:55Z",
      "side": 1,
      "message": "I disagree with all of that, but I don\u0027t think we will make progress here. I have made your suggestion and deleted the utility",
      "parentUuid": "213c4058_d7e913a7",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c93d6f2_9e18d592",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T12:09:02Z",
      "side": 1,
      "message": "```suggestion\n  const commonPrefix \u003d getSharedPrefix(match[0], fullReplacementText);\n  const commonSuffix \u003d getSharedSuffix(match[0], fullReplacementText);\n  const prefixIndex \u003d commonPrefix.length;\n  const suffixIndex \u003d match[0].length - commonSuffix.length;\n  \n  return partialResults.push({\n    replacedTextStartPosition: \n      partialResults.push({\n        replacedTextStartPosition:  match.index + prefixIndex,\n        replacedTextEndPosition: match.index + suffixIndex,\n        replacementText: fullReplacementText.substring(prefixIndex, suffixIndex)\n      });\n```",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42d68149_59340e2d",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T13:44:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c93d6f2_9e18d592",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 76,
        "endChar": 9
      },
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26eff00b_3509508f",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T11:08:53Z",
      "side": 1,
      "message": "Given this is just concatening strings, I find it harder to read with the string-expansion format (no syntax highlighting and it\u0027s harder to read if there\u0027s any extra characters in the string).\n\nWhat about:\n\n```\ntext.substring(0, rewrite.replacedTextStartPosition).concat(\n  rewrite.replacementText).concat(\n     text.substring(rewrite.replacedTextEndPosition);\n```",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a54aaacd_cc216bdc",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T12:01:38Z",
      "side": 1,
      "message": "Done. Definitely better in this case, thanks.\n\n\u003e no syntax highlighting\n\nthis part is a gerrit bug, not a coding problem IMO. Everybody else highlights it just fine (github, vscode, code search, etc).",
      "parentUuid": "26eff00b_3509508f",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3352449e_63391494",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T11:08:53Z",
      "side": 1,
      "message": "Is this safe from XSS injections?  I.o.w. do we know that displayText can not contain html.",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b398e28_ba98a3e5",
        "filename": "polygerrit-ui/app/utils/link-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 157,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T12:01:38Z",
      "side": 1,
      "message": "all user\u0027s input is escaped [1](https://gerrit-review.googlesource.com/c/gerrit/+/347974/4/polygerrit-ui/app/elements/shared/gr-formatted-text/gr-formatted-text.ts#125), [2](https://gerrit-review.googlesource.com/c/gerrit/+/347974/4/polygerrit-ui/app/elements/shared/gr-formatted-text/gr-formatted-text.ts#192) and final output is sanitized for safety [1](https://gerrit-review.googlesource.com/c/gerrit/+/347974/4/polygerrit-ui/app/elements/shared/gr-formatted-text/gr-formatted-text.ts#130), [2](https://gerrit-review.googlesource.com/c/gerrit/+/347974/4/polygerrit-ui/app/elements/shared/gr-formatted-text/gr-formatted-text.ts#182).",
      "parentUuid": "3352449e_63391494",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21624553_dac52042",
        "filename": "polygerrit-ui/app/utils/string-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-10-14T11:08:53Z",
      "side": 1,
      "message": "Unnecessary whitespace.",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c12b72d2_74482ef8",
        "filename": "polygerrit-ui/app/utils/string-util.ts",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2022-10-14T12:01:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21624553_dac52042",
      "revId": "42a9d50097fdfe39ebaef484ab5211e2976d3676",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}