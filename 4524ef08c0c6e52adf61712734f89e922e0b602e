{
  "pushCert": "certificate version 0.1\npusher A0D0EF51 1538750587 +0200\nnonce AP50N7biySG9tZG/kZDsdKB8yRls9V1BVX4M0EOT2y7zgwSc/0AEXRK6wgMn8nLqW9xT/KqBce4z\n\n0000000000000000000000000000000000000000 4524ef08c0c6e52adf61712734f89e922e0b602e refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEjcOJ9ZBmQPrFqZA3UbX9l6DQ71EFAlu3eHsACgkQUbX9l6DQ\n71H1SQgAqaZ2/9da0KYtpJG2J7hkdrNIDqX05lz3ECQFWZpMNWk75m+1x40aAcLO\nNmMhgNG3z3WOT4ICiiwxAdVTRG3hb10aGvG2KYQWLLNLK55fV3x0rKf2YvttwIFT\nUsn35APLntsks5PV5ciAE7ghSfPC1pEClPmnE70J2kxdFA2sME/iioI/qb9yZuRE\n1YTzXefk7kSZh/Rxegzk7sEX4+1ue3ABbzaUdtb9lpoVM3mxC0NXDIWWETwSdbx0\ndLe5lQzGNPRvRoChaDrC+jg96giOcQLP8xiMeHL4MysqocYtz3rbSWBxTRoC9OTd\nufRbzl8r37a8XV7JpyMSkRv6LCTQvQ\u003d\u003d\n\u003dz0g5\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "0dd3cb1f_1049cd46",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5948,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-05T16:20:13Z",
      "side": 1,
      "message": "Not sure this is the right name for the option; cherry-pick by definition always auto-merges the contents of the two trees. Maybe something like \"allow_conflicts\"?\n\n(I understand that it\u0027s reusing code from AutoMerger, but that feels like an implementation detail. I think the name \"AutoMerger\" is about creating \"automatic merge commits\", not about automatically merging file contents. TBH the code to coalesce conflicted merge results into a single stage-0 tree probably belongs in a differently-named class, but that cleanup is pretty low priority to me.)",
      "range": {
        "startLine": 5948,
        "startChar": 2,
        "endLine": 5948,
        "endChar": 12
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09600242_26592bd2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5948,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-05T16:48:31Z",
      "side": 1,
      "message": "Yeah, I wasn\u0027t sure how to name it. \"allow_conflicts\" sounds better to me. Thanks for the suggestion.",
      "parentUuid": "0dd3cb1f_1049cd46",
      "range": {
        "startLine": 5948,
        "startChar": 2,
        "endLine": 5948,
        "endChar": 12
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f39bd658_91e17b80",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5948,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-08T11:23:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09600242_26592bd2",
      "range": {
        "startLine": 5948,
        "startChar": 2,
        "endLine": 5948,
        "endChar": 12
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc7d257d_7821e8e2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2018-10-06T19:49:18Z",
      "side": 1,
      "message": "Will you provide some signal to the caller that *some* merge conflict was encountered?\n\nIn a simple case\n\n* caller tries to CP via the API\n* caller is notified that a merge conflict was encountered\n* caller is then able to take action with the conflicting code\n\n--\n\nIf a signal is not provided about the merge conflict all callers of the API will need to introspect all impacted files which seems hard.",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bfebaa2_59d87844",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-08T11:23:00Z",
      "side": 1,
      "message": "That\u0027s a good point. Thanks for bringing it up.\n\nThis was not very straight-forward to implement without breaking backwards compatibility. The commit message contains details about the approach that I have chosen. Please let me know if anyone has a better idea.\n\nDone.",
      "parentUuid": "cc7d257d_7821e8e2",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d37b79f_cd05e15d",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-08T22:09:30Z",
      "side": 1,
      "message": "Some alternatives that don\u0027t require changing the API:\n* Put the list of files with conflicts in the commit message of the new change. There\u0027s a risk that the user will forget to edit the list of conflicted files out of the commit message when resolving the conflicts, but is that really so bad?\n* Put the list of files with conflicts in a ChangeMessage on the new change.\n\nThe downside in both cases is a tool using the API would have to somehow make a second API call and infer from the textual results whether any conflicts occurred. But, if the use case is just for a human to immediately go look at the change anyway, maybe you can skip the second API call.\n\nSam, any thoughts?",
      "parentUuid": "1bfebaa2_59d87844",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2985f0dc_f14df431",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-09T06:21:06Z",
      "side": 1,
      "message": "Dave, thanks for proposing more ideas. \nThat\u0027s certainly doable.\n\nWaiting for Sams answer to know what works best for them.",
      "parentUuid": "1d37b79f_cd05e15d",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc04551_eba29590",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2018-10-09T14:01:12Z",
      "side": 1,
      "message": "The API boolean bit covers all of our use cases âœ“\n\nWhat I like about the boolean bit is that it is an explicit interface with no ambiguity and makes client code very explicit. \n\nParsing commit messages / using commit messages as an interface has three major downsides that jump out:\n\n- collisions with user commits\n- ambiguity in explicit interface signal\n- makes migrating the merge conflict signal hard / impossible (since you would have to go back and edit all commit messages in history)\n\nWe on Android have done the entire parse commit message / use commit message as a state store multiple times but it has never been an ideal outcome, there have consistently been issues (see above).\n\nFrom our side an API boolean bit would be ideal! ðŸ‘Œ \n\n\n----\n\nAs for optimizing for humans, this is an interesting concern. Since this is an API only interface deciding on an interface based on human readability seems counter intuitive.\n\nIMHO one path to signal the inclusion of a merge conflict would yes be to modify the commit message \n~~MERGE CONFLICT INCLUDED~  and also set the bit, however this does feel more and more like a UI concern, so it may come down to the change entity storing another API level field that displays can read from.\n\n\nBut I go back to my initial point, are we optimizing for humans in this case? Is this even a concern since it is only an API level thing?",
      "parentUuid": "2985f0dc_f14df431",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a021e51_64dd6ac9",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-09T14:18:52Z",
      "side": 1,
      "message": "\u003e As for optimizing for humans, this is an interesting concern. Since this is an API only interface deciding on an interface based on human readability seems counter intuitive.\n\nI feel like I\u0027m missing something. You said you wanted this in order to speed up the creation of new changes containing merge conflict markers, since there may be many of them on many branches. But what\u0027s the next step? Doesn\u0027t a human have to come in and resolve the conflicts? So what\u0027s wrong with doing a thing to make the human\u0027s life easier?\n\nAnyway, I think I understand the concern now. This is the workflow for the tool, please correct me if I\u0027m wrong:\n\n* Tool cherry-picks a change to 100 branches\n* 90 of those succeed with no conflict, 10 succeed in creating a new change with a conflict\n* Tool informs the user: here are 10 changes you need to go look at in the UI and download/edit to resolve the conflicts\n\nSo to be useful, the tool needs to be able to identify precisely which of the picks fail.\n\nISTM you could do this without changing the return value at all, if you just make 2 requests, first with allow_conflicts\u003dfalse, then with allow_conflicts\u003dtrue. I can see why you would prefer having a bit in the return value, though.\n\nBut there would still be the issue of how does the user know which of the files in the change resulted in conflicts; what if there are hundreds of files, but only one conflicting? Would it make sense to return that as additional information in the return value, or add a top-level change message?",
      "parentUuid": "0dc04551_eba29590",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ba1e223_fc6d51d6",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2018-10-09T14:31:53Z",
      "side": 1,
      "message": "Good point.\n\nIncluding the files with conflicts in the commit messages, paired with the API response bit seems like a solution that will solve both sides of problem.\n\n+1",
      "parentUuid": "9a021e51_64dd6ac9",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "475d74cc_25f1a299",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-09T15:57:27Z",
      "side": 1,
      "message": "\u003e Including the files with conflicts in the commit messages\n\nIMO s/commit message/change message/. A commit message ends up in the git history of the branch; a change message is just present in the code review activity log.\n\nAnyway, +1. Sorry Edwin, I tried to make it less complicated for you, but it ended up being slightly more complicated. At least the harder part is already done.",
      "parentUuid": "1ba1e223_fc6d51d6",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20b5148f_5bb30c80",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-09T15:59:25Z",
      "side": 1,
      "message": "No problem, I will look further into this tomorrow.\nActually I think creating this change message can also be implemented in a follow-up change.",
      "parentUuid": "475d74cc_25f1a299",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc902e0d_b582a7e3",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2018-10-09T16:01:55Z",
      "side": 1,
      "message": "+1 to change message\nsorry taxonomy collision on my side :)",
      "parentUuid": "20b5148f_5bb30c80",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "465584dc_d4521c38",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 2
      },
      "lineNbr": 5950,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-09T16:33:57Z",
      "side": 1,
      "message": "\u003e Actually I think creating this change message can also be implemented in a follow-up change.\n\nAgreed. I will go ahead and review this change as-is.",
      "parentUuid": "cc902e0d_b582a7e3",
      "range": {
        "startLine": 5950,
        "startChar": 0,
        "endLine": 5950,
        "endChar": 27
      },
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a39d5730_fddbe18c",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-05T16:20:13Z",
      "side": 1,
      "message": "Move this down after the checkState(m instanceof ResolveMerger)?",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7397b23_1802e1e9",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-05T16:48:31Z",
      "side": 1,
      "message": "This doesn\u0027t work, we must set this before invoking m.merge(...).\nOtherwise the entries in the DirCache are not populated.\nProbably deserves a comment here.",
      "parentUuid": "a39d5730_fddbe18c",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4028c4b9_e19d9b51",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 248,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-08T11:23:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7397b23_1802e1e9",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2dc0a10_dde889e4",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-05T16:20:13Z",
      "side": 1,
      "message": "Why a 500 instead of a 400 or something?",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5435f539_1db8b8ea",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-05T16:48:31Z",
      "side": 1,
      "message": "Because we expect this to always be a ResolveMerge and if it isn\u0027t one then it\u0027s a bug. It\u0027s not that the user made anything wrong, so it\u0027s not a bad request?",
      "parentUuid": "a2dc0a10_dde889e4",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5f0037_7a62ae01",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-10-06T21:54:57Z",
      "side": 1,
      "message": "I was thinking of the useContentMerge \u003d false case, in which case I thought it\u0027s not a ResolveMerger.",
      "parentUuid": "5435f539_1db8b8ea",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad87172_4dd2977e",
        "filename": "java/com/google/gerrit/server/git/MergeUtil.java",
        "patchSetId": 2
      },
      "lineNbr": 263,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-10-08T11:23:00Z",
      "side": 1,
      "message": "Good point. I think in this case we should always set useContentMerge \u003d true if a cherry-pick with allowConflicts \u003d true is done.\n\nDone",
      "parentUuid": "df5f0037_7a62ae01",
      "revId": "4524ef08c0c6e52adf61712734f89e922e0b602e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}