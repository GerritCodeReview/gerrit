{
  "pushCert": "certificate version 0.1\npusher A0D0EF51 1536326573 +0200\nnonce ACQ0Hpx8zALiiIW2i1iGvmwHFiPllICxEsynyIcKE2gtzQhfRyuE1182I4ERP50AcltfEOuLMfr+\n\n0000000000000000000000000000000000000000 45f92ee17fcd72b587f5bd2eab94a886bfe195ab refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEjcOJ9ZBmQPrFqZA3UbX9l6DQ71EFAluSe64ACgkQUbX9l6DQ\n71FLfAf9G0+c38M4NPebNM7yDqJrbAg1JBonKpJlN0/MnIWzRLXNQLhrfQC5Q4FM\nyBBfa5gfcNe8GJ2EYEUq/qKieNPkjTtI0EPzmydStqw82PqzaTYcYJtncgD4OZ4w\nc08rApqelxNGuhExLaIi4e2WtMJib036K2jffgIb+15AzXLuIO3Pwi7ZRiim6FvZ\n0sYH79Jdrrj/Tm4DmgHt1CpbGj+ekVDgd8k3cpNBAXf/5pwpVv3kbOTrol5+GU1r\nUyunYET9bK7Fo3XYC+fgPzwiYGInRkzVluMdDiFCmEV9Yc33tyGV//MdKYGg8z9c\n7I07UY52MfASvOMyphK33p1mxj8maw\u003d\u003d\n\u003d81fd\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "4493289f_9d45b2d9",
        "filename": "java/com/google/gerrit/extensions/registration/DynamicSet.java",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "After this change, is there actually a use case for iterating over the elements in a DynamicSet rather than their Entry wrappers? ISTM it would be programmer error to forget to call .entries() on your DynamicSet. If there is no use case, maybe we should consider making this an Iterable\u003cDynamicSet.Entry\u003cT\u003e\u003e instead.\n\nUnfortunately I think there\u0027s no way to enforce that callers remember to call TraceContext.newTrace and/or to eliminate the extra level of nesting. But I\u0027m hoping that the fact that they are handed an Entry instance is a reminder that you should do something else in addition to calling .get() on it.",
      "range": {
        "startLine": 47,
        "startChar": 38,
        "endLine": 47,
        "endChar": 50
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d67d0daf_0e15c295",
        "filename": "java/com/google/gerrit/extensions/registration/DynamicSet.java",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-11T15:00:40Z",
      "side": 1,
      "message": "\u003e After this change, is there actually a use case for iterating over the elements in a DynamicSet rather than \n\u003e their Entry wrappers? ISTM it would be programmer error to forget to call .entries() on your DynamicSet. If \n\u003e there is no use case, maybe we should consider making this an Iterable\u003cDynamicSet.Entry\u003cT\u003e\u003e instead.\n\nGood point. I think it makes sense to change it to Iterable\u003cDynamicSet.Entry\u003cT\u003e\u003e.\n\n\u003e Unfortunately I think there\u0027s no way to enforce that callers remember to call TraceContext.newTrace and/or to \n\u003e eliminate the extra level of nesting. But I\u0027m hoping that the fact that they are handed an Entry instance is a \n\u003e reminder that you should do something else in addition to calling .get() on it.\n\nIf we find a way to handle all plugin invocations through an invoke method (not sure if this is feasible), we could only offer \u0027invoke\u0027 on the Entry but not \u0027get\u0027. Maybe in any case having the \u0027invoke\u0027 methods directly on the Entry would be nice.",
      "parentUuid": "4493289f_9d45b2d9",
      "range": {
        "startLine": 47,
        "startChar": 38,
        "endLine": 47,
        "endChar": 50
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "976a47ca_a07e79ad",
        "filename": "java/com/google/gerrit/server/change/ConsistencyChecker.java",
        "patchSetId": 8
      },
      "lineNbr": 674,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Can this use .invoke()?",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd75b3d_af5a7b25",
        "filename": "java/com/google/gerrit/server/change/ConsistencyChecker.java",
        "patchSetId": 8
      },
      "lineNbr": 674,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "976a47ca_a07e79ad",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdba31cd_e20bee88",
        "filename": "java/com/google/gerrit/server/change/IncludedIn.java",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Not related to this change, but I don\u0027t see why this method should ever need to return null. But I guess it\u0027s an extension point so we don\u0027t necessarily have control over implementations :/",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "184402c8_60553859",
        "filename": "java/com/google/gerrit/server/change/IncludedIn.java",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Yes, this check is here to be protected against bad-behaving plugins that return null although they shouldn\u0027t.",
      "parentUuid": "bdba31cd_e20bee88",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16b3bfa3_5a2ca4c1",
        "filename": "java/com/google/gerrit/server/events/EventBroker.java",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "This doesn\u0027t throw, so I think this could use .invoke, right?",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d33ddf24_4a59baf1",
        "filename": "java/com/google/gerrit/server/events/EventBroker.java",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-11T15:00:40Z",
      "side": 1,
      "message": "This one is a bit tricky. The problem here is that we do 2 calls to the extension point\n\n1. listener.getUser()\n2. listener.onEvent(event)\n\nThese methods don\u0027t throw but we need to call isVisibleTo for each extension point once, and this method throws.",
      "parentUuid": "16b3bfa3_5a2ca4c1",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3fbf181_42e40e1a",
        "filename": "java/com/google/gerrit/server/events/EventBroker.java",
        "patchSetId": 8
      },
      "lineNbr": 118,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d33ddf24_4a59baf1",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bac55c82_f99ce548",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "This is repeated quite a bit. Could it go in the class Javadoc instead?",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 41,
        "endChar": 30
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffcce38e_60d80605",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 96,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Please extract a class-level constant. Private is fine.",
      "range": {
        "startLine": 96,
        "startChar": 38,
        "endLine": 96,
        "endChar": 46
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dce1d00_96dc4e02",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 96,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffcce38e_60d80605",
      "range": {
        "startLine": 96,
        "startChar": 38,
        "endLine": 96,
        "endChar": 46
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25ae61e1_45a37586",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "See below, would this make sense as a method on DynamicItem?",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce185329_46b0c8bc",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "To me, \"ignore exceptions\" says do nothing, whereas the implementation actually logs exceptions. This was jarring to me when I was reading usages, because it looked like you were replacing exception-handling (logging) code with something that says \"ignore exceptions\". Is there a clearer name we can use, like \"invokeAndLogExceptions\"?\n\nIf we choose to stick with \"ignore\" instead of mentioning logging, I think \"invokeIgnoring\" would be more grammatical, as in \"invoke [this method], ignoring any exceptions that arise\".",
      "range": {
        "startLine": 114,
        "startChar": 25,
        "endLine": 114,
        "endChar": 47
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed0c20ee_ba7f3793",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-11T15:00:40Z",
      "side": 1,
      "message": "I agree that \u0027invokeAndLogExceptions\u0027 is a better name. Thanks for the suggestion.",
      "parentUuid": "ce185329_46b0c8bc",
      "range": {
        "startLine": 114,
        "startChar": 25,
        "endLine": 114,
        "endChar": 47
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3111ce30_6edd55d5",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "This is redundant with the class Javadoc.",
      "range": {
        "startLine": 128,
        "startChar": 86,
        "endLine": 129,
        "endChar": 87
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8390eacc_3f09c321",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Would this be better as a .forEach() or .forEachIgnoringExceptions() method on DynamicSet itself? Analogous to Collection#forEach.",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15b807eb_0fbeb46d",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:23:41Z",
      "side": 1,
      "message": "To elaborate a little bit: it feels like the intent of these static methods in PluginContext might be to decouple the tracing behavior from the DynamicSet plugin execution behavior. But I\u0027m not sure that decoupling is actually desirable; IMO we should aim to *require* consumers of DynamicSet to use tracing as much as possible. From that perspective, moving more of the tracing logic into DynamicSet makes sense.",
      "parentUuid": "8390eacc_3f09c321",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03ea317f_37dfa1f8",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-11T15:00:40Z",
      "side": 1,
      "message": "Thanks for the suggestion. I think it\u0027s a good idea to put more of this logic into DynamicSet. Let me give it a try.",
      "parentUuid": "15b807eb_0fbeb46d",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb5906d1_12f5acc6",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Ah, the Dynamic* classes are in the extensions package. Hence they cannot have a dependency to TraceContext :(\n\nMaybe we can have something like this:\n\n  PluginContext.create(dynamicSet).runEach(...)",
      "parentUuid": "03ea317f_37dfa1f8",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3232af47_ee8b091a",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 181,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "I expected to see somewhere a description of when to use invoke (when the function doesn\u0027t throw), when to use invokeIngoreExceptions (when it can throw but ignoring exception is ok), and what to do when neither of those applies (iterate manually).\n\nI don\u0027t necessarily think this needs to be repeated in each method Javadoc; it could go in the class Javadoc.",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b99971a_87095d74",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 277,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Throwing bare Throwable is rare. Is there a reason this can\u0027t be \"throws Exception\"?",
      "range": {
        "startLine": 277,
        "startChar": 28,
        "endLine": 277,
        "endChar": 37
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb9d428_94303dc4",
        "filename": "java/com/google/gerrit/server/logging/PluginContext.java",
        "patchSetId": 8
      },
      "lineNbr": 277,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b99971a_87095d74",
      "range": {
        "startLine": 277,
        "startChar": 28,
        "endLine": 277,
        "endChar": 37
      },
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29c91ac1_4f076316",
        "filename": "java/com/google/gerrit/server/project/SubmitRuleEvaluator.java",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "Unrelated: this should use Streams.stream",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "146e26ae_2e03653d",
        "filename": "java/com/google/gerrit/server/project/SubmitRuleEvaluator.java",
        "patchSetId": 8
      },
      "lineNbr": 114,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29c91ac1_4f076316",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47a2c49a_a2fd838e",
        "filename": "java/com/google/gerrit/server/project/SubmitRuleEvaluator.java",
        "patchSetId": 8
      },
      "lineNbr": 119,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-09-10T18:18:42Z",
      "side": 1,
      "message": "I\u0027m not sure factoring out a named variable actually improves readability, given that it then has to be split into a multi-statement block.",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34b092c1_436e7be5",
        "filename": "java/com/google/gerrit/server/project/SubmitRuleEvaluator.java",
        "patchSetId": 8
      },
      "lineNbr": 119,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-11T15:00:40Z",
      "side": 1,
      "message": "My Eclipse doesn\u0027t like it:\n\n  Type mismatch: cannot convert from Stream\u003cObject\u003e to \u003cunknown\u003e\n\nBut it works with the Bazel build. *shrug*\nI will change it then. Maybe time to upgrade my Eclipse.",
      "parentUuid": "47a2c49a_a2fd838e",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb79fd2_879542c1",
        "filename": "java/com/google/gerrit/server/project/SubmitRuleEvaluator.java",
        "patchSetId": 8
      },
      "lineNbr": 119,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-09-13T16:05:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34b092c1_436e7be5",
      "revId": "45f92ee17fcd72b587f5bd2eab94a886bfe195ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}