{
  "comments": [
    {
      "key": {
        "uuid": "SfgQUFk0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2013-03-22T17:08:22Z",
      "side": 1,
      "message": "Sorry. Not sure about the naming convention here. rXX?",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "SfwMUDk0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2013-03-22T17:50:18Z",
      "side": 1,
      "message": "Not sure either, but I believe the \u0027rXX\u0027 indicates how expensive this query is. If several methods could be used to fulfill a query, the query optimizer would choose the method with the lowest XX.",
      "parentUuid": "SfgQUFk0",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Si7f2yBY",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2013-03-25T09:36:38Z",
      "side": 1,
      "message": "Thanks! I guess Shawn have to tweak the rXX if he think r30 to cheap/expensive. (Looking at how the other methods computes it\u0027s cost, I\u0027m still not sure which is the best value to put in the method name).",
      "parentUuid": "SfwMUDk0",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "S7JaIzG4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-04-04T12:21:34Z",
      "side": 1,
      "message": "Given that the number in rXX is only used to get a meaningful order\nwhen sorting the method alphabetically by their names (see\nQueryRewriter around line 33), and that we\u0027re dealing with a Rewrite\nof a compound query anyways, the number should not matter too\nmuch. Any high number (like your r30) looks reasonable to me, so it\ndoes not get in the way, when doing basic rewrites.",
      "parentUuid": "Si7f2yBY",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWckfkWI",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 585,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2013-04-15T17:41:37Z",
      "side": 1,
      "message": "Thanks. Seems we can agree on keeping the naming.",
      "parentUuid": "S7JaIzG4",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "S6nhRYQ4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-04-04T12:21:34Z",
      "side": 1,
      "message": "This new \u0027or\u0027 drops the query\u0027s limit. So we end up getting up to 20\nchanges. The 10 most recent from each of the two sources.\n\nBesides, \u0027or\u0027 just returns the items of the first source, followed by\nthe items of the second source, ... without resorting the joined\nresult set by date. So the items may show in mixed up order.\n\nThe latter item can easily be argued away, as it seems to be an\nunrelated \u0027defect\u0027 of \u0027or\u0027 that hits us in other places as well.",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWYklmb4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2013-04-15T17:41:37Z",
      "side": 1,
      "message": "The QueryProcessor will handle the resorting and limiting. \nSince I do not want to copy parts of the QueryProcessor logic to this method, I do need 10 of each to ensure the correct result is given back to the user after sorting. This is consistent with how other (limited) Queries and QueryPredicates are handled. \n\nMore so, I do not want to touch the QueryProcessor in this patch. Just restore the functionality that was found in Gerrit pre v2.5.x, without making any sacrifice of performance.",
      "parentUuid": "S6nhRYQ4",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TV.s7cdI",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-04-15T22:44:29Z",
      "side": 1,
      "message": "\u003e The QueryProcessor will handle the resorting and limiting.\n\nNope and nope :-)\n\nLet\u0027s consider a project without commits. And then add two dozen\ncommits. Each commit gets reviewed and merged before the next commit\ngets pushed to gerrit. For the even commits, I\u0027ll be owner. For the\nodd commits, I\u0027ll be reviewer.\n\nUsing your patch, I\u0027ll get the following \"My Changes\"\n\n  http://i.imgur.com/jRYmvcy.png\n\nAs you can see, the result set contains 14 instead of 10 changes. So\nlimiting does not work.\n\nYou\u0027ll also notice that sorting is broken, as even commits are\nshown from #6 upwards, odd commits from #17 upwards.\n\nTo make the sorting issue more obvious, let\u0027s add a comment to each of\nthe dozen odd commits. That should list all odd commits on top.\nHowever, \"My Changes\" now looks like\n\n  http://i.imgur.com/9oYbMaI.png\n\nOf the odd changes only 17, 19, 21, 23 (the one\u0027s that were visible\nalready before) get shown. But in contrast to the previous picture,\nthey get shown on top, as they have been updated on “11:59\nPM”. Eventhough changes 1, 3, 5, ..., 15 also have been updated on\n“11:59 PM”, they do not show in “My Changes” instead some 2 minutes\nolder, even changes get shown.\n\nAnd to show that the search framework allows to get the correct result\nset, consider\n\n  http://i.imgur.com/KPGTWxQ.png\n\nwhich depicts the search results for\n\n  is:closed (owner:qchris OR reviewer:qchris)\n\nThere, all commits are shown and they are correctly ordered: The odd\ncommits above the even commits. And for each parity ascending from\nbottom up.\n\nI\u0027ll spare you a fourth image, but when querying directly limiting to\n10 also works within normal ranges (returning 11 hits).",
      "parentUuid": "TWYklmb4",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "S7LaNyH0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-04-04T12:21:34Z",
      "side": 1,
      "message": "byOwnerClosed sorts by lastUpdatedOn.\nclosedByUser (used in line 596 above) sorts by changeSortKey.\n\nWhile lastUpdatedOn and changeSortKey correspond nicely upon closing a\nchange, when adding comments to a closed change, they start to run\napart.\n\nI am not sure, but since Eclipse tells me that r30_byRecentlyClosed is\nthe only place where, both closedByUser and byOwnerClosed is used,\nwould it make sense to harmonize on which column we sort the two\nsources?",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TWekiVbI",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1006454
      },
      "writtenOn": "2013-04-15T17:41:37Z",
      "side": 1,
      "message": "Yes, since the queries are also aimed at totally different tables (patchset_approvals vs changes). However, the QueryProcessor should handle the resorting fine(?)\n\nThis implementation should give us the same behavior that we saw in pre-v2.5.",
      "parentUuid": "S7LaNyH0",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "TYx-sQ0s",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryRewriter.java",
        "patchSetId": 1
      },
      "lineNbr": 622,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-04-15T22:44:29Z",
      "side": 1,
      "message": "\u003e This implementation should give us the same behavior that we saw in\n\u003e pre-v2.5.\n\nIn the comment at line 588, I\u0027ll provide an example of how things go wrong.",
      "parentUuid": "TWekiVbI",
      "revId": "46241a2cb0f41669953cd34b79f493fe564fd365",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}