{
  "comments": [
    {
      "key": {
        "uuid": "90646fc9_7a36b9f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-09-24T14:15:00Z",
      "side": 1,
      "message": "What about secret key option, a l√° --secret-key XXX or JVM system property -Dfoo\u003dbar? Given that we are on JVM we cannot hide the secret that is needed for symmetric encryption within the secure store implementation so that the only way to make it secure (without messing around with JNI module trying to hide it in native code) is to pass it from the outside to Gerrit/SecureStore-implementation. The same approach of passing secret key is needed, when gerrit daemon is started. For example one way to do it is to save secure store secret so that only root can read it and pass during gerrit start in init process.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 5
      },
      "revId": "49cf189a60de441eae9fc8472c7afec5b3a74c32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f035acd2_f2096853",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 14,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2014-09-30T07:31:38Z",
      "side": 1,
      "message": "This is up to SecureStore implementer how, where, and when key/passowrd/encryption method is provided.\n\nThe aim of SecureStore extension point for gerrit is to provide abstract interface for storing and retrieving sensitive data. It doesn\u0027t enforce where or how data should stored/encrypted. If one need to store passwords eg in /etc/my-secure-file instead of $site_path/etc/secure.config this API allows him to do it. And that is it, nothing more, no enforcement on having those values encrypted nor stored in $site_path/etc/secure.config",
      "parentUuid": "90646fc9_7a36b9f9",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 5
      },
      "revId": "49cf189a60de441eae9fc8472c7afec5b3a74c32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b03fb4b4_70f690f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 14,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-09-30T07:41:59Z",
      "side": 1,
      "message": "The SecureStire interface should provide means to be initialized with secret provided by user. The whole toolchain should seamlessly support that. That why i think that --secure-store-secret gerrit daemon option should be provided and passed in to SecureStore implementation. If you don\u0027t do that, you cannot easily hide the secret in pure Java. Any obfuscation attempts can be easily overcomes due ti decompilation of Java byte code. What you need if yodn\u0027t pass in secret from the outside to the secure store implementation and make is still secure, you would need to load native library from secure store implementation where decompiling in not that easy and there are more options to hide obfuscated secret for secure store encryption/decryption.",
      "parentUuid": "f035acd2_f2096853",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 5
      },
      "revId": "49cf189a60de441eae9fc8472c7afec5b3a74c32",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}