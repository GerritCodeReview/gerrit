{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1548361421 -0800\nnonce AJbGYzlb27cspNA0GUJmqZfkmvh6HeHQkjhhoCcQ5GeoFI/uwUK2aPHFSJtJVADoX2sRrkLLK3jS\n\n0000000000000000000000000000000000000000 4b4f2820790eb1819a6a10bb03d695aa5091ee33 refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlxKHs0VHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMn9oP/R8XokSAZjxMBVvvFYUzZSb99zHf\nSBFXFfkK/DxfqswO9sWx6Jc/9GNRef7MpahkvIfjm7Tgqz2V7ADApiykWMmVnR3T\nptT4IK14hys1x5u5EtvBnpZcx9GUh64mf4zofIpj0lGiIFZ1fojyso1EbahHUi7X\n+hOSvCJjwgjw1pTcxMqGivIJCJJ/H5YeOgF2rnA/1EKjPtOY2Xld5Lcx0e3TxsdH\n3VPkBuisnp/1ni1octp7oCYEVo2KPAbMHHezxkJB+/MdNLgkMFhE6+H+O/ywLDa1\nkYOS34Tvvmsc+qKbZcM9e+SBmLQAULpWkT54klz0IZ/+glMw3TbVGDuARaKEqeyV\nrbb9g+1VJRWQkGz9Y2ppiHsLgBpTYwXTMo2pNQ83B6NWPOLMAY0ym9bY5gc7DOet\nPmPs8/7PQ4X+rB/Lj0NKa9tteFnUZyWJW2Afu6xXR/BoFogLGcMqqZNs7t0RVPbi\no8gnA6SqcGA4vOOIGRn5evlhx+x8zAuPTBWZpqNfpQlDoAy7aOuQ1efcUnQhxjDC\nHTKuhJ/wjGqVgIZbVxOuFe8qXC4FUEPkapuE/d6xGEWgIwQi2M5G/5Tjhc6/H2Od\nAUPBz4RcJmX5CzveSk0Mn+KZzk44PcthWJF6j4m0IJlv9Gshwd39xKtVodgHeg+z\n07ddmbJSMzxtL7bn\n\u003d2mjk\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "91b582d7_69cc0fbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-24T20:52:07Z",
      "side": 1,
      "message": "How do we tell Bazel to run all these tests serialized?",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac8569e5_cbfaafe8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-24T21:10:06Z",
      "side": 1,
      "message": "AFAIK Bazel never runs multiple test methods in the same class concurrently in the same JVM. If you use test sharding (which we don\u0027t) it runs non-overlapping subsets of the test methods in different JVMs.",
      "parentUuid": "91b582d7_69cc0fbe",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12b19207_9af2c7a1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-24T21:16:23Z",
      "side": 1,
      "message": "\u003e AFAIK Bazel never runs multiple test methods in the same class concurrently in the same JVM. If you use test sharding (which we don\u0027t) it runs non-overlapping subsets of the test methods in different JVMs.\n\nIf we do not sandbox tests, we can have two concurrent test methods using the same JVM and the same Gerrit server instance.\n\nThen the first test run clears the events and starts the events generation, but the second test run clears again the events, removing the ones of the first test. They will collide and fail depending on the sequencing of the two tests execution.\n\nThis is what I observed and fixed with the sandboxing, but apparently, it wasn\u0027t enough. If we remove sandboxing I fear we will make the situation even worse, WDYT?",
      "parentUuid": "ac8569e5_cbfaafe8",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "741afa0e_09a4b798",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-24T21:41:52Z",
      "side": 1,
      "message": "\u003e If we do not sandbox tests, we can have two concurrent test methods using the same JVM and the same Gerrit server instance.\n\nI disagree. There is one GerritServer per AbstractDaemonTest instance. Bazel (actually JUnit) in a single invocation creates a single test class instance and then runs all methods in that class sequentially. It might run multiple test *targets* concurrently in the same JVM (I think it doesn\u0027t but I\u0027m only about 75% sure on that count), but they won\u0027t be the same test *class instance* and they won\u0027t share a GerritServer.\n\nDo you have a small reproduction proving your hypothesis that two test methods running in parallel can use the same GerritServer instance?\n\n\u003e This is what I observed and fixed with the sandboxing, but apparently, it wasn\u0027t enough. If we remove sandboxing I fear we will make the situation even worse, WDYT?\n\nThis change is not hypothetical. This series fixes the problem, and proves that the problem is not due to sandboxing or lack thereof. See the commit message of https://gerrit-review.googlesource.com/c/gerrit/+/211654.\n\nWhen I run the tests with:\n\n* --runs_per_test\u003d100\n* --test_filter\u003dGitOverHttpServletIT#uploadPackAuditEventLog\n* parallelism of 12 (I have 8 cores)\n\nit is **30%** flaky against master (with sandboxing) and 0% flaky against the tip of this series (no sandboxing and a real fix instead).",
      "parentUuid": "12b19207_9af2c7a1",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5acebd4_765084fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-24T21:47:50Z",
      "side": 1,
      "message": "\u003e \u003e If we do not sandbox tests, we can have two concurrent test methods using the same JVM and the same Gerrit server instance.\n\u003e \n\u003e I disagree. There is one GerritServer per AbstractDaemonTest instance. Bazel (actually JUnit) in a single invocation creates a single test class instance and then runs all methods in that class sequentially. It might run multiple test *targets* concurrently in the same JVM (I think it doesn\u0027t but I\u0027m only about 75% sure on that count), but they won\u0027t be the same test *class instance* and they won\u0027t share a GerritServer.\n\u003e \n\u003e Do you have a small reproduction proving your hypothesis that two test methods running in parallel can use the same GerritServer instance?\n\nLet go back to the SHA1 before my commit, I need to refresh my mind :-)\n\n\u003e \u003e This is what I observed and fixed with the sandboxing, but apparently, it wasn\u0027t enough. If we remove sandboxing I fear we will make the situation even worse, WDYT?\n\u003e \n\u003e This change is not hypothetical. This series fixes the problem, and proves that the problem is not due to sandboxing or lack thereof. See the commit message of https://gerrit-review.googlesource.com/c/gerrit/+/211654.\n\nNeed more insights before speaking and arguing on why one fixes the problem and the other does not :-)\n\nI am wondering *IF* without sandboxing we always have 1x GerritServer instance per test method, why do we have sandboxing after all?\nLooking at the sandboxing management code, I saw that instead of sharing one instance across tests, it was allocating one instance per test.\n\nBut again, need to do a bit more analysis on the code to keep the discussion :-)\n\n\u003e \n\u003e When I run the tests with:\n\u003e \n\u003e * --runs_per_test\u003d100\n\u003e * --test_filter\u003dGitOverHttpServletIT#uploadPackAuditEventLog\n\u003e * parallelism of 12 (I have 8 cores)\n\u003e \n\u003e it is **30%** flaky against master (with sandboxing) and 0% flaky against the tip of this series (no sandboxing and a real fix instead).\n\nSure, I\u0027ll run the same and let you know the results.\nAs Mr. Torvalds says ... \"talk is cheap, show me the code\" :-)",
      "parentUuid": "741afa0e_09a4b798",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32709d3b_d419211b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-24T21:53:09Z",
      "side": 1,
      "message": "\u003e I am wondering *IF* without sandboxing we always have 1x GerritServer instance per test method, why do we have sandboxing after all?\n\nThe reason for implementing sandboxing is not because tests run concurrently. It\u0027s because tests may modify global state, e.g. adding users/groups, editing global capabilities, incrementing the change counter, etc.\n\nFor example, if you want to write a test that asserts that the first change you create with createChange() has change ID 1, you can\u0027t do that without @Sandboxed. It will be ID 1 if it\u0027s the first method that runs, and some other ID if it\u0027s not. This is true even if tests run sequentially. Now, I wouldn\u0027t recommend you write your tests that way--but one of the main *reasons* I wouldn\u0027t recommend it is that it will force you to use @Sandboxed and therefore be much slower. Similarly, if you write a test that grants some global capability to the admin user, you can either remember to undo that in a finally or an @After method, or you can just mark the test @Sandboxed.\n\n(These days, much of the global state is actually cleaned up by ProjectResetter, but the whole @Sandboxed thing was a previous, less performant attempt at solving a similar problem.)",
      "parentUuid": "b5acebd4_765084fd",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4686df1_e57f960d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-24T22:05:02Z",
      "side": 1,
      "message": "Also:\n\n\u003e without sandboxing we always have 1x GerritServer instance per test method\n\nThis is not accurate. Without sandboxing there is 1x GerritServer per test class, not per test method. On top of that, each @Sandboxed method gets a new, separate instance:\n\nhttps://gerrit.googlesource.com/gerrit/+/24ee10a75fd88a72cd597665405e427d76dad38a/java/com/google/gerrit/acceptance/AbstractDaemonTest.java#410",
      "parentUuid": "32709d3b_d419211b",
      "range": {
        "startLine": 9,
        "startChar": 47,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "4b4f2820790eb1819a6a10bb03d695aa5091ee33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}