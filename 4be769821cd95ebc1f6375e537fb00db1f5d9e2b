{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "523a0e1a_15c6725b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-05-31T15:44:56Z",
      "side": 1,
      "message": "docs?",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7867c2f3_dfbb381f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-31T16:08:05Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "523a0e1a_15c6725b",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "965ca219_4000e5d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-31T16:08:05Z",
      "side": 1,
      "message": "One more general comment: Is it OK to return ref updates for all refs? (maybe we could whitelist/blacklist some ref patterns)\n\nCan we end up leaking some refs that we don\u0027t want to return to users.",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbac6d8e_9f7746de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-05-31T16:52:49Z",
      "side": 1,
      "message": "yea, thanks, I\u0027ll write that tomorrow",
      "parentUuid": "7867c2f3_dfbb381f",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6aa4707_822d70e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-05-31T16:52:49Z",
      "side": 1,
      "message": "I can\u0027t think of refs that we don\u0027t want to return to the calling user. We wouldn\u0027t want to leak the SHA-1 of the account branch of some account you can\u0027t see, for example, but if a user performed some action on that account, there is no problem to return that ref. Same goes for changes, etc.\n\nI\u0027ll leave this open for Patrick/Han-Wen to comment if they think differently.",
      "parentUuid": "965ca219_4000e5d8",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54090f79_4c0a4114",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-06-01T08:31:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbac6d8e_9f7746de",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e645b59_59faac27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-06-01T08:33:00Z",
      "side": 1,
      "message": "If a user can cause writes in the system, they must have permission to see the thing. (The gerrit permissions are separate, but if you have write permission without read permission, the git wire protocol breaks in interesting ways.)\n\nslightly related: It might useful to log a stacktrace if we see a RefUpdated event on a GET request.",
      "parentUuid": "f6aa4707_822d70e9",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "777848b7_83cec8ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-06-01T11:05:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e645b59_59faac27",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c29f91e7_dd07d518",
        "filename": "java/com/google/gerrit/httpd/restapi/RestApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-31T16:08:05Z",
      "side": 1,
      "message": "Is it OK to reuse refUpdates in this way?\n\nIf *RestApiServlet reuses the same instance for concurrent requests, then you may end up with different requests writing to refUpdates simultaneously.\n\nI also think test RestApiServletIT#xGerritUpdatedRefSetForDifferentWriteRequests is not really testing this case since both requests are done one after the other.",
      "range": {
        "startLine": 343,
        "startChar": 4,
        "endLine": 343,
        "endChar": 23
      },
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26b33de8_e8410c2b",
        "filename": "java/com/google/gerrit/httpd/restapi/RestApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-05-31T16:52:49Z",
      "side": 1,
      "message": "I was wondering this as well, but my conclusion was that it can\u0027t happen: different instances of RestApiServlet are created for different REST requests. This is easier to see by looking at globals.webSession, which is the request (so different requests -\u003e different RestApiServlet).\n\nDoes it make sense?",
      "parentUuid": "c29f91e7_dd07d518",
      "range": {
        "startLine": 343,
        "startChar": 4,
        "endLine": 343,
        "endChar": 23
      },
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "850b29aa_9b103907",
        "filename": "java/com/google/gerrit/httpd/restapi/RestApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-06-01T08:30:48Z",
      "side": 1,
      "message": "mmm I think we can\u0027t do that. I had a quick look and found https://stackoverflow.com/a/3106909, which suggests that servlets and filters are shared among requests, so assigning instance variables is not thread safe. Not sure if we configure servlets in our code. The same link suggests:\n`That\u0027s the nice thing about Java, it\u0027s multithreaded and different threads (read: HTTP requests) can make use of the same instance`\n\nAnother thing that came to my mind: is GitReferenceUpdatedListener called for refs updated from ReceiveCommits?",
      "parentUuid": "26b33de8_e8410c2b",
      "range": {
        "startLine": 343,
        "startChar": 4,
        "endLine": 343,
        "endChar": 23
      },
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5051fe2e_ec18feaa",
        "filename": "java/com/google/gerrit/httpd/restapi/RestApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-06-01T11:05:11Z",
      "side": 1,
      "message": "You\u0027re right, I looked deeper into the javadocs of this class and it does need to support multithreaded requests. The defence I added here is a request scoped binding essentially, since WebSession is request scoped, and the list of ref updates is part of this WebSession now. I don\u0027t think there is a reasonable integration test I can do here to test this, though. Does that make sense? Either way, checking this on staging would be good.\n\nIt doesn\u0027t work with ReceiveCommits, I think that\u0027s fine since nobody ever asked for that (the discussion was always about REST API). I can add that in a follow-up if anyone wants it.",
      "parentUuid": "850b29aa_9b103907",
      "range": {
        "startLine": 343,
        "startChar": 4,
        "endLine": 343,
        "endChar": 23
      },
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5558c751_e74171f1",
        "filename": "javatests/com/google/gerrit/acceptance/rest/RestApiServletIT.java",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-31T16:08:05Z",
      "side": 1,
      "message": "from lines 89-104 is repeated again in 106-122, maybe better to extract in a helper method that returns the meta ref SHA-1 and does the asserts?",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c8a5db_49aa31b3",
        "filename": "javatests/com/google/gerrit/acceptance/rest/RestApiServletIT.java",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-05-31T16:52:49Z",
      "side": 1,
      "message": "I\u0027m not a huge fan of such methods especially when this won\u0027t work in any of the other tests since there are multiple SHA-1s. \n\nI find this method confusing since it will be creating a topic and returning a change meta SHA-1, but also performing some complicated assertions about the response header (that make sense only in the context of this test).\n\nDo you feel strongly about this?",
      "parentUuid": "5558c751_e74171f1",
      "revId": "4be769821cd95ebc1f6375e537fb00db1f5d9e2b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}