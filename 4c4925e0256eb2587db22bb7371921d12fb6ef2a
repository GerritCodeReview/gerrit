{
  "comments": [
    {
      "key": {
        "uuid": "bf30f071_1ec8abca",
        "filename": "polygerrit-ui/app/elements/core/gr-error-manager/gr-error-manager.js",
        "patchSetId": 17
      },
      "lineNbr": 38,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "This would become\n\n  import {GrProvider} from \u0027../gr-provider/gr-provider.js\u0027;",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd76718_26e8735c",
        "filename": "polygerrit-ui/app/elements/core/gr-error-manager/gr-error-manager.js",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "This would become\n\n  this.reporting \u003d GrProvider.getReporting();",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ab515c_561189de",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "What do you think about creating an application wide `Provider` class?\n\nIf we apply this pattern to all the services and stores and utilities we have, then we probably want to import just *one* such provider.",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c86824_99074ff5",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-03-27T10:28:14Z",
      "side": 1,
      "message": "I am actually more for several providers, so class will use only ones that are needed. It will better show how much is each provider used, it will better show what actually each component needs.\n\nWhat kind of services or stores would you like to include? For example rest-api-interface is used in very limited number of components and we probably don\u0027t want each component having it in some wide Provider class.",
      "parentUuid": "92ab515c_561189de",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e13631a0_a91cff38",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-03-30T09:32:45Z",
      "side": 1,
      "message": "if its a singleton, why don\u0027t just export it from the this file directly ? why bother having the `GrReportingProvider` at all ?\n\nwon\u0027t be easier to use like following:\n\n```\nimport {reporting} from \"../../gr-reporting.js\";\n```\n\nso you don\u0027t need to attach it to every component, i mean, why it has be a property on every component ?",
      "parentUuid": "21c86824_99074ff5",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecb192f_47e3a4a2",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-30T10:06:42Z",
      "side": 1,
      "message": "Yeah, I was thinking the same, but then you are basically using a global variable.\n\nAnd you cannot do\n\n  export const reporting \u003d new GrReporting();\n\nYou would at least have to do\n\n  let const reporting \u003d new GrReporting();\n\nThis is required so you can use a different reporting instance for testing.\n\nMaybe we also want to instantiate lazily?",
      "parentUuid": "e13631a0_a91cff38",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9faec577_499bfe3f",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-03-30T10:20:36Z",
      "side": 1,
      "message": "first, it\u0027s not a global variable as you can only use it when you import it from the module.\n\nregarding tests, you still can define something like `TEST_ONLY` and export that, I believe it is a pretty common pattern to export something to tests only, like:\n\n`export const TEST_ONLY \u003d {GrReporting}`\n\nto use in tests you can just:\n```\nimport {TEST_ONLY} from \"./xxx\";\nconst {GrReporting} \u003d TEST_ONLY;\nconst testReportingIntance \u003d new GrReporting();\n```",
      "parentUuid": "4ecb192f_47e3a4a2",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b2f3f2f_5c13f613",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-30T10:32:33Z",
      "side": 1,
      "message": "Yeah, I guess the pseudo-global variable is fine. But I don\u0027t understand how this works with testing. The problem is not creating the test instance in a test file, but how to make sure that the component under test uses a test instance of `reporting`.",
      "parentUuid": "9faec577_499bfe3f",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d36d44a9_79d97163",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-03-30T10:50:16Z",
      "side": 1,
      "message": "ah i see your point now. If that\u0027s necessary, one idea here would be export ing the `reporting` as a getter property, and when TEST enabled, it should switch to the test instance otherwise return the prod-singleton.\n\nbut is it necessary ? I mean since it\u0027s a singleton, we can just stub on the singleton when we need.\n\nIf you want to stub all methods, we can just stub all the calls from the singleton to the fake instance in tests when we need, since its the singleton, everything you add on top of will preserve through the tests, and we just need to restore whatever we add after each test. will that be an acceptable solution ?",
      "parentUuid": "8b2f3f2f_5c13f613",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3920e978_d8887ae5",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-03-30T12:14:13Z",
      "side": 1,
      "message": "Some options, because you asked for my opinion. Feel free to ignore.\n\n1) Use a \"global\" variable, stub methods on that (like Tao suggests). Works okay for tests, so long as you do not forget to stub something that makes prod changes and so on. Not so great for actually configuring a different logging library.\n\n2) DI light: Have a \"app context\" which is a global variable, and have the app bootstrapping set properties on that:\n```\nexport const appContext \u003d {}\n\n// In bootstrap:\n\nappContext.reporting \u003d new GrReporting();\n\n// In tests:\nappContext.reporting \u003d new GrFakeReporting();\n```\nThis externalizes the choice of dependencies. It works for tests, but also if you want to later switching to a different reporting framework, e.g. when you want to share gr-diff with Critique and Critique wants to use it\u0027s own reporting.\n\n3) Like 2, but make it more fancy:\n\na) Instead of a single appContext that knowns all possible deps, make Angular-like module contexts, which split this up a bit, so that Critique depending on gr-diff and gr-diff depending on app context does not mean Critique now has to depend on all your services. This becomes a problem expecially when you move to TypeScript and you want the properties of appContext to be typed. You can maybe sitestep that if you use the getter approach Tao suggested instead of a central app context. Then each component only imports those files for the \"provider getter\" it needs. Ideally this would not be the same file as the actual implementation of those services, to avoid Critique having to depend on GrReporting.\n\nb) Instead of global imports try something like https://www.webcomponents.org/element/LssPolymerElements/titanium-dependency-injection - or something else - some library somebody made to do DI for webcomponents...\n\nI would probably go for one of the 3)a/b options.",
      "parentUuid": "d36d44a9_79d97163",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0be9904_c59c404d",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 178,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-03-30T12:14:13Z",
      "side": 1,
      "message": "A nice pattern for those kinds of exports I find is:\n\n```\nexport const TEST_ONLY \u003d {GrReporting};\n```\n\nThen you can still use it from tests, but it\u0027s very clear at the import that this is not meant for production code.\n\nThat said, if you move to TypeScript at some point you may need to access this class, or at least it\u0027s interface, for type checking purposes...",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b5a05d7_6598a9e5",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "I would either let the provider deal with maintaining the single instance of this class (GrReporting does not care about being a singleton or not), or I would move the getInstance() logic into the constructor. I think it is possible for a JavaScript constructor to `return GrReporting.instance`.",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e1730c9_fb7924a2",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-03-27T10:28:14Z",
      "side": 1,
      "message": "I did it like that before (in another change), but Dmitrii didn\u0027t like it, since it is kind of surprising overloading of constructor. \n\nwith getInstance it\u0027s much more clear what we are trying to achieve. But I don\u0027t care, both solution works for me.",
      "parentUuid": "1b5a05d7_6598a9e5",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}