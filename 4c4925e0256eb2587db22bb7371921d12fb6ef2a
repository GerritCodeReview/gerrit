{
  "comments": [
    {
      "key": {
        "uuid": "bf30f071_1ec8abca",
        "filename": "polygerrit-ui/app/elements/core/gr-error-manager/gr-error-manager.js",
        "patchSetId": 17
      },
      "lineNbr": 38,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "This would become\n\n  import {GrProvider} from \u0027../gr-provider/gr-provider.js\u0027;",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd76718_26e8735c",
        "filename": "polygerrit-ui/app/elements/core/gr-error-manager/gr-error-manager.js",
        "patchSetId": 17
      },
      "lineNbr": 108,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "This would become\n\n  this.reporting \u003d GrProvider.getReporting();",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92ab515c_561189de",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "What do you think about creating an application wide `Provider` class?\n\nIf we apply this pattern to all the services and stores and utilities we have, then we probably want to import just *one* such provider.",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21c86824_99074ff5",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-03-27T10:28:14Z",
      "side": 1,
      "message": "I am actually more for several providers, so class will use only ones that are needed. It will better show how much is each provider used, it will better show what actually each component needs.\n\nWhat kind of services or stores would you like to include? For example rest-api-interface is used in very limited number of components and we probably don\u0027t want each component having it in some wide Provider class.",
      "parentUuid": "92ab515c_561189de",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e13631a0_a91cff38",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-03-30T09:32:45Z",
      "side": 1,
      "message": "if its a singleton, why don\u0027t just export it from the this file directly ? why bother having the `GrReportingProvider` at all ?\n\nwon\u0027t be easier to use like following:\n\n```\nimport {reporting} from \"../../gr-reporting.js\";\n```\n\nso you don\u0027t need to attach it to every component, i mean, why it has be a property on every component ?",
      "parentUuid": "21c86824_99074ff5",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecb192f_47e3a4a2",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-30T10:06:42Z",
      "side": 1,
      "message": "Yeah, I was thinking the same, but then you are basically using a global variable.\n\nAnd you cannot do\n\n  export const reporting \u003d new GrReporting();\n\nYou would at least have to do\n\n  let const reporting \u003d new GrReporting();\n\nThis is required so you can use a different reporting instance for testing.\n\nMaybe we also want to instantiate lazily?",
      "parentUuid": "e13631a0_a91cff38",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9faec577_499bfe3f",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-03-30T10:20:36Z",
      "side": 1,
      "message": "first, it\u0027s not a global variable as you can only use it when you import it from the module.\n\nregarding tests, you still can define something like `TEST_ONLY` and export that, I believe it is a pretty common pattern to export something to tests only, like:\n\n`export const TEST_ONLY \u003d {GrReporting}`\n\nto use in tests you can just:\n```\nimport {TEST_ONLY} from \"./xxx\";\nconst {GrReporting} \u003d TEST_ONLY;\nconst testReportingIntance \u003d new GrReporting();\n```",
      "parentUuid": "4ecb192f_47e3a4a2",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b2f3f2f_5c13f613",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 172,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-30T10:32:33Z",
      "side": 1,
      "message": "Yeah, I guess the pseudo-global variable is fine. But I don\u0027t understand how this works with testing. The problem is not creating the test instance in a test file, but how to make sure that the component under test uses a test instance of `reporting`.",
      "parentUuid": "9faec577_499bfe3f",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b5a05d7_6598a9e5",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-03-27T09:32:28Z",
      "side": 1,
      "message": "I would either let the provider deal with maintaining the single instance of this class (GrReporting does not care about being a singleton or not), or I would move the getInstance() logic into the constructor. I think it is possible for a JavaScript constructor to `return GrReporting.instance`.",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e1730c9_fb7924a2",
        "filename": "polygerrit-ui/app/elements/core/gr-reporting/gr-reporting.js",
        "patchSetId": 17
      },
      "lineNbr": 188,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-03-27T10:28:14Z",
      "side": 1,
      "message": "I did it like that before (in another change), but Dmitrii didn\u0027t like it, since it is kind of surprising overloading of constructor. \n\nwith getInstance it\u0027s much more clear what we are trying to achieve. But I don\u0027t care, both solution works for me.",
      "parentUuid": "1b5a05d7_6598a9e5",
      "revId": "4c4925e0256eb2587db22bb7371921d12fb6ef2a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}