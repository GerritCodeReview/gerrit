{
  "comments": [
    {
      "key": {
        "uuid": "1be132fe_9a1d49d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T16:51:36Z",
      "side": 1,
      "message": "I agree with the motivations for this change, but I\u0027m not sure we should jump to a boolean switch as the best solution. For example, we already have the Non-Interactive users group, could checking for inclusion in that group provide an equally good solution?\n\nIf we\u0027re going to start having a distinction about users with data in the account, I think we want to consider more broadly what all we could do with that and build up a framework to support it.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "510539ec_72834ec5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T16:52:48Z",
      "side": 1,
      "message": "\u003e I agree with the motivations for this change, but I\u0027m not sure we should jump to a boolean switch as the best solution. For example, we already have the Non-Interactive users group, could checking for inclusion in that group provide an equally good solution?\n\nI should add, if inclusion in that group is not equally good, how do you expect the two features to co-exist?",
      "parentUuid": "1be132fe_9a1d49d9",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "033d885f_fd0f089f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-15T17:16:21Z",
      "side": 1,
      "message": "That\u0027s an interesting idea. Honestly, I didn\u0027t know that group existed.\n\nI see that the docs mention it [1], but it\u0027s not very prominent in the code. I only found it in SchemaCreator and a bunch of tests.\n\nLet me think this through more deeply tomorrow and get back to you on that.\n\nDo you use the Non-Interactive group in any of your setups? If so, for what (what is done differently when a user is a member) and how is your experience with that so far?\n\n[1] https://gerrit-review.googlesource.com/Documentation/access-control.html#non-interactive_users",
      "parentUuid": "510539ec_72834ec5",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f4e920_1536c0b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T17:31:28Z",
      "side": 1,
      "message": "\u003e That\u0027s an interesting idea. Honestly, I didn\u0027t know that group existed.\n\u003e \n\u003e I see that the docs mention it [1], but it\u0027s not very prominent in the code. I only found it in SchemaCreator and a bunch of tests.\n\u003e \n\u003e Let me think this through more deeply tomorrow and get back to you on that.\n\u003e \n\u003e Do you use the Non-Interactive group in any of your setups? If so, for what (what is done differently when a user is a member) and how is your experience with that so far?\n\u003e \n\u003e [1] https://gerrit-review.googlesource.com/Documentation/access-control.html#non-interactive_users\n\nI think the only other significant reference to it is in sshd.batchThreads [2]. We don\u0027t use that functionality, but I\u0027ve seen it mentioned on the list [3]. Honestly it seems like more people run into it by accident than on purpose though, so I\u0027m not sure it\u0027s something to build on top of. In some ways it could be perceived as highlighting the concern Martin has below. Users/Admins add accounts to this group not really understanding what it does because it has such a generic name, then later run into problems because of seemingly \"magic\" behavior. In hindsight, a group named \"Batch threads users\" probably would have been smarter. It\u0027s easy enough for admins to include groups in groups, so if you have multiple \"feature groups\", re-including all your robot accounts in each feature group is pretty trivial (assuming you want all of them in each feature group, if not, then the pre-feature group gives you that granularity).\n\nThere could be some challenges in using groups this way (performance maybe?) that would push towards using flags on accounts instead. That would have the downside of having to set the flags individually per-feature and not be able to manage all your robot accounts as a group. Maybe we can overcome that, but groups do seem like a natural way to manage sets of accounts with similar attributes.\n\nI\u0027m curious to read what you come up with tomorrow.\n\n[2] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#sshd.batchThreads\n[3] https://groups.google.com/forum/#!searchin/repo-discuss/sshd.batchThreads%7Csort:date",
      "parentUuid": "033d885f_fd0f089f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4728bb6f_bd14dd42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-16T16:38:16Z",
      "side": 1,
      "message": "Thanks for your input!\n\nI think the existing feature is really hard to discover and I don\u0027t think we should build on that. So whatever we do, it should be more discoverable. We can either go with the is_robot bit OR with groups, but we shouldn\u0027t add the bit now and leave the Non-Interactive group as-is. The two wouldn\u0027t play together well.\n\nSo we can either:\n\n1) Add an is_robot bit to the account AND add a SystemGroup (magic) that contains all users that are robots (just like RegisteredUsers contains all users).\n- Do what this change does\n- Set the bit for all members of Non-Interactive Users with a schema migration\n- Add code to populate a magic system group with all accounts that are robots\n\nPros:\n- Explict and visible\n- Latency is not an issue\n- Can be obtained from the cached account entity, so code is a bit easier\n\nCons:\n- Only users with MODIFY_ACCOUNT can mark users as robots. Otherwise anyone could gain privileges granted to the magic group by flipping a bit. Seems OK, though.\n\n2) Go just with a group (say \"Robot Users\"), no bit.\n- Create a new group OR rename the existing group\n- Serve an isRobot bit on the API in AccountInfo (there is a plan for the UI to show a robot accounts a bit different so that users know what they are dealing with)\n- Have some kind of facade to see if a user is a robot in the backend\n\nPros:\n- More flexible (you can include sub-groups)\n- No extra account state required\n- Finer ACLs: The Robots group has an owners group and any member can add new members\n\nCons:\n- Latency is OK if this is just an internal Gerrit group, but gets prohibitive when including external groups because we might need to do 100+ memberships checks when serving change query results to enrich AccountInfo with isRobot - something we don\u0027t have to do ATM. We would need to document that (bad, because admins might not read) or forbid it (bad, because why does that work differently from the rest).\n- I see the flexibility as a con here. It seems not really needed (why does one need group nesting?) and makes a simple feature harder.\n- Nesting might make it harder to see why someone is a robot\n\nHonestly, I am indifferent here, but I also don\u0027t think it matters much at this point, because both (1) and (2) can be transformed into the respective other implementation with a single schema migration if requirements change.\n\nMy tl;dr: I like (2) for the ACLing especially around who can mark accounts as robot accounts. I like (1) for being explicit and discoverable and having zero performance implications.\n\nI\u0027ve had some extensive discussions with Edwin and Joerg today. Joerg worked in the team that owns Google accounts and infrastructure and advised for the bit instead of the group, because what we express is the nature (type) of the account - so a property of the account - and that shouldn\u0027t be mixed up with the group system but stand by itself. He did suggested that we could create a magic group based on that property - which is part of the plan in (1) if we want to use it for permissions. Edwin was also indifferent but slightly leaning towards the group-based implementation IIRC because it\u0027s an established concept.\n\nI do think that we shouldn\u0027t use groups to flag-gate features, especially not on a fine-grained level. Making a distinction between humans and bots is the most I would want to do here because it really complicates behavior and debugging. If someone shouldn\u0027t be allowed to use a feature, that should be expressed with permissions.\n\nDo you have a strong preference either way?\n\nIf not, I think I would go with (1). I\u0027ve created a WIP change for the missing pieces and can follow up with completing that tomorrow.",
      "parentUuid": "35f4e920_1536c0b5",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cc50aa6_eeba0792",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-16T17:08:02Z",
      "side": 1,
      "message": "\u003e Thanks for your input!\n\nPerhaps I feel stronger about this now than I did when I put thoughts into writing above, but I think the general theme of mine and Martin\u0027s input was missed. The idea of a \"robot account\" is not one I/we support. Gerrit has a wonderful system where accounts are differentiated by what permissions/capabilities they have. We should continue to grow and empower that system. Doing otherwise should require some extraordinary justification.\n\n[snip]\n\n\u003e \n\u003e I do think that we shouldn\u0027t use groups to flag-gate features, especially not on a fine-grained level. Making a distinction between humans and bots is the most I would want to do here because it really complicates behavior and debugging. If someone shouldn\u0027t be allowed to use a feature, that should be expressed with permissions.\n\nI think this hits it on the head. If you are looking to express permissions (and it sounds like you are) then use permissions? Those already \"just work\" with groups, so this discussion becomes trivial. If we take the Non-Interactive Users group as a case study, if instead we had a permission that restricts the number of threads a user can run it would be SO useful. Then I could set different groups to have different threads. Amazing. (Pretty sure people have wanted this in Gerrit for years now). Even if you just went for 1:1 with current functionality, a capability that you grant to group(s) that designates them as \"Batch Thread Users\" would still be much more discoverable and a more natural fit than the current feature.\n\nMagic groups are great for things like \"Registered Users\" and \"Anonymous Users\". Going beyond that they lose a lot of appeal.\n\n\u003e \n\u003e Do you have a strong preference either way?\n\nI do. I think both are poor options because neither addresses the concern of \"robot\" being a bucket that features become tied to.\n\nI\u0027m concerned adding a bit is a wheel reinvention and a \"shortcut\" past thinking about what the behaviors/features/permissions are that you want to control. Identify those permissions, make them things you can grant/deny, and I suspect you\u0027ll have all the power you need (and you\u0027ll have opened up paths for others to build upon in the future too!).",
      "parentUuid": "4728bb6f_bd14dd42",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a9dff6_d6a6a3fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-17T14:23:16Z",
      "side": 1,
      "message": "\u003e The idea of a \"robot account\" is not one I/we support.\n\nI would have appreciated if you made that more clear from the beginning. I re-read your initial comments again now and they just sounds like you\u0027d prefer a different implementation but don\u0027t disagree with the feature to begin with.\n\nAs I said, I think it\u0027s sane to solve this with group membership or with a bit, but solving it with permissions sounds overly complicated to me. Let\u0027s say we have these scenarios:\n\n1) Bots don\u0027t get added to the attention set\nA global \"ADD_TO_ATTENTION_SET\" capability.\n\n2) Bot requests execute on a different thread pool\nA global \"USE_INTERACTIVE_THREAD_POOL\" capability.\n\n3) Bots don\u0027t receive emails (I made this up just now)\nA global \"CAN_RECEIVE_EMAIL\" capability.\n\netc.\n\nI fundamentally think that permissions are for users to define who is allowed to take certain actions, not to feature gate parts of the system. Our permission system is flexible, but terribly complicated. It\u0027s imminent when we help users figure out their permissions (\"why can I not do X?\") or onboard new team members at Google who need to read up tons of things before they can help users and diagnose issues.\n\nThe type of the account is a fundamental account property. Like a name or some user preference (e.g. showing X lines of context in a diff). But I think that\u0027s undisputed. The question is rather what does that type trigger and should it trigger Gerrit to behave differently or should there rather be another config knob to allow overriding a default.\n\nYou could argue that all the things tigered by \"isRobot\" should be user preferences as well - or defined by some other mechanism like permissions or group membership. But the problem is that these user preferences affect the usability of the product as a whole - not just the user setting it: Consider a \"Add to me to attention set: yes/no\" preference. What if some users just opt out of that? That would break the feature as a whole because it only works if any human can be added to the attention set.\n\nThat said, I do think we can add some knobs for host admins to define bot behavior. For example: addBotsToAttentionSet might be a legitimate boolean Gerrit config. That is then a central decision made by the admin and it\u0027s way easier than granting capabilities on a set of accounts.\n\nI think I am now getting to my main point: Do you see a use case where bots *should* be added to the attention set? Or where they *should receive email?\n\nDon\u0027t get me wrong: I am not at all saying that the isRobot bit is the new super weapon. Maybe there are use cases in the future where we want to use a capability that we grant to the robots group while also allowing fine-grained overrides. I just can\u0027t see one now. Thread pool size could be one, but there we also have the same pattern of: humans have a default thread pool size, bots have a default thread pool size and *some accounts* can have an override. So granting a capability to the Registered Users (size\u003d1), Robots (size\u003d5) and \"ExcessiveUsers\" (size\u003d10) should also just work. So the robot bit and the magic system group don\u0027t actually stand in your way there. They are something to build upon and useful even in that case.\n\nI would rather have that basic building block and then make a case-by-case decision if we need more fine-grained controls.\n\nBy the way, similar other systems do distinguish user types:\nhttps://gitlab.com/gitlab-org/gitlab/-/issues/6883\nhttps://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements (see \"Machine account\").",
      "parentUuid": "4cc50aa6_eeba0792",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53e5b546_61392b2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-07-17T15:20:16Z",
      "side": 1,
      "message": "Maybe for context, we discovered this problem recently when we realized that bots were being added to the attention set and we didn\u0027t want that. If there had been a property isRobot() on the account it would likely not have happened. Adding an indirection between the account itself and its type adds significant complexity. Every piece of code will have to make a group lookup to determine how to treat a given account. This is not discoverable for developers. The type is a fundamental account property that should be stored with the account.\n\nDo you see a use case for account types other than human and robot?\n\nGroups allow hierarchies and those semantics are not suitable for account types. Accounts can have multiple independent types, e.g. any type of account can be a testing account, an account managed by someone else etc. FWIW at Google we recently did a big migration to fix this exact problem. So if the plan is to support more types than human and robot I strongly advise against any hierarchical structure. It combines complexity with inflexibility :-) I realize that we could have some mantra like \"groups used for account types must not be hierarchical\" but that is again complicated and undiscoverable.\n\nWhat are the advantages of using groups over using a flag?\n\nYou said \"If you are looking to express permissions (and it sounds like you are) then use permissions?\". It\u0027s not permissions we want to represent, but account types. Piggybacking on permissions or group membership adds an indirection and thus complexity.\n\nI can totally see how the idea of adding even just a boolean to a central data type like accounts raises eyebrows, and that\u0027s a good thing. But the complexity is already there, because we already have robot accounts, and not expressing it, or expressing it by means that are already established but not intended for this purpose, does not make the complexity go away.",
      "parentUuid": "76a9dff6_d6a6a3fd",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d124d1b_2fe98fac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-07-17T16:02:39Z",
      "side": 1,
      "message": "I would also like to add a UI perspective: It would also be very helpful, if we can treat robot account differently in the UI.\n\nRobots should not appear in the \"Reviewers\" column on the dashboard: https://imgur.com/a/Np1FXa9\n\nRobots should be hidden or treated differently (add a robot avatar?) in the change metadata: https://imgur.com/a/EkKoNr4\n\nRobot entries in the Change Log should get a different visual treatment than human entries and also a different filtering logic: https://imgur.com/a/IcO9mHx\n\nI agree with Jörg and Patrick that robots should also get a different treatment in the backend in tons places where you don\u0027t want to create a separate config, capability or permission for each of those places.\n\nPatrick\u0027s reference to other systems having the same kind of distinction is also a good indicator for this proposal not being insane, I think. :-)",
      "parentUuid": "53e5b546_61392b2a",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30554835_24de0f65",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-17T17:50:41Z",
      "side": 1,
      "message": "Apparently I can\u0027t quote an earlier reply now? I thought that was something I could do until recently. Anyway...\n\nReplies to Patrick:\n\n\u003e I would have appreciated if you made that more clear from the beginning. I re-read your initial comments again now and they just sounds like you\u0027d prefer a different implementation but don\u0027t disagree with the feature to begin with.\n\nSorry, I\u0027ll try to word things clearer in the future.\n\n\u003e 1) Bots don\u0027t get added to the attention set\n\u003e A global \"ADD_TO_ATTENTION_SET\" capability.\n\u003e \n\u003e 2) Bot requests execute on a different thread pool\n\u003e A global \"USE_INTERACTIVE_THREAD_POOL\" capability.\n\u003e \n\u003e 3) Bots don\u0027t receive emails (I made this up just now)\n\u003e A global \"CAN_RECEIVE_EMAIL\" capability.\n\nThese seem like reasonable permissions to me. If you\u0027d prefer to have those as \"bits\" on an account, I guess you could, but I typically think of account bits as things the account \"owns\" vs capabilities as things the admins own. The first two here are things I think you\u0027d want admins to own and the third is more of an account saying for itself \"I don\u0027t get emails\".\n\n\u003e The type of the account is a fundamental account property. Like a name or some user preference (e.g. showing X lines of context in a diff). But I think that\u0027s undisputed.\n\nIt\u0027s not undisputed. I agree there can be value in accounts having types, but then we have to deal with things like LDAP having its own idea of an account type. How do you align those two?\n\n\u003e The question is rather what does that type trigger and should it trigger Gerrit to behave differently or should there rather be another config knob to allow overriding a default.\n\nIt could definitely be convenient to have defaults for different kinds of accounts, but I don\u0027t know that core Gerrit really needs to know about setting those defaults. I\u0027m sure Google\u0027s LDAP account properities look different from Qualcomm\u0027s or SAP\u0027s, yet I\u0027m sure we all have a \"robot\" type (maybe multiple?). This is a perfect problem for a plugin to solve, perhaps through automatic setting of bits/groups/perms/etc.\n\n\u003e But the problem is that these user preferences affect the usability of the product as a whole - not just the user setting it: Consider a \"Add to me to attention set: yes/no\" preference. What if some users just opt out of that? That would break the feature as a whole because it only works if any human can be added to the attention set.\n\nI didn\u0027t suggest user preferences. I agree that would not be a good fit for this use case.\n\n\u003e That said, I do think we can add some knobs for host admins to define bot behavior. For example: addBotsToAttentionSet might be a legitimate boolean Gerrit config. That is then a central decision made by the admin and it\u0027s way easier than granting capabilities on a set of accounts.\n\nHow is a Gerrit config simpler than granting capabilities? Why is one a \"central decision made by the admin\" and the other is not?\n\n\u003e I think I am now getting to my main point: Do you see a use case where bots *should* be added to the attention set?\n\nFrom what I understand of the attention set design, no.\n\n\u003e Or where they *should receive email?\n\nIf a bot wants to get email, why should I care?\n\n\u003e By the way, similar other systems do distinguish user types:\n\u003e https://gitlab.com/gitlab-org/gitlab/-/issues/6883\n\nHas been open for over 2 years \"Due to the longstanding problem this issue aims to solve, this is being kept open to continue collecting user feedback until we have finished validation a solution\". I think that acknowledges my point better than I could have made it. This is a complex problem that an \"isRobot\" flag doesn\u0027t solve.\n\n\u003e https://docs.github.com/en/github/site-policy/github-terms-of-service#3-account-requirements (see \"Machine account\").\n\nThis is about who is legally responsible for a bot\u0027s actions. That\u0027s very different from what we\u0027re discussing. If Gerrit has a use case like that you\u0027re trying to solve, that\u0027s a different change than this one and we can discuss those merits separately.\n\nReplies to Joerg:\n\n\u003e Maybe for context, we discovered this problem recently when we realized that bots were being added to the attention set and we didn\u0027t want that. If there had been a property isRobot() on the account it would likely not have happened.\n\nIf there had been a \"ADD_TO_ATTENTION_SET\" capability it also would not have happened (or would have been trivially rectified).\n\n\u003e Do you see a use case for account types other than human and robot?\n\nYes. Robot type 1. Robot type 2. Human reviewer. Human manager. Human integrator. Human that sometimes acts likea robot (manual verifiers). Etc. The possibilities are endless.\n\n\u003e Groups allow hierarchies and those semantics are not suitable for account types. Accounts can have multiple independent types, e.g. any type of account can be a testing account, an account managed by someone else etc. FWIW at Google we recently did a big migration to fix this exact problem. So if the plan is to support more types than human and robot I strongly advise against any hierarchical structure. It combines complexity with inflexibility :-) I realize that we could have some mantra like \"groups used for account types must not be hierarchical\" but that is again complicated and undiscoverable.\n\nSounds like Google had a problem. I\u0027m glad you were able to resolve it. I\u0027d prefer it if reviewers didn\u0027t assume that means everyone else has/had the same problem. I\u0027m also not suggesting account types be based on any kind of hierarchy. I\u0027m suggesting there not be account types (which I believe bypasses this whole problem?).\n\n\u003e What are the advantages of using groups over using a flag?\n\nI think you quote part of my reply about this below. Was there another part of my explanation from before that wasn\u0027t clear?\n\n\u003e You said \"If you are looking to express permissions (and it sounds like you are) then use permissions?\". It\u0027s not permissions we want to represent, but account types.\n\nIf robot accounts were treated the same for purposes of attention set, then you\u0027d say you don\u0027t need an account type, but a permission/capability. Perms are much more flexible than flags.\n\n\u003e Piggybacking on permissions or group membership adds an indirection and thus complexity.\n\nI completely disagree on this. Permissions are direct. Account types are indirect. You\u0027re inferring behavior from an account type vs directly reading a permission. If this isn\u0027t clear, let\u0027s stop talking about anything else and get a common understanding on this.\n\n\u003e I can totally see how the idea of adding even just a boolean to a central data type like accounts raises eyebrows, and that\u0027s a good thing. But the complexity is already there, because we already have robot accounts, and not expressing it, or expressing it by means that are already established but not intended for this purpose, does not make the complexity go away.\n\nI disagree about the complexity. Attention set missed this use case. Ben points out other use cases where the idea that the feature shouldn\u0027t apply to all accounts equally was missed. It\u0027s very straightforward to solve those through capabilities.",
      "parentUuid": "0d124d1b_2fe98fac",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96e59568_f36d083f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-07-17T18:18:01Z",
      "side": 1,
      "message": "Patrick proposed two solutions yesterday, (1) and (2). Solution (2) AFAIU sticks to the established concept of a non-interactive-user group. Are you also arguing against that?\n\nGerrit distinguishes between human comments and robot comments. And as part of the CI Reboot we believe that a vital building block will be the introduction of robot labels. Being a human or a robot fundamentally changes how you interact with Gerrit. And we have a lot of interaction of both types. I am very convinced that making this distinction a first class citizen of Gerrit Core is a huge step forward and makes the product easier to use and maintain.\n\nNote that none of my UI examples were related to the attention set. In this review we have already established ~10 different situations where a human and a robot should be treated differently. The introduction of capabilities or permissions for each of these situations sounds overly complex to me.",
      "parentUuid": "30554835_24de0f65",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34b10130_356cc03a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-07-17T18:46:05Z",
      "side": 1,
      "message": "\u003e Replies to Joerg:\n\u003e \n\u003e \u003e Maybe for context, we discovered this problem recently when we realized that bots were being added to the attention set and we didn\u0027t want that. If there had been a property isRobot() on the account it would likely not have happened.\n\u003e \n\u003e If there had been a \"ADD_TO_ATTENTION_SET\" capability it also would not have happened (or would have been trivially rectified).\n\nI think my point is that by putting this behind an indirection and making it configurable you\u0027re increasing complexity where 95% of the time users will agree what the right thing to do is.\n\n\u003e \u003e Do you see a use case for account types other than human and robot?\n\u003e \n\u003e Yes. Robot type 1. Robot type 2. Human reviewer. Human manager. Human integrator. Human that sometimes acts likea robot (manual verifiers). Etc. The possibilities are endless.\n\nThose are roles, not account types. Maybe we have a terminology issue here? Account types are fundamentally different regarding basic account properties (not permissions), like \"can login with a password\" vs. \"can only login with some token\" - this you need to know even before entering the system. Or maybe \"represents one person\" vs. \"represents a group\", or \"human\" vs. \"robot\".\n\n\u003e \u003e Groups allow hierarchies and those semantics are not suitable for account types. Accounts can have multiple independent types, e.g. any type of account can be a testing account, an account managed by someone else etc. FWIW at Google we recently did a big migration to fix this exact problem. So if the plan is to support more types than human and robot I strongly advise against any hierarchical structure. It combines complexity with inflexibility :-) I realize that we could have some mantra like \"groups used for account types must not be hierarchical\" but that is again complicated and undiscoverable.\n\u003e \n\u003e Sounds like Google had a problem. I\u0027m glad you were able to resolve it. I\u0027d prefer it if reviewers didn\u0027t assume that means everyone else has/had the same problem. I\u0027m also not suggesting account types be based on any kind of hierarchy. I\u0027m suggesting there not be account types (which I believe bypasses this whole problem?).\n\nNo, Gerrit doesn\u0027t have this problem because it doesn\u0027t have a hierarchical account structure (yet). Maybe I\u0027m misunderstanding what you propose though. If you use the existing group system, what prevents someone from making the robots group a member of the humans group?\n\nAnother example: Say robots don\u0027t want to receive email and never get added to the attention set. Someone figures this also applies to some humans and adds a group of humans to the robots group. Suddenly those humans run on a different threadpool. Wouldn\u0027t this be a problem in your proposal?\n\n\u003e \u003e What are the advantages of using groups over using a flag?\n\u003e \n\u003e I think you quote part of my reply about this below. Was there another part of my explanation from before that wasn\u0027t clear?\n\nSorry, it\u0027s not clear to me what the advantage of using groups is, other than \"it\u0027s already there\" and \"it\u0027s already being used for this\".\n\n\u003e \u003e You said \"If you are looking to express permissions (and it sounds like you are) then use permissions?\". It\u0027s not permissions we want to represent, but account types.\n\u003e \n\u003e If robot accounts were treated the same for purposes of attention set, then you\u0027d say you don\u0027t need an account type, but a permission/capability. Perms are much more flexible than flags.\n\u003e \n\u003e \u003e Piggybacking on permissions or group membership adds an indirection and thus complexity.\n\u003e \n\u003e I completely disagree on this. Permissions are direct. Account types are indirect. You\u0027re inferring behavior from an account type vs directly reading a permission. If this isn\u0027t clear, let\u0027s stop talking about anything else and get a common understanding on this.\n\nI think I understand your point better now. You feel that\n\nif (account.isRobot()) { behavior(); }\n\nis an indirection because you go from account type to behavior, whereas\n\nif (want(account, BEHAVIOR)) { behavior(); }\n\nis more direct. Whereas I feel that wantBehavior(), which involves looking up and inferring dynamic and configurable memberships, is more indirect.\n\nIs that correct?",
      "parentUuid": "96e59568_f36d083f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bce0e8e_7adefa3b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-17T19:19:35Z",
      "side": 1,
      "message": "\u003e Patrick proposed two solutions yesterday, (1) and (2). Solution (2) AFAIU sticks to the established concept of a non-interactive-user group. Are you also arguing against that?\n\n(2) is closer, but still continues this idea of a group that implies potentially many different behaviors. I\u0027m fine with having a balance of configurability and ease of use, but to me that says \"add the lower layer that can be configurable and make it trivially easy to use\". If there\u0027s a way to opt an account out of each magic behavior added by being in the Non-Interactive Users group, then I\u0027m probably ok with having that group get additional default behaviors. I\u0027m mostly opposed to the thinking of \"it\u0027s a robot, therefore it must work this way\". That\u0027s what I associate with a certain fruit company\u0027s product design (\"I\u0027ll make the right choices for you because I know better\") and what I think drives a good number of people away from those products. Let\u0027s not make our product like that.\n\n\u003e \n\u003e Gerrit distinguishes between human comments and robot comments.\n\nI think that feature suffers from this same problem. I wasn\u0027t as engaged with upstream reviews when it was introduced or I would have objected to it on similar grounds. From the review I have been involved in on it [1], it seems clear that just robot or human is not a sufficient distinguishing factor for how that feature works.\n\nThe existence of robot comments also further suggests that this change is starting in the wrong place. If you were going to add an idea of robot accounts, I\u0027d expect changes to address robot comments and batch threads first.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/252993/1//COMMIT_MSG#29\n\n\u003e And as part of the CI Reboot we believe that a vital building block will be the introduction of robot labels.\n\nIt\u0027s a big red flag to me that you\u0027re bringing up a design that is (to me at least) far from agreed upon. This change, like any change, needs to stand on its own.\n\n\u003e Being a human or a robot fundamentally changes how you interact with Gerrit. And we have a lot of interaction of both types. I am very convinced that making this distinction a first class citizen of Gerrit Core is a huge step forward and makes the product easier to use and maintain.\n\nI\u0027m scarred by previous usage of \"first class citizen\". Can we agree to leave that out and let features stand on their own merits?\n\nI\u0027m not convinced on ease of use or maintenance. Gerrit has had robots interacting with it since the very beginning. There are certainly some pain points with that (comments I think are the most notable). I\u0027ve been a Gerrit admin longer than (I think) literally anyone else in the world. Maintaining servers with robots hasn\u0027t been a special challenge that I think a robot flag would have improved.\n\n\u003e \n\u003e Note that none of my UI examples were related to the attention set. In this review we have already established ~10 different situations where a human and a robot should be treated differently. The introduction of capabilities or permissions for each of these situations sounds overly complex to me.\n\nI\u0027ve only counted 6 situations mentioned in this review. That seems achievable. Even 20 would seem achievable. It\u0027s not particularly challenging code to write (or at least I haven\u0027t heard that concern).\n\nIt could be overly complex if we\u0027re 100% certain that the differentiation should only apply to robot vs human. I gave several examples of different account roles (which I think is a clearer way to consider this than \"type\"). I believe there\u0027s more differentiation in those roles than just robot or human. Thread counts are a great example of this. I know Google has custom layers that do rate limiting and other quota-like activity. Those don\u0027t just get applied to robots.\n\n\u003e \u003e Replies to Joerg:\n\u003e \u003e \u003e Maybe for context, we discovered this problem recently when we realized that bots were being added to the attention set and we didn\u0027t want that. If there had been a property isRobot() on the account it would likely not have happened.\n\u003e \u003e If there had been a \"ADD_TO_ATTENTION_SET\" capability it also would not have happened (or would have been trivially rectified).\n\u003e I think my point is that by putting this behind an indirection and making it configurable you\u0027re increasing complexity where 95% of the time users will agree what the right thing to do is.\n\nI\u0027m still not following the indirection. This group shouldn\u0027t be added to attention sets, so I set that capability for the group. That seems very direct? (maybe this is resolved by your comments lower?)\n\n\u003e No, Gerrit doesn\u0027t have this problem because it doesn\u0027t have a hierarchical account structure (yet). Maybe I\u0027m misunderstanding what you propose though. If you use the existing group system, what prevents someone from making the robots group a member of the humans group?\n\nI don\u0027t propose having a robot group or a humans group. I propose those capabilities like what Patrick mentioned. Those can be set on any group which can contain any account. No hierarchical problems (that I see).\n\n\u003e Another example: Say robots don\u0027t want to receive email and never get added to the attention set. Someone figures this also applies to some humans and adds a group of humans to the robots group. Suddenly those humans run on a different threadpool. Wouldn\u0027t this be a problem in your proposal?\n\nNo. Those are different capabilities. So if some group of humans shouldn\u0027t be added to the attention set, they get that capability set appropriately.\n\n\u003e Sorry, it\u0027s not clear to me what the advantage of using groups is, other than \"it\u0027s already there\" and \"it\u0027s already being used for this\".\n\nIt\u0027s less about groups than about granularity of on/off flags. Groups are just a means to an end. It lets you do something like a plugin that creates and maintains a magic group called \"Robots\" based on Google LDAP data and then you can set capabilities accordingly on your servers. I can have a plugin that knows Qualcomm LDAP data and I can set which capabilities I want for different accounts.\n\n\u003e \u003e \u003e You said \"If you are looking to express permissions (and it sounds like you are) then use permissions?\". It\u0027s not permissions we want to represent, but account types.\n\u003e \u003e \n\u003e \u003e If robot accounts were treated the same for purposes of attention set, then you\u0027d say you don\u0027t need an account type, but a permission/capability. Perms are much more flexible than flags.\n\u003e \u003e \n\u003e \u003e \u003e Piggybacking on permissions or group membership adds an indirection and thus complexity.\n\u003e \u003e \n\u003e \u003e I completely disagree on this. Permissions are direct. Account types are indirect. You\u0027re inferring behavior from an account type vs directly reading a permission. If this isn\u0027t clear, let\u0027s stop talking about anything else and get a common understanding on this.\n\u003e \n\u003e I think I understand your point better now. You feel that\n\u003e \n\u003e if (account.isRobot()) { behavior(); }\n\u003e \n\u003e is an indirection because you go from account type to behavior, whereas\n\u003e \n\u003e if (want(account, BEHAVIOR)) { behavior(); }\n\u003e \n\u003e is more direct. Whereas I feel that wantBehavior(), which involves looking up and inferring dynamic and configurable memberships, is more indirect.\n\u003e \n\u003e Is that correct?\n\nYes. Further, account.isRobot() could be dynamic or configurable too, you\u0027re just assuming it isn\u0027t.",
      "parentUuid": "96e59568_f36d083f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73b4d772_019d6fd5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-07-17T20:24:14Z",
      "side": 1,
      "message": "I understand that for someone who has been a Gerrit admin for a long time it is desirable to keep Gerrit as flexible and configurable as possible. New users and part-time admins maybe rather want something that \"just works\" out of the box.\n\nAs a frontend developer I can tell you that it is extremely hard to deliver a great user experience, if you know that every installation of Gerrit is very different. It is true that being opinionated limits your options, but it can also bring clarity.\n\nIt appears to me that this is a recurrent theme in our discussions that we had over the past two years: You value flexibility and configurability more, while others value simplicity and clarity more. Unfortunately, I don\u0027t think these fundamentally different perspectives can be easily reconciled. You have already mentioned it: This becomes a little bit like \"What is better, Apple or Linux?\", which can be an endless discussion.\n\nI hope that we will also have some non-Googlers expressing their thoughts and votes here, so that we can conclude this discussion.\n\nNote that the ESC had already planned a \"Vision\" workshop for the next Hackathon, which would have been nice to have in May. Settling for an overall direction between all maintainers with regards to exactly this discussion would have been part of it. It would have been really nice to see each other and debate this in person.",
      "parentUuid": "5bce0e8e_7adefa3b",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4535cc2b_16fe57eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1012732
      },
      "writtenOn": "2020-07-20T18:42:50Z",
      "side": 1,
      "message": "\u003e I hope that we will also have some non-Googlers expressing their thoughts and votes here, so that we can conclude this discussion.\n\u003e \n\u003e Note that the ESC had already planned a \"Vision\" workshop for the next Hackathon, which would have been nice to have in May. Settling for an overall direction between all maintainers with regards to exactly this discussion would have been part of it. It would have been really nice to see each other and debate this in person.\n\nGood idea! :) -Luca is I think AFK this week and David P. cannot focus on this yet. Can another ESC member organize a meeting to discuss this change, and series? Participants would be at least the ones that were actively involved so far in this review. I\u0027d keep the idea of iterating from the current base through increments, after agreeing on the goal and raw steps. (Starting from a design doc live review if need be, code/changes straight otherwise.)\n\nYou people meeting together to discuss these alternatives (pros, cons) would be the next step to help resume this important thread. Which ESC member would like to volunteer as the organizer for such a focused meeting? Feel free to invite community manager(s) as you see fit (or not). A 1-hour time-box should do it I think. Let\u0027s make the disagreements focused, precisely expressed, and non-personal. Demonstrated listening should keep negative emotions away.",
      "parentUuid": "73b4d772_019d6fd5",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5348adb8_45393973",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-07-21T16:36:07Z",
      "side": 1,
      "message": "Nasser:\n\"\"\"Yes. Further, account.isRobot() could be dynamic or configurable too, you\u0027re just assuming it isn\u0027t.\"\"\"\n\nThat would be the premise of the design, otherwise the whole proposal wouldn\u0027t be different from adding accounts to groups.\n\nLike Ben summarized, ISTM this discussion is at a point where we have \"flexibility and complexity\" vs. \"rigidity and simplicity\". Maybe we should have a basic, binding agreement on the direction in which we want Gerrit to develop. That seems to be a prerequisite for a meaningful evaluation of any design.",
      "parentUuid": "4535cc2b_16fe57eb",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23bfebdb_83de136b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-07-15T16:53:35Z",
      "side": 1,
      "message": "I am concerned that this attempts to be too clever. While it may makes somethings easier or better when it just works, it may make things more complicated when it doesn\u0027t. I think it would generally be better to allow each individual feature to be configured with a group(s) for which it alters its behavior. This would give much finer control when needed, but would still allow for simpler solutions like this by simply having a configurable default \"robot\" group that features could point to for disabling a feature.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e106d55c_86d7196f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-15T17:16:21Z",
      "side": 1,
      "message": "Interesting. I am a bit concerned about the additional complexity that this would add, though.\n\nI think we could start with the Non-Interactive users being the default everywhere and build out per-feature checks when we encounter that something doesn\u0027t work as it should.",
      "parentUuid": "23bfebdb_83de136b",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6a56386_55a721b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-07-15T17:19:02Z",
      "side": 1,
      "message": "Sounds reasonable.",
      "parentUuid": "e106d55c_86d7196f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a8093fa_fa102cd9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1108465
      },
      "writtenOn": "2020-07-17T16:09:22Z",
      "side": 1,
      "message": "hello",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "854716ac_2a5bfbb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-07-17T17:20:47Z",
      "side": 1,
      "message": "This is not using existing functionality in Gerrit which attempts to achieve the same thing. Please get agreement on changing the existing functionality if you want this.\n\nAnother problem with this approach is that it is not LDAP friendly, the groups approach is.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d15322ba_2be27e76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-17T17:50:41Z",
      "side": 1,
      "message": "I am disappointed that a +2 was given to this change when there are -1s with clear objections that have not been resolved. It is my understanding that we expect issues to be resolved before merging code. I think Martin\u0027s -2 is a reflection of that +2.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc6698e5_8f942fb5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-07-17T18:18:01Z",
      "side": 1,
      "message": "Sorry for the +2. It was not meant to express that we should ignore your concerns. It was just meant to express my personal opinion that I would be fine with submitting this. But I realize that this is not the established workflow. Excuse this mistake and let me downgrade to +1.",
      "parentUuid": "d15322ba_2be27e76",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e651bcf8_17c0470f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-07-20T21:39:09Z",
      "side": 1,
      "message": "I am willing to give a non-Googler opinion on this change, but I need to take more time to review the details. I am on PTO this week (hence only checking e-mails in the evenings) but I am willing to spend more time next week.\n\nMy high-level comment is: we do have an existing concept in Gerrit (non-interactive user group), what is missing in that existing concept that justify the introduction of a bot-user? What\u0027s the difference between a bot-user and a non-interactive user?\n\nI a going to find some of the questions myself, by reading the code next week :-)",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83fd6586_67c21857",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-21T07:54:02Z",
      "side": 1,
      "message": "I met with Ben and Edwin this morning to discuss how we can give this discussion enough room, so that all opinions are factored in and we choose the best path forward that strikes a balance.\n\nWe are on a tight schedule for attention set. To get out of this situation and allow for more discussions to happen, our proposal is to go with an interim solution that would allow us to roll out attention set to a handful of more dogfood hosts on googlesource.com.\n\nThe interim solution is to check group membership in “Non-Interactive Users” to gate if a user can be added to the attention set. The migration burden to get off the interim solution is on us.\n\nWe would like to schedule a meeting with everyone who has an interest in the topic next week to discuss. To us, a meeting looks like a better forum to discuss descending opinions and retain a constructive and positive atmosphere while at the same time coming to a conclusion in a timely manner rather than roundtrips with many people, discussing various issues interleaved that become hard to follow.\n\nWould that work for you?",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac20fa20_1299dfc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-22T14:45:21Z",
      "side": 1,
      "message": "Interim: https://gerrit-review.googlesource.com/c/gerrit/+/276358",
      "parentUuid": "83fd6586_67c21857",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8864025a_bb3ea1b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-23T11:57:23Z",
      "side": 1,
      "message": "\u003e We would like to schedule a meeting with everyone who has an interest in the topic next week to discuss.\n\nPing. Should we schedule a slot for next week?",
      "parentUuid": "ac20fa20_1299dfc2",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8e15eec_bb61d145",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1012732
      },
      "writtenOn": "2020-07-23T17:41:08Z",
      "side": 1,
      "message": "We discussed this at our CM meeting earlier today: I\u0027m about to send an invitation to every active participant from this thread.",
      "parentUuid": "8864025a_bb3ea1b4",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}