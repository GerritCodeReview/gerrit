{
  "comments": [
    {
      "key": {
        "uuid": "1be132fe_9a1d49d9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T16:51:36Z",
      "side": 1,
      "message": "I agree with the motivations for this change, but I\u0027m not sure we should jump to a boolean switch as the best solution. For example, we already have the Non-Interactive users group, could checking for inclusion in that group provide an equally good solution?\n\nIf we\u0027re going to start having a distinction about users with data in the account, I think we want to consider more broadly what all we could do with that and build up a framework to support it.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "510539ec_72834ec5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T16:52:48Z",
      "side": 1,
      "message": "\u003e I agree with the motivations for this change, but I\u0027m not sure we should jump to a boolean switch as the best solution. For example, we already have the Non-Interactive users group, could checking for inclusion in that group provide an equally good solution?\n\nI should add, if inclusion in that group is not equally good, how do you expect the two features to co-exist?",
      "parentUuid": "1be132fe_9a1d49d9",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "033d885f_fd0f089f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-15T17:16:21Z",
      "side": 1,
      "message": "That\u0027s an interesting idea. Honestly, I didn\u0027t know that group existed.\n\nI see that the docs mention it [1], but it\u0027s not very prominent in the code. I only found it in SchemaCreator and a bunch of tests.\n\nLet me think this through more deeply tomorrow and get back to you on that.\n\nDo you use the Non-Interactive group in any of your setups? If so, for what (what is done differently when a user is a member) and how is your experience with that so far?\n\n[1] https://gerrit-review.googlesource.com/Documentation/access-control.html#non-interactive_users",
      "parentUuid": "510539ec_72834ec5",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f4e920_1536c0b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-07-15T17:31:28Z",
      "side": 1,
      "message": "\u003e That\u0027s an interesting idea. Honestly, I didn\u0027t know that group existed.\n\u003e \n\u003e I see that the docs mention it [1], but it\u0027s not very prominent in the code. I only found it in SchemaCreator and a bunch of tests.\n\u003e \n\u003e Let me think this through more deeply tomorrow and get back to you on that.\n\u003e \n\u003e Do you use the Non-Interactive group in any of your setups? If so, for what (what is done differently when a user is a member) and how is your experience with that so far?\n\u003e \n\u003e [1] https://gerrit-review.googlesource.com/Documentation/access-control.html#non-interactive_users\n\nI think the only other significant reference to it is in sshd.batchThreads [2]. We don\u0027t use that functionality, but I\u0027ve seen it mentioned on the list [3]. Honestly it seems like more people run into it by accident than on purpose though, so I\u0027m not sure it\u0027s something to build on top of. In some ways it could be perceived as highlighting the concern Martin has below. Users/Admins add accounts to this group not really understanding what it does because it has such a generic name, then later run into problems because of seemingly \"magic\" behavior. In hindsight, a group named \"Batch threads users\" probably would have been smarter. It\u0027s easy enough for admins to include groups in groups, so if you have multiple \"feature groups\", re-including all your robot accounts in each feature group is pretty trivial (assuming you want all of them in each feature group, if not, then the pre-feature group gives you that granularity).\n\nThere could be some challenges in using groups this way (performance maybe?) that would push towards using flags on accounts instead. That would have the downside of having to set the flags individually per-feature and not be able to manage all your robot accounts as a group. Maybe we can overcome that, but groups do seem like a natural way to manage sets of accounts with similar attributes.\n\nI\u0027m curious to read what you come up with tomorrow.\n\n[2] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#sshd.batchThreads\n[3] https://groups.google.com/forum/#!searchin/repo-discuss/sshd.batchThreads%7Csort:date",
      "parentUuid": "033d885f_fd0f089f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4728bb6f_bd14dd42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-16T16:38:16Z",
      "side": 1,
      "message": "Thanks for your input!\n\nI think the existing feature is really hard to discover and I don\u0027t think we should build on that. So whatever we do, it should be more discoverable. We can either go with the is_robot bit OR with groups, but we shouldn\u0027t add the bit now and leave the Non-Interactive group as-is. The two wouldn\u0027t play together well.\n\nSo we can either:\n\n1) Add an is_robot bit to the account AND add a SystemGroup (magic) that contains all users that are robots (just like RegisteredUsers contains all users).\n- Do what this change does\n- Set the bit for all members of Non-Interactive Users with a schema migration\n- Add code to populate a magic system group with all accounts that are robots\n\nPros:\n- Explict and visible\n- Latency is not an issue\n- Can be obtained from the cached account entity, so code is a bit easier\n\nCons:\n- Only users with MODIFY_ACCOUNT can mark users as robots. Otherwise anyone could gain privileges granted to the magic group by flipping a bit. Seems OK, though.\n\n2) Go just with a group (say \"Robot Users\"), no bit.\n- Create a new group OR rename the existing group\n- Serve an isRobot bit on the API in AccountInfo (there is a plan for the UI to show a robot accounts a bit different so that users know what they are dealing with)\n- Have some kind of facade to see if a user is a robot in the backend\n\nPros:\n- More flexible (you can include sub-groups)\n- No extra account state required\n- Finer ACLs: The Robots group has an owners group and any member can add new members\n\nCons:\n- Latency is OK if this is just an internal Gerrit group, but gets prohibitive when including external groups because we might need to do 100+ memberships checks when serving change query results to enrich AccountInfo with isRobot - something we don\u0027t have to do ATM. We would need to document that (bad, because admins might not read) or forbid it (bad, because why does that work differently from the rest).\n- I see the flexibility as a con here. It seems not really needed (why does one need group nesting?) and makes a simple feature harder.\n- Nesting might make it harder to see why someone is a robot\n\nHonestly, I am indifferent here, but I also don\u0027t think it matters much at this point, because both (1) and (2) can be transformed into the respective other implementation with a single schema migration if requirements change.\n\nMy tl;dr: I like (2) for the ACLing especially around who can mark accounts as robot accounts. I like (1) for being explicit and discoverable and having zero performance implications.\n\nI\u0027ve had some extensive discussions with Edwin and Joerg today. Joerg worked in the team that owns Google accounts and infrastructure and advised for the bit instead of the group, because what we express is the nature (type) of the account - so a property of the account - and that shouldn\u0027t be mixed up with the group system but stand by itself. He did suggested that we could create a magic group based on that property - which is part of the plan in (1) if we want to use it for permissions. Edwin was also indifferent but slightly leaning towards the group-based implementation IIRC because it\u0027s an established concept.\n\nI do think that we shouldn\u0027t use groups to flag-gate features, especially not on a fine-grained level. Making a distinction between humans and bots is the most I would want to do here because it really complicates behavior and debugging. If someone shouldn\u0027t be allowed to use a feature, that should be expressed with permissions.\n\nDo you have a strong preference either way?\n\nIf not, I think I would go with (1). I\u0027ve created a WIP change for the missing pieces and can follow up with completing that tomorrow.",
      "parentUuid": "35f4e920_1536c0b5",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23bfebdb_83de136b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-07-15T16:53:35Z",
      "side": 1,
      "message": "I am concerned that this attempts to be too clever. While it may makes somethings easier or better when it just works, it may make things more complicated when it doesn\u0027t. I think it would generally be better to allow each individual feature to be configured with a group(s) for which it alters its behavior. This would give much finer control when needed, but would still allow for simpler solutions like this by simply having a configurable default \"robot\" group that features could point to for disabling a feature.",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e106d55c_86d7196f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-07-15T17:16:21Z",
      "side": 1,
      "message": "Interesting. I am a bit concerned about the additional complexity that this would add, though.\n\nI think we could start with the Non-Interactive users being the default everywhere and build out per-feature checks when we encounter that something doesn\u0027t work as it should.",
      "parentUuid": "23bfebdb_83de136b",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6a56386_55a721b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-07-15T17:19:02Z",
      "side": 1,
      "message": "Sounds reasonable.",
      "parentUuid": "e106d55c_86d7196f",
      "revId": "4d89eac993ff09e07485708e7aa70c192cf54a00",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}