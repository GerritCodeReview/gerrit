{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c8d52ab6_19545752",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/plugins/DelegatingClassLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-04-07T23:25:31Z",
      "side": 1,
      "message": "This is actually 64K minus one byte: 2^16-1\u003d0xFFFF\nAny reason why not exactly 64K (some weird trick)?\n\nReplace 0xFFFF with 1 \u003c\u003c 16?",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 37
      },
      "revId": "4d980e8ed8b9acbba1cd26c0ee8321148c1f41bd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4d1d9bd_b0971733",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/plugins/DelegatingClassLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1028987
      },
      "writtenOn": "2017-04-10T21:03:05Z",
      "side": 1,
      "message": "Nothing magical, just a buffer. PS3 removes this method and uses ByteStreams.toByteArray() instead.",
      "parentUuid": "c8d52ab6_19545752",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 37
      },
      "revId": "4d980e8ed8b9acbba1cd26c0ee8321148c1f41bd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef05e744_0cfa4521",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/plugins/DelegatingClassLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1028987
      },
      "writtenOn": "2017-04-10T21:04:08Z",
      "side": 1,
      "message": "Sorry, not PS3, I meant PS6.",
      "parentUuid": "b4d1d9bd_b0971733",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 37
      },
      "revId": "4d980e8ed8b9acbba1cd26c0ee8321148c1f41bd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d5f053f_365e73f3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/plugins/DelegatingClassLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-02-10T18:50:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ef05e744_0cfa4521",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 37
      },
      "revId": "4d980e8ed8b9acbba1cd26c0ee8321148c1f41bd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "894ba6f6_c950194e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/plugins/DelegatingClassLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-02-10T19:53:12Z",
      "side": 1,
      "message": "FYI, I believe that an improvement to this approach would be to use a classloader that does not load the bytes from the same jar (effectively duplicating the class), but instead just passes it through in the loadClass() method instead to either classloader (a true mixing of the classloaders). This would save space and make static variables available to both plugins. The new approach would also allow more than one classloader to be mixed efficiently. We are working for a prototype for this.",
      "parentUuid": "0d5f053f_365e73f3",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 37
      },
      "revId": "4d980e8ed8b9acbba1cd26c0ee8321148c1f41bd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}