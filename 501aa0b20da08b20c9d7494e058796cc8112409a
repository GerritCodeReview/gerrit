{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4c43178a_b5fc7632",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T12:32:46Z",
      "side": 1,
      "message": "The name doesn\u0027t fit anymore then. \"MergeSuperSet\" is ... well... the superset of changes merged when the provided change gets merged.\n\nRelatedSuperSet? or more generically ChangeSuperSet? I think I prefer ChangeSuperSet",
      "range": {
        "startLine": 13,
        "startChar": 19,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15433c97_945d8b56",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T12:32:46Z",
      "side": 1,
      "message": "I think we need more refactoring before we can implement the desired new functionality.\n\n1) Rename MergeSuperSet, LocalMergeSuperSet, etc. to something that suggests these classes also contain logic that isn\u0027t relevant for merging\n2) The whole machinery is complex. I think it becomes easier to understand if we move the logic a bit. Instead of plugging in the calls where you did, it would become simpler if we treated the related changes closure like we treat the topic closure. In the end, related changes are also just an index query (for the NoteDb group). (plus sorting which isn\u0027t relevant IMO?)\n3) I think we want a more formal definition of what \u0027related changes\u0027 should be included in the graph. Is it transitiveClosure(mergesuper set + NoteDb group)?\n\nHere is some pseudo code how I think this could look like:\n\nChangeSuperSet:\n\ncompleteSet():\nwhile(seen!\u003doldSeen) {\n  oldSeen \u003d seen;\n  changeSet \u003d findAllUnmergedAncestors(changeSet); // \u003d walk until you find a change that is merged. return all changes you find. old name: mergeSuperSetComputation.completeWithoutTopic\n  changeSet \u003d topicClosure(changeSet); // call the index for all topics we know of.\n  if (includeAllRelatedChanges) {\n     changeSet \u003d groupClosure(changeSet); // \u003d related changes\n  }\n}\n\nHappy to chat about this f2f if I got things wrong or anything is unclear.",
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "facda7c2_4e810e03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-13T12:57:44Z",
      "side": 1,
      "message": "I\u0027ll write another iteration and we\u0027ll see if a f2f is needed",
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdd6a81c_683410c7",
        "filename": "java/com/google/gerrit/server/change/GetRelatedChangesUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T12:32:46Z",
      "side": 1,
      "message": "Why is this required? It\u0027s a leap in complexity so if we can, I think we should avoid it.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 68,
        "endChar": 33
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b185c51b_cef5b83d",
        "filename": "java/com/google/gerrit/server/change/GetRelatedChangesUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-13T12:57:44Z",
      "side": 1,
      "message": "the default is to include all patch-sets, I\u0027m actually trying to optimize and not bother to look into all the patch-sets. WDYT?",
      "parentUuid": "cdd6a81c_683410c7",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 68,
        "endChar": 33
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "119c3cdd_21908575",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T12:32:46Z",
      "side": 1,
      "message": "I think this isn\u0027t the right way to plug the new logic in. See my other comment.\n\nFor your graph endpoint, why do you need the RelatedChangesSorter anyway? Since you are returning a graph (list of nodes with parent pointers), the order of nodes you return doesn\u0027t really matter or did I miss something?",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f6160df_cb2c56fc",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-13T12:57:44Z",
      "side": 1,
      "message": "ha yes, there is one thing you are not aware of:\nThe group id predicate is totally buggy, so the only reason the \"Related changes\" endpoint works is because of this \"sort method\". There is no point to even fix this bug since for past changes it will still be buggy, and we\u0027re definitely not going to do a migration here.\n\nI think the way to go would be to merge the RelatedChangesSorter instead of GetRelatedChangesUtil to make it clear it\u0027s mandatory, t",
      "parentUuid": "119c3cdd_21908575",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d7b6f93_8a80d27b",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-13T12:59:45Z",
      "side": 1,
      "message": "I haven\u0027t investigated in detail why it\u0027s buggy but tl;dr is that in some cases we don\u0027t update the group id properly and that leads to changes that used to be in the same stack in ps1, still have the same groupid, although they got moved/rebased/pushed on top of a different change. Unsure which one of those is buggy but to be honest I never thought it\u0027s worth the effort to look into this since this works just fine with the sorting in place.",
      "parentUuid": "6f6160df_cb2c56fc",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd88362d_a0d50f39",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T14:01:15Z",
      "side": 1,
      "message": "\u003e Unsure which one of those is buggy but to be honest I never thought it\u0027s worth the effort to look into this since this works just fine with the sorting in place.\n\nI think that argument only holds for the status quo. We can say we know this doesn\u0027t work the way it should but this other logic (sorting) fixes it up, so better not touch this area as a whole.\n\nBut now we are implementing new features (graph endpoint) on top of this. I really think we should fix group associations (or find out why it\u0027s fundamentally unfixable) so that we don\u0027t have to run sorting just for the sake of fixing up things.\n\nIMO the most effective way to reduce technical debt in the system is clean things up when we implement new features and account for that cleanup time when estimating new features.",
      "parentUuid": "6d7b6f93_8a80d27b",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfea57ea_92db4f5a",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-13T14:03:37Z",
      "side": 1,
      "message": "See https://gerrit-review.googlesource.com/c/gerrit/+/320920 that renames the method to \"sortAndFilter\" to emphasise it\u0027s not really just sort - but also filter.\n\nI\u0027ll look into this bug in more details.",
      "parentUuid": "fd88362d_a0d50f39",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ac59e76_6fd2c581",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-14T10:00:42Z",
      "side": 1,
      "message": "hmm,\nanother reason I need related changes sorter is the need to differentiate changes that are for submission and changes not for submission.\nThis sort method essentially splits the result into ancestor and descendants quite nicely, and thanks to this I am able to tell which changes are required and not required for submission.",
      "parentUuid": "bfea57ea_92db4f5a",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4add7b62_615f8766",
        "filename": "java/com/google/gerrit/server/change/RelatedChangesSorter.java",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-10-17T20:51:28Z",
      "side": 1,
      "message": "Some more research on this topic:\nQuerying for group is currently querying if *any patch-set* contains the requested group. I am revamping it to also allow querying for latest patch-set.\nThis way group query should always be right as far as I tested.",
      "parentUuid": "9ac59e76_6fd2c581",
      "range": {
        "startLine": 80,
        "startChar": 5,
        "endLine": 80,
        "endChar": 34
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a24ff80_e7f3e2b6",
        "filename": "java/com/google/gerrit/server/submit/ChangeSet.java",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-10-13T12:32:46Z",
      "side": 1,
      "message": "Instead of three separate maps, we could encode the information (visible/invisible and inMergeSuperSet/notInMergeSuperSet) in a small autoValue and keep just a single map. Would make it easier to read IMO.\n\n@AutoValue \nclass ChangeNode {\n  ChangeData changeData();\n  boolean isInMergeSuperSet();\n  boolean isVisible();\n}\n\nthe Change set just needs a single map which guarantees that each change is added only once (hard to enforce with 3 maps).",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 50,
        "endChar": 91
      },
      "revId": "501aa0b20da08b20c9d7494e058796cc8112409a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}