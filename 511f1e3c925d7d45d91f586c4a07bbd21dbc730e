{
  "comments": [
    {
      "key": {
        "uuid": "a466372b_be7fc981",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/group/Groups.java",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-08-01T07:27:34Z",
      "side": 1,
      "message": "Is it okay that now we load the groups from the database each time when the account cache loads an account? The old code used the group cache to resolve groups.",
      "range": {
        "startLine": 95,
        "startChar": 45,
        "endLine": 95,
        "endChar": 82
      },
      "revId": "511f1e3c925d7d45d91f586c4a07bbd21dbc730e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1af81f23_9f1aeec8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/group/Groups.java",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-01T09:27:36Z",
      "side": 1,
      "message": "Well, I am a bit torn on that matter.\n\nArguments in favor of the cache:\n- Retrieval of cached values is probably faster.\n- Cached values don\u0027t require IO.\n- Retrieved values are cached for future access.\n\nArguments in favor of the database:\n- ReviewDb: We can execute a batch operation instead of querying for each group.\n- NoteDb: We only need to check for the existence of the refs and avoid creating the group object (and possibly parsing the group note).\n- We never used the cache when doing the similar operation getParentGroups(subGroupUuid). (see [1])\n- We don\u0027t introduce a circular dependency. (The cache depends on this class and if we used the cache here, we would introduce a backward dependency to the cache.)\n\n[1] https://gerrit-review.googlesource.com/c/116092/4/gerrit-server/src/main/java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java#b181\n\nMy biggest worry is the circular dependency. To avoid it, we could split this class into two (a part for direct group lookup and another one for the members/subgroups) but then we should also split GroupsUpdate to be consistent.\n\nWhat\u0027s your opinion?",
      "parentUuid": "a466372b_be7fc981",
      "range": {
        "startLine": 95,
        "startChar": 45,
        "endLine": 95,
        "endChar": 82
      },
      "revId": "511f1e3c925d7d45d91f586c4a07bbd21dbc730e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84c755b6_9cd30486",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/group/Groups.java",
        "patchSetId": 4
      },
      "lineNbr": 95,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-08-01T14:15:04Z",
      "side": 1,
      "message": "I think the main argument in favor of using the cache is that a group is loaded only once from ReviewDb instead of once per member that logs in. So not using the cache means we add a significant amount of ReviewDb roundtrips. As long as we support reading from the ReviewDb that should be a concern.\n\nWith NoteDb the situation is different as with NoteDb you have no direct way to lookup groups that have a certain account as member. This means for NoteDb you need a cache or index lookup for this, won\u0027t you?\n\n\u003e We don\u0027t introduce a circular dependency.\n\nA circular dependency is bad, but the API of this class could be designed like this that the index lookup is done by the caller and not this class (Just return Stream\u003cAccountGroup.ID\u003e instead of Stream\u003cAccountGroup.UUID\u003e). Once groups are migrated to ReviewDb the API can be cleaned up to return UUIDs.\n\n\u003e We never used the cache when doing the similar operation \u003e getParentGroups(subGroupUuid). (see [1])\n\nTrue, but the accounts are loaded much more frequently. So I think it matters more for the account cache.\n\nMaybe Dave can better estimate if this is a real issue or if this amount of extra ReviewDb roundtrips is still okay.",
      "parentUuid": "1af81f23_9f1aeec8",
      "range": {
        "startLine": 95,
        "startChar": 45,
        "endLine": 95,
        "endChar": 82
      },
      "revId": "511f1e3c925d7d45d91f586c4a07bbd21dbc730e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}