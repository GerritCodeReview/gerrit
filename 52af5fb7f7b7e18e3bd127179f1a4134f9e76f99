{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0bb00b0b_38e69998",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2020-12-10T09:12:24Z",
      "side": 1,
      "message": "Dmitrii, can you also have a look and +2 if you are ok with this approach?",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1de2bc51_663fdff2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T09:27:25Z",
      "side": 1,
      "message": "Why can\u0027t we have ordinary .ts file instead .d.ts?\nAs I know, the manually written .d.ts file is used for .js code.",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7561e66e_633a4eef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T09:29:58Z",
      "side": 1,
      "message": "Any technical reason to split the common.ts file?\nI.e. I see the point to split types by usages, but depending on common.ts doesn\u0027t increase the size of .js file until you execute some code from this file - but there are no code in this file.",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "510ccc36_7385c5de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:49:54Z",
      "side": 1,
      "message": "It\u0027s a way to ensure that there are only types in the file.\n\nI could use a regular ts file and a regular ts_library, but that would allow people to import Values such as constants/constants.ts - and that defeats the idea that this is only types - the API of gr-diff, to be pulled into a separately compiled bundle.\n\nd.ts can be used to describe the type shape of other code, and one important use case is describing the types of a JS file, but I don\u0027t think that is the only way it should be used.",
      "parentUuid": "1de2bc51_663fdff2",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca4295d6_b6ddc1cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T09:54:07Z",
      "side": 1,
      "message": "It just makes it easier to find the types that are relevant to folks embedding gr-diff, and to ensure they are not renamed (by adding the declare keyword) in bundles that do use property renaming.\nIt also makes it easier for the Gerrit team to know which types they can change at will (because they are sort of internal to the Gerrit repository) and which types make up the API of the embedable gr-diff and should not be changed unless when versioned etc.",
      "parentUuid": "7561e66e_633a4eef",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fc92a31_2ef2c825",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T10:15:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca4295d6_b6ddc1cb",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbe38046_a7b3fe6c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-12-10T10:15:21Z",
      "side": 1,
      "message": "\u003e\u003eIt\u0027s a way to ensure that there are only types in the file.\nYes, I remember we discussed it. I\u0027ve read about it and made some tests. If a file A.ts has a code and types and another B.ts file imports type only, the generated B.js file doesn\u0027t import A.js file. \nSo, if we add a code into the file, the code shouldn\u0027t affect others in any way.\n\nDoes it work for you (i.e. do not use .d.ts files) ?",
      "parentUuid": "510ccc36_7385c5de",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7df1d5e8_c3d12fd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2020-12-10T10:34:17Z",
      "side": 1,
      "message": "For enums, I would have to use `import type` to be sure as the type and the value has the same name, but I guess I could do that, otherwise decide that I don\u0027t mind having the enum values imported in both packages.\n\nOne more thing this makes a bit more tricky is setting up build rules: Code bases that embed gr-diff need a separate build target to depend on which has only the types. I could potentially achieve this by creating a build target that has types/ and constants/ as sources, and exclude those two folders from the main build target, adding a dep on the types/constants build target instead. Right now I do something similar by excluding d.ts files and having a separate build target for the d.ts files. The current approach has the advantage that we could decide to put the relevant API files together with he source code, e.g. into elements/diff/gr-diff-api/ or something like that. I was not sure if that would not eventually be desirable to avoid having a parallel hierarchy of files.\n\nAsking the other way around: What is the benefit of using ts only files? \nIn the end, I think we could make both approaches work - so if you have a strong preference for having only *.ts files, I can rename them back and try to adjust the build rules accordingly.",
      "parentUuid": "bbe38046_a7b3fe6c",
      "revId": "52af5fb7f7b7e18e3bd127179f1a4134f9e76f99",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}