{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "eaaad2de_c8e2ab0e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-02-11T01:06:56Z",
      "side": 1,
      "message": "This is already possible today: the replication plugin exposes an API that is consumed by the multi-site plugin.\n\nCan you explain what is the problem with the current inter-plugin communication system and what is this change going to add as functionality?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 45
      },
      "revId": "52b3151436aa7552b3adb6b31b55903ba785b680",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c03d148_c43a7009",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2021-02-19T19:06:05Z",
      "side": 1,
      "message": "\u003e This is already possible today: the replication plugin exposes an API that is consumed by the multi-site plugin.\n\nI don\u0027t believe this is an accurate statement. From my understanding, technically the \"lib\" mechanism exposes the API, not the plugin. While the code may live in the same source tree, that does not make it part of the plugin as it not loaded/unloaded when the plugin is loaded/unloaded, it is loaded when the lib is loaded and it is never unloaded. Is my understanding correct?\n\n\u003e Can you explain what is the problem with the current inter-plugin communication system and what is this change going to add as functionality?\n\nCould you explain how you think this can be done currently? I am not aware of any current plugin based mechanism to allow plugins to expose APIs for other plugins to consume, can you elaborate on how you think this can currently be done?",
      "parentUuid": "eaaad2de_c8e2ab0e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 45
      },
      "revId": "52b3151436aa7552b3adb6b31b55903ba785b680",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "733fc14c_28bdaa29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-02-11T01:06:56Z",
      "side": 1,
      "message": "That is already possible with the current mechanism in Gerrit, and we actually use it in multi-site.\n\nI do not disagree with this alternative approach, however, it would be best to understand the differences and benefits of this approach against the current one implemented in Gerrit.\n\nI know that this change is small enough to not require a design document. However, a simple markdown file that describes what Gerrit can do today, what are the limits and problems with the current approach and what this new approach provides as benefits, would help me and other reviewers to better understand and appreciate this change.\n\nThanks for your time coding this solution and answering to my questions and comments, I do appreciate it.",
      "revId": "52b3151436aa7552b3adb6b31b55903ba785b680",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}