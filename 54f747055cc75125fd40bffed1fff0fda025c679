{
  "comments": [
    {
      "key": {
        "uuid": "2a90a898_2f8369f2",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 163,
      "author": {
        "id": 1010015
      },
      "writtenOn": "2014-05-13T08:46:56Z",
      "side": 1,
      "message": "for performance concern, should we add checking : \nonly when patchset A and B have not same parent(s), we run getPaths() and do this filter operation here?",
      "revId": "54f747055cc75125fd40bffed1fff0fda025c679",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a90a898_4f658d99",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1010015
      },
      "writtenOn": "2014-05-13T09:09:49Z",
      "side": 1,
      "message": "here its better to add check: parent(s) of key.getOldId() is not same with parent(s) of key.getNewId() , that means rebase happened. \nif it does not belongs to rebase cases , return null;",
      "revId": "54f747055cc75125fd40bffed1fff0fda025c679",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a90a898_cf709d63",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-05-13T08:52:18Z",
      "side": 1,
      "message": "Implement it in functional way?\n\n return Iterables.transform(Sets.union(loadA(...), loadB(...)),\n    new Function() {...});",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 192,
        "endChar": 17
      },
      "revId": "54f747055cc75125fd40bffed1fff0fda025c679",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a90a898_af6f597a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2014-05-13T09:05:20Z",
      "side": 1,
      "message": "Hmm, Sets.union(...) is not working since PatchList.getPatches() returns a list...",
      "parentUuid": "2a90a898_cf709d63",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 192,
        "endChar": 17
      },
      "revId": "54f747055cc75125fd40bffed1fff0fda025c679",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8b1c70_90af146c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListLoader.java",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2014-05-13T09:13:11Z",
      "side": 1,
      "message": "I believe this would work:\n\n  return ImmutableSet.copyOf(Collections2.transform(Sets.union(\n        FluentIterable.from(\n            load(new PatchListKey(key.projectKey, null, key.getOldId(), key\n                .getWhitespace())).getPatches()).toSet(),\n        FluentIterable.from(\n            load(new PatchListKey(key.projectKey, null, key.getNewId(), key\n                .getWhitespace())).getPatches()).toSet()),\n        new Function\u003cPatchListEntry, String\u003e() {\n\n          @Override\n          public String apply(PatchListEntry e) {\n            return e.getNewName();\n          }\n        }));\n\nIs it really easier to read than the current code?",
      "parentUuid": "2a90a898_af6f597a",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 192,
        "endChar": 17
      },
      "revId": "54f747055cc75125fd40bffed1fff0fda025c679",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}