{
  "comments": [
    {
      "key": {
        "uuid": "582f23cf_94e5cb68",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-15T06:57:13Z",
      "side": 1,
      "message": "I understand the problem, but I would like to avoid to propagate MySQL restrictions to gerrit core and \"fix\" because of this MySQL restriction the account_patch_reviews handling for sane database dialects that support longer key sizes than 767 chars.\n\nThis change unnecessary complicates the code, migration/upgrade procedure increase storage (for huge gerrit installation sites we are seeing many millions of rows in this table) and even runtime, as SHA1 column is introduced and must be maintained. All this also for sane database dialects, that support longer key sizes.\n\nHave we considered other alternatives:\n\n* 1. For the reason you described in this commit message, we declare, that MySQL database is currently not supported for account_patch_reviews table. The gerrit users that rely on NySQL dialect for ReviewDb have two options: stay on H2, or use PostgreSQL or other databases, that were not tested but probably just work out of the box: Sap DB, Oracle, DB2, Derby.\n* 2. Extract the handling of account_patch_reviews to a plugin. Add a gerrit core plugin with standard implementation (basically like it is today for PostgreSQL) and implement custom plugins for other database dialects like MySQL. This should be trivial thing to do with the current code base already, because the main code path was already extracted to an interface, as Google already replaced the implementation from H2 to Megastore (NoSQL distributed database based on Big Table technology).\n* 3. If it is too much work for you atm and you don\u0027t have the time/resources for 1 and 2, apply the solution in this change to your gerrit fork and do the solution in 2 later.",
      "range": {
        "startLine": 7,
        "startChar": 30,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54cd932e_a40fadde",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-02-15T07:03:01Z",
      "side": 1,
      "message": "I think having a plugin that implements this interface is already supported, see commit message of https://gerrit-review.googlesource.com/c/gerrit/+/78816",
      "parentUuid": "582f23cf_94e5cb68",
      "range": {
        "startLine": 7,
        "startChar": 30,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d34ebd2_5427dd33",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-15T08:54:30Z",
      "side": 1,
      "message": "The alternative number 4:\n\n* The trivial one and not invasive, and is actually what you have done in the patch set 1 of this change: partially revert I83ab98acb15 and restore the table size to be 256 (you could probably even increase it to 512 or even higher, as the other columns sizes in that table would allow this to not reach 767 limit), but do it only on MySQL database dialect.\n\nGerrit was in the wild for 9 years, before file_name column size in account_patch_reviews table was increased from 256 to 4096, and only for some reasons that change owner described that were needed by Linux based projects? Windows OS only supports file_name size limit of 256 chars. So I guess, reduce it again to 256/512 on MySQL, document it, and nobody would ever notice any difference and would have any problems with it. An in unprobable case, that someone do have a problem with 256/512 on MySQL, there are always an alternative to use PostgreSQL, other dialects, of write a plugin: mysql_account_patch_reviews, that do more complex things.",
      "parentUuid": "582f23cf_94e5cb68",
      "range": {
        "startLine": 7,
        "startChar": 30,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9d95f9d_d228bd27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-02-15T09:23:31Z",
      "side": 1,
      "message": "Haha... I was just about to write exactly the same. For mysql, we just use the max possible\ncolumn length, which should be more than 500 characters (considering the max key length of 767) bytes.",
      "parentUuid": "9d34ebd2_5427dd33",
      "range": {
        "startLine": 7,
        "startChar": 30,
        "endLine": 7,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "859e57f4_c57e7470",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2017-12-18T09:15:40Z",
      "side": 1,
      "message": "this seems to depend on which version of mysql you are using, see https://dev.mysql.com/doc/refman/5.7/en/innodb-restrictions.html",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55696b86_9ecc03e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-01-09T13:25:39Z",
      "side": 1,
      "message": "Even with the limit of 3072 bytes it wouldn\u0027t work as the file_name column is of type varchar(4096) as it must support max path length on Linux.",
      "parentUuid": "859e57f4_c57e7470",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bc8fcea_606a723d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2018-01-15T08:00:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "55696b86_9ecc03e3",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da69d1eb_e6522b90",
        "filename": "Documentation/pgm-UpdateAccountPatchReviewDb.txt",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2017-12-18T09:15:40Z",
      "side": 1,
      "message": "upgraded",
      "range": {
        "startLine": 19,
        "startChar": 13,
        "endLine": 19,
        "endChar": 22
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c3de4cf_64db9861",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2018-02-15T06:57:13Z",
      "side": 1,
      "message": "I see, that the check whether or not this update was already run is implemented. As mid/long term solution we may want to track the schema version, we used for ReviewDb. So that by future schema upgrades we wouldn\u0027t need to do investigation as what schema version we are currently running on.\n\nOf course we could use already this precedent and add schema_version table with version number 1 in this change.",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ca44884_f73fd5f0",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-02-15T09:23:31Z",
      "side": 1,
      "message": "I believe we didn\u0027t expect to have schema versions/upgrades of the account_patch_reviews database. We also decided against using gwtorm for the account_patch_reviews (which\nwould provide schema versioning upgrade) because we wanted to eventually get rid of\nthe gwtorm completely (when ReviewDb is gone).\n\nTherefore, this change is more like a one time fix after which no further schema changes are expected.",
      "parentUuid": "4c3de4cf_64db9861",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed994323_1c46a03d",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2017-12-18T09:15:40Z",
      "side": 1,
      "message": "why don\u0027t we store SHA1 as BINARY(20) which would need only half of the space ?",
      "range": {
        "startLine": 47,
        "startChar": 81,
        "endLine": 47,
        "endChar": 92
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e7b7236_68e35590",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-01-09T13:25:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ed994323_1c46a03d",
      "range": {
        "startLine": 47,
        "startChar": 81,
        "endLine": 47,
        "endChar": 92
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f69b65cd_7007df72",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-01-15T13:18:52Z",
      "side": 1,
      "message": "A more detailed examination of supported data types for the databases we support I found out that BINARY string is not supported the same way in all of them. For example:\n* mysql does have exactly such a data type [1]\n* postgres does not provide a data type named BINARY but a datatype called \"bytea\", see [2]\n\nThis alone is already a good reason to keep the VARCHAR(40) here.\nRemember: for the database where the account_patch_reviews are stored we do not use\nthe gwtorm as a mapping layer, but the pure JDBC API. This was done so that, once\nthe notedb is ready, the dependency to gwtorm can be removed.\n\nThis also means that we should stick to the most basic data types here and avoid\nsupporting less commonly supported data types.\n\nMy proposal is to keep this code as-is. \n\n[1] https://dev.mysql.com/doc/refman/5.7/en/binary-varbinary.html\n[2] https://www.postgresql.org/docs/9.5/static/datatype-binary.html",
      "parentUuid": "7e7b7236_68e35590",
      "range": {
        "startLine": 47,
        "startChar": 81,
        "endLine": 47,
        "endChar": 92
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5f820e4_6f619138",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2017-12-18T09:15:40Z",
      "side": 1,
      "message": "the sha1 column was just added, doesn\u0027t that mean its column index would be 5 ?\nLooking at https://gerrit-review.googlesource.com/c/gerrit/+/142192/6/gerrit-server/src/main/java/com/google/gerrit/server/schema/JdbcAccountPatchReviewStore.java\nit looks like the sha1 column index is 4 ? Also see the markReviewed() method there.",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b71c8eaa_20172bc3",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-01-09T13:25:39Z",
      "side": 1,
      "message": "The index is defined by the position of this column in the update statement (lines 64 - 69).",
      "parentUuid": "f5f820e4_6f619138",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "679e4736_9ccd590a",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/UpdateAccountPatchReviewDb.java",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2018-01-09T14:18:53Z",
      "side": 1,
      "message": "my fault, thanks",
      "parentUuid": "b71c8eaa_20172bc3",
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "304d3b6c_4f074957",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/schema/JdbcAccountPatchReviewStore.java",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-01-18T20:09:39Z",
      "side": 1,
      "message": "I thought that the limitation of 767 character was only on column used in a primary key so we would keep file_name a VARCHAR(4096).\n\nInserting a review flag for a file path longer than 256 will fail otherwise. With maven folder structure and nested java packages, it not that unlikely to have a file path longer that 256 characters.",
      "range": {
        "startLine": 195,
        "startChar": 33,
        "endLine": 195,
        "endChar": 36
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "972da9dc_9a86764a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/schema/JdbcAccountPatchReviewStore.java",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-02-14T11:03:06Z",
      "side": 1,
      "message": "This is obviously a mistake, actually a left over from the first patch-set. When file_name_sha1 column was introduced, I should have reverted file_name column length back to 4096. \n\nWill provide a new PS",
      "parentUuid": "304d3b6c_4f074957",
      "range": {
        "startLine": 195,
        "startChar": 33,
        "endLine": 195,
        "endChar": 36
      },
      "revId": "551f44f56f51c548cfebebf27e3443abdcda1f30",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}