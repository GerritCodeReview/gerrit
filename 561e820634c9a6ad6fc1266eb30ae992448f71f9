{
  "comments": [
    {
      "key": {
        "uuid": "9f237a46_c56033bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-01-13T16:30:34Z",
      "side": 1,
      "message": "That was not the intent. The intent was to 1) remove round-trips for automation users that want to get all results of a query, and 2) avoid results changing during round-trip queries (this was a problem pre-index with sort_key, but I\u0027m not sure how applicable it is now).",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "207c1487_926f3f81",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2020-01-13T19:30:52Z",
      "side": 1,
      "message": "It sounds like these automation users are privileged, or in other words that this was not meant for use by ordinary users.\n\nWould it make sense to guard usage with a capability check?\n\n(I suspect the underlying need is for a pub/sub system / event broker.)",
      "parentUuid": "9f237a46_c56033bd",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3983c981_a89c8a3f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-13T20:00:36Z",
      "side": 1,
      "message": "Not really, the intent is to allow anyone to get everything without DOSing the server. The alternative is for that user to call \u0027query\u0027 repeatedly with a new starting point each time until they have gotten all the changes. If a user writes a script to do that, and they will if you don\u0027t give them a way to get things, then they will end up putting a much larger load on the server than if they used this feature. Not only will they now have put more load on the server, but their results will be potentially racily incorrect since the query results can change between each call.",
      "parentUuid": "207c1487_926f3f81",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3759c92_d1055c1b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2020-01-13T20:06:10Z",
      "side": 1,
      "message": "I see. I think what you\u0027re looking for is an ability to have \"continuation tokens\" in paginated results (so that the client can ask for the next page instead of specifying a number of results to skip).",
      "parentUuid": "3983c981_a89c8a3f",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d48133f_c4a304d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-13T20:18:58Z",
      "side": 1,
      "message": "I believe Gerrit already has continuation tokens, they just don\u0027t guarantee consistency, isn\u0027t that how pagination works today?\n\nI don\u0027t think that adding a limit actually prevents the DOS that you are trying to prevent. Picture a user \"paginating\" over the results with back to back queries, when the user executes the last query in the set, it may do as much processing wise as if they had just run the query without a limit because the processor may (it does in our version, not sure about the current version) still hav e to process all the changes before the pagination token. The only load difference is likely the reduced set of results that need to be streamed.",
      "parentUuid": "c3759c92_d1055c1b",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa050ba_4c114047",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2020-01-13T21:26:46Z",
      "side": 1,
      "message": "\u003e the processor may still have to process all the changes before the pagination token\n\nA true continuation token prevents that. E.g. see https://lucene.apache.org/solr/guide/6_6/pagination-of-results.html#cursor-examples",
      "parentUuid": "6d48133f_c4a304d7",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "438ff382_b4f0eca8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-14T12:46:56Z",
      "side": 1,
      "message": "\u003e Not really, the intent is to allow anyone to get everything without DOSing the server.\n\nFine, if this is what you want, this is still working with this change if you grant the highest possible query limit for Anonymous Users via the Query Limit global capability [1], right?\nHowever if an admin sets a limit, that should be respected, otherwise why would we have this global capability if it\u0027s ignored?\n\n\n[1] https://gerrit-review.googlesource.com/Documentation/access-control.html#capability_queryLimit",
      "parentUuid": "6aa050ba_4c114047",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6c28d49_b34ee76f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-14T17:02:46Z",
      "side": 1,
      "message": "\u003e\u003e the processor may still have to process all the changes before the pagination token\n\u003e A true continuation token prevents that. \n\nThat may be true, but if Gerrit tokens don\u0027t work that way, then Gerrit sites are still succeptible to this DOS attack vector even without the switch.",
      "parentUuid": "438ff382_b4f0eca8",
      "range": {
        "startLine": 9,
        "startChar": 55,
        "endLine": 10,
        "endChar": 34
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f88a4e95_15bd2408",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-01-13T16:30:34Z",
      "side": 1,
      "message": "Also agreed. We didn\u0027t want to just set the limit for some users higher though as that changes the default number of results returned. We wanted an explicit \"yes, give me as many results as you can\" flag.",
      "range": {
        "startLine": 12,
        "startChar": 22,
        "endLine": 14,
        "endChar": 25
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0bf93e9_5cec52c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-13T17:01:19Z",
      "side": 1,
      "message": "\"this option makes configuring limits by permissions useless and opens the door for DoS attacks\"\n\nDo you find this to be a problem in practice? If so, are they anonymous users? \n\nIf this is an actual problem in the real world, and you prevent the ability to override this limit with a switch, it seems there would be nothing to prevent such a \"smart\" user from simply calling the query many times in a row instead which is actually worse on the system then calling it once with a larger number.",
      "parentUuid": "f88a4e95_15bd2408",
      "range": {
        "startLine": 12,
        "startChar": 22,
        "endLine": 14,
        "endChar": 25
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c18b3933_3f26702a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2020-01-13T19:30:52Z",
      "side": 1,
      "message": "\u003e If this is an actual problem in the real world, and you prevent the ability to override this limit with a switch, it seems there would be nothing to prevent such a \"smart\" user from simply calling the query many times in a row instead\n\nOur load balancer and DoS protection system are reasonably good at defending against that.\n\nA single expensive request is harder to deal with (and in fact doesn\u0027t end up succeeding at all with our index).",
      "parentUuid": "a0bf93e9_5cec52c4",
      "range": {
        "startLine": 12,
        "startChar": 22,
        "endLine": 14,
        "endChar": 25
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdfc620b_697d1c61",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-13T20:00:36Z",
      "side": 1,
      "message": "There is a proposal for a way to limit large expensive tasks here:\nhttps://gerrit-review.googlesource.com/c/plugins/quota/+/245593\n\nOf course, while that would prevent DOS attacks from bad users, it would also prevent the \"good\" user from getting the results they need.",
      "parentUuid": "c18b3933_3f26702a",
      "range": {
        "startLine": 12,
        "startChar": 22,
        "endLine": 14,
        "endChar": 25
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "263042f1_79978a2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-14T12:46:56Z",
      "side": 1,
      "message": "\u003e Do you find this to be a problem in practice? \n\nNo, fortunately we are not affected by this, since for us the --no-limit option is completely broken and always results in an internal server error. This is also bad because it affects our SLO.\nUsing this option always fails for us because we have a max limit for our index backend. If the index backend has a limit, then the code at [1] is not executed (because the limit is MAX_INTEGER and is not equal the backend supported limit). This means at [2] it\u0027s adding +1 to MAX_INTEGER, which is then MIN_INTEGER and a negative limit is rejected at [3].\n\n[1] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/index/query/QueryProcessor.java#233\n[2] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/index/query/QueryProcessor.java#246\n[3] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/index/QueryOptions.java#29\n\n\u003e Our load balancer and DoS protection system are reasonably good at defending against that.\n\u003e\n\u003e A single expensive request is harder to deal with (and in fact doesn\u0027t end up succeeding at all with our index).\n\n+1, exactly this.",
      "parentUuid": "fdfc620b_697d1c61",
      "range": {
        "startLine": 12,
        "startChar": 22,
        "endLine": 14,
        "endChar": 25
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fbc1632_d0e47936",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-01-13T16:30:34Z",
      "side": 1,
      "message": "Agreed. Any ideas on how we can get the above intent with this in mind?",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae4f33dc_0ce5b144",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-14T12:46:56Z",
      "side": 1,
      "message": "I think this change should be fine for you. All you need to do is grant the highest possible query limit for Anonymous Users via the Query Limit global capability [1], right?\n\n[1] https://gerrit-review.googlesource.com/Documentation/access-control.html#capability_queryLimit",
      "parentUuid": "7fbc1632_d0e47936",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4857e67a_66592fbd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-14T17:02:46Z",
      "side": 1,
      "message": "Unfortnately, that cause another problem. Having a default limit of around 500 is actually useful since it prevents users from doing a query and by accident returning several million changes. TThe default limit is useful for humans interacting with the query system out. Having a switch that overrides the limit provides both a good default for humans and allows both humans and scripts to override it when they know they really want everything.\n\nI think that perhaps if we had both a capability that could never be overridden, and a default that could, it would solve both cases?",
      "parentUuid": "ae4f33dc_0ce5b144",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "028371ad_048ac17f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-15T07:40:30Z",
      "side": 1,
      "message": "\u003e I think that perhaps if we had both a capability that could never be overridden,\n\u003e and a default that could, it would solve both cases?\n\nCapabilities are permissions and in my opinion no options should be allowed to bypass them. That is pretty unexpected. I would prefer if you implement the overridable default as something else. However to be honest this whole feature looks very intuitive to me (there is limit on server level, there may be a limit specified on the request, there may be a limit in the query, and then we ignore all those limits by setting an option). Can we submit this change and you follow-up with implementing the overridable default?",
      "parentUuid": "4857e67a_66592fbd",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae6b77a7_7aa4c836",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-15T16:56:53Z",
      "side": 1,
      "message": "How do you propose addressing the potential remaining DOS (a user requesting the last pagination token over and over)?",
      "parentUuid": "028371ad_048ac17f",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6a3b07c_33aeffd6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-16T08:01:45Z",
      "side": 1,
      "message": "There should be a quota for the number of requests that a user can do in a period of time (e.g. max queries per seconds). At Google we already have a custom solution for this. For upstream this is handled by the quota plugin (I think it\u0027s the RestApiRateLimiter [1] that does this, but maybe the quota plugin also needs to be extended).\n\n[1] https://gerrit.googlesource.com/plugins/quota/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/quota/RestApiRateLimiter.java",
      "parentUuid": "ae6b77a7_7aa4c836",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ed8d77f_5963a012",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1010013
      },
      "writtenOn": "2020-01-16T17:19:41Z",
      "side": 1,
      "message": "What I am saying is that given the last token, the user can likely make one single query that causes just as much work on the server as if they had done an unlimited query. A quota on how many queries the user makes will not prevent this. In other words, I don\u0027t believe the capability limit prevents the DOS it is intended to prevent.",
      "parentUuid": "a6a3b07c_33aeffd6",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a2c8cdb_f131503b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-01-17T08:08:55Z",
      "side": 1,
      "message": "OK, there might be an issue, but I don\u0027t see why this should prevent this bug-fix. I\u0027ve updated the reasoning in the commit message, so that it\u0027s not talking about DoS anymore.",
      "parentUuid": "2ed8d77f_5963a012",
      "range": {
        "startLine": 14,
        "startChar": 26,
        "endLine": 16,
        "endChar": 52
      },
      "revId": "561e820634c9a6ad6fc1266eb30ae992448f71f9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}