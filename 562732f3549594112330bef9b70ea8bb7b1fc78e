{
  "comments": [
    {
      "key": {
        "uuid": "78f322c7_0e8d8d0c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-05-21T07:43:26Z",
      "side": 1,
      "message": "Is the intention that the LFS plugin will also enforce the same /repository:size quota group?  Or do we intend to use a separate quota for that?",
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ac0cbe9_75e07f0f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2019-05-21T07:57:47Z",
      "side": 1,
      "message": "My intention is to use /lfs:size quota group and let plugin decide what to do with it - obviously it will follow the plugin configuration and either just ignore it or treat individually or handle together with /repository:size group as unified quota so that both requirements to treat LFS size quota independently or unified with overall size quota could be addressed.",
      "parentUuid": "78f322c7_0e8d8d0c",
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7c6b542_b1e44428",
        "filename": "java/com/google/gerrit/acceptance/InProcessProtocol.java",
        "patchSetId": 2
      },
      "lineNbr": 347,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-06-11T13:24:15Z",
      "side": 1,
      "message": "nit: this can be a lambda",
      "range": {
        "startLine": 346,
        "startChar": 17,
        "endLine": 347,
        "endChar": 29
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67110599_123e9963",
        "filename": "java/com/google/gerrit/server/git/receive/LazyPostReceiveHookChain.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-06-11T13:24:15Z",
      "side": 1,
      "message": "Will you actually deduct any quota or is this just implemented as a check and the next check will again measure the size on disk?",
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85a9d4e9_8babb5d3",
        "filename": "javatests/com/google/gerrit/acceptance/server/quota/RepositorySizeQuotaIT.java",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2019-05-20T14:56:53Z",
      "side": 1,
      "message": "have to admit that I have failed to write integration tests that were verifying if one cannot request tokens when they got exhausted mainly to the fact that requestTokens get swallowed by InProcessProtocol. To my defence though it doesn\u0027t matter as long as it gets called and quota gets deducted due to the fact that availableTokens will eventually fail and works nicely and is proven in the case below.",
      "range": {
        "startLine": 77,
        "startChar": 1,
        "endLine": 90,
        "endChar": 3
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ea841c0_f95af2cd",
        "filename": "javatests/com/google/gerrit/acceptance/server/quota/RepositorySizeQuotaIT.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-05-21T07:43:26Z",
      "side": 1,
      "message": "Can we use assertThrows here?\n\n(or was that only introduced on master?)",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 109,
        "endChar": 5
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56e98d6c_58a41343",
        "filename": "javatests/com/google/gerrit/acceptance/server/quota/RepositorySizeQuotaIT.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-05-21T07:47:32Z",
      "side": 1,
      "message": "It\u0027s only on master (see [1]) unless we\u0027re OK with backporting it.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/223155",
      "parentUuid": "6ea841c0_f95af2cd",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 109,
        "endChar": 5
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad15484_0960e995",
        "filename": "javatests/com/google/gerrit/acceptance/server/quota/RepositorySizeQuotaIT.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2019-05-21T07:57:47Z",
      "side": 1,
      "message": "Would that mean that we have to also migrate all existing cases to use assertThrows?",
      "parentUuid": "56e98d6c_58a41343",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 109,
        "endChar": 5
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f8fdd1d_cfec0d93",
        "filename": "javatests/com/google/gerrit/acceptance/server/quota/RepositorySizeQuotaIT.java",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-05-21T08:29:06Z",
      "side": 1,
      "message": "I don\u0027t want to go down the rabbit hole of backporting the entire series of refactoring that followed the introduction of assertThrows, but I think it\u0027s worth at least having it on stable-3.0 so we don\u0027t need to rewrite any new tests that get introduced on stable-3.0 when they are merged to master.\n\nThat said, in this case the test should still work on master.  Only tests that use ExpectedException are likely to break.",
      "parentUuid": "8ad15484_0960e995",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 109,
        "endChar": 5
      },
      "revId": "562732f3549594112330bef9b70ea8bb7b1fc78e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}