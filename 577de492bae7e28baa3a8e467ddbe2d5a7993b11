{
  "comments": [
    {
      "key": {
        "uuid": "61e8de9e_ebf0382d",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 5
      },
      "lineNbr": 710,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-04-15T07:21:21Z",
      "side": 1,
      "message": "Can you help me understand how this works now if lazyLoad \u003d\u003d false?\n\nIf the change was loaded from the index, the ChangeData (cd) doesn\u0027t contain change notes (cd.notes \u003d\u003d null) and if lazyLoad \u003d\u003d false, then also lazyLoad in the ChangeData is false (cd.lazyLoad \u003d\u003d false).\n\nNow if we call\n\n  permissionBackend.user(userProvider.get()).change(cd)\n\nit executes the code in PermissionBackend.WithUser#change(ChangeData):\n\n  public abstract static class WithUser {\n    ...\n\n    public ForChange change(ChangeData cd) {\n      try {\n        return ref(cd.change().getDest()).change(cd);\n      } catch (StorageException e) {\n        return FailedPermissionBackend.change(\"unavailable\", e);\n      }\n    }\n  ...\n\nThis means RefControl#change(ChangeData) is invoked:\n\n  class RefControl {\n    ...\n    @Override\n    public ForChange change(ChangeData cd) {\n      try {\n        return getProjectControl().controlFor(cd.notes()).asForChange(cd);\n      } catch (StorageException e) {\n        return FailedPermissionBackend.change(\"unavailable\", e);\n      }\n    }\n  ...\n\nThe cd.notes() call would now throw a StorageException (since cd.notes \u003d\u003d null and cd.lazyLoad \u003d false):\n\n  public class ChangeData {\n    ...\n    public ChangeNotes notes() {\n      if (notes \u003d\u003d null) {\n        if (!lazyLoad) {\n          throw new StorageException(\"ChangeNotes not available, lazyLoad \u003d false\");\n        }\n        notes \u003d notesFactory.create(project(), legacyId);\n      }\n      return notes;\n    }\n  ...\n\n\nIf I read the old code correctly, we didn\u0027t get this StorageException in this case, since we created a ChangeNotes instance via notesFactory.createFromIndexedChange(cd.change()) here in this class (cd.notes !\u003d null).\n\nSo I wonder how this is working now.",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e640cb67_d50c569f",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 5
      },
      "lineNbr": 710,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-04-17T08:40:44Z",
      "side": 1,
      "message": "Thanks for taking such a detail look, that is much appreciated!\n\nDid you look at old code in RefControl? The code snippet you mention looks different now. I left a comment at the modification in this change.\n\nI removed another method in PS2 while at it :-)",
      "parentUuid": "61e8de9e_ebf0382d",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59d7f9ae_752dd06c",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 5
      },
      "lineNbr": 710,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-04-17T09:21:51Z",
      "side": 1,
      "message": "Ah, I missed that. Thanks for pointing this out. I indeed look at the old version of this method.\n\nThis means RefControl#change(ChangeData) looks like this:\n\n  class RefControl {\n    ...\n    @Override\n    public ForChange change(ChangeData cd) {\n      try {\n        return getProjectControl().controlFor(cd.change()).asForChange(cd);\n      } catch (StorageException e) {\n        return FailedPermissionBackend.change(\"unavailable\", e);\n      }\n    }\n    ...  \n\nThen we get to ProjectControl#controlFor(Change):\n\n  class ProjectControl {\n    ...\n    ChangeControl controlFor(Change change) {\n      return changeControlFactory.create(controlForRef(change.getDest()), change);\n    }\n  ...\n\nwhich calls ChangeControl.Factory#create(RefControl, Change):\n\n  class ChangeControl {\n    @Singleton\n    static class Factory {\n      private final ChangeData.Factory changeDataFactory;\n\n      @Inject\n      Factory(ChangeData.Factory changeDataFactory) {\n        this.changeDataFactory \u003d changeDataFactory;\n      }\n\n      ChangeControl create(RefControl refControl, Change change) {\n        return new ChangeControl(changeDataFactory, refControl, change);\n      }\n    }\n\nAs you can see we pass in a changeDataFactory here. The changeDataFactory is used to create a ChangeData internally when needed. The problem is that this ChangeData instance will be created with lazyLoad \u003d true, which shouldn\u0027t happen if the change was loaded from the index and lazyLoad in ChangeJson was false. What we do here is basically a conversion from ChangeData(lazyLoad\u003dfalse) -\u003e Change -\u003e ChangeData(lazyLoad\u003dtrue). That seems wrong, we should rather pass the original ChangeData instance through the layers. I would expect that this would still work, as the functionality in ChangeControl should not trigger any loading in ChangeData, when the change was loaded from the index (e.g. because the reviewers field in ChangeData is already populated in this case).",
      "parentUuid": "e640cb67_d50c569f",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "272c0b50_2d8d6aad",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 5
      },
      "lineNbr": 710,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-04-24T14:06:10Z",
      "side": 1,
      "message": "Thank you again for the detailed review, I appreciate it.\n\nSigh, you are right. This machinery - lazyload and two different data containers - is thorny :-/\n\nI removed the factory from ChangeControl and have ChangeControl only deal with a ChangeData. We now only generate ChangeData from ChangeNotes which seems OK because in that case DB access is allowed and the creation is low overhead. Otherwise we just use ChangeData as provided.\n\nThere are still two things that I think need fixing:\n1) We need to assert inside of ChangeControl that REVIEWERS was originally requested OR make it so that it\u0027s always requested. Otherwise there is a change of false negatives (we hide a change from a reviewer even though they can see it).\nSince this information is required for visibility filtering, it seems the best option to be to just always request it instead of safeguarding on the presence of the fields. The info is cheap to obtain IMO.\n\n2) Tests. The fact that the issue you brought up wasn\u0027t caught by tests is alarming.\nWe could add tests on PermissionBackend directly. We pass in ChangeData and ChangeNotes and assert behavior.\n\nIf you have ideas to increase coverage, I am all ears :-)",
      "parentUuid": "59d7f9ae_752dd06c",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6610db0_5409d380",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 5
      },
      "lineNbr": 710,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-04-27T11:48:08Z",
      "side": 1,
      "message": "\u003e I removed the factory from ChangeControl and have ChangeControl only deal with a ChangeData. We now only generate ChangeData from ChangeNotes which seems OK because in that case DB access is allowed and the creation is low overhead. Otherwise we just use ChangeData as provided.\n\nThanks, LGTM.\n\n\u003e There are still two things that I think need fixing:\n\u003e 1) We need to assert inside of ChangeControl that REVIEWERS was originally requested OR make it so that it\u0027s always requested. Otherwise there is a change of false negatives (we hide a change from a reviewer even though they can see it).\n\u003e Since this information is required for visibility filtering, it seems the best option to be to just always request it instead of safeguarding on the presence of the fields. The info is cheap to obtain IMO.\n\nYeah, I think the reviewers field should always be requested (I actually assumed it\u0027s getting populated when we load changes from the index). Maybe within ChangeData#reviewers() we should also fail if reviewers were not loaded and somebody requests them, but lazyLoad is false (similar to what ChangeData#notes() is doing)? Maybe this should still be done within this change?\n\n\u003e 2) Tests. The fact that the issue you brought up wasn\u0027t caught by tests is alarming.\n\u003e We could add tests on PermissionBackend directly. We pass in ChangeData and ChangeNotes and assert behavior.\n\u003e \n\u003e If you have ideas to increase coverage, I am all ears :-)\n\nSorry, I have no better idea :/",
      "parentUuid": "272c0b50_2d8d6aad",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 23
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed8ede0_21d94f29",
        "filename": "java/com/google/gerrit/server/permissions/ChangeControl.java",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-04-15T07:21:21Z",
      "side": 1,
      "message": "Why not change.getProject()?\n\nAnd then why it just changeDataFactory.create(change)?",
      "range": {
        "startLine": 225,
        "startChar": 16,
        "endLine": 225,
        "endChar": 71
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb86c0b1_b96c696b",
        "filename": "java/com/google/gerrit/server/permissions/ChangeControl.java",
        "patchSetId": 5
      },
      "lineNbr": 225,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-04-17T08:40:44Z",
      "side": 1,
      "message": "good idea. done.",
      "parentUuid": "9ed8ede0_21d94f29",
      "range": {
        "startLine": 225,
        "startChar": 16,
        "endLine": 225,
        "endChar": 71
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe489257_924987b7",
        "filename": "java/com/google/gerrit/server/permissions/RefControl.java",
        "patchSetId": 5
      },
      "lineNbr": 443,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-04-17T08:40:44Z",
      "side": 1,
      "message": "Here. Please see my other comment.",
      "range": {
        "startLine": 443,
        "startChar": 15,
        "endLine": 443,
        "endChar": 57
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4db54337_aa53c8db",
        "filename": "java/com/google/gerrit/server/permissions/RefControl.java",
        "patchSetId": 5
      },
      "lineNbr": 443,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2020-04-17T09:21:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fe489257_924987b7",
      "range": {
        "startLine": 443,
        "startChar": 15,
        "endLine": 443,
        "endChar": 57
      },
      "revId": "577de492bae7e28baa3a8e467ddbe2d5a7993b11",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}