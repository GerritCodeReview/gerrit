{
  "comments": [
    {
      "key": {
        "uuid": "32e6746f_0b179bc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-03T14:44:05Z",
      "side": 1,
      "message": "My gut feeling says that this doesn\u0027t always work, especially when merge commits can introduce parent commits without changes for them.\n\nConsider the following two examples and let\u0027s assume that all changes are targeted to master:\n\n      (change 1) o  o (change 2; changes a.txt)\n                 | \\|\n (changes a.txt) o  o (changes b.txt)\n                 | /\n        master \u003e o\n\n (change 2; changes a.txt) o  o (change 1)\n                           | /|\n           (changes b.txt) o  o (changes a.txt)\n                           | /\n                  master \u003e o\n\nIn both cases, change 2 is potentially in conflict with change 1 because of a.txt. Would the diff against the first parent really work for both cases?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 65
      },
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccc95dc8_5d04bb39",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-08-03T16:22:51Z",
      "side": 1,
      "message": "First parent is kind of special in git because of things like `git log --first-parent`. The correct way to do merges is to have a commit that belongs to master be your first parent and `git merge side-branch` to bring in that 2nd parent that introduces more changes. So your 1st diagram is correct, your 2nd diagram is a misuse that we don\u0027t have to support.\n\nYour 1st diagram is incomplete. \"(changes a.txt)\" node should either be part of master and thus master is drawn wrong, or should itself have a change. Lets assume you meant for this to be an open change and call it \"change 3\".\n\nThe conflicts operator will show change 2 and change 3 are in conflict with each other, which is correct. But change 1 the merge won\u0027t be in conflict with change 3 because from the perspective of change 1 its not modifying a.txt, its ancestor is, and so its not itself in conflict with change 3. This is no different than if change 1 was a non-merge and you asked for conflicts. The conflicts operator doesn\u0027t report descendant open changes as conflicts.\n\nIn your 2nd diagram we would report change 1 as conflicts with change 2, because the diff against 1st parent here shows the merge change 1 is going to modify a.txt. I think this is what the users expected when they reported issue 3052.",
      "parentUuid": "32e6746f_0b179bc5",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 65
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e8c5503_8cf293fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-03T14:44:05Z",
      "side": 1,
      "message": "Can we be absolutely sure that the first parent is the one which is part of the target branch?",
      "range": {
        "startLine": 22,
        "startChar": 45,
        "endLine": 23,
        "endChar": 5
      },
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba7aa95d_3967d362",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-08-03T16:22:51Z",
      "side": 1,
      "message": "No, but its the correct default assumption if people are using the tools correctly.",
      "parentUuid": "3e8c5503_8cf293fd",
      "range": {
        "startLine": 22,
        "startChar": 45,
        "endLine": 23,
        "endChar": 5
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e95aacdb_31bfd246",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PostReview.java",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-03T14:44:05Z",
      "side": 1,
      "message": "Most other code paths for REST endpoints catch the PatchListNotAvailableException and map it to another exception. Do we really want to let it through?",
      "range": {
        "startLine": 209,
        "startChar": 62,
        "endLine": 209,
        "endChar": 92
      },
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef3fbd60_97ace5a9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PostReview.java",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-08-03T16:22:51Z",
      "side": 1,
      "message": "By \"let it through\" this is going to go up to RestApiServlet where it gets logged and reported to the client as HTTP 500. Wrapping it with say IOException or OrmException will have the same effect, except its log stack trace will be slightly longer with the IOException or OrmException wrapping.\n\nI specifically designed the REST API implementation stack to allow handlers throw throw *anything* so that unexpected exception handling was easier. Unless its one of the handful of REST API recognized exceptions that produces specific HTTP status codes, everything else is logged and reported as HTTP 500.\n\nSo yes, I do want to \"let it through\".",
      "parentUuid": "e95aacdb_31bfd246",
      "range": {
        "startLine": 209,
        "startChar": 62,
        "endLine": 209,
        "endChar": 92
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e1abcd6_611b648f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PostReview.java",
        "patchSetId": 2
      },
      "lineNbr": 577,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-03T14:44:05Z",
      "side": 1,
      "message": "Did we ever deliberately decide on which files of a merge commit comments may be placed?",
      "range": {
        "startLine": 573,
        "startChar": 4,
        "endLine": 577,
        "endChar": 79
      },
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24737374_893d31bf",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PostReview.java",
        "patchSetId": 2
      },
      "lineNbr": 577,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-08-03T16:22:51Z",
      "side": 1,
      "message": "Not really.\n\nThere is a unit test for PostReview that assumes it can put comments on a merge, and given how the merge is constructed in the test the path its trying to comment on is visible with againstDefaultBase(), but not againstParentNum(1).\n\nThere is long standing tradition due to merges using the automerge as the default base that you can only comment on files that were in conflict in a merge. Changing that (if that is desirable) is outside of the scope of this particular change.",
      "parentUuid": "9e1abcd6_611b648f",
      "range": {
        "startLine": 573,
        "startChar": 4,
        "endLine": 577,
        "endChar": 79
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36ccd68c_ed33e50b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-08-03T14:44:05Z",
      "side": 1,
      "message": "For non-merge commits, this key should result in the same computation as PatchListKey#againstDefaultBase. However, as it counts as a different key and we don\u0027t use #againstParentNum for non-merge commits anywhere else, this effectively represents a cache invalidation.\n\nIf possible, we should stay with #againsDefaultBase for non-merge commits.",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 90
      },
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52cdf3f2_08f2de8b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListCacheImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-08-03T16:22:51Z",
      "side": 1,
      "message": "Ok, rewritten so that we only use againstParentNum for merge commits and againstDefaultBase for everything else.",
      "parentUuid": "36ccd68c_ed33e50b",
      "range": {
        "startLine": 172,
        "startChar": 8,
        "endLine": 172,
        "endChar": 90
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "58bba0cd291829fd52bf87b176e0759f0c8235a4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}