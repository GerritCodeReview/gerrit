{
  "comments": [
    {
      "key": {
        "uuid": "366bbbde_f76f00c4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 63,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "This is obvious from the method signatures.",
      "range": {
        "startLine": 62,
        "startChar": 3,
        "endLine": 63,
        "endChar": 49
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_49fbc1e0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 63,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "366bbbde_f76f00c4",
      "range": {
        "startLine": 62,
        "startChar": 3,
        "endLine": 63,
        "endChar": 49
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_dba0f3c0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "This class is hard to read. I think part of the problem is all the methods that get passed around some subset of {repo, revWalk, reader, inserter}, which clutters up method signatures.\n\nWhat if this weren\u0027t a singleton, and were instead created with a Repository (or just a project). Then you can immediately open one revWalk, one reader, and one inserter and store them in instance fields. Add a release() method to release them all at once and close the repo.\n\nI\u0027ll bet there are other objects that could also be moved to fields, like op and edit.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_77b2101e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:50:48Z",
      "side": 1,
      "message": "After seeing some usages of this class in the acceptance tests, I think there is value in having a simple external API for this class. So I don\u0027t think we want to replace every call to\n\n modifier.delete(foo);\n\nwith\n\n ChangeEditModifier modifier \u003d modifierFactory.create(...);\n try {\n   modifier.delete(foo);\n } finally {\n   modifier.release();\n }\n\nI\u0027m trying to think of a way to both clean up this implementation and keep this interface simple...",
      "parentUuid": "b69deb27_dba0f3c0",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_0f2aa598",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T18:59:25Z",
      "side": 1,
      "message": "Why not? In real life we have three endpoints:\n\n* Create edit from patch set\n* Modify edit\n* Delete edit\n\nwhere this would be used. Moreover, if this class would implement Closeable interface, then your use case can be simplified even further:\n\n  try (ChangeEditModifier modifier \u003d modifierFactory.create(...)) {\n    modifier.delete(foo);\n  }",
      "parentUuid": "366bbbde_77b2101e",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_cf133d78",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T19:11:14Z",
      "side": 1,
      "message": "True, I always forget about AutoCloseable, probably means I write too much JGit...",
      "parentUuid": "36e01baf_0f2aa598",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_6c257bc9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T19:15:38Z",
      "side": 1,
      "message": ";-) I opened issue in JGit issue tracker years ago to discontinue Java 1.0, ... , 1.6 support for JGit and move to 1.7 and add AutoCloseable support for all JGit classes.",
      "parentUuid": "36e01baf_cf133d78",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_bbbe47e8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "static",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_2ae19f33",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b69deb27_bbbe47e8",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_fbb4cf0d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 92,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Blank line.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_69000526",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 92,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b69deb27_fbb4cf0d",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_9bc10b67",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "When do you need to create an edit ref with no changes? Why not just create the ref on the first modification?",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_8f08d548",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T18:35:11Z",
      "side": 1,
      "message": "This is very good question. If you check for the previous revisions of this change, you can see that there were two kind of methods for edit operations: one with existing change edit and one with patch set. This has also implication to the UI/CS2 and REST endpoint: Do we want to support creation of change edit on regular patch set, e. g. Review/Edit mode in file table with\n\n* PUT /changes/\u003cid\u003e/revisions/\u003cid\u003e/files/path/content\n* DELETE /changes/\u003cid\u003e/revisions/\u003cid\u003e/files/path/\n\nWe need all this only with the very first modification. Follow-up modification for the same edit happen in change edit itself, with other REST endpoints:\n\n* PUT /changes/\u003cid\u003e/edits/0/files/path/content\n* DELETE /changes/\u003cid\u003e/edits/0/files/path/\n\nSo i decided agaist this overhead, and fropped all methods that allow to create edits from patch set and only added this one method createEdit(change patchSet) and only one REST endpoint for now:\n\n  POST /changes/\u003cid\u003e/revisions/\u003cid\u003e/create_edit\n\nthat creates an empty change edit. See asso discusion in this change from today morning that is related [1].\n\n [1] https://gerrit-review.googlesource.com/53344",
      "parentUuid": "b69deb27_9bc10b67",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_8f1d3584",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T19:18:43Z",
      "side": 1,
      "message": "Creating a Swiss-army-knife POST endpoint is what one does when one has given up on creating a simpler REST API. I don\u0027t think we should give up yet.\n\nIn my design email a couple of weeks ago I suggested:\n\n PUT/DELETE /changes/\u003cid\u003e/edit/path%2fto%2ffile\n\nI think we should also support:\n\n GET /changes/\u003cid\u003e/edit/path%2fto%2ffile\n\nwhere path/to/file may or may not have been edited.\n\nFrom the caller\u0027s perspective, this means when they\u0027re manipulating the /edit/ collection, they don\u0027t have to care about what the base patch set was. This is a feature.\n\nIt does mean we have to specify the base patch set _somewhere_. So I think I\u0027ve answered my own question, of why you would want to create an edit with no content.\n\nWhat if we do:\n\n GET /changes/\u003cid\u003e/edit\n\nreturns some JSON with at least the base patch set ID (possibly also a list of changed files eventually).\n\nThen one of\n\n PUT/POST /changes/\u003cid\u003e/edit\n\ncreates a new edit where one didn\u0027t exist before, pinning it to a specific patch set (or returns 409 if it did).",
      "parentUuid": "36e01baf_8f08d548",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_2c48d371",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T19:43:32Z",
      "side": 1,
      "message": "I\u0027ve lost you. I don\u0027t think, that this POST endpoint on revision resource to create an change edit is a Swiss-army-knife:\n\n  POST /changes/42/revisions/7/create_edit\n\nNote current series is up and running and it works. This endpoint above is epoed with UiAction button, click on it and change edit is created.\n\nOnce the edit for revision 7 above was created, obviously nobody needs to specify the revision number again on consequent change edit modifications. Even not on publish this edit.\n\nAll follow up calls happens on change change edit resource only:\n\n* PUT /changes/\u003cid\u003e/edits/0/files/path/content\n* DELETE /changes/\u003cid\u003e/edits/0/files/path\n\nBut then again i am ready to any compromiss as how to proceed here. If you do agree to create an edit with no content fine, if i should restore all modify-methods that accept patch set in addition to change edit, i am fine too.",
      "parentUuid": "36e01baf_8f1d3584",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_cc3cafde",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T19:44:48Z",
      "side": 1,
      "message": "Ok, I didn\u0027t read far enough in the series to see what the body of create_edit is.\n\nI still think we should not be including revision numbers in URLS at all.",
      "parentUuid": "d6cedf4a_2c48d371",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_4f766db3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T19:52:31Z",
      "side": 1,
      "message": "How that? I\u0027ve opened a regular pacth set, not an edit, say number 7 and want to create a change edit from this ps. I have to say at least once, with or without path modification, that i am going to create a change edit on patch set 7. Or are you wsuggesting, that we should just create an edit on current ps for this change? But what when exact at this time another dev upload a new ps for the same change and my POST/PUT has reached the backend after new patch set is created then i would end up (without even noticing) that my edit is based on patch set 8 and not on 7?",
      "parentUuid": "d6cedf4a_cc3cafde",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_4ad2d372",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T20:28:23Z",
      "side": 1,
      "message": "See the last part of my previous comment.\n\n PUT /changes/\u003cid\u003e/edit\n\ncreates a new, empty edit on the latest patch set of the change. There is no support for creating edits on patch sets other than the latest.\n\n GET /changes/\u003cid\u003e/edit\n\nincludes in the response enough information for the caller to know which patch set the change is based on.\n\nMost of the time the caller doesn\u0027t need to know the base patch set. They can just GET on a path within the edit collection to get the current contents of that file in the edit, even if it\u0027s unmodified.",
      "parentUuid": "36e01baf_4f766db3",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_8c36a7fa",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T20:54:01Z",
      "side": 1,
      "message": "OK, i see. But Edits is a collection and the standard way is to create something on collection is to implement:\n\n  AcceptsCreate\n\ninterface to be able to do:\n\n  PUT /changes/\u003cid\u003e/edits/0\n\nBut this still only would work to create an empty edit.",
      "parentUuid": "96baa79a_4ad2d372",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_09dce980",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T21:04:56Z",
      "side": 1,
      "message": "That conflicts with a file named \"0\".\n\nDoes the REST handler setup really not allow us to put a handler on /edit?",
      "parentUuid": "d6cedf4a_8c36a7fa",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_0c80773b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T21:19:29Z",
      "side": 1,
      "message": "| That conflicts with a file named \"0\".\n\nHmm, i think it doesn\u0027t, because you can not provide parameter on PUT creation and you *have* to povide ID of the entity you are creating, check and see what all implementations ot AcceptsCreate are doing, e. g. AccountsCollection.java:\n\n  @SuppressWarnings(\"unchecked\")\n  @Override\n  public CreateAccount create(TopLevelResource parent,   \n  IdString username) {\n    return createAccountFactory.create(username.get());\n  }\n\n\n| Does the REST handler setup really not allow us to put a handler on /edit?\n\nHow i implemented it, edits is child collection of changes,\nand edit files is child collection of edits.\n\nWith this setup the only way to modify something in one element in the collection (edit) is to have it already or to use AcceptsCreate, AcceptsPost on collection to create it fist.",
      "parentUuid": "76bff38c_09dce980",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_c9e57140",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T21:27:59Z",
      "side": 1,
      "message": "Oh, I missed that there are two separate collections, /edit and /edits. Don\u0027t do that, that\u0027s just asking for confusion (and has already caused some obviously).\n\nI\u0027m not 100% sure what the \"0\" means in your example. If it\u0027s a patch set ID, I will reiterate my previous statement that we should not have patch set IDs in URLs. There is at most one edit per change; therefore the /edit collection should live under the change collection. Yes, an edit is tied to a patch set. You can get information about which patch set an edit is tied to by inspecting the result of GET /edit.\n\nAnyway, as I\u0027ve said multiple times now, I think PUT /changes/\u003cid\u003e/edit is fine. I even said, \"So I think I\u0027ve answered my own question, of why you would want to create an edit with no content.\"",
      "parentUuid": "d6cedf4a_0c80773b",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6cedf4a_cc890f67",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T21:54:35Z",
      "side": 1,
      "message": "| Oh, I missed that there are two separate collections, /edit and /edits.\n\nWe don\u0027t. There is no such thing as /edit and has never existed. All we have is edits child collection of changes collection:\n\n  /changes/\u003cid\u003e/edits\n\n0 is id of the edit, as suggested by Shawn in this comment [1]. As i mentioned, every collection need an id to access a member of this collection even if there is only one can exist. So, the id of edit is always the same: 0. What we have so far is:\n\n* GET /changes/\u003cid\u003e/edits \u003d\u003e read edits for change: return at most one\n* DELETE /changes/\u003cid\u003e/edits/0 \u003d\u003e delete this edit\n* POST /changes/\u003cid\u003e/edits/0/publish \u003d\u003e promote this edit to new patch set\n* PUT /changes/\u003cid\u003e/edits/0/files/path/content \u003d\u003e modify content of file in edit\n* DELETE /changes/\u003cid\u003e/edits/0/files/path \u003d\u003e delete file from edit\n* GET /changes/\u003cid\u003e/edits/0/files \u003d\u003e retrieve files from edit\n* GET /changes/\u003cid\u003e/edits/0/files/path \u003d\u003e retrieve file content\n\nAlso see the Module.java at the end of the series:\n\n    child(CHANGE_KIND, \"edits\").to(ChangeEdits.class);\n    post(CHANGE_EDIT_KIND, \"publish\").to(PublishChangeEdit.class);\n    delete(CHANGE_EDIT_KIND).to(DeleteChangeEdit.class);\n    child(CHANGE_EDIT_KIND, \"files\").to(EditFiles.class);\n    put(EDIT_FILE_KIND, \"content\").to(PutContent.class);\n    delete(EDIT_FILE_KIND).to(DeleteContent.class);\n    get(EDIT_FILE_KIND, \"content\").to(GetEditFileContent.class);\n\n\n [1] https://gerrit-review.googlesource.com/#/c/56413/9/gerrit-server/src/main/java/com/google/gerrit/server/edit/RevisionEdit.java@86",
      "parentUuid": "76bff38c_c9e57140",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_0adcdb80",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T22:26:46Z",
      "side": 1,
      "message": "To have complete overview of endpoints used in this series so far, we have POST on revision resource to create an empty edit, where this method from line 101 above is actually called:\n\n  POST /changes/X/revisions/Y/create_edit\n\nWe can revisit this approach. I think we can and should move forward and answer the questions first at the point in this series where they arise.",
      "parentUuid": "d6cedf4a_cc890f67",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_09f5c9ea",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T22:31:24Z",
      "side": 1,
      "message": "Ok.\n\nHaving a patch set ID in URLs still just feels wrong. It\u0027s creating a collection where we\u0027ve decided there isn\u0027t a collection, just the one edit. We shouldn\u0027t have to create a REST API that makes the user go \"huh?\" just because we have a technical limitation around the hierarchical structure of our URLs.",
      "parentUuid": "96baa79a_0adcdb80",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_a9059d31",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Whyhy are you calling this id\u003d0 of change edit a patch set number? It is not a patch set number of patch set. It is 7 or 8. Yet it could be 7 or 8 if we wouldn\u0027t restrict the number of edits to be 1.\n\n| just because we have a technical limitation around the hierarchical structure of our URLs.\n\nI think it\u0027s the first time where we restrict a collection like resourse to cardinaltiy of max(1). So no wonder that the code base cannnot handle that in perfect way out of the box.",
      "parentUuid": "76bff38c_09f5c9ea",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_6a00f725",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T23:08:29Z",
      "side": 1,
      "message": "\u003e Whyhy are you calling this id\u003d0 of change edit a patch set number?\n\nIt\u0027s where you had a patch set ID before. Now there is only one so it\u0027s not \"really\" a patch set ID but it\u0027s where a patch set ID used to go.\n\n\u003e I think it\u0027s the first time where we restrict a collection like resourse to cardinaltiy of max(1). So no wonder that the code base cannnot handle that in perfect way out of the box.\n\nUnderstood. But unlike internal Gerrit interfaces, once we release a REST API interface we are committed to supporting it. I do not think we should commit to supporting this just because we have this internal limitation.",
      "parentUuid": "76bff38c_a9059d31",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_692565c9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2014-08-04T23:23:43Z",
      "side": 1,
      "message": "Dave Borowitz has the right idea with the URLs in his comment above at xx:18:\n\nUse\n\n \u003e PUT/POST /changes/\u003cid\u003e/edit\n\nto create the edit at a specific base revision;\n\n \u003e GET /changes/\u003cid\u003e/edit\n\nto learn about high level detail of the edit, like its current base revision.\n\n \u003e PUT/DELETE /changes/\u003cid\u003e/edit/path%2fto%2ffile\n\nto modify the edit\n\n \u003e GET /changes/\u003cid\u003e/edit/path%2fto%2ffile\n\nto read back full file contents.",
      "parentUuid": "96baa79a_6a00f725",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_d772fcb0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 114,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Move this try up immediately after opening the repo.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_cae56340",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 114,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "366bbbde_d772fcb0",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_976c84d1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 163,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Define what \"restore\" means in this context.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_eae2a735",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 163,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "366bbbde_976c84d1",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_b76988c0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 220,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Not obvious what this argument does. It looks like it\u0027s just to copy the identity? Why not just pass a PersonIdent instead?",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 24
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_8aef6b1c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 220,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "It also used for commit message.",
      "parentUuid": "366bbbde_b76988c0",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 24
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_57c4ac7a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 228,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "It\u0027s not clear why the inserter needs to be flushed here. I think the answer is, because creating the commit is the last thing that happens before the ref gets updated.\n\nBut in that case, it would be easier to understand if the sequence in modify() above was:\n\n ObjectId commitId \u003d createCommit(...);\n inserter.flush();\n return update(...);",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_c90ed156",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 228,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "This sequence is in two methods:\n\n* modify()\n* createEdit()\n\nDone",
      "parentUuid": "366bbbde_57c4ac7a",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_5badc3b8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 233,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "I\u0027m confused about this argument, which is unused. Is it supposed to be the same as oldObjectId? Except I guess in some cases prevEdit can be null and oldObjectId can be zeroId?",
      "range": {
        "startLine": 233,
        "startChar": 34,
        "endLine": 233,
        "endChar": 52
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_e90b9543",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 233,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b69deb27_5badc3b8",
      "range": {
        "startLine": 233,
        "startChar": 34,
        "endLine": 233,
        "endChar": 52
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_1ba73bdb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 307,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "You shouldn\u0027t need a new RevWalk here, this is only ever called via modify()",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bff38c_8908d948",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 307,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b69deb27_1ba73bdb",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_7bb2ff1d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 311,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Why not get it from the base in the first place and avoid this condition entirely? Restore is (I think) by definition \"restore the contents from the base\".",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_aaecaf27",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 311,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Can it be that with the old approach it made more sense?",
      "parentUuid": "b69deb27_7bb2ff1d",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_3bac77ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 319,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Explain why?\n\n cannot restore path %s: missing in base revision %s",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96baa79a_4afbb3e0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 319,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T23:03:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b69deb27_3bac77ba",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}