{
  "comments": [
    {
      "key": {
        "uuid": "366bbbde_f76f00c4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 63,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "This is obvious from the method signatures.",
      "range": {
        "startLine": 62,
        "startChar": 3,
        "endLine": 63,
        "endChar": 49
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_dba0f3c0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "This class is hard to read. I think part of the problem is all the methods that get passed around some subset of {repo, revWalk, reader, inserter}, which clutters up method signatures.\n\nWhat if this weren\u0027t a singleton, and were instead created with a Repository (or just a project). Then you can immediately open one revWalk, one reader, and one inserter and store them in instance fields. Add a release() method to release them all at once and close the repo.\n\nI\u0027ll bet there are other objects that could also be moved to fields, like op and edit.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_77b2101e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:50:48Z",
      "side": 1,
      "message": "After seeing some usages of this class in the acceptance tests, I think there is value in having a simple external API for this class. So I don\u0027t think we want to replace every call to\n\n modifier.delete(foo);\n\nwith\n\n ChangeEditModifier modifier \u003d modifierFactory.create(...);\n try {\n   modifier.delete(foo);\n } finally {\n   modifier.release();\n }\n\nI\u0027m trying to think of a way to both clean up this implementation and keep this interface simple...",
      "parentUuid": "b69deb27_dba0f3c0",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_0f2aa598",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T18:59:25Z",
      "side": 1,
      "message": "Why not? In real life we have three endpoints:\n\n* Create edit from patch set\n* Modify edit\n* Delete edit\n\nwhere this would be used. Moreover, if this class would implement Closeable interface, then your use case can be simplified even further:\n\n  try (ChangeEditModifier modifier \u003d modifierFactory.create(...)) {\n    modifier.delete(foo);\n  }",
      "parentUuid": "366bbbde_77b2101e",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_bbbe47e8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 68,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "static",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_fbb4cf0d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 92,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Blank line.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_9bc10b67",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "When do you need to create an edit ref with no changes? Why not just create the ref on the first modification?",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36e01baf_8f08d548",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-04T18:35:11Z",
      "side": 1,
      "message": "This is very good question. If you check for the previous revisions of this change, you can see that there were two kind of methods for edit operations: one with existing change edit and one with patch set. This has also implication to the UI/CS2 and REST endpoint: Do we want to support creation of change edit on regular patch set, e. g. Review/Edit mode in file table with\n\n* PUT /changes/\u003cid\u003e/revisions/\u003cid\u003e/files/path/content\n* DELETE /changes/\u003cid\u003e/revisions/\u003cid\u003e/files/path/\n\nWe need all this only with the very first modification. Follow-up modification for the same edit happen in change edit itself, with other REST endpoints:\n\n* PUT /changes/\u003cid\u003e/edits/0/files/path/content\n* DELETE /changes/\u003cid\u003e/edits/0/files/path/\n\nSo i decided agaist this overhead, and fropped all methods that allow to create edits from patch set and only added this one method createEdit(change patchSet) and only one REST endpoint for now:\n\n  POST /changes/\u003cid\u003e/revisions/\u003cid\u003e/create_edit\n\nthat creates an empty change edit. See asso discusion in this change from today morning that is related [1].\n\n [1] https://gerrit-review.googlesource.com/53344",
      "parentUuid": "b69deb27_9bc10b67",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_d772fcb0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 114,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Move this try up immediately after opening the repo.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_976c84d1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 163,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Define what \"restore\" means in this context.",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_b76988c0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 220,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Not obvious what this argument does. It looks like it\u0027s just to copy the identity? Why not just pass a PersonIdent instead?",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 220,
        "endChar": 24
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366bbbde_57c4ac7a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 228,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "It\u0027s not clear why the inserter needs to be flushed here. I think the answer is, because creating the commit is the last thing that happens before the ref gets updated.\n\nBut in that case, it would be easier to understand if the sequence in modify() above was:\n\n ObjectId commitId \u003d createCommit(...);\n inserter.flush();\n return update(...);",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_5badc3b8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 233,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "I\u0027m confused about this argument, which is unused. Is it supposed to be the same as oldObjectId? Except I guess in some cases prevEdit can be null and oldObjectId can be zeroId?",
      "range": {
        "startLine": 233,
        "startChar": 34,
        "endLine": 233,
        "endChar": 52
      },
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_1ba73bdb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 307,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "You shouldn\u0027t need a new RevWalk here, this is only ever called via modify()",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_7bb2ff1d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 311,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Why not get it from the base in the first place and avoid this condition entirely? Restore is (I think) by definition \"restore the contents from the base\".",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69deb27_3bac77ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 23
      },
      "lineNbr": 319,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-04T18:11:00Z",
      "side": 1,
      "message": "Explain why?\n\n cannot restore path %s: missing in base revision %s",
      "revId": "5cc005e9265ce7c9a5cfa2b49ffbd1f9803122d2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}