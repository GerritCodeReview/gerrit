{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "935f9ea7_f7460e44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-07-03T07:48:16Z",
      "side": 1,
      "message": "Should this be abandoned now that metrics cannot collide anymore? If they do, it is correct to throw an exception.",
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8114ab8e_e9c70888",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-07-03T10:21:57Z",
      "side": 1,
      "message": "Yes - the current behaviour is now correct for `BucketedCallback`. The work is a little different now and being done here [1].\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/378554/1",
      "parentUuid": "935f9ea7_f7460e44",
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "970719b3_b2c6beff",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "I believe this is the issue: we index the cells on the `key` whilst we should do it on `submetric(key)`.",
      "range": {
        "startLine": 106,
        "startChar": 16,
        "endLine": 106,
        "endChar": 24
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcc7f828_27a0f52d",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-06-16T09:27:34Z",
      "side": 1,
      "message": "I initially thought to do exactly this, but then I realised that because two keys can normalise to the same value, this meant that we\u0027d not be able to distinguish metrics coming from different repositories. We could address the normalisation method, but I don\u0027t think that\u0027s part of this change, and we can\u0027t _guarantee_ uniqueness of the normalisation function, only assume... so theoretically normalised values could still clash, and we still need to handle it somehow here. Maybe we do still want to blow up? Then it would be more obvious that\u0027s something\u0027s gone wrong (and I wouldn\u0027t be averse to that!) but that would mean that we couldn\u0027t collect any metrics, AIUI.",
      "parentUuid": "970719b3_b2c6beff",
      "range": {
        "startLine": 106,
        "startChar": 16,
        "endLine": 106,
        "endChar": 24
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb394697_8e8b6d90",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "I believe this is the fix in the wrong place, but please comment if you disagree.\n\nThe method is called `getOrCreate(Object key)` which means that:\n- If the metric doesn\u0027t exist \u003d\u003e create a new one\n- If the metric exists \u003d\u003e return the existing one\n\nWhy do we even throw an IllegalArgumentException then? It should not happen isn\u0027t it?\n\nWe need to understand *why* the exception is thrown when calling getOrCreate() with the same key, because that\u0027s not supposed to happen.\n\nIf the exception is thrown for a legitimate cause, then it should be propagated rather than logged.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 119,
        "endChar": 9
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba09d19_11a8054e",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-06-16T09:27:34Z",
      "side": 1,
      "message": "Yes spot on - it shouldn\u0027t. And yes, as discussed in another comment, if we `put` the normalised form we wouldn\u0027t have this problem. I don\u0027t think we can guarantee that the normalised form doesn\u0027t cause key clashes though, and if we have a key clash we\u0027d have no way of knowing unless we kept the original `key` somewhere.\n\nHow would we otherwise detect whether two different keys normalised forms clashed?",
      "parentUuid": "bb394697_8e8b6d90",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 119,
        "endChar": 9
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f760f824_ea656309",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "I believe this is the issue: the `DropWizardMetricMaker.name()` should use a unambiguous encoding of the `key`.\n\nEven when keeping the existing ambiguous algorithm, it should throw an exception when a clash happened.",
      "range": {
        "startLine": 126,
        "startChar": 11,
        "endLine": 126,
        "endChar": 65
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbc91df3_407cb926",
        "filename": "java/com/google/gerrit/metrics/dropwizard/BucketedCallback.java",
        "patchSetId": 1
      },
      "lineNbr": 126,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-06-16T09:27:34Z",
      "side": 1,
      "message": "I completely agree - it would be better if we can change it ðŸ˜Š Although AIUI we could only detect a key clash (here, at least) if we stored the raw key and not its normalised form.",
      "parentUuid": "f760f824_ea656309",
      "range": {
        "startLine": 126,
        "startChar": 11,
        "endLine": 126,
        "endChar": 65
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f81afae7_bb53bba2",
        "filename": "javatests/com/google/gerrit/metrics/dropwizard/BucketedCallbackTest.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "Missing license header.",
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16eee662_8c7d93dc",
        "filename": "javatests/com/google/gerrit/metrics/dropwizard/BucketedCallbackTest.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "We are missing a test that shows when two getOrCreate() are called with two different values it creates two metrics.",
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cdd76d6_268c274e",
        "filename": "javatests/com/google/gerrit/metrics/dropwizard/BucketedCallbackTest.java",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T21:51:59Z",
      "side": 1,
      "message": "This is wrong, because you have two metrics that are clashing between each other and we silently make the call succeed and mix their values together. This isn\u0027t an improvement IMHO.\n\nWe should throw an IAE saying that the normalised name of \"foo-bar\" is clashing with \"foo/bar\" but the call should fail.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 46,
        "endChar": 68
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "416d2854_e53c029f",
        "filename": "javatests/com/google/gerrit/metrics/dropwizard/BucketedCallbackTest.java",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1063024
      },
      "writtenOn": "2023-06-16T09:27:34Z",
      "side": 1,
      "message": "I agree this is awkward, I\u0027m happy to change the behaviour of this change once I have a better understanding of what changes we can make ðŸ˜Š",
      "parentUuid": "5cdd76d6_268c274e",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 46,
        "endChar": 68
      },
      "revId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\""],"failingAtoms":["branch:refs/meta/config","branch:refs/heads/master"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Frontend-Verified",
        "description": {
          "value": "Frontend compilation, tests, and linters pass"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/master AND file:\"^polygerrit-ui/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Frontend-Verified\u003dMAX AND -label:Frontend-Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/master AND file:\"^polygerrit-ui/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/heads/master","file:\"^polygerrit-ui/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Frontend-Verified=MAX AND -label:Frontend-Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","hasfooter:\"Release-Notes\"","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:\"Release-Notes\""]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\""],"failingAtoms":["branch:refs/meta/config","branch:refs/heads/master"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "635656070d7468da6654c1762a296cb0a35cfdac",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}