{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a3dc048b_7b47f3f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-01-04T19:57:18Z",
      "side": 1,
      "message": "Without this change, my local build fails with:\n\n```\nERROR: /private/var/tmp/_bazel_lucamilanesio/05146e5884bb386b6d372310d769d784/external/com_google_protobuf/BUILD.bazel:457:10: Linking external/com_google_protobuf/protoc [for tool] failed: (Exit 1): cc_wrapper.sh failed: error executing CppLink command (from target @@com_google_protobuf//:protoc) external/local_config_cc/cc_wrapper.sh @bazel-out/darwin_x86_64-opt-exec-ST-13d3ddad9198/bin/external/com_google_protobuf/protoc-2.params\n\nUse --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root for debugging\nld: warning: ignoring duplicate libraries: \u0027-lm\u0027, \u0027-lpthread\u0027\nld: Undefined symbols:\n  google::protobuf::io::ZeroCopyInputStream::ReadCord(absl::lts_20230125::Cord*, int), referenced from:\n      vtable for google::protobuf::io::FileInputStream in libprotobuf_lite.a[16](zero_copy_stream_impl.o)\n  google::protobuf::io::ZeroCopyOutputStream::WriteCord(absl::lts_20230125::Cord const\u0026), referenced from:\n      vtable for google::protobuf::io::OstreamOutputStream in libprotobuf_lite.a[16](zero_copy_stream_impl.o)\n  google::protobuf::io::CopyingOutputStreamAdaptor::WriteCord(absl::lts_20230125::Cord const\u0026), referenced from:\n      vtable for google::protobuf::io::FileOutputStream in libprotobuf_lite.a[16](zero_copy_stream_impl.o)\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\nWith this change, the build succeeds on MacOS Sonoma / XCode 15.",
      "revId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72c0c2d7_3d7306b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2024-01-05T07:26:49Z",
      "side": 1,
      "message": "But the bump of C++ standard library level to C++17 will be part of the next Bazel release 7.1, see my PR: [1], so that we would need to downgrade to C++14, if we would not support that.\n\nAlso Bazel project itself bumped the C++ standard library level to C++17: [2] can you clone Bazel and test if you could build it on MacOS with: `bazelisk build src:bazel-bin-dev`?\n\nLast but not least, I\u0027ve uploaded this change for review, to bump `Google Protobuf` library to 25.1: [3], that (I think) also requires C++17 feature.\n\nCan you open an issue on Bazel issue tracker?\n\nCan someone else with access to MacOS Sonoma / XCode 15 confirm these breakages (in Gerrit and Bazel projects)?\n\n[1]: https://github.com/bazelbuild/bazel/pull/20413\n[2]: https://github.com/bazelbuild/bazel/commit/ba38aa25b674a2fd339b4d6cfce4abf073542d0a\n[3]: https://gerrit-review.googlesource.com/c/gerrit/+/399333",
      "parentUuid": "a3dc048b_7b47f3f8",
      "revId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d271f68_02efbec2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-01-05T15:57:35Z",
      "side": 1,
      "message": "\u003e But the bump of C++ standard library level to C++17 will be part of the next Bazel release 7.1, see my PR: [1], so that we would need to downgrade to C++14, if we would not support that.\n\nI still want to understand why the latest Sonoma/XCode break with C++17. What I suspect is that just the combination is too new and Bazel doesn\u0027t find a pre-compiled protoc for it.\n\nI am confident as soon as they (Google/Bazel Team) will have a pre-compiled protoc for it, the problem will disappear.\n\n\u003e Also Bazel project itself bumped the C++ standard library level to C++17: [2] can you clone Bazel and test if you could build it on MacOS with: `bazelisk build src:bazel-bin-dev`?\n\nSure, done and it and works, for both 7.0.0 release and master.\n\n\u003e Last but not least, I\u0027ve uploaded this change for review, to bump `Google Protobuf` library to 25.1: [3], that (I think) also requires C++17 feature.\n\nStrangely, when I apply [3] then it works as expected. Could it be that the older version of protobuf wasn\u0027t fully compatible with the stricter checks of C++17?\n\n\u003e Can you open an issue on Bazel issue tracker?\n\nNot sure it is a Bazel issue yet.\n\n\u003e Can someone else with access to MacOS Sonoma / XCode 15 confirm these breakages (in Gerrit and Bazel projects)?\n\n+1 !\n\nI am in a strange situation with MacOS Sonoma / XCode 15 on x86 (5-years old macbook), possibly the Bazel Team has already pre-built Arm binaries.\n\nThanks @david.ostrovsky@gmail.com for looking into it !\n\nLuca.\n\n\u003e \n\u003e [1]: https://github.com/bazelbuild/bazel/pull/20413\n\u003e [2]: https://github.com/bazelbuild/bazel/commit/ba38aa25b674a2fd339b4d6cfce4abf073542d0a\n\u003e [3]: https://gerrit-review.googlesource.com/c/gerrit/+/399333",
      "parentUuid": "72c0c2d7_3d7306b4",
      "revId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1286727_e8de2c16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-01-08T12:22:01Z",
      "side": 1,
      "message": "current master (ec7412fc437f) builds successfully for me on MacOS 14.2 using Xcode 15.1 Build version 15C65 and gcc version Apple clang version 15.0.0 (clang-1500.1.0.2.5) Target: arm64-apple-darwin23.2.0",
      "parentUuid": "7d271f68_02efbec2",
      "revId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Style=MAX","label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Forward-Compatibility",
        "description": {
          "value": "Changes to NoteDb, data serialization in ChangeField, or the entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\"","file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Frontend-Verified",
        "description": {
          "value": "Frontend compilation, tests, and linters pass"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Frontend-Verified\u003dMAX AND -label:Frontend-Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/master"],"failingAtoms":["file:\"^polygerrit-ui/.*\"","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Frontend-Verified=MAX AND -label:Frontend-Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","hasfooter:\"Release-Notes\"","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hasfooter:\"Release-Notes\""]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6417b42739da738dff9b6eda04aeee2ca0cad9cc",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}