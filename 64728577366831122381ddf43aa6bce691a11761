{
  "comments": [
    {
      "key": {
        "uuid": "68f5903c_9f27d3f6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/AccountResource.java",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-15T15:28:59Z",
      "side": 1,
      "message": "Please use composition instead of inheritance. I\u0027ve converted most of the ChangeResource hierarchy to do this, but I hadn\u0027t started on AccountResource.",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2820f890_955b44cb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/AccountResource.java",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T12:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68f5903c_9f27d3f6",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5903c_5f8b8b13",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/Stars.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-15T15:28:59Z",
      "side": 1,
      "message": "It feels a little odd to parse an unrelated resource type in the AccountResource hierarchy. Maybe just use ChangeFinder#findOne directly?\n\nOnce nice thing about that is then you can catch a specific NoSuchChangeException on l. 117 below, so it\u0027s a little clearer what kind of thing is not found.",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4dc25b_b4e76efa",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/Stars.java",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T12:53:17Z",
      "side": 1,
      "message": "This cannot be done easily, because we have the id as an IdString here and ChangeFinder#findOne requires a Change.Id. IdString may not be a valid Change.Id and in this case we cannot fail with a NoSuchChangeException because this exception requires a Change.Id. So if IdString is an invalid Change.Id we really can only fail with a ResourceNotFoundException.\n\nSo ChangesCollection.parse does really what we want and need.",
      "parentUuid": "68f5903c_5f8b8b13",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5903c_7f864f0f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/Stars.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-15T15:28:59Z",
      "side": 1,
      "message": "Maybe a little more specific, like \"... of another account\"?",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 70
      },
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2820f890_f5edd818",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/account/Stars.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T12:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "68f5903c_7f864f0f",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 70
      },
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5903c_3f90c73b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-15T15:28:59Z",
      "side": 1,
      "message": "This is weird, why can\u0027t Post handle a new resource?",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4dc25b_54e1e2e0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T12:53:17Z",
      "side": 1,
      "message": "Post is bound to the\n\n  /accounts/\u003caccount-id\u003e/stars.changes/\u003cchange-id\u003e\n\nURL and implements updating of changes which have already been starred.\n\nChanges with no stars a not listed as member of the /accounts/\u003caccount-id\u003e/stars.changes/ collection and a Post request on a non-existing member of this collection fails as expected with ResourceNotFoundException. \n\nCreation of new members in a REST collection is handled by the class that implements the collection (by implementing the AcceptsCreate interface). On request level this is either Post or Put.\n\nSo instead of invoking Stars.Create here directly, I should rather do the creation via the Stars class which implements the REST collection. Done.",
      "parentUuid": "68f5903c_3f90c73b",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5903c_5f538b12",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-18T14:26:07Z",
      "side": 1,
      "message": "Right, ok, I forgot about that feature of POST.\n\nI think the inconsistency stems from the fact that we\u0027re trying to POST to a star resource, rather than PUT, so it has to exist first, whereas in the Java API it feels more natural to have a single set method.\n\nWould it be better to do:\n\n* PUT /accounts/X/stars.changes/Y \u003d\u003e set exact set of stars\n* POST /accounts/X/stars.changes \u003d\u003e StarsInput containing map of change -\u003e (add, remove)\n* (optional) POST /accounts/X/stars.changes/Y \u003d\u003e single (add, remove) input.\n\nThat is how e.g. the group member REST API works.\n\nThe big downside is it\u0027s easy to misuse PUT stars.changes/Y and forget that it\u0027s \"overwrite\" instead of \"add\". To which the response is \"that\u0027s what PUT means\" which has never been very satisfying to me personally.",
      "parentUuid": "ab4dc25b_54e1e2e0",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4dc25b_d4f95266",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T16:09:05Z",
      "side": 1,
      "message": "StarsInput with add and remove was following the example of HashtagsInput, since stars are kind of private hashtags.\n\n \u003e PUT /accounts/X/stars.changes/Y \u003d\u003e set exact set of stars\n\nIs there a good use case for this? For hashtags we also do not support to set an exact set of hashtags.\n\n \u003e POST /accounts/X/stars.changes \u003d\u003e StarsInput containing \n \u003e map of change -\u003e (add, remove)\n\nMaybe this is all we need to set stars? It\u0027s not that pretty, but maybe it\u0027s an advantage that we can set stars on many changes with a single request.\n\nThe Java API could then have a convenient method to set stars on a single change.",
      "parentUuid": "68f5903c_5f538b12",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68f5903c_bf4bb755",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-18T16:14:09Z",
      "side": 1,
      "message": "\u003e Is there a good use case for this?\n\nNot really, if you ask me I think this is an example of REST being kind of dumb. Fans will tell you it\u0027s the be-all and end-all of HTTP-based API design but, surprise, there are plenty of use cases for which it is not a great fit.\n\n\u003e Maybe this is all we need to set stars?\n\nFine by me, certainly for the purposes of this change. If someone wants something else they can come up with a clean API proposal and then implement it :)",
      "parentUuid": "ab4dc25b_d4f95266",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2d5e79_6898c330",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-15T15:28:59Z",
      "side": 1,
      "message": "What\u0027s the reasoning for having the extension API have different behavior than the REST API? I would expect either the REST API to return an empty list (my preferred solution) or the extension API to let the RNFE propagate.",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4dc25b_94098a87",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T12:53:17Z",
      "side": 1,
      "message": "Good point.\n\nThis comes from our REST API schema which is \n\n  /accounts/\u003caccount-id\u003e/stars.changes/\u003cchange-id\u003e\n\nThe REST collection /accounts/\u003caccount-id\u003e/stars.changes/ only contains changes that have been starred. This allows users to get all starred changes by \n\n  GET /accounts/\u003caccount-id\u003e/stars.changes/\n\nThis is nice and it would be unexpected to get changes with no stars for this request\n\nBut this also means that trying to get stars from a change that has none results in a ResourceNotFoundException.\n\nFWIW this matches the behaviour of the old star REST API, /accounts/\u003caccount-id\u003e/starred.changes/ only contains changes that have been starred (by the default star).\n\nAll this makes sense for the REST API, but looking at the Java API my expectation was to rather get an empty label list for changes with no stars. This is why I implemented it like this, but I agree that it\u0027s inconsistent.\n\nFor now I\u0027m changing this implementation to be consistent with the REST API and throw ResourceNotFoundException as well.\n\nDo you think we should change /accounts/\u003caccount-id\u003e/stars.changes/ to always contain all changes? This would also fix your other comment above.",
      "parentUuid": "8b2d5e79_6898c330",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2d5e79_28c88bcb",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-18T14:26:07Z",
      "side": 1,
      "message": "I\u0027m kind of conflicted here. I think the REST API is really suboptimal and I agree that if you were designing an API from scratch it would look more like this extension API than the REST API. But still this is a higher level of divergence than we see elsewhere.",
      "parentUuid": "ab4dc25b_94098a87",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2820f890_18b889e5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-18T16:09:05Z",
      "side": 1,
      "message": "I\u0027m also not sure what\u0027s best to do for reading stars.\n\nI think we should have\n\n GET /accounts/\u003caccount-Id\u003e/stars.changes/\n\nto list all changes that were starred by any label (the method for this is still missing in the API). This matches listing of starred changes by \n\n GET /accounts/\u003caccount-Id\u003e/starred.changes/\n\nInterestingly the \"starred.changes\" API only supports setting/removing the star by\n\n PUT/DELETE /accounts/\u003caccount-Id\u003e/starred.changes/\u003cchange-id\u003e\n\nbut no read with a GET request. Read is only supported by getting the ChangeInfo and inspecting the \u0027starred\u0027 field in it. This is also why the AccountApi is missing an isStarred(String id) method.\n\nMaybe for now we could get away the same way and not offer a getStars(String id) method here? It\u0027s ugly but then we are  at least consistent with the \"starred.changes\" API and we may implement getStars(String id) only later if we ever want to allow reading stars of another user.",
      "parentUuid": "8b2d5e79_28c88bcb",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2d5e79_a8c2bba5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-18T16:14:09Z",
      "side": 1,
      "message": "\u003e Maybe for now we could get away the same way and not offer a getStars(String id) method here?\n\nI suppose that could be ok. Basically we are leaving this API unfinished, but given the scope of the rest of this change at this point, I think that\u0027s probably fine.",
      "parentUuid": "2820f890_18b889e5",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8d5c8d0_91f8fc8c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/accounts/AccountApiImpl.java",
        "patchSetId": 1
      },
      "lineNbr": 257,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2016-04-19T06:16:45Z",
      "side": 1,
      "message": "Looking at this again I think it\u0027s actually easy to solve.\n\nRestCollection\u0027s have one method for listing members (list()) and another method for parsing a single member for direct access (parse(RestResource, IdString)).\n\nI will implement list() so that it returns only changes that have at least one star, this gives us the right behaviour for\n\n  GET /accounts/\u003caccount-Id\u003e/stars.changes/\n\nHowever, the parse(...) method should return a resource for any change no matter if it has stars or not. This means\n\n  GET /accounts/\u003caccount-Id\u003e/starred.changes/\u003cchange-id\u003e\n\nwill return an empty label list for changes with no stars (and not ResourceNotFoundException as it was before).\n\nThis means that also \n\n  POST /accounts/\u003caccount-Id\u003e/starred.changes/\u003cchange-id\u003e\n\nwould always work, regardless of whether the change has already stars or not.\n\nAny concerns about this design?",
      "parentUuid": "8b2d5e79_a8c2bba5",
      "revId": "64728577366831122381ddf43aa6bce691a11761",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}