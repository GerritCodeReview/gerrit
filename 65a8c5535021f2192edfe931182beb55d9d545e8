{
  "comments": [
    {
      "key": {
        "uuid": "05572ed1_2d508b8b",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-10T10:41:14Z",
      "side": 1,
      "message": "This seems not true anymore since we take these requires from index.html in the FE as prevention against regressions.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 82
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d260cc9_c870fe20",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 54,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:35:42Z",
      "side": 1,
      "message": "Yes, we have prevention, however there are still queries on both sides. First it will be easier to release this change if I will not remove queries from front-end. \n\nSecond, I feel that current global variable is nice to protect from queries to go out of sync, but it is not robust solution. IMHO, We can remove this kind of comment once we implement robust solution.",
      "parentUuid": "05572ed1_2d508b8b",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 54,
        "endChar": 82
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a96a599_f01793c5",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 72,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-10T10:41:14Z",
      "side": 1,
      "message": "nit: OptionsAsHex?\n\nWhat we are getting here are ListChangeOptions and hex is just the representation.",
      "range": {
        "startLine": 72,
        "startChar": 45,
        "endLine": 72,
        "endChar": 48
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4ec773d_4668ed3c",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 72,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:35:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a96a599_f01793c5",
      "range": {
        "startLine": 72,
        "startChar": 45,
        "endLine": 72,
        "endChar": 48
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e7b58e9_4c19f33e",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 111,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-10T10:41:14Z",
      "side": 1,
      "message": "@Nullable",
      "range": {
        "startLine": 111,
        "startChar": 48,
        "endLine": 111,
        "endChar": 49
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e08e669_d971c60b",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 111,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:35:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e7b58e9_4c19f33e",
      "range": {
        "startLine": 111,
        "startChar": 48,
        "endLine": 111,
        "endChar": 49
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5acc5bc_6a8063c9",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 134,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-10T10:41:14Z",
      "side": 1,
      "message": "nit: Could be an Optional\u003cString\u003e to express that the result isn\u0027t guaranteed to the there.\n\nYou can then use #isEmpty() and orElse(null), etc. in the callers.",
      "range": {
        "startLine": 134,
        "startChar": 16,
        "endLine": 134,
        "endChar": 22
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcb84e29_95e37797",
        "filename": "java/com/google/gerrit/httpd/raw/IndexPreloadingUtil.java",
        "patchSetId": 16
      },
      "lineNbr": 134,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:35:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5acc5bc_6a8063c9",
      "range": {
        "startLine": 134,
        "startChar": 16,
        "endLine": 134,
        "endChar": 22
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7797bc3_201e72cb",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 16
      },
      "lineNbr": 2747,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-10T10:41:14Z",
      "side": 1,
      "message": "This is expensive and seems unnecessary. Can we just use \u0027self\u0027 in the first place and replace that with user in tests instead of in the production code (if at all)?",
      "range": {
        "startLine": 2747,
        "startChar": 59,
        "endLine": 2747,
        "endChar": 69
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efa08aa3_2f2f394f",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 16
      },
      "lineNbr": 2747,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:35:42Z",
      "side": 1,
      "message": "\u003e Can we just use \u0027self\u0027 in the first place and replace that with user in tests instead of in the production code (if at all)?\n\n1st reason\nThis query\n```public static final String DASHBOARD_ASSIGNED_QUERY \u003d\n      \"assignee:${user} (-is:wip OR \" + \"owner:self OR assignee:self) is:open -is:ignored limit:25\";```\nwould be different if I change self to ${user}\n\nSame for DASHBOARD_RECENTLY_CLOSED_QUERY.\n\n2nd reason\nif I will set ${user} and we will in future decide to preload other user dashboard, we will need to reintroduce this again.\n\n\nI am thinking to create public static final self_queries which will replaceAll(\"\\\\$\\\\{user}\", \"self\")) in gerrit initialization not in runtime.\n\nWDYT?\nShould I remove initialized self in static ?\nor Should I change queries to \u0027self\u0027 and put different queries to query test for other users? And make it out of sync with front-end that is using same ${user} in their queries?",
      "parentUuid": "d7797bc3_201e72cb",
      "range": {
        "startLine": 2747,
        "startChar": 59,
        "endLine": 2747,
        "endChar": 69
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e522d307_965eafbc",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 16
      },
      "lineNbr": 2747,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2020-08-10T14:56:55Z",
      "side": 1,
      "message": "I have pushed this self initialized to this change. I can revert it if you think it should be done differently.",
      "parentUuid": "efa08aa3_2f2f394f",
      "range": {
        "startLine": 2747,
        "startChar": 59,
        "endLine": 2747,
        "endChar": 69
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a45131e3_a43e5fe6",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 16
      },
      "lineNbr": 2747,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-08-11T07:58:40Z",
      "side": 1,
      "message": "What you have now is better because it\u0027s at initialization, so LGTM.",
      "parentUuid": "e522d307_965eafbc",
      "range": {
        "startLine": 2747,
        "startChar": 59,
        "endLine": 2747,
        "endChar": 69
      },
      "revId": "65a8c5535021f2192edfe931182beb55d9d545e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}