{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "646491e2_ede7451f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2022-06-15T14:01:48Z",
      "side": 1,
      "message": "I dropped the ball on this one, but here are my concerns about having this as a commit footer instead of as a tag/label in the commit message (as in the 1:st patch-set) if you think they are something to consider:\n\n* A commit footer normally has a key and a value.\n* In this case we don\u0027t care about the value.\n* This means that any of these footers makes the change submitable:\n\n    FW_COMPATIBLE: no\n    \n    FW_COMPATIBLE: false\n    \n    FW_COMPATIBLE:\n    \nIt sort-of serves it\u0027s purpose but is somewhat confusing.",
      "revId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a513c41c_5a2c88e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-06-15T14:08:52Z",
      "side": 1,
      "message": "I\u0027m more inclined to your opinion and would have preferred a tag instead of a commit footer but I don\u0027t have a strong opinion. I could also update it to `footer:\u0027FW_COMPATIBLE\u003dchecked\u0027`, eliminating any wrong values.\n\nWhat do you think?",
      "parentUuid": "646491e2_ede7451f",
      "revId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe92dbb1_143150bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-06-16T00:05:16Z",
      "side": 1,
      "message": "\u003e I\u0027m more inclined to your opinion and would have preferred a tag instead of a commit footer but I don\u0027t have a strong opinion. I could also update it to `footer:\u0027FW_COMPATIBLE\u003dchecked\u0027`, eliminating any wrong values.\n\u003e \n\u003e What do you think?\n\nIf you use a \"tag\", where in the message does it go? If it\u0027s just anywhere in the message, how do you avoid accidental misuse (FW_COMPATIBLE\u003dno/false, \"this change is not FW_COMPATIBLE\", etc)?\n\nIf we want a footer, then maybe since \"FW_COMPATIBLE\" is shorthand for \"Forward Compatible\", a \u0027Compatible:\u0027 footer with appropriate values (\u0027Compatible: Forward\u0027 for this use case) would address Sven\u0027s concern and allow for future flexibility? For example, we care about backwards compatibility for any changes to the extensions package, so we could do \u0027Compatible: Backwards\u0027 as required on those changes. Another future thought is that it might make sense to use something like \u0027Compatible: BREAKING\u0027 to provide extra scrutiny on some changes.",
      "parentUuid": "a513c41c_5a2c88e4",
      "revId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/meta/config"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/meta/config"],"failingAtoms":["file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/meta/config"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/meta/config"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6648dac96276a9585fe95da8b9478b8fdab24410",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}