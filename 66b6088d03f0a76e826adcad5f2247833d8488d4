{
  "comments": [
    {
      "key": {
        "uuid": "18f885b0_a17522a6",
        "filename": "polygerrit-ui/app/test/common-test-setup-karma.js",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-05-11T08:29:21Z",
      "side": 1,
      "message": "only support `await` when calling without `callback` ? is that intended ? can we just have the flush defined as an async function instead ?",
      "revId": "66b6088d03f0a76e826adcad5f2247833d8488d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fe8a5e8_888161f4",
        "filename": "polygerrit-ui/app/test/common-test-setup-karma.js",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-05-11T12:30:26Z",
      "side": 1,
      "message": "Yes, this is intended (and the comment defines that this is expected behavior).\nThe implementation with callback is required to avoid modification in existing tests.\nIf a callback is passed, it must be prohibited to use async/promise at the same time.\n\nAnother option is to add separate method flushAsync without callback (callback is also an async code, so may be this name is not good).",
      "parentUuid": "18f885b0_a17522a6",
      "revId": "66b6088d03f0a76e826adcad5f2247833d8488d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab8fc889_662e5d0b",
        "filename": "polygerrit-ui/app/test/common-test-setup-karma.js",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-05-11T14:44:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fe8a5e8_888161f4",
      "revId": "66b6088d03f0a76e826adcad5f2247833d8488d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c13cea_d870b071",
        "filename": "polygerrit-ui/app/test/common-test-setup-karma.js",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-05-12T15:37:16Z",
      "side": 1,
      "message": "i am thinking why not just always return a promise for both cases ? with the `callback`, it doesn\u0027t hurt to also return a promise right ?\n\n```\nreturn new Promise(resolve \u003d\u003e {\n      window.setTimeout(() \u003d\u003e {\n        callback();\n        resolve();\n      }, 0);\n    });\n```",
      "parentUuid": "ab8fc889_662e5d0b",
      "revId": "66b6088d03f0a76e826adcad5f2247833d8488d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ccda17f_9717a300",
        "filename": "polygerrit-ui/app/test/common-test-setup-karma.js",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-05-13T12:12:48Z",
      "side": 1,
      "message": "I want to avoid code like:\nawait flush(() \u003d\u003e {\n   action1();\n})\naction2();\n\nThis is why I implemented it in a way, that it can be used either with callback or with await.\nIt must be impossible to use both at the same time.",
      "parentUuid": "c3c13cea_d870b071",
      "revId": "66b6088d03f0a76e826adcad5f2247833d8488d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}