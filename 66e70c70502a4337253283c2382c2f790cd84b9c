{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "470a109b_3cc0fc8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T01:04:03Z",
      "side": 1,
      "message": "This isn\u0027t working E2E: the new keys are generated BUT that creates inconsistency with the existing key.\n\nSee below the error after upgrading from v2.13 to v2.16:\n\n[2021-11-19 01:02:43,223] [main] ERROR com.google.gerrit.pgm.Daemon : Unable to start daemon\ncom.google.inject.CreationException: Unable to create injector, see the following errors:\n\n1) Multiple host keys exist: [/var/gerrit/etc/ssh_host_ecdsa_key, /var/gerrit/etc/ssh_host_ecdsa_384_key, /var/gerrit/etc/ssh_host_ecdsa_521_key, /var/gerrit/etc/ssh_host_ed25519_key, /var/gerrit/etc/ssh_host_key]",
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4771c802_4d107e9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-19T01:14:28Z",
      "side": 1,
      "message": "\u003e This isn\u0027t working E2E: the new keys are generated BUT that creates inconsistency with the existing key.\n\u003e \n\u003e See below the error after upgrading from v2.13 to v2.16:\n\u003e \n\u003e [2021-11-19 01:02:43,223] [main] ERROR com.google.gerrit.pgm.Daemon : Unable to start daemon\n\u003e com.google.inject.CreationException: Unable to create injector, see the following errors:\n\u003e \n\u003e 1) Multiple host keys exist: [/var/gerrit/etc/ssh_host_ecdsa_key, /var/gerrit/etc/ssh_host_ecdsa_384_key, /var/gerrit/etc/ssh_host_ecdsa_521_key, /var/gerrit/etc/ssh_host_ed25519_key, /var/gerrit/etc/ssh_host_key]\n\nI think that is fixed by https://gerrit-review.googlesource.com/c/gerrit/+/321755\n\nI\u0027ll move that to stable-2.16 so that you can test with it.",
      "parentUuid": "470a109b_3cc0fc8c",
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b407a201_4445dda4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-19T01:15:14Z",
      "side": 1,
      "message": "Unresolve comment until fix is verified.",
      "parentUuid": "4771c802_4d107e9c",
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d2428a4_b5f64207",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-19T01:33:46Z",
      "side": 1,
      "message": "https://gerrit-review.googlesource.com/c/gerrit/+/321755 is moved to stable-2.16 and rebased on top of this one so that you can easily test these both together.",
      "parentUuid": "b407a201_4445dda4",
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d312a53c_f09b3a5f",
        "filename": "java/com/google/gerrit/pgm/init/InitSshd.java",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-23T20:32:15Z",
      "side": 1,
      "message": "Why not failing the init if we find a legacy ssh_key instead?\nOr, at least, asking the Gerrit admin something like:\n\"An existing legacy SSH host key has been found, which has two issues:\n- it could be potentially obsolete and insecure (older SSH key unchanged for many years)\n- it would prevent the generation of newer and more secure SSH host keys, such as ECDSA and ED\n\nWould you like to remove the old keys and generate new ones? [Y/n]\"\n\nThe default action should be \"Y\" because it is the safest option.\n\nIf the Gerrit admin says \"Y\", then we remove the old key and generate the new ones.\nIf the Gerrit admin says \"n\", then we keep the current status-quo.\n\nWDYT?",
      "range": {
        "startLine": 83,
        "startChar": 10,
        "endLine": 83,
        "endChar": 30
      },
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04bd1a6e_83159e28",
        "filename": "java/com/google/gerrit/pgm/init/InitSshd.java",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-23T21:29:25Z",
      "side": 1,
      "message": "Either option seems fine to me (fail init, or ask during interactive init, defaulting to regeneration for noninterative init), as long as it\u0027s documented in the release notes.",
      "parentUuid": "d312a53c_f09b3a5f",
      "range": {
        "startLine": 83,
        "startChar": 10,
        "endLine": 83,
        "endChar": 30
      },
      "revId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader",
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/.*\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX",
          "label:Verified\u003dMIN"
        ],
        "failingAtoms": []
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "66e70c70502a4337253283c2382c2f790cd84b9c",
      "legacy": {
        "value": false
      },
      "forced": {}
    }
  ]
}