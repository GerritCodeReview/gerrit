{
  "comments": [
    {
      "key": {
        "uuid": "fcd405a4_5b582798",
        "filename": "polygerrit-ui/app/services/app-context.ts",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-07-30T10:25:05Z",
      "side": 1,
      "message": "this is quite strange, can not we use `/* eslint-disable */` for this block if the error is due to linter ?",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 23
      },
      "revId": "6a90ed1d50a0d6349c577069c220b9bbcf655ddd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40407e80_7d67cf38",
        "filename": "polygerrit-ui/app/services/app-context.ts",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-07-30T11:16:06Z",
      "side": 1,
      "message": "This is a compiler error (not from eslint), because AppContext defines all services as non-nullable.\nThe error can be disabled with @ts-ignore, but typescript style guide doesn\u0027t allow @ts-ignore.\nI agree, that this looks unusual, but can\u0027t find a better way. Making all properties nullable isn\u0027t possible, because all other code assumes (correctly) that all services are non-null.",
      "parentUuid": "fcd405a4_5b582798",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 23
      },
      "revId": "6a90ed1d50a0d6349c577069c220b9bbcf655ddd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bec73cb4_32a32a0c",
        "filename": "polygerrit-ui/app/services/app-context.ts",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-07-30T11:22:35Z",
      "side": 1,
      "message": "I think you can just do `export const appContext \u003d {} as AppContext`, this is an easy way for lazy initialization of properties, and typescript actually allow that, example as follows:\n\n\u003e https://www.typescriptlang.org/play/?ssl\u003d1\u0026ssc\u003d1\u0026pln\u003d16\u0026pc\u003d12#",
      "parentUuid": "40407e80_7d67cf38",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 23
      },
      "revId": "6a90ed1d50a0d6349c577069c220b9bbcf655ddd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466d2c29_2240cb57",
        "filename": "polygerrit-ui/app/services/app-context.ts",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-07-30T13:14:13Z",
      "side": 1,
      "message": "Done. I don\u0027t see big difference between both solutions. Both solutions are cheats and they don\u0027t add any additional types safety.\n\napp-context-init.js is updated - otherwise tests can\u0027t mock services.",
      "parentUuid": "bec73cb4_32a32a0c",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 23
      },
      "revId": "6a90ed1d50a0d6349c577069c220b9bbcf655ddd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "202a3f48_36a8d40b",
        "filename": "polygerrit-ui/app/services/app-context.ts",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2020-07-30T15:07:50Z",
      "side": 1,
      "message": "i would say its cleaner and easier to read",
      "parentUuid": "466d2c29_2240cb57",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 23
      },
      "revId": "6a90ed1d50a0d6349c577069c220b9bbcf655ddd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}