{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ad210d96_26bedd85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-18T10:12:20Z",
      "side": 1,
      "message": "I just got aware of this change. I\u0027m afraid this change is not working as expected.\nAutomatic attention set updates happen in ChangeUpdate, depending on the change state and which reviewers have been added/removed (see ChangeNotes#updateAttentionSet, ChangeNotes#clearAttentionSet), but these attention set updates do not trigger the AttentionSetListener. Also see my inline comment on the test in ChangeIT.",
      "revId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "274cd564_8869fc3f",
        "filename": "javatests/com/google/gerrit/acceptance/api/change/ChangeIT.java",
        "patchSetId": 16
      },
      "lineNbr": 1553,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-07-18T10:12:20Z",
      "side": 1,
      "message": "Here you can see that the logic to trigger the AttentionSetListener is not working correctly.\n\n\u003e gApi.changes().id(r1.getChangeId()).addReviewer(user.email());\nThis adds the user to the attention set, but doesn\u0027t trigger the AttentionSetListerner.\n\n\u003e gApi.changes().id(r1.getChangeId()).addToAttentionSet(addUser);\nThis is a no-op (since the user is already in the attention set), but it triggers the AttentionSetListerner although the attention set is not changed now.\n\n\nYou can double-check this by modifying this test like this:\n\n      // Assert that the attention set is initially empty.\n      assertThat(changeDataFactory.create(project, r1.getChange().getId()).attentionSet())\n          .isEmpty();\n\n      // Adding a user as reviewer adds this user to the attention set.\n      gApi.changes().id(r1.getChangeId()).addReviewer(user.email());\n      assertThat(\n              Iterables.getOnlyElement(\n                      changeDataFactory.create(project, r1.getChange().getId()).attentionSet())\n                  .account())\n          .isEqualTo(user.id());\n\n      // This should have triggered the AttentionSetListerner, but it didn\u0027t.\n      assertThat(attentionSetListener.fired).isFalse(); // expected this to be true.\n\n      // Adding the user to the attention set once more is a no-op since the user is already in the\n      // attention set.\n      gApi.changes().id(r1.getChangeId()).addToAttentionSet(addUser);\n\n      // User is still in the attention set.\n      assertThat(\n              Iterables.getOnlyElement(\n                      changeDataFactory.create(project, r1.getChange().getId()).attentionSet())\n                  .account())\n          .isEqualTo(user.id());\n\n      // Since the user was not added to the attention set by this call,\n      // it should not trigger the AttentionSetListener now.\n      assertThat(attentionSetListener.fired).isTrue();",
      "range": {
        "startLine": 1550,
        "startChar": 6,
        "endLine": 1553,
        "endChar": 54
      },
      "revId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6ac9ddaaa8fc51b5d32ba20544b33c8a5e681e69",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}