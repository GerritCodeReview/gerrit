{
  "comments": [
    {
      "key": {
        "uuid": "6e7a2c01_05e8b9ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "Why do we need to add API in revision level?\n\nIIUC, when we edit commit message in PolyGerrit, it will create a new patch set with the tree of the current patch set. \n\nIf we add a revision API, then how should we handle the following process:\n\n1- Create patch set 1\n2- User edit message\n3- Create patch set 2\n4- Finish edit, and get patch set 3\n\nPatch set 3 will have the tree of patch set 1? Should the tree of the current patch set be a better choice for this case?\n\nI feel we may only add API in change level and always use the current patch set. Do we have some use cases  to add revision level support?",
      "range": {
        "startLine": 21,
        "startChar": 48,
        "endLine": 21,
        "endChar": 67
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "218f224e_6ff11cb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-20T07:33:48Z",
      "side": 1,
      "message": "This is basically a revert of: [1]. Why we don\u0027t perform revert of revert. Can you provide reasons this is now re-implemented? ( I haven\u0027t looked into the code yet).\n\n* [1] https://gerrit-review.googlesource.com/63510",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 71
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "041ed5ef_d408ffe6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-06-20T07:35:37Z",
      "side": 1,
      "message": "I thought the reasons given in the previous 2 paragraphs were sufficient explanation.",
      "parentUuid": "218f224e_6ff11cb3",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 71
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "663619f0_002ab340",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-20T08:17:51Z",
      "side": 1,
      "message": "Hm.., in previous 2 paragraphs were explained why we revive single endpoint implementation to change the commit message. My question was why it is reimplemented from scratch and not the the commit that removed previously existed endpoint is reverted.",
      "parentUuid": "041ed5ef_d408ffe6",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 71
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5076478f_688c64f3",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 7
      },
      "lineNbr": 3141,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit:\"commit message\".",
      "range": {
        "startLine": 3141,
        "startChar": 8,
        "endLine": 3141,
        "endChar": 19
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea0b0201_dab90f1f",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 7
      },
      "lineNbr": 3142,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-06-20T02:21:18Z",
      "side": 1,
      "message": "Shouldn\u0027t the Change-Id footer only be mandatory when the project has the \"Require Change-Id\" setting enabled?",
      "range": {
        "startLine": 3142,
        "startChar": 45,
        "endLine": 3142,
        "endChar": 78
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0ce3175_1801f32d",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 7
      },
      "lineNbr": 3142,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: this should be something like #commit-message-input? We can\u0027t use #description-input here and I think #change-edit-input should not be used here either.",
      "range": {
        "startLine": 3142,
        "startChar": 5,
        "endLine": 3142,
        "endChar": 37
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8b5f45f_2b5468b9",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 7
      },
      "lineNbr": 3156,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: It\u0027s not consistent with the REST endpoint. There 200 is returned.",
      "range": {
        "startLine": 3156,
        "startChar": 2,
        "endLine": 3156,
        "endChar": 25
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cd9dfcc_7cad5289",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1214,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "IIUC, the change owner is just a regular user. Even the change owner needs AddPathSet permission to edit the commit message, right? If so, this test can be simplified.",
      "range": {
        "startLine": 1213,
        "startChar": 0,
        "endLine": 1214,
        "endChar": 63
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7cfdc60_df86fc5c",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1220,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: Since the change owner is always \u0027admin\u0027, this code might be able to move out of the loop? The following should be enough for this?\n\nPushOneCommit.Result r \u003d createChange();\nassertThat(getCommitMessage(r.getChangeId()))\n    .isEqualTo(\"test commit\\n\\nChange-Id: \" + r.getChangeId() + \"\\n\");",
      "range": {
        "startLine": 1216,
        "startChar": 6,
        "endLine": 1220,
        "endChar": 76
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40065ab3_f74d4ba9",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1226,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: how about store this in a String instead of constructing it twice?\n \nIf we move the \u0027create change\u0027 code out of the for loop, we should also change the message to be unique for each iteration. e.g. \"modified commit by \" + acc.username + \"\\n\\nChange-Id: \" + r.getChangeId() + \"\\n\"",
      "range": {
        "startLine": 1226,
        "startChar": 19,
        "endLine": 1226,
        "endChar": 76
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b262da3d_27d1ff4a",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1235,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: how about \"changeCommitMessageWithNoChangeIdFails\"",
      "range": {
        "startLine": 1235,
        "startChar": 14,
        "endLine": 1235,
        "endChar": 74
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "159ac0c9_2aef6e7a",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1238,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: can be \"getCommitMessage(r.getChangeId())\"",
      "range": {
        "startLine": 1238,
        "startChar": 12,
        "endLine": 1238,
        "endChar": 97
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a82253ac_54866fb4",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1246,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: how about \"changeCommitMessageWithWrongChangeIdFails\"? Sign. It\u0027s still very long.",
      "range": {
        "startLine": 1246,
        "startChar": 14,
        "endLine": 1246,
        "endChar": 77
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1df9c484_f7d828f7",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1260,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: how about \"changeCommitMessageWithoutPermissionFals\"",
      "range": {
        "startLine": 1260,
        "startChar": 14,
        "endLine": 1260,
        "endChar": 70
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b433b454_38144ac8",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 7
      },
      "lineNbr": 1270,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: r/create edit/change commit message",
      "range": {
        "startLine": 1270,
        "startChar": 14,
        "endLine": 1270,
        "endChar": 25
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62b9253e_a848854f",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/api/changes/ChangeApi.java",
        "patchSetId": 7
      },
      "lineNbr": 194,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: \"the result as a new\"",
      "range": {
        "startLine": 194,
        "startChar": 74,
        "endLine": 194,
        "endChar": 87
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7163b53_591ec9e3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/RevisionApiImpl.java",
        "patchSetId": 7
      },
      "lineNbr": 276,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: how about using \"message\"?",
      "range": {
        "startLine": 276,
        "startChar": 29,
        "endLine": 276,
        "endChar": 31
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86e09902_53d73e9d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Module.java",
        "patchSetId": 7
      },
      "lineNbr": 131,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "As the comment in the commit message, I\u0027m wondering if we need to provide a revision level API.",
      "range": {
        "startLine": 131,
        "startChar": 4,
        "endLine": 131,
        "endChar": 55
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01e167d5_a30c5dd5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: @Singleton.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9003d035_a0373a18",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: this input has to be checked before use. We can use ChangeEditModifier#getWellFormedCommitMessage.",
      "range": {
        "startLine": 96,
        "startChar": 65,
        "endLine": 96,
        "endChar": 78
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2518d965_5580de16",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: Since they will only be used once, I would just write like:\n\nObjectId newCommit \u003d\n          createCommit(repository, patchSetCommit, patchSetCommit.getTree(), input.message, TimeUtil.nowTs());\n\nAlso I would move it close to its use line#119.",
      "range": {
        "startLine": 108,
        "startChar": 6,
        "endLine": 109,
        "endChar": 48
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a14bd528_a88a13e5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 115,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "Is this user the same with currentUserProvider.get()? If it\u0027s the same we may use currentUserProvider.get() instead?",
      "range": {
        "startLine": 115,
        "startChar": 59,
        "endLine": 115,
        "endChar": 77
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "724375b8_5babae67",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "Is this comment necessary?",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 60
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47416f14_6a252fd4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 117,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "ObjectInserter should be defined as a try resource in line#99.",
      "range": {
        "startLine": 117,
        "startChar": 7,
        "endLine": 117,
        "endChar": 71
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77c50b3_925179a1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 118,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "Can\u0027t we reuse the revWalk defined at line#99?",
      "range": {
        "startLine": 118,
        "startChar": 37,
        "endLine": 118,
        "endChar": 76
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d205b33_4ec3825f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 126,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: Since we need to call this method multiple times, we may use a variable to keep it.",
      "range": {
        "startLine": 126,
        "startChar": 17,
        "endLine": 126,
        "endChar": 37
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a58346_74d8d8d0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "optional: I\u0027m wondering if we can return Response.ok(ChangeInfo).",
      "range": {
        "startLine": 130,
        "startChar": 4,
        "endLine": 130,
        "endChar": 27
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce070d5_638c6779",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: this is not necessary since we already have \u0027basePatchSetCommit\u0027.",
      "range": {
        "startLine": 136,
        "startChar": 6,
        "endLine": 136,
        "endChar": 20
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c8743d4_d3e5dc2d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "I feel this should be defined in the line#99 and shared here and line#117. If we do like that, then \u0027repository\u0027 will not be needed by this method, either.",
      "range": {
        "startLine": 140,
        "startChar": 3,
        "endLine": 140,
        "endChar": 72
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e803152d_4c7837e7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 146,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "Is there any special concern why the \u0027author\u0027 and \u0027committer\u0027 is different here?",
      "range": {
        "startLine": 144,
        "startChar": 6,
        "endLine": 146,
        "endChar": 89
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86664bc7_869866b7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PutMessage.java",
        "patchSetId": 7
      },
      "lineNbr": 174,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-06-20T08:31:42Z",
      "side": 1,
      "message": "nit: do we have a better way to extract Change-Id from a string?",
      "range": {
        "startLine": 172,
        "startChar": 3,
        "endLine": 174,
        "endChar": 94
      },
      "revId": "6d2845cc94e09cda25c88cb00cbb5bbfb79bf40e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}