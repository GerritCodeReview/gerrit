{
  "comments": [
    {
      "key": {
        "uuid": "bb0c27ef_b9c67f6d",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-12-01T14:44:19Z",
      "side": 1,
      "message": "Still trying to wrap my head around this.\n\nWhen a caller accesses app.accountReady, it creates a new promise object whose body assigns _resolveAccountReady to the resolve function of the promise. So when the account is changed, it calls _resolveAccountReady and continues the promise chain.\n\nOne thing I didn\u0027t learn in my cursory intro to promises is: when is the argument of the promise evaluated? Is it possible for _accountChanged to be called (i.e. account to be returned from the account manager) _before_ _resolveAccountReady is assinged?\n\nAnother potential issue I see is that there is only a single _resolveAccountReady field on this object. If two callers call app.accountReady, ISTM that would create two promises, and _resolveAccountReady would only be assigned to the second promise\u0027s resolve argument. So the first promise\u0027s resolve would never get called.",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb7a1f32_ebcb1174",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1021482
      },
      "writtenOn": "2015-12-01T14:52:59Z",
      "side": 1,
      "message": "The promise is created upon initialization of the element, not access to the property. It is only created once (unless accountReady is reassigned, which it shouldn\u0027t be hence the readOnly).\n\nAs I understand it, property observers are not fired until after properties are initialized on the element, so _accountChanged won\u0027t be called before _resolveAccountReady is assigned.\n\nThe third issue is moot due to the first clarification above. Youâ€™re always referring to the same promise.",
      "parentUuid": "bb0c27ef_b9c67f6d",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb0c27ef_39db8f46",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-12-01T15:06:02Z",
      "side": 1,
      "message": "Ahhh ok. So if the \"value\" of a Polymer property is a function, that function is evaluated exactly once during initialization, not on every invocation. Which works out well for this use case.",
      "parentUuid": "fb7a1f32_ebcb1174",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb0c27ef_59b923ec",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-12-01T14:44:19Z",
      "side": 1,
      "message": "Trying to figure out the difference between a getter and a property. IIUC they both look the same to the caller (access .foo and have it call some method). But getters are a native JS thing whereas properties are Polymer magic and thus get magic Polymer binding semantics. And in this case you really don\u0027t care about binding semantics, you just want this simple function.\n\nSound right?",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb0c27ef_f9c0f752",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1021482
      },
      "writtenOn": "2015-12-01T14:52:59Z",
      "side": 1,
      "message": "Yep you got it.",
      "parentUuid": "bb0c27ef_59b923ec",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb0c27ef_19d84b46",
        "filename": "polygerrit-ui/app/elements/gr-app.html",
        "patchSetId": 6
      },
      "lineNbr": 140,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-12-01T15:06:02Z",
      "side": 1,
      "message": "Well, given the above discussion I think I\u0027m wrong: setting the value of a property to a function does *not* call the function every time the property is accessed.\n\nSo I don\u0027t know a way using Polymer properties to have getter-like behavior of something that looks like .foo but actually calls a function.\n\n(Which is not like a problem or anything, just clarifying my understanding.)",
      "parentUuid": "bb0c27ef_f9c0f752",
      "revId": "6f93c25a71ac8c681cebf0c7e78d34d2205920e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}