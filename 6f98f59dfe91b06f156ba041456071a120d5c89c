{
  "comments": [
    {
      "key": {
        "uuid": "b64deb11_c22b9268",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/edit/ChangeEditIT.java",
        "patchSetId": 13
      },
      "lineNbr": 289,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:40:45Z",
      "side": 1,
      "message": "Test for --base (though see my other comments on that option).",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "164797ed_deace5bf",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 227,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-14T20:25:41Z",
      "side": 1,
      "message": "Extra new line?",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_42c9c28f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 234,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:40:45Z",
      "side": 1,
      "message": "I think elsewhere we use REVISION?",
      "range": {
        "startLine": 234,
        "startChar": 39,
        "endLine": 234,
        "endChar": 52
      },
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "530a0115_78d1c168",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 234,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-16T08:25:11Z",
      "side": 1,
      "message": "Actually i copied this from Files.ListFiles class. If we should change it here, we should change it in ListFiles as well.",
      "parentUuid": "b64deb11_42c9c28f",
      "range": {
        "startLine": 234,
        "startChar": 39,
        "endLine": 234,
        "endChar": 52
      },
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3205593_752308c9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 234,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-18T14:38:45Z",
      "side": 1,
      "message": "Eh, not worth worrying about, I don\u0027t think these ever get exposed tot he user anyway.",
      "parentUuid": "530a0115_78d1c168",
      "range": {
        "startLine": 234,
        "startChar": 39,
        "endLine": 234,
        "endChar": 52
      },
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_82982a9a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:40:45Z",
      "side": 1,
      "message": "What does it mean to specify a base?\n\nIf you have an edit based on PS3 and you specify base\u003d2, what, is it like running \"git diff \u003cedit-sha1\u003e \u003cps2-sha1\u003e\"? Why is that useful?",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "164797ed_3ebf09e7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-14T20:25:41Z",
      "side": 1,
      "message": "That\u0027s because it is needed by Side by side screen. That\u0027s where you have \"1 2 3 4 5 6 7 edit\" on the left and on the right. So i just copied tha logic from normal revisions to make side by side work. We could change it later and only allow to compare edit against its parent, But even then we would need to pass base, 3 in your example above.",
      "parentUuid": "b64deb11_82982a9a",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56e90f2a_a0d63a62",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T21:20:43Z",
      "side": 1,
      "message": "No, I think this is fine as-is, thanks.",
      "parentUuid": "164797ed_3ebf09e7",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36073bcd_b7d1686f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T04:42:43Z",
      "side": 1,
      "message": "Oh, i think it was late yesterday, because what i told was nonsense. I confused two different use cases. Where list is needed is change screen 2, to make diff against drop down work with different base revisions. So this is where we can have:\n\n* edit\n* 3\n* 2\n* 1\n* Base\n\nin drop down and user can change the base revision.",
      "parentUuid": "164797ed_3ebf09e7",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6124b0c_33e6084c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-15T16:41:37Z",
      "side": 1,
      "message": "Yes, good point. I understood the intent, which is that edits may be compared with arbitrary revisions, both at the file level and the top level.",
      "parentUuid": "36073bcd_b7d1686f",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_e2a6cedc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:40:45Z",
      "side": 1,
      "message": "Is there a reason you would not want to always list the files in the edit? Performance? Something else?\n\nI think if performance is a concern maybe we should just use HEAD to determine the existence of the edit. (Though I don\u0027t know that RestApiServlet knows how to do that either...)",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f643e3df_bd41df21",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-14T20:25:41Z",
      "side": 1,
      "message": "Yes. Performance. That makes a lot of sense. Detail apply is called 5 times, i guess to build Change screen2: Patch Set box, Download Box, Side by Side, CS2 itself and only in one or two cases from 5 it needs files. So that request is decoupled from skimple get detail for a reason. The same hold true for change screen itself. GET /changes/\u003cX\u003e/detail doesn\u0027t return files.",
      "parentUuid": "b64deb11_e2a6cedc",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56e90f2a_00dc4680",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T21:20:43Z",
      "side": 1,
      "message": "Ugh, we make so many requests to render CS2.\n\nI think this is fine, you\u0027re right we shouldn\u0027t have to run diff-tree 3x if we\u0027re discarding the results twice.\n\nHowever, I dislike returning Response\u003c?\u003e with two completely different possibilities. Can we put the file info list in the ChangeEditInfo, and just leave it null when list is false?",
      "parentUuid": "f643e3df_bd41df21",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a7ab22_8b4d0d87",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T12:12:54Z",
      "side": 1,
      "message": "The reason we are doing this that way is to have non-intrusive integration in CS2 [1]. Here where it is called:\n\n  private void loadDiff(final RevisionInfo base, final RevisionInfo rev,\n      final Timestamp myLastReply, CallbackGroup group) {\n    final List\u003cNativeMap\u003cJsArray\u003cCommentInfo\u003e\u003e\u003e comments \u003d loadComments(rev, group);\n    final List\u003cNativeMap\u003cJsArray\u003cCommentInfo\u003e\u003e\u003e drafts \u003d loadDrafts(rev, group);\n    DiffApi.list(changeId.get(),\n      base !\u003d null ? base.name() : null,\n      rev,\n      group.add(new AsyncCallback\u003cNativeMap\u003cFileInfo\u003e\u003e() {\n        @Override\n        public void onSuccess(NativeMap\u003cFileInfo\u003e m) {\n          files.setRevisions(\n              base !\u003d null ? new PatchSet.Id(changeId, base._number()) : null,\n              new PatchSet.Id(changeId, rev._number()));\n          files.setValue(m, myLastReply, comments.get(0), drafts.get(0));\n        }\n\n        @Override\n        public void onFailure(Throwable caught) {\n        }\n      }));\n\nAnd only thing is changed compared to standard DiffApi.list() called for regular revisions is the endpoint construction and *not* result consumption [2]:\n\n  public static void list(int id, String base, RevisionInfo info,\n      AsyncCallback\u003cNativeMap\u003cFileInfo\u003e\u003e cb) {\n    RestApi api;\n    if (info.edit()) {\n      api \u003d ChangeApi.edit(id).addParameter(\"list\", true);\n    } else {\n      api \u003d ChangeApi.revision(id, info.name()).view(\"files\");\n    }\n    listCommon(base, cb, api);\n  }\n\nSo we can do that non-intrusive integration of edits in existed screen code when the return types are the same. Otherwise we would open completely different code paths for edit and unnecessary complicate the code and  make maintenance more cumbersome , i wanted to prevent this happens.\n\nI have another suggestion, what about to decouple listing of edit from getting edit detail, like we do with publish and rebase? And introduce new endpoint:\n\n* GET /changes/\u003cid\u003e/edit \u003d\u003e always only EditInfo or no conent when edit doesn\u0027t exist\n* GET /changes/\u003cid\u003e/edit_file \u003d\u003e always only Map\u003cString, FileInfo\u003e\n\nWhat do you think?\n\n* [1] https://gerrit-review.googlesource.com/53170/41/\n* gerrit-gwtui/src/main/java/com/google/gerrit/client/change/ChangeScreen2.java\n* [2] https://gerrit-review.googlesource.com/#/c/53170/41/\n* gerrit-gwtui/src/main/java/com/google/gerrit/client/diff/DiffApi.java",
      "parentUuid": "56e90f2a_00dc4680",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6124b0c_13e30c3c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-15T16:41:37Z",
      "side": 1,
      "message": "I agree it would be nice to share client code and not have a completely different code path for dealing with edits. The existing code depends on NativeMap\u003cFileInfo\u003e\n\nWhat I\u0027m suggesting is making the Map\u003cString, FileInfo\u003e an optional field in ChangeEditInfo rather than returning it as the top-level response. Then the only difference for edits vs. regular revisions is where the NativeMap\u003cFileInfo\u003e comes from; once you\u0027ve extracted it, you can use the same code.\n\nI guess maybe this is a little intrusive if all you have already is a bunch of AsyncCallback\u003cNativeMap\u003cFileInfos\u003e\u003e. But I don\u0027t think it\u0027ll be that bad.",
      "parentUuid": "b6a7ab22_8b4d0d87",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ca37de_66372ef8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T16:48:46Z",
      "side": 1,
      "message": "I\u0027ve perfectly understood your suggestion from previous comment to include FileInfo map in EditInfo. That would be a substantial invasion in client code, as it uses CallbackGroup and callbacks and i would need to change that. Certainly not something we cannot do. I wanted to avoid this. But if you insisit and GET /changes/\u003cid\u003e/edit_files is a bad idea i will do that.",
      "parentUuid": "b6124b0c_13e30c3c",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6124b0c_73f080ff",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-15T16:54:06Z",
      "side": 1,
      "message": "\"Type A if you pass a flag or type B otherwise\" does not fit with the Java type system, doesn\u0027t really fit with the Javascript type system, and I think we should not build it into our public REST APIs. (I don\u0027t think this is already widespread in our APIs; the only place I can think of off the top of my head where we do it is in QueryChanges, and you can guess I\u0027m not a big fan of that either.)\n\nWe can discuss further the choice between:\n\n* Nested Map\u003cString, FileInfo\u003e in ChangeEditInfo\n* Separate endpoint returning ChangeEditInfo\n\nI don\u0027t feel too strongly, especially since we already have multiple endpoints about an edit.\n\nThe one question I have is: is there any single UI operation that needs to get _both_ information about the edit (ChangeEditInfo) _and_ the list of files in the edit (Map\u003cString, FileInfo\u003e)? If so, then there is a definite advantage to combining those in the response to a single request.",
      "parentUuid": "16ca37de_66372ef8",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a7ab22_4b91658d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T17:22:05Z",
      "side": 1,
      "message": "| We can discuss further the choice between:\n\n* Nested Map\u003cString, FileInfo\u003e in ChangeEditInfo\n* Separate endpoint returning ChangeEditInfo\n\nI think you meant in later case:\n\n* Separate endpoint returning Map\u003cString, FileInfo\u003e\n\ndon\u0027t you?\n\n| The one question I have is: is there any single UI operation that needs to get _both_ information about the edit (ChangeEditInfo) _and_ the list of files in the edit (Map\u003cString, FileInfo\u003e)? If so, then there is a definite advantage to combining those in the response to a single request.\n\nYes this is only one single request, where it is needed: file list on change screen 2. But i am not sure, if those requests (details of change edit and file list of change edit) are not loaded in parallel, in which case it would even make more sense to separate those requests, because later GET change detail request loads also UiActions, FetchInfoMap and what not. But i will look into it later.",
      "parentUuid": "b6124b0c_73f080ff",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d646df41_acd64362",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T21:16:30Z",
      "side": 1,
      "message": "| Nested Map\u003cString, FileInfo\u003e in ChangeEditInfo\n\nDone.",
      "parentUuid": "b6124b0c_73f080ff",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d31d115e_342d90b3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-18T14:34:07Z",
      "side": 1,
      "message": "\u003e But i am not sure, if those requests (details of change edit and file list of change edit) are not loaded in parallel\n\nParallel operations for loading different parts of the UI that touch different things in the backend make sense (at least that\u0027s what we assume in CS2).\n\nBut not everything that _can_ be parallel _should_. If two pieces of data are needed to render some concrete part of the UI, and they touch similar things in the backend (as is the case here), the overhead of opening the resource twice on the server is counterproductive. This is why we have ListChangesOption instead of making a separate parallel request for each piece of information about a change.\n\nI\u0027m not claiming we\u0027ve made the _right_ decisions about parallelization everywhere in CS2. Just that \"it is possible to parallelize and therefore we should\" is not the only consideration.",
      "parentUuid": "b6a7ab22_4b91658d",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73ec657a_a166feef",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 237,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-18T18:59:55Z",
      "side": 1,
      "message": "Absolutely agreed. And i was wrong. This part of the UI: GET actually revision to render and now get change edit if it exists for this change are done first.  All other requests are executred after those two. That why this was absolutely correct to nest files info map inside EditInfo, when --list optin was passed.  Next time i will take a deeper look first, before resisting to address comments... ;)",
      "parentUuid": "d31d115e_342d90b3",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_02297a72",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 13
      },
      "lineNbr": 273,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:40:45Z",
      "side": 1,
      "message": "400 when base is passed but list isn\u0027t.",
      "revId": "6f98f59dfe91b06f156ba041456071a120d5c89c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}