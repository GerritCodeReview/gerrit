{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6e382b6c_4ac1cd81",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-12-22T08:54:46Z",
      "side": 1,
      "message": "We don\u0027t support inter-plugin dependency. If it currently works, then it works by accident.\n\nThe problem with inter-plugin dependency - besides complexity - is the diamond dependency problem.\n\nI explored inter-plugin dependency in the past and the conclusion was, that with the current plugin implementation in Guice, there is no good way of supporting it. We briefly considered using more established frameworks, but it wasn\u0027t worth the investment / additional complexity.",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cac74ce_f5aa06f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2020-12-22T10:32:05Z",
      "side": 1,
      "message": "can you kindly help me understand the diamond dependency problem with plugins...\n\n   A                  A\n /   \\              /   \\\nB     C            B     C\n \\   /             |     |\n   D               D     D1\n\nLets suppose, plugin A depends on B and C, plugin B and C depend on D. When a new version of D is release as D1 (lets say D1 has API interface changes which are being used by B and C). Lets say plugin B and C are already deployed onto server and plugin D1 is now deployed onto server in the place of D. So now plugin A, B and C will break as they are not compatible with D1. Is this use-case correct..?\n\nI think we don\u0027t support to deploy newer version of a particular plugin.., rather A1, B1, C1 (which adapts to D1 API changes) and war w1 also needs to be deployed onto the server along with D1..?",
      "parentUuid": "6e382b6c_4ac1cd81",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d87629f3_fd05a914",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-12-22T10:51:33Z",
      "side": 1,
      "message": "Yes, that use case illustrates the problem.\n\n\u003e I think we don\u0027t support to deploy newer version of a particular plugin\n\nI think there is no guarantee that there exists a version of plugin D that is compatible with all plugins that depend on it.\n\nAsking differently, what is your use case for this? Maybe there\u0027s an easier way to serve that.",
      "parentUuid": "1cac74ce_f5aa06f0",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cd2ee82_d2865413",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2020-12-22T11:20:21Z",
      "side": 1,
      "message": "Use-case: Plugin A provides a dynamic option (lets say --sample) for QueryChanges ssh/http request. Plugin A has custom code specific to org, --sample option uses the org specific logic and wants to invoke a generic plugin logic residing on Plugin B. \n\nThis is the use-case we are trying to address..",
      "parentUuid": "d87629f3_fd05a914",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a55cd161_8f644ae0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-12-23T08:46:12Z",
      "side": 1,
      "message": "And plugin A is open-source? Because otherwise you could just mold the two plugins together into one.\n\nCould you solve this at compile time instead of at runtime? For example, provide the functionality of --sample in a Java library that each plugin that needs it can compile in.",
      "parentUuid": "1cd2ee82_d2865413",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18ed2cf9_f39cf47d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-12-23T15:03:26Z",
      "side": 1,
      "message": "\u003e We don\u0027t support inter-plugin dependency. If it currently works, then it works by accident.\n\nI\u0027m not sure what you specifically mean by this, but several upstream features were introduced to support several inter plugin dependency approaches already.\n\nOne example of inter plugin dependencies might be a plugin designed to access the switches of another plugin on a core command. too support this better we added the @RequiresOptions() https://gerrit-review.googlesource.com/Documentation/dev-plugins.html#_calling_command_options annotation I help ensure that another plugin is installed before exposing functionality which may depend on it.\n\nWe specifically created a class loader which combines the class loader of two different plugins to support a plugin being able to add switches to another plugins command. See here for a bit more in this https://gerrit-review.googlesource.com/Documentation/dev-plugins.html#_calling_command_options\n\n\n\u003e The problem with inter-plugin dependency - besides complexity - is the diamond dependency problem.\n\nI don\u0027t think this applies to the current proposal, perhaps you could give a specific example if you think it does?",
      "parentUuid": "a55cd161_8f644ae0",
      "range": {
        "startLine": 12,
        "startChar": 15,
        "endLine": 13,
        "endChar": 48
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f54ed35b_6121eb76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1096442
      },
      "writtenOn": "2020-12-22T08:45:37Z",
      "side": 1,
      "message": "Hi Patrick, can you kindly review this change.., Martin and Nasser are out of office till 3rd Jan.",
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bd45184_e7ae6752",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-12-22T08:54:46Z",
      "side": 1,
      "message": "\u003e This feature is helpful in exposing an API from one\nplugin and consuming that API from other plugin.\n\nWe ",
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "877e3974_474273a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-12-23T08:46:12Z",
      "side": 1,
      "message": "Adding Han-Wen for a second opinion",
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b65a6b29_bfddc64b",
        "filename": "java/com/google/gerrit/acceptance/AbstractDynamicOptionsTest.java",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2020-12-23T18:18:08Z",
      "side": 1,
      "message": "With reflection you can do anything. \n\nWhat does \u0027formally supported\u0027 mean in this context?",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "7082976096e3d6abf6356d110d9c0b08b2b72385",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}