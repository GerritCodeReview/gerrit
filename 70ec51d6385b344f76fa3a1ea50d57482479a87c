{
  "comments": [
    {
      "key": {
        "uuid": "862a8d77_669f61d6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-11-21T05:37:43Z",
      "side": 1,
      "message": "Have you intentionally committed this and the following change with a different email address?",
      "range": {
        "startLine": 4,
        "startChar": 24,
        "endLine": 4,
        "endChar": 46
      },
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8638eb6_2f8b73b5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-11-21T16:40:07Z",
      "side": 1,
      "message": "Yes, I specifically use a different eddress when working at Hackathons.",
      "parentUuid": "862a8d77_669f61d6",
      "range": {
        "startLine": 4,
        "startChar": 24,
        "endLine": 4,
        "endChar": 46
      },
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f8a0aff_742026a1",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 4
      },
      "lineNbr": 502,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-12-05T14:02:51Z",
      "side": 1,
      "message": "How would a listener delay task execution? By putting the calling thread to sleep?",
      "range": {
        "startLine": 501,
        "startChar": 0,
        "endLine": 502,
        "endChar": 54
      },
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "647e30ba_ea65c9f4",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 4
      },
      "lineNbr": 682,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-12-05T14:02:51Z",
      "side": 1,
      "message": "Answering my question from my comment in the dev-plugins.txt, this looks like the listener\nhas to put the thread to sleep if it wants to delay the task? This can potentially waste\nthe threads I think.\n\nExample assume we have one thread free and two tasks in the queue: lightweight-task and heavyweight-task. The heavyweight-task is run first and the listener decides that due to\nthe currently high load the heavyweight-task needs to be delayed. The thread sleeps.\nHowever, this thread could have been used to run the lightweight-task instead of putting\nit to sleep.\n\nMaybe, instead of using just a listener here we need something with richer semantics.\nSomething that gives or rejects a permission for the task to be run, like a semaphore?\nOf course, this would require a more intrusive change here as we would need to consider\nthe return value from the listener.",
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a858e65_25580d4d",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 4
      },
      "lineNbr": 682,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-12-05T17:35:28Z",
      "side": 1,
      "message": "This generic listener approach allows for traditional listeners things with pre/post task work, such as logging, to be done from plugins, and it allows for plugins to enforce quotas (limits on what can run) by as you say \"wasting a thread\", likely by sleeping on a semaphore. I could not come up with other ways to limit things in ways that would do what you suggested with light and heavy weight tasks in a way that I thought did not have problems. For example, if you let the lightweight task run, on a busy server how do you prevent blocking the heavyweight task indefinitely? By letting other tasks run you are never reserving the space for the heavyweight task to ever run. By blocking all tasks for the heavyweight one, it guarantees that the heavy weight task will get an opportunity to run as other already running tasks complete. This effectively preserves ordering and is \"fair\".\n\nI agree that there might be additional ways that we can modify core to allow for different types of QOS approaches, I have not come up with them, and I think this listener approach would likely be useful even if we add other approaches.",
      "parentUuid": "647e30ba_ea65c9f4",
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41d4c811_ab6bf8e0",
        "filename": "java/com/google/gerrit/server/git/WorkQueue.java",
        "patchSetId": 4
      },
      "lineNbr": 682,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-12-09T09:47:20Z",
      "side": 1,
      "message": "The ProjectQoSFilter uses Jetty\u0027s continuations as a mean to park an http request without\nactually parking the thread. In the servlet 3.0 spec this concept is called asynchronous request processing [1]. It can be worth exploring if we could use the same concept here.\n\nTheoretically, you are correct with your concerns about the \"fair\" processing.\nIn practice we actually see and fight the opposite: heavyweight tasks blocking or\nimpacting too much the lightweight tasks. If a cluster of Jenkins servers all start\ncloning/fetching a large repository at the same time, we could put a significant\nnumber of threads to sleep (wait on semaphore) for significant amount of time (minutes).\nThis is likely to impact the responsiveness of the server for lightweight requests too much.\n\nI am not against the listener concept which you propose here. If neither you nor me have\ntime to explore other possibilities, we can proceed with the listener concept as a\nfirst step towards concurrency limits.\n\n\n[1] https://docs.oracle.com/javaee/7/tutorial/servlets012.htm",
      "parentUuid": "4a858e65_25580d4d",
      "revId": "70ec51d6385b344f76fa3a1ea50d57482479a87c",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}