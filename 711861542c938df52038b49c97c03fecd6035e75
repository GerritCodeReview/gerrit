{
  "comments": [
    {
      "key": {
        "uuid": "eb65efd8_10603b6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Unrelated to this change but related to the topic:\n\nWe could completely omit advertising of refs/changes/* on receive-pack and thus\nimprove push-for-review performance for projects with huge number of changes significantly.\nRight? Looks like even lower hanging fruit?",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2704d83_8075d057",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "We already do that, see ReceiveCommitsAdvertiseRefsHook.",
      "parentUuid": "eb65efd8_10603b6a",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d51a337_71124cf5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T20:02:45Z",
      "side": 1,
      "message": "True. Thanks for pointing this out :-)",
      "parentUuid": "a2704d83_8075d057",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae49f65_29b517f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "AFAIK, JGit respects current user\u0027s global Git config.\nThis way one could define uploadpack.hideRefs in the $HOME/.gitconfig, where $HOME is the home folder of the user running\nGerrit process. However, this solution looks messy.\n\nWe could also implement support for a global Git config in the $SITE/etc/gitconfig.\n\nHowever, I believe that the behavior of not advertising Gerrit refs should be part of the Gerrit code and not depend on Gerrit admins to properly configure it.",
      "range": {
        "startLine": 17,
        "startChar": 55,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02992c79_35bb85c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "\u003e AFAIK, JGit respects current user\u0027s global Git config. \n\nGood point, I hadn\u0027t thought about user/global configs. That may address the issue of configuring multiple repos at once, but doesn\u0027t future-proof it as the definition of Gerrit refs changes over time.\n\n\u003e We could also implement support for a global Git config in the $SITE/etc/gitconfig.\n\nI think this would probably be a nice idea for other reasons unrelated to this change :)",
      "parentUuid": "1ae49f65_29b517f1",
      "range": {
        "startLine": 17,
        "startChar": 55,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "639a11f4_53302eda",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "You mean also in the stream-events JSON? Hopefully all Jenkins plugins which talk to Gerrit honor that data. There may be cases where some Jenkins plugin builds a change ref out of the (numeric) change-id, but this is just guessing. If this assumption is correct, a less disrupting change would be to keep advertising change-refs but only a (small) subset of them: all open changes and closed changes which are younger than some (configurable) age.",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fee2cc1_40f18fdd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "\u003e You mean also in the stream-events JSON?\n\nSure, it should be any place we use the DynamicSet\u003cDownloadCommand\u003e. I think I haven\u0027t yet scrubbed all of them.\n\n\u003e There may be cases where some Jenkins plugin builds a change ref out of the (numeric) change-id, but this is just guessing.\n\nI know for a fact we have some clients that do this based on just the change + PS number.\n\n\u003e If this assumption is correct, a less disrupting change would be to keep advertising change-refs but only a (small) subset of them: all open changes and closed changes which are younger than some (configurable) age.\n\nInteresting idea. Our large repos have 1% or so of changes open, so this could still be a win. It would mean changing the implementation of SearchingChangeCacheImpl, but that is only used by VisibleRefFilter so it wouldn\u0027t break any other code in Gerrit.\n\nThis still leaves some open issues.\n\n* What do we do with the download commands? Do we still give a ref name, even though it might not be valid? Or do we try to guess whether the ref would be advertised, and give a SHA-1 if not?\n* We still need to implement the subtle want-checking logic from this change, because some refs will still be hidden.",
      "parentUuid": "639a11f4_53302eda",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202d584c_91d14d55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T20:02:45Z",
      "side": 1,
      "message": "\u003e This still leaves some open issues.\n\u003e \n\u003e * What do we do with the download commands? Do we still give a ref name, even though it might not be valid? Or do we try to guess whether the ref would be advertised, and give a SHA-1 if not?\n\nI would prefer the latter. The download commands plugin should just apply the same criteria\nas upload-pack: if it is open or closed and younger than some age then provide change ref otherwise SHA-1. Those clients who can only handle change refs are much less likely to\nget disrupted with this approach as, most of the time, they are dealing with open and\nrecently closed changes.\n\n\u003e * We still need to implement the subtle want-checking logic from this change, because some refs will still be hidden.\n\nTrue. This change will not get simpler.",
      "parentUuid": "8fee2cc1_40f18fdd",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9058f32_cbc1569e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-10-16T20:41:01Z",
      "side": 1,
      "message": "For download commands: would it work to do something like\n\n git -c http.extraHeader\u003d\u0027X-Gerrit-Ref: refs/changes/34/1234/1\u0027 fetch origin c98af21c4bc4478bdc36f246099f7c37b13389df\n\n? That way, the server gets a clue about which ref the client is trying to fetch.",
      "parentUuid": "202d584c_91d14d55",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a13abd8_1d591e52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T20:44:08Z",
      "side": 1,
      "message": "\u003e git -c http.extraHeader\u003d\u0027X-Gerrit-Ref:\n\nCould work. Is there an ssh equivalent?",
      "parentUuid": "a9058f32_cbc1569e",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdd759b8_4acd8f0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-10-16T20:45:50Z",
      "side": 1,
      "message": "There\u0027s no ssh equivalent, but it\u0027s just an optimization *shrug*.\n\nI like the idea of something like ssh.extraEnvVar. No one had thought of the need for that before.",
      "parentUuid": "2a13abd8_1d591e52",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcde56ed_6b4a49ba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-10-17T07:59:25Z",
      "side": 1,
      "message": "+1 for special treatment of opened changes. There could be a special strategy for that: ALL, OMIT_GERRIT, OMIT_GERRIT_EXCEPT_OPEN_CHANGES.\n\nI don\u0027t see a use case for advertising closed changes based on age.",
      "parentUuid": "639a11f4_53302eda",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42992264_de5cc135",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-10-17T07:59:25Z",
      "side": 1,
      "message": "\u003e \u003e This still leaves some open issues.\n \u003e \u003e\n \u003e \u003e * What do we do with the download commands? Do we still give a\n \u003e ref name, even though it might not be valid? Or do we try to guess\n \u003e whether the ref would be advertised, and give a SHA-1 if not?\n \u003e \n \u003e I would prefer the latter. The download commands plugin should just\n \u003e apply the same criteria\n \u003e as upload-pack: if it is open or closed and younger than some age\n \u003e then provide change ref otherwise SHA-1. Those clients who can only\n \u003e handle change refs are much less likely to\n \u003e get disrupted with this approach as, most of the time, they are\n \u003e dealing with open and\n \u003e recently closed changes.\n\n+1. In ideal world, when all this is implemented, and a site admin activates OMIT_GERRIT_EXCEPT_OPEN_CHANGES advertising strategy (and new version of download-command plugin is deployed) gerrit users wouldn\u0027t notice any change for opened changes.",
      "parentUuid": "202d584c_91d14d55",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4c31fe_31fcc46d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-17T13:33:40Z",
      "side": 1,
      "message": "\u003e +1 for special treatment of opened changes. There could be a special strategy for that: ALL, OMIT_GERRIT, OMIT_GERRIT_EXCEPT_OPEN_CHANGES.\n\u003e \n\u003e I don\u0027t see a use case for advertising closed changes based on age.\n\nA use-case I had in mind was: between the time an open change ref is streamed\nand a client tries to fetch it, it may become closed. When the client tries\nfetching it the fetch will fail and this will at least be annoying and generate\nsome support questions.\nIf we support fetching young closed changes via change refs we can avoid this kind\nof issues.",
      "parentUuid": "dcde56ed_6b4a49ba",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce443d03_b6bf30d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "sounds like a good way to handle those Jenkins servers not (yet) able to use path-set SHA1",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 65
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12c3dc19_e48af969",
        "filename": "Documentation/config-gerrit.txt",
        "patchSetId": 1
      },
      "lineNbr": 4580,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-10-17T14:42:24Z",
      "side": 1,
      "message": "I would exclude refs/users/ from this list. Users should be able to fetch and update their own user branch. Since user branches only exist in the All-Users repository including them in the ref advertisement shouldn\u0027t harm performance in general.",
      "range": {
        "startLine": 4580,
        "startChar": 0,
        "endLine": 4580,
        "endChar": 16
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c303875_01c8eefd",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-10-17T14:42:24Z",
      "side": 1,
      "message": "remove this",
      "range": {
        "startLine": 55,
        "startChar": 40,
        "endLine": 55,
        "endChar": 49
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43211703_52aeea21",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-10-17T07:59:25Z",
      "side": 1,
      "message": "You meant \"skip\" here? Repeating \"omit\" twice doesn\u0027t make any sense in this statement.",
      "range": {
        "startLine": 62,
        "startChar": 62,
        "endLine": 62,
        "endChar": 66
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7c82205_63f415ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Why not:\n\n  if (!strategy.omitGerritRefs()) {\n    return;\n  }",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f8687f2_3557ad17",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "This enum already has omitChangeRefs field which can be used here instead of the switch statement?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 123,
        "endChar": 20
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df89de1b_50ee378b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "add \"strategy\" to the exception text",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30c741ec_aa697613",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-10-17T07:59:25Z",
      "side": 1,
      "message": "The",
      "range": {
        "startLine": 157,
        "startChar": 38,
        "endLine": 157,
        "endChar": 39
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60956060_53f22483",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "omitGerritRefs?",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 38
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f094ad9a_7f1cf587",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "this is unused?",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b035f2e_9dcb75f9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Gerrit",
      "range": {
        "startLine": 41,
        "startChar": 21,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}