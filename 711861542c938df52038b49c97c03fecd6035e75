{
  "comments": [
    {
      "key": {
        "uuid": "eb65efd8_10603b6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Unrelated to this change but related to the topic:\n\nWe could completely omit advertising of refs/changes/* on receive-pack and thus\nimprove push-for-review performance for projects with huge number of changes significantly.\nRight? Looks like even lower hanging fruit?",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2704d83_8075d057",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "We already do that, see ReceiveCommitsAdvertiseRefsHook.",
      "parentUuid": "eb65efd8_10603b6a",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d51a337_71124cf5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T20:02:45Z",
      "side": 1,
      "message": "True. Thanks for pointing this out :-)",
      "parentUuid": "a2704d83_8075d057",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae49f65_29b517f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "AFAIK, JGit respects current user\u0027s global Git config.\nThis way one could define uploadpack.hideRefs in the $HOME/.gitconfig, where $HOME is the home folder of the user running\nGerrit process. However, this solution looks messy.\n\nWe could also implement support for a global Git config in the $SITE/etc/gitconfig.\n\nHowever, I believe that the behavior of not advertising Gerrit refs should be part of the Gerrit code and not depend on Gerrit admins to properly configure it.",
      "range": {
        "startLine": 17,
        "startChar": 55,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02992c79_35bb85c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "\u003e AFAIK, JGit respects current user\u0027s global Git config. \n\nGood point, I hadn\u0027t thought about user/global configs. That may address the issue of configuring multiple repos at once, but doesn\u0027t future-proof it as the definition of Gerrit refs changes over time.\n\n\u003e We could also implement support for a global Git config in the $SITE/etc/gitconfig.\n\nI think this would probably be a nice idea for other reasons unrelated to this change :)",
      "parentUuid": "1ae49f65_29b517f1",
      "range": {
        "startLine": 17,
        "startChar": 55,
        "endLine": 20,
        "endChar": 21
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "639a11f4_53302eda",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "You mean also in the stream-events JSON? Hopefully all Jenkins plugins which talk to Gerrit honor that data. There may be cases where some Jenkins plugin builds a change ref out of the (numeric) change-id, but this is just guessing. If this assumption is correct, a less disrupting change would be to keep advertising change-refs but only a (small) subset of them: all open changes and closed changes which are younger than some (configurable) age.",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fee2cc1_40f18fdd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T18:45:20Z",
      "side": 1,
      "message": "\u003e You mean also in the stream-events JSON?\n\nSure, it should be any place we use the DynamicSet\u003cDownloadCommand\u003e. I think I haven\u0027t yet scrubbed all of them.\n\n\u003e There may be cases where some Jenkins plugin builds a change ref out of the (numeric) change-id, but this is just guessing.\n\nI know for a fact we have some clients that do this based on just the change + PS number.\n\n\u003e If this assumption is correct, a less disrupting change would be to keep advertising change-refs but only a (small) subset of them: all open changes and closed changes which are younger than some (configurable) age.\n\nInteresting idea. Our large repos have 1% or so of changes open, so this could still be a win. It would mean changing the implementation of SearchingChangeCacheImpl, but that is only used by VisibleRefFilter so it wouldn\u0027t break any other code in Gerrit.\n\nThis still leaves some open issues.\n\n* What do we do with the download commands? Do we still give a ref name, even though it might not be valid? Or do we try to guess whether the ref would be advertised, and give a SHA-1 if not?\n* We still need to implement the subtle want-checking logic from this change, because some refs will still be hidden.",
      "parentUuid": "639a11f4_53302eda",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202d584c_91d14d55",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T20:02:45Z",
      "side": 1,
      "message": "\u003e This still leaves some open issues.\n\u003e \n\u003e * What do we do with the download commands? Do we still give a ref name, even though it might not be valid? Or do we try to guess whether the ref would be advertised, and give a SHA-1 if not?\n\nI would prefer the latter. The download commands plugin should just apply the same criteria\nas upload-pack: if it is open or closed and younger than some age then provide change ref otherwise SHA-1. Those clients who can only handle change refs are much less likely to\nget disrupted with this approach as, most of the time, they are dealing with open and\nrecently closed changes.\n\n\u003e * We still need to implement the subtle want-checking logic from this change, because some refs will still be hidden.\n\nTrue. This change will not get simpler.",
      "parentUuid": "8fee2cc1_40f18fdd",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9058f32_cbc1569e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2017-10-16T20:41:01Z",
      "side": 1,
      "message": "For download commands: would it work to do something like\n\n git -c http.extraHeader\u003d\u0027X-Gerrit-Ref: refs/changes/34/1234/1\u0027 fetch origin c98af21c4bc4478bdc36f246099f7c37b13389df\n\n? That way, the server gets a clue about which ref the client is trying to fetch.",
      "parentUuid": "202d584c_91d14d55",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a13abd8_1d591e52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-10-16T20:44:08Z",
      "side": 1,
      "message": "\u003e git -c http.extraHeader\u003d\u0027X-Gerrit-Ref:\n\nCould work. Is there an ssh equivalent?",
      "parentUuid": "a9058f32_cbc1569e",
      "range": {
        "startLine": 24,
        "startChar": 24,
        "endLine": 26,
        "endChar": 26
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce443d03_b6bf30d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "sounds like a good way to handle those Jenkins servers not (yet) able to use path-set SHA1",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 65
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7c82205_63f415ba",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Why not:\n\n  if (!strategy.omitGerritRefs()) {\n    return;\n  }",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f8687f2_3557ad17",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "This enum already has omitChangeRefs field which can be used here instead of the switch statement?",
      "range": {
        "startLine": 119,
        "startChar": 0,
        "endLine": 123,
        "endChar": 20
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df89de1b_50ee378b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/OmitGerritRefsHook.java",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "add \"strategy\" to the exception text",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60956060_53f22483",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "omitGerritRefs?",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 38
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f094ad9a_7f1cf587",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "this is unused?",
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b035f2e_9dcb75f9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/RefAdvertisementStrategy.java",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-10-16T12:16:18Z",
      "side": 1,
      "message": "Gerrit",
      "range": {
        "startLine": 41,
        "startChar": 21,
        "endLine": 41,
        "endChar": 27
      },
      "revId": "711861542c938df52038b49c97c03fecd6035e75",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}