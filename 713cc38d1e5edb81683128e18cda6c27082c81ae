{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1557286742 -0700\nnonce AC6AUtNkxEZ7aLJ9d+0lk/4KzuUfhoa3HO2uJ8VwbRSsf0NEd3REqP8up4b8Gqn77p4aSZ4jKS76\n\n0000000000000000000000000000000000000000 713cc38d1e5edb81683128e18cda6c27082c81ae refs/for/master%r\u003daliceks,wip\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlzST1YVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMihQQAKAjvg2Lorv8xA0andWuW8k2iAwY\nxwKWcQBc/I38YY3l3EHfPYYLdnAcNRIeoK7Vn2he3bO2vxtmD2PV9QiN4P4tesuY\nXmlJHDGK52CvcM/JRRSokXg6CnoaLWYKXReH9fJWthNUztSJWijLFuizlW7+vvax\nX7LPSjOULi/kwQDRykyf5SOLrPa1yvJPv0YFeEz3rwUZKl2dJ2tO4E8r0/7MmDDT\n8nJK3NOI1rEDvgVDxQDbMgWm+gAiUYFbp9J8RhvCIDVbuYSveOp3KgZgMgTVE9Wo\nuKGYZ343310kN/RgEaMOgFNVwOtphlaaBqm+w8qtOGm3hs2Ouh3rwP8+x5on22tS\nvnd1ZbwxR+QOAYbFtcQo0cqPOT52faGhbS/m2iNqtdONob7Jdprwm96pvTj37evF\nrXc1px12D69N9+y+Z0h1jxwxHn6PK5KPhJRzk5Lbzi0YleuahPQKVpy7IcsVE1TH\n/Pek8S7uZyuLNpUYoaAwKBZ65Q6F9AFAzIGm44NXgcPhxzqSGq6T/HPks2q7x0sc\n4pS/bq09LfaMmy1ar5v2chHJGYoKx/fMl0A0T+nVw+uFhYiIGXNzrpFjCnvk8bBC\n9uXR0LYg3No6RuvHCD0Z9pAuIP70yq/JaFCF+/K8X9lmEoHgf1H4lo55X3ylHW1A\n4NSKo+Ms8ruPmZo/\n\u003d2K2B\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "a7e7a24a_4e96e1d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "That\u0027s acceptable. The very nature of the test API is a lot of boilerplate in exchange for a lot of other benefits.",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 11,
        "endChar": 17
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec3c18a3_82adcb80",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "I prefer a dedicated test API which helps to easily modify permissions in a readable, descriptive way and without user errors. Even if PermissionRule was an AutoValue, I don\u0027t think that it could fulfill those wishes. With the separate AutoValue for test permissions, we can provide a refined test API.",
      "range": {
        "startLine": 11,
        "startChar": 18,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6347348_e5583fd2",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "We should use private here (same for action()) as those values are already set be the factory method.",
      "range": {
        "startLine": 43,
        "startChar": 4,
        "endLine": 43,
        "endChar": 10
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7315b104_8e5d8e49",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "Is min/max only for labels? If so, can you think of a way to not offer it as an option for other permission changes?",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 55,
        "endChar": 30
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55534490_740308c4",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-10T22:46:48Z",
      "side": 1,
      "message": "Yes, I think we can split TestPermission into TestPermission and TestLabelPermission (and I already intended for there to be a separate TestCapability for global capabilities). They will not be related in a class hierarchy, they will just have a slightly overlapping set of methods.",
      "parentUuid": "7315b104_8e5d8e49",
      "range": {
        "startLine": 53,
        "startChar": 4,
        "endLine": 55,
        "endChar": 30
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80af6b7a_c23b65e2",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "I saw your TODO below but wasn\u0027t sure what exactly it involved. Is your plan to move all of the logic including this code to ProjectOperationsImpl and make TestPermission a parameter in TestProjectUpdate? If so, I very much like this approach. TestProjectUpdate (same as TestProjectCreation) should hardly contain any logic.\n\nBuilding further on this assumption: How would you represent the removal of a permission? Would you also use TestPermission? We might also go with another AutoValue class which just contains the essential parameters. TestPermission could extend from that class or be separate, depending on what turns out to be better.",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 111,
        "endChar": 13
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c4396c_2c4741c3",
        "filename": "java/com/google/gerrit/acceptance/testsuite/project/TestProjectUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-10T22:46:48Z",
      "side": 1,
      "message": "The TODO below was just about removing/inlining addPermission. In the context of this WIP change, addPermission is still used by some other tests, but if we decide to go with add(TestPermission), we won\u0027t need addPermission itself.\n\nYour point is well taken that we should try to minimize the logic in TestProjectUpdate. I will figure out a way to move this logic out of TestProjectUpdate into ProjectOperationsImpl.",
      "parentUuid": "80af6b7a_c23b65e2",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 111,
        "endChar": 13
      },
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2e91d84_ae5975f3",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-08T16:55:31Z",
      "side": 1,
      "message": "One minor variant would be to take a TestPermission instead of a TestPermission.Builder, which would add another .build() at the end of this change.",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7917e10c_48b841da",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "If we go for this variant, I would allow both (like protobuf does for its builders).",
      "parentUuid": "f2e91d84_ae5975f3",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da61baa4_254939b8",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-08T16:55:31Z",
      "side": 1,
      "message": "Another variant could be:\n\n projectOperations\n     .project(allUsers)\n     .forUpdate()\n     .addPermission(CREATE)\n     .ref(REFS_USERS + \"*\")\n     .group(REGISTERED_USERS)\n     .done()\n     .addPermission(CREATE)\n     ...\n\nThe upside is less nesting. The downside is nesting makes it easier to see the boundaries between permissions.",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc49484_51a72f42",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-10T19:13:50Z",
      "side": 1,
      "message": "What about something like\n\n  projectOperations\n      .project(allUsers)\n      .forUpdate()\n      .allow(CREATE)\n      .onRef(REFS_USERS + \"*\")        // Could also be on(REFS_USERS + \"*\") if you think it is descriptive enough.\n      .force(true)\n      .forGroup(REGISTERED_USERS)     // Could also be for(REGISTERED_USERS) if you think it is descriptive enough.\n      .block(PUSH)\n      ...\n\nIIUC, name, ref, and group are mandatory parameters. If so, we should enforce their specification. I would do so by making onRef() mandatory after allow()/block(). The group can be used as closing statement, which redirects to the original builder. Optional parameters go in between.\n\nBesides less nesting, one additional advantage is that users of the API are more guided while writing the code. They don\u0027t need to start a new method chain but can simply continue from start to end with the aid of code completion. On the other hand, if properly documented, users should also easily know how to start the new method chain.\n\nI don\u0027t have a strong opinion for one approach or the other. I think in both cases, we should make it easy to set all mandatory fields automatically (likely with the step builder pattern). For the not-yet-finished change test API, I have chosen the approach with the less nesting for specifying file contents. For example:\n\n  changeOperations\n        .newChange()\n        .branch(\"master\")\n        .file(\"a.txt\")\n        .content(\"Line 1\")\n        .file(\"b.txt\")\n        .content(\"This documentation ...\")\n        .owner(\"johndoe\")\n        .create();\n\nAdmittedly, it\u0027s only about one statement following a specific other one. In this case, I thought that breaking the fluent flow wasn\u0027t worth it. For permissions, I feel that this approach might easily get unreadable if multiple permission changes are chained. Do you have a guess how often this happens? If the answer is in the lines of \u0027fairly often\u0027, I think I would tend to the allow(builder) approach.",
      "parentUuid": "da61baa4_254939b8",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2f19757_a2679ee0",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-05-10T22:46:48Z",
      "side": 1,
      "message": "I haven\u0027t done any sort of objective analysis but my guess is that assigning 2 permissions happens fairly often, but less than half the time; \u003e2 is rare.\n\nThe bigger issue I see with the step-builder pattern is that AFAIK AutoValue doesn\u0027t support it at all. I agree that it can be easier to use with auto-completion and easier to force callers to provide all required fields, but I don\u0027t think it\u0027s a huge win compared to a plain AutoValue.Builder. Another thing to consider is that these TestProjectUpdates are typically invoked at the start of a test method, not hidden in some corner case. Yes, if you forget to set a required field, it\u0027s a runtime rather than a compile-time error, but your test will definitely fail fast the first time you run it.\n\nOverall, given that it doesn\u0027t work with AutoValue, IMO the downside of increasing the implementation complexity outweighs the upsides of the step-builder pattern.",
      "parentUuid": "cfc49484_51a72f42",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba15dbee_04b5d6f5",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/DeleteBranchIT.java",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2019-05-13T07:48:35Z",
      "side": 1,
      "message": "I agree. Let\u0027s stay with the approach you already started with. (Maybe we could still consider to improve some of the method names so that the overall statement reads more fluently, e.g. allow(..).onRef(..).forGroup(..), but I\u0027ll leave it up to you to decide whether that\u0027s reasonable or not.)",
      "parentUuid": "e2f19757_a2679ee0",
      "revId": "713cc38d1e5edb81683128e18cda6c27082c81ae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}