{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "97570316_5a18e681",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-04T20:07:02Z",
      "side": 1,
      "message": "Reading this issue, I wonder why we\u0027re not just removing the changes cache. Would that be a better fix? That\u0027s the only cache that\u0027s disabled by default.",
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc0c4a97_b1dfd0ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-04T23:06:06Z",
      "side": 1,
      "message": "Removing the cache a way to disable it with brute force of course, however, it would be a regression for those who are actually using that cache.\n\nFor a site with a lower rate of reviews, the incoming git traffic, the cache would make a lot of sense.\n\nThis change though is for fixing the general mechanism of disabling a cache which it was broken: the cache wasn\u0027t really disabled but just stored and removed, with all the associated locks involved in the ConcurrentHashMap.\n\nHope that clarifies the focus of the fix.",
      "parentUuid": "97570316_5a18e681",
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f4737cf_6b2b3276",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T01:04:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cc0c4a97_b1dfd0ca",
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6e0927a_8e6615fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-04T14:54:40Z",
      "side": 1,
      "message": "As this change is quite sensitive and has a global impact on Gerrit, I\u0027ll wait for another +2 from a second maintainer. Added Nasser who volunteered :-)",
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "450ce022_90bccb08",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T16:20:40Z",
      "side": 1,
      "message": "Won\u0027t this only check the default? If someone sets memoryLimit\u003d0 in the config, we\u0027d want to use the Passthrough then too, correct?",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8683de0_cfcf6d3d",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2022-11-07T10:48:51Z",
      "side": 1,
      "message": "+1\n\nFurther, why don\u0027t we introduce \"disabled\" flag:\n\n  cache.\u003cname\u003e.disabled\n\nand remove any guessing how to properly disable a cache?",
      "parentUuid": "450ce022_90bccb08",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0672501_e0ab8c82",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-07T11:31:48Z",
      "side": 1,
      "message": "Good catch: let me add a test and fixing it.",
      "parentUuid": "450ce022_90bccb08",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e12c3626_bd8223d9",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-07T12:04:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0672501_e0ab8c82",
      "range": {
        "startLine": 63,
        "startChar": 11,
        "endLine": 63,
        "endChar": 30
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28fd558a_75d5f918",
        "filename": "java/com/google/gerrit/server/cache/mem/PassthroughLoadingCache.java",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T01:04:22Z",
      "side": 1,
      "message": "Does https://guava.dev/releases/19.0-rc2/api/docs/com/google/common/cache/ForwardingLoadingCache.SimpleForwardingLoadingCache.html do the same thing as this?",
      "range": {
        "startLine": 29,
        "startChar": 13,
        "endLine": 29,
        "endChar": 36
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07dd645d_1bdace7e",
        "filename": "java/com/google/gerrit/server/cache/mem/PassthroughLoadingCache.java",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-05T01:36:23Z",
      "side": 1,
      "message": "\u003e Does https://guava.dev/releases/19.0-rc2/api/docs/com/google/common/cache/ForwardingLoadingCache.SimpleForwardingLoadingCache.html do the same thing as this?\n\nI have actually looked at that deeply before doing this fix: it implements a forwarding logic BUT to another LoadingCache ðŸ˜ž instead of a Loader.\n\nHence, it won\u0027t solve anything because a LoadingCache of size 0 is still caching and locking, whilst here we really want a passthrough without any caching or locking.",
      "parentUuid": "28fd558a_75d5f918",
      "range": {
        "startLine": 29,
        "startChar": 13,
        "endLine": 29,
        "endChar": 36
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e4c9720_7c7642b1",
        "filename": "java/com/google/gerrit/server/cache/mem/PassthroughLoadingCache.java",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T16:20:40Z",
      "side": 1,
      "message": "\u003e Hence, it won\u0027t solve anything because a LoadingCache of size 0 is still caching and locking, whilst here we really want a passthrough without any caching or locking.\n\nGot it, I missed that. Thanks. The lack of that as an option really does make me think we\u0027re doing something \"wrong\" (or at least strange/unexpected) in disabling a cache, but I think your solution will work for now and looks like an appropriate risk level for stable branches.",
      "parentUuid": "07dd645d_1bdace7e",
      "range": {
        "startLine": 29,
        "startChar": 13,
        "endLine": 29,
        "endChar": 36
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "133d8003_92beff3c",
        "filename": "java/com/google/gerrit/server/cache/mem/PassthroughLoadingCache.java",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T16:20:40Z",
      "side": 1,
      "message": "Should this be using loadAll()? [CacheLoader doc](https://guava.dev/releases/snapshot/api/docs/com/google/common/cache/CacheLoader.html#loadAll(java.lang.Iterable)) seems to say it could have that behavior but maybe only if the loader has overridden loadAll()?",
      "range": {
        "startLine": 107,
        "startChar": 35,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e709c219_4ecc2b1e",
        "filename": "java/com/google/gerrit/server/cache/mem/PassthroughLoadingCache.java",
        "patchSetId": 6
      },
      "lineNbr": 107,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-07T12:07:20Z",
      "side": 1,
      "message": "\u003e Should this be using loadAll()? [CacheLoader doc](https://guava.dev/releases/snapshot/api/docs/com/google/common/cache/CacheLoader.html#loadAll(java.lang.Iterable)) seems to say it could have that behavior but maybe only if the loader has overridden loadAll()?\n\nTrue, but I actually need both, according to what the Guava cache says:\n```\n  /**\n   * Computes or retrieves the values corresponding to {@code keys}. This method is called by {@link\n   * LoadingCache#getAll}.\n   *\n   * \u003cp\u003eIf the returned map doesn\u0027t contain all requested {@code keys} then the entries it does\n   * contain will be cached, but {@code getAll} will throw an exception. If the returned map\n   * contains extra keys not present in {@code keys} then all returned entries will be cached, but\n   * only the entries for {@code keys} will be returned from {@code getAll}.\n   *\n   * \u003cp\u003eThis method should be overridden when bulk retrieval is significantly more efficient than\n   * many individual lookups. Note that {@link LoadingCache#getAll} will defer to individual calls\n   * to {@link LoadingCache#get} if this method is not overridden.\n   *\n   * @param keys the unique, non-null keys whose values should be loaded\n   * @return a map from each key in {@code keys} to the value associated with that key; \u003cb\u003emay not\n   *     contain null values\u003c/b\u003e\n   * @throws Exception if unable to load the result\n   * @throws InterruptedException if this method is interrupted. {@code InterruptedException} is\n   *     treated like any other {@code Exception} in all respects except that, when it is caught,\n   *     the thread\u0027s interrupt status is set\n   * @since 11.0\n   */\n  public Map\u003cK, V\u003e loadAll(Iterable\u003c? extends K\u003e keys) throws Exception {\n    // This will be caught by getAll(), causing it to fall back to multiple calls to\n    // LoadingCache.get\n    throw new UnsupportedLoadingOperationException();\n  }\n```",
      "parentUuid": "133d8003_92beff3c",
      "range": {
        "startLine": 107,
        "startChar": 35,
        "endLine": 107,
        "endChar": 39
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29805310_24cc94c7",
        "filename": "javatests/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactoryTest.java",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-11-05T16:20:40Z",
      "side": 1,
      "message": "For my other comment, I think we need a test that disables a cache via config.",
      "range": {
        "startLine": 50,
        "startChar": 55,
        "endLine": 50,
        "endChar": 67
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59f09400_c249a65f",
        "filename": "javatests/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactoryTest.java",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-07T11:31:48Z",
      "side": 1,
      "message": "Yes, we need a new test covering that.",
      "parentUuid": "29805310_24cc94c7",
      "range": {
        "startLine": 50,
        "startChar": 55,
        "endLine": 50,
        "endChar": 67
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0be62920_31ad8f29",
        "filename": "javatests/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactoryTest.java",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-11-07T12:03:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59f09400_c249a65f",
      "range": {
        "startLine": 50,
        "startChar": 55,
        "endLine": 50,
        "endChar": 67
      },
      "revId": "71f82f88b22e4fb762963f0249ef749ec88ec8d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}