{
  "comments": [
    {
      "key": {
        "uuid": "307ae4aa_1475d4bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-01T13:44:28Z",
      "side": 1,
      "message": "This part of the commit message is not correct any more.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_53a36492",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-02T07:44:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "307ae4aa_1475d4bd",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 22
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_b485002d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-01T13:52:50Z",
      "side": 1,
      "message": "Nit: extra blank.",
      "range": {
        "startLine": 294,
        "startChar": 22,
        "endLine": 294,
        "endChar": 23
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_f43e18b0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 3
      },
      "lineNbr": 294,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-02T07:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "307ae4aa_b485002d",
      "range": {
        "startLine": 294,
        "startChar": 22,
        "endLine": 294,
        "endChar": 23
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_d393f462",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 320,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-01T15:17:30Z",
      "side": 1,
      "message": "I don\u0027t see a reason to return an Iterable here instead of the more specific return type Set. The result is very small and a lazy evaluation is not necessary (which could justify returning an Iterable).\n\nReturning Iterable instead of a more specific type unnecessarily limits what the caller can do with the return result.",
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_b385182d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-01T13:52:50Z",
      "side": 1,
      "message": "Unneeded, just inline tree().",
      "range": {
        "startLine": 323,
        "startChar": 4,
        "endLine": 323,
        "endChar": 31
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_f3ecf0cf",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-02T07:43:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1077a0c2_b385182d",
      "range": {
        "startLine": 323,
        "startChar": 4,
        "endLine": 323,
        "endChar": 31
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_5352842d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-01T13:52:50Z",
      "side": 1,
      "message": "Why not to use transform pattern instead?\n\n  return Lists.transform(tree(), new Function\u003cProjectState, AccountGroup.UUID\u003e() {\n      @Override\n      public String apply(ProjectState p) {\n        return p.localOwners;\n      }});",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_3451f024",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-01T14:11:22Z",
      "side": 1,
      "message": "It may be more elegant but, in this case, I find it harder to read than the for loop. And it is 5 lines of code... compared with 3 lines (when the tree() is inlined.",
      "parentUuid": "1077a0c2_5352842d",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_54b90cf3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-01T14:18:30Z",
      "side": 1,
      "message": "Since when idiomatic functional programming style is harder to read then procedural style? Wait for Java 8 where lambda and functional style prevail.",
      "parentUuid": "307ae4aa_3451f024",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_339fc86c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-01T14:57:35Z",
      "side": 1,
      "message": "I have nothing against the functional style... actually I like it.\nHowever, one cannot say that functional style is, by definition, easier to read than procedural. And I didn\u0027t want to claim that the procedural style is easier to read than functional either.\n\nJust for *this* example I find this:\n\n  for (ProjectState p : tree) {\n    result.addAll(p.localOwners);\n  }\n\neasier to read than:\n\n  return Lists.transform(tree(), new Function\u003cProjectState, AccountGroup.UUID\u003e() {\n      @Override\n      public String apply(ProjectState p) {\n        return p.localOwners;\n      }});",
      "parentUuid": "307ae4aa_54b90cf3",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_938d7c3f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-01T15:17:30Z",
      "side": 1,
      "message": "btw, this code wouldn\u0027t compile. The return result of the apply doesn\u0027t match the function declaration.\n\nfurther, p.localOwners is a set of AccountGroup.UUID. If the function is modified to be\n\n  Function\u003cProjectState, Set\u003cAccountGroup.UUID\u003e\u003e\n\nthen the result would be a List\u003cSet\u003cAccountGroup.UUID\u003e\u003e... however, we need a flat list: List\u003cAccountGroup.UUID\u003e.  Can this be achieved with one transform function?",
      "parentUuid": "1077a0c2_5352842d",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1077a0c2_532e0485",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-02T06:01:35Z",
      "side": 1,
      "message": "Yes, here are two versions; fist  matchs your current signatur and second returned Set\u003cAccountGroup.UUID\u003e.\n\n  public Iterable\u003cAccountGroup.UUID\u003e getAllOwnersIterable() {\n    return FluentIterable.from(tree()).transformAndConcat(\n        new Function\u003cProjectState, Set\u003cAccountGroup.UUID\u003e\u003e() {\n           @Override\n           public Set\u003cAccountGroup.UUID\u003e apply(ProjectState p) {\n             return p.localOwners;\n           }\n         });\n  }\n\n  public Set\u003cAccountGroup.UUID\u003e getAllOwnersSet() {\n    return FluentIterable.from(tree()).transformAndConcat(\n        new Function\u003cProjectState, Set\u003cAccountGroup.UUID\u003e\u003e() {\n           @Override\n           public Set\u003cAccountGroup.UUID\u003e apply(ProjectState p) {\n             return p.localOwners;\n           }\n         }).toSet();\n  }",
      "parentUuid": "1077a0c2_938d7c3f",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_b438a0c2",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2014-10-02T07:42:36Z",
      "side": 1,
      "message": "OK. Now again, compare any of these two with the:\n\n  for (ProjectState p : tree()) {\n    result.addAll(p.localOwners);\n  }",
      "parentUuid": "1077a0c2_532e0485",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_943b24bf",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2014-10-02T07:43:37Z",
      "side": 1,
      "message": "The Guava guys are not exactly encouraging to use functional programming as a general idiom the place: https://code.google.com/p/guava-libraries/wiki/FunctionalExplained",
      "parentUuid": "1077a0c2_532e0485",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307ae4aa_d4c8bc60",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectState.java",
        "patchSetId": 3
      },
      "lineNbr": 326,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-10-02T07:50:47Z",
      "side": 1,
      "message": "That\u0027s not fair, you\u0027ve arbitrary skipped two lines, without your procedural approach wouldn\u0027t work. The whole truth is:\n\n  Set\u003cAccountGroup.UUID\u003e result \u003d new HashSet\u003cAccountGroup.UUID\u003e();\n  for (ProjectState p : tree()) {\n    result.addAll(p.localOwners);\n  }\n  return result.addAll;\n\nAs for my previous comment: I prefer functional style.",
      "parentUuid": "307ae4aa_b438a0c2",
      "range": {
        "startLine": 324,
        "startChar": 4,
        "endLine": 326,
        "endChar": 5
      },
      "revId": "787f3b3e4d8bf4b9d7d780e9fdcbad0536440076",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}