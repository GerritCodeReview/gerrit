{
  "comments": [
    {
      "key": {
        "uuid": "437277e1_99735be2",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1528,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2018-02-06T22:34:22Z",
      "side": 1,
      "message": "8 params. ðŸ˜¢\nHow many is too many?",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18b0f61d_b49effea",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1528,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-02-06T22:48:53Z",
      "side": 1,
      "message": "I don\u0027t like it either. Do you have any suggestions for refactoring?",
      "parentUuid": "437277e1_99735be2",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e732bddf_8176ac62",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1528,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2018-02-06T23:13:33Z",
      "side": 1,
      "message": "When there are several optional params I\u0027d prefer an opt_params object, \n@param !Object\u003d opt_params\n\nThen I think using object deconstruction would be a good way to go:\n({errFn, ctx, contentType, headers, suppressErrors} \u003d opt_params)\n\n... and carry on from there",
      "parentUuid": "18b0f61d_b49effea",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a02e2825_f2c9ca39",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1528,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-02-07T23:08:50Z",
      "side": 1,
      "message": "This sgtm... It\u0027s a pretty major refactoring though, as it touches nearly every file in this change. I\u0027ve filed it here [1] as a code health bug and will get to it soon.\n\n[1] https://bugs.chromium.org/p/gerrit/issues/detail?id\u003d8324",
      "parentUuid": "e732bddf_8176ac62",
      "tag": "autogenerated:gerrit:newWipPatchSet",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7988dd6d_ffc82e2f",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1555,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-02-06T23:21:47Z",
      "side": 1,
      "message": "Reflecting my chat comments here: is it correct that we are only suppressing errors because 404s are meaningful? The problem being that this approach in PS1 will also swallow 500s, 403s, etc..\n\nCan this be restricted to only suppress the meaningful error?\n\nEven better: if a 404 is meaningful, then maybe `gr-editor-view#_getFileData` could precede the `getFileContent` request with a separate HEAD request to probe whether it would be a 404. (Or some other equivalent check.)\n\nThat way we can always call `getFileContent` with the expectation that it\u0027ll succeed and we don\u0027t have to rework our error handling or add yet another optional argument.",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25b37e73_a0b53adc",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1555,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-02-07T23:08:50Z",
      "side": 1,
      "message": "I agree with your first point, but I\u0027d rather not make another API call. If we get bugs reported about it, I\u0027d be happy to do additional work.",
      "parentUuid": "7988dd6d_ffc82e2f",
      "tag": "autogenerated:gerrit:newWipPatchSet",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b16e014_31fd4ab9",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1555,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-02-09T01:18:12Z",
      "side": 1,
      "message": "I feel a bit more comfortable with the extra HEAD request (to avoid such extensive modification in the REST API interface), but I\u0027m okay with this approach if looks good to Becky and Viktar.",
      "parentUuid": "25b37e73_a0b53adc",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5dc6741_bd6bab2d",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-rest-api-interface.js",
        "patchSetId": 1
      },
      "lineNbr": 1555,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2018-02-09T17:14:45Z",
      "side": 1,
      "message": "I\u0027m not understanding what you mean by \"maybe `gr-editor-view#_getFileData` could precede the `getFileContent` request with a separate HEAD request to probe whether it would be a 404\". How is that meaningfully different than this request?\n\nIn my mind, if this request fails with a 404 but a HEAD request succeeds, that doesn\u0027t necessarily mean the user wants to modify the file at HEAD. It\u0027s entirely possible that the file was modified one or more times in one or more parent (not yet merged) patch sets. I think that, if this request 404s for some weird server-type bug and the user sees an empty file where they expected a populated one, they\u0027d likely refresh (retrying the request) -- that\u0027s the only thing we can do that\u0027d be correct 100% of the time.\n\nPerhaps you\u0027d be happier if, in the editor view, we show an alert when a 404 is returned from this request. Something like \"No file found with this name. Creating a new one...\". I can add that in a later change.",
      "parentUuid": "9b16e014_31fd4ab9",
      "revId": "7f577fd81cb6f28fdaf6689d3f00e55b3d85900a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}