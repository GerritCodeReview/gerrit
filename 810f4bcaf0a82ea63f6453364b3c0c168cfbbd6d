{
  "comments": [
    {
      "key": {
        "uuid": "AAABEX//+iQ\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T08:59:49Z",
      "side": 1,
      "message": "Would the user know why the submit button is disabled? Some hint on the screen?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+iM\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 12,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T08:59:49Z",
      "side": 1,
      "message": "What is the motivation for this feature?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+iI\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T08:59:49Z",
      "side": 1,
      "message": "How expensive is this retest?\nHow up-to-date is actually the persisted test result?\nWhat if a change comes into the Git repository behind Gerrits back (through the cgit)?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX///ZA\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Branch.java",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "I suspect that stringkey already has a good enough equals.",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+yY\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Branch.java",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "Martin, do you agree equals should be implemented? I agree with your comment considering I should implement 79th and 80th lines as:\n\nreturn this.getParentKey().equals(br.getParentKey()) \u0026\u0026 br.branchName.equals(this.branchName());",
      "parentUuid": "AAABEX///ZA\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+wg\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Branch.java",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-04T17:13:43Z",
      "side": 1,
      "message": "Please look into the StringKey implementation, it likely already compares get() and getParentKey().  If so, then no,you do not need to override it here.",
      "parentUuid": "AAABEX//+yY\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX///Y0\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Change.java",
        "patchSetId": 2
      },
      "lineNbr": 523,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "Comparing other to other?\n\nI don\u0027t think you want to assume that changes are equal just because the keys are equal.  An equals for a change should likely  compare all the fields.  Those who want to compare just the keys can do so by comparing the keys directly.",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+yU\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Change.java",
        "patchSetId": 2
      },
      "lineNbr": 523,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "523th line is completely wrong :-( You are right.\n\nI believe a Change instance should have a unique identifier (changeKey field). Shouldn\u0027t it be enough to use in equals so I could have Change as a key object in a Map?",
      "parentUuid": "AAABEX///Y0\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+wc\u003d",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/Change.java",
        "patchSetId": 2
      },
      "lineNbr": 523,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-04T17:13:43Z",
      "side": 1,
      "message": "While it would be convenient in some cases, how then could someone compare two changes, say an old one and a new one which may have been edited, both referring to the same change, to see if the new one has had any fields altered, in order to figure out if the change should be updated in the db?  No, the same key means that you are referring to the same change, but it does not mean that they are equal.",
      "parentUuid": "AAABEX//+yU\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX///XU\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "Should remove() be wrapped with synchronized?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+yQ\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 129,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "Yes. It should be fixed. Thanks.",
      "parentUuid": "AAABEX///XU\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX///eE\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "Why is this needed now that you have a HashMap, won\u0027t that prevent duplicate schedulings?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+x4\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "Yes, HashMap is enough to prevent it.",
      "parentUuid": "AAABEX///eE\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+8g\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "Why are the mergeable ones not retested?",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+x0\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "My mistake :-( I should re-test all not closed and having destBranch as target.",
      "parentUuid": "AAABEX//+8g\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+wY\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-04T17:13:43Z",
      "side": 1,
      "message": "OK, but also, how will you know when a change is displayed wether it is in the queue (and potentially wrong)?  And what if the server goes down here, the changes will not get retested.  I do not think that waiting for antother change to be merged is acceptable, after all, this feature may prevent that from ever happening (since all changes could erroneously be marked unmergeable).",
      "parentUuid": "AAABEX//+x0\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+tE\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-07-05T17:33:23Z",
      "side": 1,
      "message": "Ok. \nAFAIU, we just need to atomically reset (set as test_pending) all changes for a branch at the time any is merged.\n\nWhat about reseting all those changes inside block atomicUpdate at line 1278?\n\nIf the server goes down just after a change merge, all changes are re-tested at the startup.\n\nWould it be enough?\n(I have it done, just push pending...)",
      "parentUuid": "AAABEX//+wY\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+s8\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-05T17:53:43Z",
      "side": 1,
      "message": "\u003e What about reseting all those changes inside block atomicUpdate at line 1278?\n\nThat might work, I am not sure how the atomicUpdate works, does that get run after the repo is updated to the new head though?  Do we already have a bit of a race here?  Can a change be merged to the head and potentially not get recorded in the DB?  that might not be a big deal if the state of the change is off, but if it prevents future merges (with this feature), it could maybe still be a problem?\n\nWould this still be able to deal with changes which are pushed to a repo using cgit (we still have to do that in some cases)?\n\nWhat will happen to the UI when changes are pending?  Anyway to force pending changes to be tested onload (displayed in the UI)?",
      "parentUuid": "AAABEX//+tE\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+rs\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-07-05T20:10:41Z",
      "side": 1,
      "message": "\u003eThat might work, I am not sure how the atomicUpdate works, does that get run after the repo is updated to the new head though?\n\nI\u0027m not sure either. I assume by the name that all operations whithin the block are atomic. But yes, it runs after the repo is updated.\n\n\u003eDo we already have a bit of a race here?\n\nMaybe we could put the reset in another atomicUpdate call in a new line between 276th and 277th line (just after merge and before db change status update)\n\n\u003eCan a change be merged to the head and potentially not get recorded in the DB?\n\nYes, eventually if server goes down meanwhile. \nThe only way to avoid this is to run atomically the git merge operation and all changes reset.\n\nAnother possibility could be:\nCreate a new status for Change.TestMergeStatus (reset_dest) and assign it to the change being merged (or just before the merge process start); if the server goes down, we will reset all changes for the \"dest\" of the change with TestMergeStatus \u003d RESET_DEST.\n\nA side effect could be if the merge fails, we would have to re-test all changes unnecessarily. However I think this is the best so far, isn\u0027t it?\n\n\u003eWould this still be able to deal with changes which are pushed to a repo using cgit (we still have to do that in some cases)? \n\nI don\u0027t know what cgit is about... but as long as it enters through Receive.java should work.\n\n\u003eWhat will happen to the UI when changes are pending? \n\nNothing. Submit button is normally enabled, but maybe we should change it.\n\n\u003eAnyway to force pending changes to be tested onload (displayed in the UI)?\n\nI have considered it in the beggining, but I\u0027ve given up because it would impact performance. Humm, however, if we test during page rendering only when change is pending_test might be reasonable.",
      "parentUuid": "AAABEX//+s8\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+po\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-05T21:48:45Z",
      "side": 1,
      "message": "\u003eI don\u0027t know what cgit is about... but as long as it enters through Receive.java should work.\n\nI mean a normal C based git client, so no, it does not go through Receive.java.  Changes could be applied to a repo with a C client even when Gerrit is offline.\n\n\u003e Humm, however, if we test during page rendering only when change is pending_test might be reasonable.\n\nRight, I think that this would be worth the hit.  If a branch has tons of unmerged changes and something is merged, they will all be in the queue.  It may take a while to get them done.  I don\u0027t really see it impacting performance if a change is tested on the fly when loaded if it is pending.  It might delay that change a bit, but the server should be no more impacted since now it need not be tested from the queue.  The benefit of never displaying an outdated result is big.\n\n\u003e A side effect could be if the merge fails, we would have to re-test all changes unnecessarily. However I think this is the best so far, isn\u0027t it?\n\nWell, I still think that recording the latest SHA1 tested against would be better, simpler, and less likely to miss corner cases, and possibly even be a performance improvement.  \n\nIt means that you would never have to update the DB when a change is merged since it would automatically take care of indicating that the merge test is outdated.  It would eliminate the pending state entirely.  \nSince updating the DB to set the pending state needs to be atomic, it will need to delay merges from other threads.  So not only could performance be impacted by the extra work of these constant updates (every time a change is merged: how will that impact the new Lucene caching that Shawn is contemplating?), when there are a lot of unmerged changes for a project, it could also increase the latency of changes being merged.\n\n\nA \"pending\", or \"untested\" check only need compare the sha1 of the HEAD and the sha1 of the unmerged change.  No need to worry about races, no need to be concerned with changes being applied to repos behind Gerrit\u0027s back; even when Gerrit is offline, it would still work!  It makes loading the queue on startup easy, simply query all changes whose lastTested sha1 does not match the HEAD...same thing when a change is merged!\n\nAside from adding another field to a change, is there any other penalty of using the Sha1?  I guess you need to check the head of a repo on every test. I am not sure that this would really impact anything, it is such a minor lookup.",
      "parentUuid": "AAABEX//+rs\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+iE\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T08:59:49Z",
      "side": 1,
      "message": "I tend to agree with Marin about recording the SHA1 that was tested against and the test result itself. I also agree about the test done only when the change is displayed on the screen instead of retesting all pending changes on every submit.\n\nHowever, as written in a comment in the commit message, I would like to know what is the main motivation for this feature?\nWhich issue(s) does it solve?",
      "parentUuid": "AAABEX//+po\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+h0\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-07-06T13:02:57Z",
      "side": 1,
      "message": "The sha1 idea is brilliant!\n\nI\u0027m just not confident about not re-testing all changes everytime a merge is perfomed.\n\nThis strategy was approved by Shawn as you can see here: http://groups.google.com/group/repo-discuss/browse_thread/thread/50c429a2a471b93f/afb35f05f146722f\n\nThe point is this feature is the bottom of atomicity feature and in order to have an atomic group, all changes within the group must be mergeable...\nHumm.. unless we add some extra test in atomicity itself...\nwell, I don\u0027t have all atomic implementation details by heart.. I need to check the impact.\n\nThis feature solves issue 381 and as I already told is part of submodules and atomic commits. See http://groups.google.com/group/repo-discuss/browse_thread/thread/bb2fbbe08a330e92/e96e4cf42ad1a3f1\n\nThis is top high priority for my company!\nI do appreciate your help btw... we really need it integrated",
      "parentUuid": "AAABEX//+iE\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+hU\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-07-06T14:21:29Z",
      "side": 1,
      "message": "well..\nthe way we test mergeability is assyncronous... (we put in a queue to be consumed)\nif we request this test when the change page is rendered, it cannot be assync.\nIt\u0027s also possible when considering an atomic group, to start mergeability test. But it also cannot be assync.\n\nSo, what we could do:\n1 - Use Sha1 as Martin suggested; \n2 - Create a sync way to test mergeability (only of those changes with test outdated) to be run at page rendering and when is part of an atomic group. \n3 - I would keep assyncronous way even though to avoid sync tests in advance.\n\nMy concerns:\n1 - Performance. The user will be stuck waiting change page rendering while test is beind done. It is worst when considering atomic, if the user request to merge the atomic group, he will have to wait all changes test inside the group, it may be several...(even more without assync way)",
      "parentUuid": "AAABEX//+h0\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+hM\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T14:28:33Z",
      "side": 1,
      "message": "I read the two discussion threads now.\n\nI am curious if Shawn still believes that a complete re-testing should be done on all open changes for the same branch.\n\nBy a complete re-test Gerrit would re-test all changes and not only those that are part of an atomic group. On the other hand re-testing just those changes that are part of the atomic group just before atomic submit would avoid unnecessary re-tests.",
      "parentUuid": "AAABEX//+h0\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+hE\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-07-06T14:37:49Z",
      "side": 1,
      "message": "I know you are the guys now (+2) ! congrats by the way :-)\nI need to get it integrated, and I will do the way you guys decide.\nBut I think it would be valuable if we could bring Shawn to the discussion, since he approved first strategy... \nHow hard is that? What do u think?",
      "parentUuid": "AAABEX//+hM\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+g8\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 2
      },
      "lineNbr": 979,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2011-07-06T15:02:14Z",
      "side": 1,
      "message": "The recently acquired +2 status brought more responsibility and requires to spend more time in the code review than before... this is the reason why I commented on this change... \nNo intention on slowing down the approval.",
      "parentUuid": "AAABEX//+hE\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX///eY\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReloadChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-07-02T04:08:44Z",
      "side": 1,
      "message": "Logger needs to go first (before interfaces).",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEX//+xw\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/ReloadChangeTestMergeQueue.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1003770
      },
      "writtenOn": "2011-07-04T11:44:20Z",
      "side": 1,
      "message": "Ok.",
      "parentUuid": "AAABEX///eY\u003d",
      "revId": "810f4bcaf0a82ea63f6453364b3c0c168cfbbd6d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}