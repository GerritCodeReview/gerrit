{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5d8eded6_b18b3c20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-01-03T08:14:56Z",
      "side": 1,
      "message": "Thanks for uploading this fix. Much appreciated!",
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f25642d_61e7e172",
        "filename": "java/com/google/gerrit/json/InstantDeserializer.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-01-03T08:14:56Z",
      "side": 1,
      "message": "Should this rather be ZoneId.of(\"UTC\") to always use UTC same as in SqlTimestampDeserializer [1]? \n\n[1] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/json/SqlTimestampDeserializer.java#31",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 44
      },
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bac123f_3d0957e3",
        "filename": "java/com/google/gerrit/json/InstantDeserializer.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-01-03T12:47:44Z",
      "side": 1,
      "message": "I hope you don\u0027t mind, that I updated your change to address this!\nWe need to submit this, since this is an issue that currently blocks our import (an we need to do an import due to another important fix).",
      "parentUuid": "7f25642d_61e7e172",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 44
      },
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98685288_3c9de701",
        "filename": "java/com/google/gerrit/json/InstantDeserializer.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-03T13:03:55Z",
      "side": 1,
      "message": "ZoneId.of(\"UTC\") vs. ZoneId.systemDefault(): I am concerned, that we are using two different approaches across the code. I copied/pasted this code from one of the places you used earlier in year series. Do we have a clear strategy what approach use in what situation?\n\nAlso, can we think of a junit test to prevent similar regressions in furture? I accidantely identified the broken json serialization, because of stringer encapsulation used in JDK 17.",
      "parentUuid": "6bac123f_3d0957e3",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 44
      },
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2443a45_9602d2cc",
        "filename": "java/com/google/gerrit/json/InstantDeserializer.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-01-03T13:10:17Z",
      "side": 1,
      "message": "\u003e ZoneId.of(\"UTC\") vs. ZoneId.systemDefault(): I am concerned, that we are\n\u003e using two different approaches across the code. I copied/pasted this code\n\u003e from one of the places you used earlier in year series.\n\nYes, I noticed this too. Unfortunately this is currently inconsistent in our code base :(\n\n\u003e Do we have a clear strategy what approach use in what situation?\n\nFor the migration from Date/Timestamp to Instant, I\u0027m preserving the current behaviour. So if the old code used UTC, the new code should too.\n\nI agree that we should clean this up and agree one or the other (ZoneId.of(\"UTC\") vs. ZoneId.systemDefault()). I think I\u0027d prefer using UTC since then we are not depending on the system configuration.\n\n\u003e Also, can we think of a junit test to prevent similar regressions in furture?\n\nYes, we definitely should find a way to cover this by a test. I was actually very surprised that none of the tests failed with this.",
      "parentUuid": "98685288_3c9de701",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 44
      },
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ea9369e_d530783c",
        "filename": "java/com/google/gerrit/json/InstantDeserializer.java",
        "patchSetId": 4
      },
      "lineNbr": 64,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-01-03T13:21:43Z",
      "side": 1,
      "message": "\u003e Yes, we definitely should find a way to cover this by a test. I was actually very surprised that none of the tests failed with this.\n\nIt should be trivial to add test coverage. We seralize TaskInfo as json string. And expected that a string representation of the startTime attribute:\n\n    public Instant startTime;\n    \nis a valid timestamp. Without this fix, it\u0027s not, but only nanos and seconds, as attributes from Instant instance.",
      "parentUuid": "a2443a45_9602d2cc",
      "range": {
        "startLine": 64,
        "startChar": 22,
        "endLine": 64,
        "endChar": 44
      },
      "revId": "82438b39a5cbd8d9f3511aefe1900c4c899773ab",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}