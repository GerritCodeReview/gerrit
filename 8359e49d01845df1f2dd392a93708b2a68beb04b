{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83367a1e_b9758eac",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-11T10:32:17Z",
      "side": 1,
      "message": "when I download the patch for this change, I get\n\n```\nFrom 8359e49d01845df1f2dd392a93708b2a68beb04b Mon Sep 17 00:00:00 2001\nFrom: Nitzan Gur-Furman \u003cnitzan@google.com\u003e\nDate: Tue, 28 Jun 2022 14:53:03 +0300\nSubject: [PATCH] Add UNIMPLEMENTED ApplyPatch Gerrit API method.\n\nImplementation to follow in the follow weeks.\n\nChange-Id: I005dd0616fd2624a8ab669bdf8a68e2f0d83a61b\n---\n\ndiff --git a/Documentation/rest-api-changes.txt b/Documentation/rest-api-changes.txt\n...\n```\n\nas you can see, the patch text file already has the author information and the commit message, so you only need the \"base\" field below, really.\n\nWhy do we have both ApplyPatchAsPatchSetInput and ApplyPatchInput? As a name `ApplyPatchAsPatchSetInput` looks out of style with the rest of the API. Because `ApplyPatchInput` has just a single string inside, it looks superfluous.\n\nI think we could just have one  \n\n```\nclass ApplyPatchInput {\n  String patch; // the patch file\n  AccountInput author; // optional, overrides the From: line\n  String commit_message; // optional, overrides the Subject: line.    \n  String base; // parent commit SHA1.\n}\n```\n\n`CreateChangeInput` could have a `String patch` field.",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f61845_77431c0a",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-12T09:26:00Z",
      "side": 1,
      "message": "\u003e as you can see, the patch text file already has the author information and the commit message, so you only need the \"base\" field below, really.\n\nThat\u0027s assuming:\n1. The original patch is a Gerrit patch (which is correct for the current use case, but highly limiting the functionality of this endpoint).\n2. The author we want to list as the patch-applier is the same one who created the original patch. Given the patch is a text that can be manually edited before getting applied - this might result in some security issues.\n3. Currently, the implementation completely ignores the Gerrit-patch metadata. I can add this support, but then again - potential security issues.\n\n\u003e Why do we have both ApplyPatchAsPatchSetInput and ApplyPatchInput? As a name `ApplyPatchAsPatchSetInput` looks out of style with the rest of the API. Because `ApplyPatchInput` has just a single string inside, it looks superfluous.\n\nThe intention was to align with [MergePatchSetInput](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#merge-patch-set-input) which contains a [MergeInput](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#merge-input) field. I agree that ApplyPatchInput is currently easy to replace with a string, but if we ever need to add some extra common fields (e.g. encoding config) - it will be much easier with the current wrapper. I don\u0027t feel strongly about it though.",
      "parentUuid": "83367a1e_b9758eac",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}