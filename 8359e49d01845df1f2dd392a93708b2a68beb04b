{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83367a1e_b9758eac",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-11T10:32:17Z",
      "side": 1,
      "message": "when I download the patch for this change, I get\n\n```\nFrom 8359e49d01845df1f2dd392a93708b2a68beb04b Mon Sep 17 00:00:00 2001\nFrom: Nitzan Gur-Furman \u003cnitzan@google.com\u003e\nDate: Tue, 28 Jun 2022 14:53:03 +0300\nSubject: [PATCH] Add UNIMPLEMENTED ApplyPatch Gerrit API method.\n\nImplementation to follow in the follow weeks.\n\nChange-Id: I005dd0616fd2624a8ab669bdf8a68e2f0d83a61b\n---\n\ndiff --git a/Documentation/rest-api-changes.txt b/Documentation/rest-api-changes.txt\n...\n```\n\nas you can see, the patch text file already has the author information and the commit message, so you only need the \"base\" field below, really.\n\nWhy do we have both ApplyPatchAsPatchSetInput and ApplyPatchInput? As a name `ApplyPatchAsPatchSetInput` looks out of style with the rest of the API. Because `ApplyPatchInput` has just a single string inside, it looks superfluous.\n\nI think we could just have one  \n\n```\nclass ApplyPatchInput {\n  String patch; // the patch file\n  AccountInput author; // optional, overrides the From: line\n  String commit_message; // optional, overrides the Subject: line.    \n  String base; // parent commit SHA1.\n}\n```\n\n`CreateChangeInput` could have a `String patch` field.",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f61845_77431c0a",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-12T09:26:00Z",
      "side": 1,
      "message": "\u003e as you can see, the patch text file already has the author information and the commit message, so you only need the \"base\" field below, really.\n\nThat\u0027s assuming:\n1. The original patch is a Gerrit patch (which is correct for the current use case, but highly limiting the functionality of this endpoint).\n2. The author we want to list as the patch-applier is the same one who created the original patch. Given the patch is a text that can be manually edited before getting applied - this might result in some security issues.\n3. Currently, the implementation completely ignores the Gerrit-patch metadata. I can add this support, but then again - potential security issues.\n\n\u003e Why do we have both ApplyPatchAsPatchSetInput and ApplyPatchInput? As a name `ApplyPatchAsPatchSetInput` looks out of style with the rest of the API. Because `ApplyPatchInput` has just a single string inside, it looks superfluous.\n\nThe intention was to align with [MergePatchSetInput](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#merge-patch-set-input) which contains a [MergeInput](https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#merge-input) field. I agree that ApplyPatchInput is currently easy to replace with a string, but if we ever need to add some extra common fields (e.g. encoding config) - it will be much easier with the current wrapper. I don\u0027t feel strongly about it though.",
      "parentUuid": "83367a1e_b9758eac",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2724dd8_57b6acf3",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-12T09:54:44Z",
      "side": 1,
      "message": "\u003e The original patch is a Gerrit patch (which is correct for the current use case, but highly limiting the functionality of this endpoint).\n\nIt\u0027s the standard format, though. Try \"git format-patch HEAD^\" for example.\n\n\u003eGiven the patch is a text that can be manually edited before getting applied - this might result in some security issues.\n\nbut you\u0027re already accepting the input.author to set the author to an arbitrary account? ie. you have to do a check if the caller is allowed to forge author/committer anyway. Also, in terms of security issues: this endpoint allows someone to literally inject the code that is going to be put up for review, so this endpoint is not a security control.\n\n\u003e but if we ever need to add some extra common fields (e.g. encoding config)\n\nWhat fields do we foresee now? None of the API docs have fields for setting text encoding.\n\n\u003e The intention was to align with MergePatchSetInput which contains a MergeInput field.",
      "parentUuid": "f5f61845_77431c0a",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "457bedf7_c9632d1f",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-12T10:46:48Z",
      "side": 1,
      "message": "\u003e It\u0027s the standard format, though. Try \"git format-patch HEAD^\" for example.\n\n1. There are a lot of different tools which generates patches, and since this is not a format requirement - I don\u0027t think we should relay on that.\n2. The original author is not necessarily a Gerrit user, nor an authorized author in the specific project. Unlike with an explicit author field, in which it makes sense to return a permissions error to the caller, here I don\u0027t think we want to block patches created elsewhere. \nHow should this logic look like? Use the original author and fall back to the current one if needed? Also, would the committer be the patch-applier even when the author is the original patch creator? I personally find both parts very confusing.\n\n\u003e \u003e but if we ever need to add some extra common fields (e.g. encoding config)\n\u003e \n\u003e What fields do we foresee now? None of the API docs have fields for setting text encoding.\n\nFormatting: [whitespace](https://git-scm.com/docs/git-apply/en#Documentation/git-apply.txt---whitespaceltactiongt) handling is a fine example.\n\nAlso, currently the applying will fail in case of any conflicts. In the future, we might want to allow some conflict handling (will also require JGit support). Similarly to [3way](https://git-scm.com/docs/git-apply/en#Documentation/git-apply.txt---3way) or [reject](https://git-scm.com/docs/git-apply/en#Documentation/git-apply.txt---reject).\n\n\u003e \n\u003e \u003e The intention was to align with MergePatchSetInput which contains a MergeInput field.\n\nWere you commenting on that?",
      "parentUuid": "b2724dd8_57b6acf3",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bcea0f4_a29d9b19",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-12T11:01:27Z",
      "side": 1,
      "message": "\u003e The original author is not necessarily a Gerrit user, nor an authorized author in the specific project. Unlike with an explicit author field, in which it makes sense to return a permissions error to the caller, here I don\u0027t think we want to block patches created elsewhere.\n\nWe allow people to upload changes to gerrit with arbitrary author (including email addresses that don\u0027t exist in Gerrit) using the git command line, based on the forgeAuthor and forgeCommitter permissions. I just checked how this works, and I think your code might already cover this through CommitValidators#forGerritCommits, and it\u0027s also checked in CreateChange#checkRequiredPermissions().\n\n\u003eFormatting: whitespace handling is a fine example.\n\u003eAlso, currently the applying will fail in case of any conflicts. In the future, we might want to allow some conflict handling (will also require JGit support). Similarly to 3way or reject.\n\ngood points, thanks.\n\n\u003e The intention was to align with MergePatchSetInput which contains a MergeInput field.\n\nOK. How about ApplyInput and ApplyPatchSetInput for consistency, then? Or ApplyPatchInput, ApplyPatchPatchSetInput?",
      "parentUuid": "457bedf7_c9632d1f",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfb9a34f_f57b5e55",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-12T11:06:20Z",
      "side": 1,
      "message": "\u003e There are a lot of different tools which generates patches, and since this is not a format requirement - I don\u0027t think we should relay on that.\n\nfor context, there has been some interest in using Gerrit to visualize changes that are passed around by email (eg. linux kernel list, git list). By having an endpoint that consumes the patch as-is (including its author and commit message), it is much easier to ingest such emails (We could even make the POST handler accept plain text directly, without wrapping in JSON).\n\nEven if it\u0027s not required right now, can you confirm that we can add support for this use case in the future?",
      "parentUuid": "7bcea0f4_a29d9b19",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2c5718b_a96e8b17",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-12T18:32:14Z",
      "side": 1,
      "message": "\u003e OK. How about ApplyInput and ApplyPatchSetInput for consistency, then? Or ApplyPatchInput, ApplyPatchPatchSetInput?\n\nRenamed ApplyPatchAsPatchSetInput to ApplyPatchPatchSetInput.\n\n\u003e We allow people to upload changes to gerrit with arbitrary author (including email addresses that don\u0027t exist in Gerrit) using the git command line\n\nThanks for the info!\n\n\u003e Even if it\u0027s not required right now, can you confirm that we can add support for this use case in the future?\n\nI\u0027ve filed a bug for doing that as a followup.",
      "parentUuid": "dfb9a34f_f57b5e55",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68484204_8de71c97",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-13T09:25:03Z",
      "side": 1,
      "message": "\u003e\u003eEven if it\u0027s not required right now, can you confirm that we can add support for this use case in the future?\n\n\u003eI\u0027ve filed a bug for doing that as a followup.\n\nI\u0027m asking because, `if not specified, will reuse the current patch set\u0027s subject.` will make this hard to bolt on afterwards without changing semantics. I suggest adding `subject` as ApplyPatchInput as a required field instead. Then, later we can make it optional, and have it be parsed out of the patch file if the field is not set. The same for author.\n\nNote that MergePatchSetInput isn\u0027t a perfect analogon. When you create a new merge change, that creates a new commit, which requires a completely new commit message. So the caller must always provide it. In the case of cherry-picking new versions of patches between hosts, you will always have the commit message (and author) from the source, so we should make it easy to transport without the caller having the extricate the message from the source, and then insert it back into outgoing request.",
      "parentUuid": "d2c5718b_a96e8b17",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb7c546a_087ecad6",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-13T17:33:51Z",
      "side": 1,
      "message": "`ApplyPatchInput` is also used as part of `ChangeInput`, which has `subject` and `author` fields of its own. Besides the redundancy, the relationship between the 2 sets is weird. If the `ApplyPatchInput` fields are required, it means the `ChangeInput` ones are ignored; then later, when we make the patch fields optional, we can fall back to the change ones. This is very inconsistent.\n\nMaybe we can put a const message instead of the current-patch one when an explicit message is not provided? Then any addition won\u0027t change the semantics much.",
      "parentUuid": "68484204_8de71c97",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dcf8eef_8773a0a7",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2022-10-17T13:05:27Z",
      "side": 1,
      "message": "\u003eMaybe we can put a const message instead of the current-patch one when an explicit message is not provided? Then any addition won\u0027t change the semantics much.\n\nSGTM. Thanks for bearing with me.",
      "parentUuid": "eb7c546a_087ecad6",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d060bfd_8ee29563",
        "filename": "java/com/google/gerrit/extensions/api/changes/ApplyPatchAsPatchSetInput.java",
        "patchSetId": 14
      },
      "lineNbr": 23,
      "author": {
        "id": 1146706
      },
      "writtenOn": "2022-10-18T07:02:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1dcf8eef_8773a0a7",
      "range": {
        "startLine": 23,
        "startChar": 16,
        "endLine": 23,
        "endChar": 23
      },
      "revId": "8359e49d01845df1f2dd392a93708b2a68beb04b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}