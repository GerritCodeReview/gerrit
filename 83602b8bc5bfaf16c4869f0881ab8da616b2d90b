{
  "comments": [
    {
      "key": {
        "uuid": "111fbc7d_8893df2b",
        "filename": "javatests/com/google/gerrit/server/events/EventDeserializerTest.java",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-27T20:28:38Z",
      "side": 1,
      "message": "This isn\u0027t solving the problem but rather applying the workaround in the test.\nIt\u0027s fine, if we agree that we define as the responsibility of the plugin to register all the proper de-serializers for all the internals of all the details of the stream events.\n\nHowever, based on Marco\u0027s comments on the issue, this isn\u0027t really helping the plugins in abstracting from Gerrit\u0027s internal implementation details.",
      "range": {
        "startLine": 42,
        "startChar": 31,
        "endLine": 42,
        "endChar": 76
      },
      "revId": "83602b8bc5bfaf16c4869f0881ab8da616b2d90b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2663baca_1d720d73",
        "filename": "javatests/com/google/gerrit/server/events/EventDeserializerTest.java",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-04-27T20:54:41Z",
      "side": 1,
      "message": "I\u0027ve found a generic solution in the latest patch set of the parent change. The new, generic version of this test (and in plugins) would be always a one-liner, that would hide all Gerrit internal details:\n\n  new GsonBuilder()\n      .registerTypeAdapterFactory(AutoValueAdapterFactory.create())\n      .create();\n\nCurrently, only Change.Key gson type adapter is generated by the auto-value-gson extension library:\n\n  public final class AutoValueGson_AutoValueAdapterFactory extends AutoValueAdapterFactory {\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public \u003cT\u003e TypeAdapter\u003cT\u003e create(Gson gson, TypeToken\u003cT\u003e type) {\n      Class\u003c?\u003e rawType \u003d type.getRawType();\n      if (Change.Key.class.isAssignableFrom(rawType)) {\n        return (TypeAdapter\u003cT\u003e) Change.Key.typeAdapter(gson);\n      } else {\n        return null;\n      }\n    }\n  }\n\nBut we could easily force generation of additional gson type adapters, by adding one line marker method in the auto value implementation class (see detailed message in the parent change how to do that). The good news is: after doing this, the caller would still continue to use the generic adapter factory and wouldn\u0027t have to change anything.\n\nDone.",
      "parentUuid": "111fbc7d_8893df2b",
      "range": {
        "startLine": 42,
        "startChar": 31,
        "endLine": 42,
        "endChar": 76
      },
      "revId": "83602b8bc5bfaf16c4869f0881ab8da616b2d90b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4a58251_bc29b3e2",
        "filename": "javatests/com/google/gerrit/server/events/EventDeserializerTest.java",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-04-27T21:08:36Z",
      "side": 1,
      "message": "Yes, mine is similar to yours but doesn\u0027t require to change anything in the existing auto-value classes.",
      "parentUuid": "2663baca_1d720d73",
      "range": {
        "startLine": 42,
        "startChar": 31,
        "endLine": 42,
        "endChar": 76
      },
      "revId": "83602b8bc5bfaf16c4869f0881ab8da616b2d90b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}