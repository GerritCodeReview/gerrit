{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1701cfd8_3c24208a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-25T23:23:20Z",
      "side": 1,
      "message": "Good job, David.",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a4031e6_d5712cc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1100310
      },
      "writtenOn": "2020-11-25T23:33:52Z",
      "side": 1,
      "message": "And what if a git client sends a different User-Agent header?",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a8124a1_ae5be7cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1011602
      },
      "writtenOn": "2020-11-25T23:39:19Z",
      "side": 1,
      "message": "Apologies if I\u0027m beating the same dead horse from the original bug report, but why do HTP-over-Git and the WebApp need to coexist at the same paths at all? Why not just deprecate serving Git-over-HTTP from the root URL and make it possible to use a non-conflicting subpath for it instead? It seems like that sidesteps all the possibly invalid assumptions about arbitrary user agent strings, or postulating what project names people might choose.",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62cfe28a_d46c8c9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-25T23:51:55Z",
      "side": 1,
      "message": "Thomas raised a very valid point: can we make this change more robust by NOT checking the User-Agent and instead the pattern of the requests?",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd3b48cb_bc09bc89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-25T23:53:43Z",
      "side": 1,
      "message": "\u003e Apologies if I\u0027m beating the same dead horse from the original bug report, but why do HTP-over-Git and the WebApp need to coexist at the same paths at all?\n\nYou can do that already now, by simply having a different path on the reverse proxy and have an headless Gerrit serving the Git protocol.\nThat solution is already implemented in many other sites and it works already today.\n\n@David\u0027s change is more for all of those who don\u0027t want to change the existing URLs.",
      "parentUuid": "1a8124a1_ae5be7cb",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "941a42e0_124299cc",
        "filename": "java/com/google/gerrit/httpd/UserAgentUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 1100310
      },
      "writtenOn": "2020-11-25T23:33:52Z",
      "side": 1,
      "message": "Clients can override the user-agent header, and [1] even mentions something about it sometimes being necessary to change it to look like a browser to pass through firewalls. Someone using JGit as a library in his own product might well give it a completely different User-Agent. And finally the slash is only a convention.\n\nThere are a few other ways one could try to distinguish git and web requests.\n\nFor POSTs in smart HTTP, I think one could rely on the Content-Type. C git *requires* the application/x-git-\u003cservice\u003e-request content type, so that could be taken as a more precise determination whether the client is a browser or a git client.\n\nFor GETs in smart HTTP: if the URL path ends in info/refs and there\u0027s one parameter service\u003d, and the value matches a known service, it\u0027s a git request.\n\nThat leaves only dumb HTTP GETs that cannot be unambiguously identified. But they\u0027d all end in /info/refs or /info/packs and the like, and the part before the /info/ would have to map to a known repository.\n\n[1] https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpuserAgent",
      "revId": "83de4b90445f319435fa0fb0c7ae3b743139375b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}