{
  "comments": [
    {
      "key": {
        "uuid": "191727d6_f92c1fa0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "\"Add edge case tests\"",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edd8736e_0fdca18e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "191727d6_f92c1fa0",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5eb701ac_512a0e67",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "Either \"references non-existing\" or \"refers to non-existing\".",
      "range": {
        "startLine": 10,
        "startChar": 43,
        "endLine": 10,
        "endChar": 69
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f781014_1c20bbfc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5eb701ac_512a0e67",
      "range": {
        "startLine": 10,
        "startChar": 43,
        "endLine": 10,
        "endChar": 69
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b39b4250_aa2adbc6",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "We should have a message here indicating what (a file) with which identifier (file name) wasn\u0027t found.",
      "range": {
        "startLine": 124,
        "startChar": 41,
        "endLine": 124,
        "endChar": 43
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "730db4ba_0564e20d",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b39b4250_aa2adbc6",
      "range": {
        "startLine": 124,
        "startChar": 41,
        "endLine": 124,
        "endChar": 43
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4089c56e_bb531b86",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1033,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "To ensure that previewFix is properly working for commit messages, the test should verify at some point that the fix replacement is part of the preview. This could be done within this line (e.g. linesOfB().contains(\"Show new content\")) if the fix range above would be chosen such that it spans a whole line.",
      "range": {
        "startLine": 1033,
        "startChar": 4,
        "endLine": 1033,
        "endChar": 66
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28bc35ec_4c772ccf",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1033,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4089c56e_bb531b86",
      "range": {
        "startLine": 1033,
        "startChar": 4,
        "endLine": 1033,
        "endChar": 66
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2af1ed91_ef86b8ee",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1036,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "I know that the structure of the DiffInfo object is not optimal. When commonLines() is filled, linesOfA() and linesOfB() are automatically empty, and the other way around. We don\u0027t have to test that in every test again. So here, it\u0027s sufficient (and shorter) to just test the parts which are filled.",
      "range": {
        "startLine": 1028,
        "startChar": 4,
        "endLine": 1036,
        "endChar": 62
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43379836_4cc3e61c",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1036,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Looking only on the DiffInfo code i can\u0027t get this information.\nAlso, I can\u0027t find any tests which ensures that this condition is always true.\nI would to say, that at the current state of code these checks makes sense. It allows to understand the output without going to much in the implementation details.\n\nOtherwise, I can say that this is enough in this tests to check diff has a valid meta, because it is not possible to have a diff without content.",
      "parentUuid": "2af1ed91_ef86b8ee",
      "range": {
        "startLine": 1028,
        "startChar": 4,
        "endLine": 1036,
        "endChar": 62
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f66460f_150dcf3e",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1036,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-29T09:09:39Z",
      "side": 1,
      "message": "You\u0027re right that we might not have any tests which ensure that commonLines() and linesOfA()/linesOfB() are mutually exclusive but this is not the right test to ensure that behavior. If you\u0027re worried about that aspect, please write a separate, dedicated test for it.\n\nChecking only the meta data would not be sufficient in my opinion. With such a test, we would only ensure that a preview for a fix of a commit message can be retrieved without errors. In theory, such a preview could simply contain the original commit message on both sides. Hence, we should definitely verify that the adjusted content is present. Ideally, we would even set the commit message to a specific value at the beginning of the test and would verify at the end that the diff content is as we expect it to be.",
      "parentUuid": "43379836_4cc3e61c",
      "range": {
        "startLine": 1028,
        "startChar": 4,
        "endLine": 1036,
        "endChar": 62
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a58a364c_5173234e",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1036,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-29T10:30:30Z",
      "side": 1,
      "message": "If I understand correctly, you want to check in this tests only things which are specific to commit message.\nSo, what is special in commit message?\n\nThe main difference - it is not an ordinary file/special type of file.\n\nWhat can go wrong related with commit message:\n1) Exception/error while loading commit message. Check meta is enough to ensure that there was no exception.\n2) Commit message wasn\u0027t loaded correctly\n2.a) Empty text is loaded instead of commit message. If the only difference between comments and files is a way how they loaded, then check high-level diff structure (commonLines, then different lines, then common line) is enough. (if we suppose, that other parts work as expected)\n\n2.b) Commit message contains invalid text. This can happen only if it is loaded from different commit. Should we check for it in this test? I think no, it must be checked by other tests (or we can ignore this case as unrealistic)\n\n\nAccording to your comment, we suppose that everything else (not related to comment) works correct.\nIn this case I agree, testing only parts of diff which are filled is enough\n\nBut the next question - should we test exact strings in diff? (i.e. \"Some new content\") . I don\u0027t see how it is possible to get something else and I can remove the condition about exact content.\n\nIf you want to test an exact content of different lines (i.e. \"Some new content\"), I don\u0027t understand why this is the only thing to test. I.e. why shouldn\u0027t I check content of common lines, linesOfA, etc...\n\nIf I remove checks for non-filled items of diff, but keep content check (\"Some new content\"), then it looks slightly random for me.",
      "parentUuid": "6f66460f_150dcf3e",
      "range": {
        "startLine": 1028,
        "startChar": 4,
        "endLine": 1036,
        "endChar": 62
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40601090_58d476c6",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1179,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "Is this intentionally FILE_NAME2 instead of FILE_NAME3?",
      "range": {
        "startLine": 1179,
        "startChar": 50,
        "endLine": 1179,
        "endChar": 60
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d29c7a03_e4e5fc47",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1179,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Yes, but it is confusing. Changed to the FILE_NAME3",
      "parentUuid": "40601090_58d476c6",
      "range": {
        "startLine": 1179,
        "startChar": 50,
        "endLine": 1179,
        "endChar": 60
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08549f77_55d8b03b",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1194,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "That\u0027s an interesting comment. I guess it depends on how someone interprets \u0027lines\u0027. In the rest of the code base, I started introducing comments which rather indicate that a line was indeed added due to the new line separator. We should try to not contradict ourselves. I think the comment in general could be helpful for people but I would like to change it a bit. Could you probably rather write something like \"Due to the additional line separator, the diff has one additional line.\"? Then, it\u0027s a neutral statement without an interpretation of how the person sitting in front of the screen interprets \u0027lines\u0027.",
      "range": {
        "startLine": 1194,
        "startChar": 7,
        "endLine": 1194,
        "endChar": 89
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72bae089_84d428ca",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1194,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08549f77_55d8b03b",
      "range": {
        "startLine": 1194,
        "startChar": 7,
        "endLine": 1194,
        "endChar": 89
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7feda12f_6559e2cd",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1205,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-01-28T13:19:17Z",
      "side": 1,
      "message": "See comment from above about isNull() checks.",
      "range": {
        "startLine": 1199,
        "startChar": 4,
        "endLine": 1205,
        "endChar": 85
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92cc1fae_b7ae4eb9",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RobotCommentsIT.java",
        "patchSetId": 2
      },
      "lineNbr": 1205,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2020-01-28T14:12:46Z",
      "side": 1,
      "message": "See my answer above :)",
      "parentUuid": "7feda12f_6559e2cd",
      "range": {
        "startLine": 1199,
        "startChar": 4,
        "endLine": 1205,
        "endChar": 85
      },
      "revId": "84ddaa1e8be2a62fa6eec10a6701e7131e1319e0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}