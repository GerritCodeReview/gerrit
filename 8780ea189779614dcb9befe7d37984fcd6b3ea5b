{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1548361421 -0800\nnonce AJbGYzlb27cspNA0GUJmqZfkmvh6HeHQkjhhoCcQ5GeoFI/uwUK2aPHFSJtJVADoX2sRrkLLK3jS\n\n0000000000000000000000000000000000000000 4b4f2820790eb1819a6a10bb03d695aa5091ee33 refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlxKHs0VHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMn9oP/R8XokSAZjxMBVvvFYUzZSb99zHf\nSBFXFfkK/DxfqswO9sWx6Jc/9GNRef7MpahkvIfjm7Tgqz2V7ADApiykWMmVnR3T\nptT4IK14hys1x5u5EtvBnpZcx9GUh64mf4zofIpj0lGiIFZ1fojyso1EbahHUi7X\n+hOSvCJjwgjw1pTcxMqGivIJCJJ/H5YeOgF2rnA/1EKjPtOY2Xld5Lcx0e3TxsdH\n3VPkBuisnp/1ni1octp7oCYEVo2KPAbMHHezxkJB+/MdNLgkMFhE6+H+O/ywLDa1\nkYOS34Tvvmsc+qKbZcM9e+SBmLQAULpWkT54klz0IZ/+glMw3TbVGDuARaKEqeyV\nrbb9g+1VJRWQkGz9Y2ppiHsLgBpTYwXTMo2pNQ83B6NWPOLMAY0ym9bY5gc7DOet\nPmPs8/7PQ4X+rB/Lj0NKa9tteFnUZyWJW2Afu6xXR/BoFogLGcMqqZNs7t0RVPbi\no8gnA6SqcGA4vOOIGRn5evlhx+x8zAuPTBWZpqNfpQlDoAy7aOuQ1efcUnQhxjDC\nHTKuhJ/wjGqVgIZbVxOuFe8qXC4FUEPkapuE/d6xGEWgIwQi2M5G/5Tjhc6/H2Od\nAUPBz4RcJmX5CzveSk0Mn+KZzk44PcthWJF6j4m0IJlv9Gshwd39xKtVodgHeg+z\n07ddmbJSMzxtL7bn\n\u003d2mjk\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "0aee2fc3_717d4dad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-01-24T23:41:39Z",
      "side": 1,
      "message": "First",
      "range": {
        "startLine": 9,
        "startChar": 32,
        "endLine": 9,
        "endChar": 36
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97bfff3a_4d773707",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "Yes, I believe this is really the culprit. I see some flakiness as well, and when that happens is because I have more events than expected. It could well be because the setup of the server generated events that have not reached yet the FakeAuditService and then are not properly cleaned up before the execution of the test.",
      "range": {
        "startLine": 17,
        "startChar": 23,
        "endLine": 19,
        "endChar": 10
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02f3b62e_9fc6b6e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 19,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T15:39:12Z",
      "side": 1,
      "message": "\u003e  I see some flakiness as well, and when that happens is because I have more events than expected.\n\nAre you talking about the behavior at master? If so, the test at master is just written wrong.\n\nLook at this line:\n\nhttps://gerrit.googlesource.com/gerrit/+/296772f362f3e499ec953fbd989c7c74ca2356de/javatests/com/google/gerrit/acceptance/git/GitOverHttpServletIT.java#71\n\n1 is simply the wrong number. There are at least 3 events: a fetch in test setup; an ls-remote; an upload-pack. So when this test fails, it fails because there are extra events.\n\nNote that in this change I made it explicitly expect 2 events within the test method.",
      "parentUuid": "97bfff3a_4d773707",
      "range": {
        "startLine": 17,
        "startChar": 23,
        "endLine": 19,
        "endChar": 10
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82683090_1b6d948b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "I would strongly oppose putting longer timeouts or sleep in the code.\nWorst case, because we can only have *more* events that we expect, I would rather discard the extra events in the assertions rather than sleeping for the draining the audit events before the test. WDYT?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 33
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9e01b7_ac6ba19b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T15:39:12Z",
      "side": 1,
      "message": "Have you looked at https://gerrit-review.googlesource.com/c/gerrit/+/211693 yet? That should be easier to reason about than this change. If you prefer, I can just squash it into this one.\n\nHowever, that said:\n\n\u003e I would strongly oppose putting longer timeouts or sleep in the code.\n\nThe way the audit system works now (audit call in a finally block) it is fundamentally impossible to write tests that don\u0027t have a timeout. The race is:\n\n* Test code in thread A opens HTTP connection\n* HTTP thread B writes complete HTTP response\n* Thread A reads complete HTTP response\n* Thread A continues executing\n* Thread B executes audit listener in finally block\n\nIf the system is under sufficient load or we are otherwise screwed by Java thread scheduling, then there is no guarantee that the last step will *ever* run in any bounded amount of time. The JVM/OS could theoretically just decide to literally never schedule thread B ever again after step 2. If Thread A wants to see the results of the audit, literally the only thing it can do in this architecture is wait. To avoid waiting, you would need to ensure the audit listener is executed before the final HTTP response is flushed, but that would be different auditing semantics from what we have today (attempted requests vs. completed requests). If we did that, then A would know that all audit listeners have been executed at the point it finishes reading the HTTP response.\n\nHere we reduce the *minimum* wait by using a BlockingQueue, so thread A receives a message as soon as B has executed the listener. (In fairness, master also does this with synchronized/notify; I just think BlockingQueue is a better abstraction.) But there is still no upper bound on the *maximum* wait.",
      "parentUuid": "82683090_1b6d948b",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 33
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb6eb33f_46bfa2b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T16:00:41Z",
      "side": 1,
      "message": "Here\u0027s another possible alternative for tests:\n\n* Limit to 1 HTTP processing thread.\n* Make a single dummy request from thread A after all requests we\u0027re interested in have completed.\n\nThe dummy request can\u0027t be processed by the HTTP thread until it\u0027s completely finished processing the previous request, including audit listeners. We may or may not see the audit event from the dummy request, but we will see the audit event from all requests that we care about.\n\nThat said, if you think about it, this doesn\u0027t actually solve the problem of having timeouts. In the scenario I described above where the JVM never reschedules the HTTP thread, the dummy request will never succeed. In fact, I imagine what you will see is a timeout at the HTTP connection level (and who knows what our HTTP timeout is).\n\nFor this reason, I don\u0027t think that having a timeout in 211693 that is at least as long as our HTTP timeout is actually a problem.",
      "parentUuid": "eb9e01b7_ac6ba19b",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 33
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b83a0d15_75d52686",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "Yes, that\u0027s a brilliant idea. Having them sorted by timestamp would allow to understand what came first and next and \"find the right starting point\" to execute our assertions.",
      "range": {
        "startLine": 29,
        "startChar": 46,
        "endLine": 29,
        "endChar": 72
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6d9afcd_ed5dcb28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "Reduce or eliminate?\nOn my laptop (8 cores) I already have ~1% of flakiness with the current code. Are we hiding the problem a bit more or are we eliminating it completely?",
      "range": {
        "startLine": 35,
        "startChar": 19,
        "endLine": 35,
        "endChar": 44
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06293141_15ba40c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T15:39:12Z",
      "side": 1,
      "message": "See above, I think it\u0027s theoretically impossible to eliminate completely.\n\nI\u0027m jealous that you have 1% flakiness while I have 30% flakiness. Developing on Gerrit the past few weeks has been pretty painful for me, hence why I started this series.",
      "parentUuid": "a6d9afcd_ed5dcb28",
      "range": {
        "startLine": 35,
        "startChar": 19,
        "endLine": 35,
        "endChar": 44
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "530dfb9f_b69d0fee",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "I do not like hardcoded sleeps in the test code, it may reduce the flakiness, yes, but makes the overall testing phase slower and won\u0027t eliminate the root cause.",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 75,
        "endChar": 21
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fec1a62_d38c2bc7",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T16:00:41Z",
      "side": 1,
      "message": "This 5s sleep sucks. I would prefer to go with 211693.",
      "parentUuid": "530dfb9f_b69d0fee",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 75,
        "endChar": 21
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac9c11bf_98a10675",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "Why don\u0027t we keep the events and just skip the \"uninteresting ones\" in the test method? You\u0027ve already said that it is impossible to be super-sure that all the events of the initial setup have all been consumed. Adding a sleep and clearing them out, will reduce the impact of the problem but won\u0027t solve it.",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 24
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f62c19_ac615f11",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T16:00:41Z",
      "side": 1,
      "message": "211693 does this by draining the queue at the top of each test method.",
      "parentUuid": "ac9c11bf_98a10675",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 24
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6ba6e8d_88425637",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-01-25T00:49:16Z",
      "side": 1,
      "message": "You basically now are waiting for events up to 30 seconds, this seems a very long time and, in case of failure because an event is not received, it will delay our builds a lot.",
      "range": {
        "startLine": 82,
        "startChar": 38,
        "endLine": 82,
        "endChar": 49
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a3d5bb5_2f4da907",
        "filename": "java/com/google/gerrit/testing/FakeGroupAuditService.java",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-01-25T16:00:41Z",
      "side": 1,
      "message": "See other thread: it\u0027s fundamentally impossible to not wait here, and anyway we are already subject to HTTP timeouts.\n\n(We could also change this to take() which has no timeout, but that increases the upper bound.)",
      "parentUuid": "a6ba6e8d_88425637",
      "range": {
        "startLine": 82,
        "startChar": 38,
        "endLine": 82,
        "endChar": 49
      },
      "revId": "8780ea189779614dcb9befe7d37984fcd6b3ea5b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}