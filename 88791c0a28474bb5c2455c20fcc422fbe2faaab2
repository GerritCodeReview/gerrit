{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a61b11cd_30932d2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-12-07T14:03:32Z",
      "side": 1,
      "message": "LGTM minus your blocker",
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318f130a_5eb63a28",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-06T16:50:12Z",
      "side": 1,
      "message": "This will not work for change datas loaded from the index, since we backfill them from the stored index field \"full_submit_requirements\" which is not yet available in our change schema definition at Google and requires an index upgrade. Hence it will return empty SR results and always make the change submittable.\n\nWe need to gate this by the SRs experiment flag, similar to what we did in https://gerrit-review.googlesource.com/c/gerrit/+/325492.",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1221ea2_88fbec0b",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-12-07T14:09:37Z",
      "side": 1,
      "message": "Actually, I thought that MergeOp will always freshly compute SubmitRules and requirements and not used any cached values? IIRC then we instantiate the ChangeData here with lazyload and there should also be a test for this as it is quite important behavior. The actual submission of a change must never depend on potentially stale data in the change index.",
      "parentUuid": "318f130a_5eb63a28",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66bb4d38_91be6cce",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-07T14:13:47Z",
      "side": 1,
      "message": "+1, we should double-check that on submit submit requirements are always freshly evaluated.",
      "parentUuid": "f1221ea2_88fbec0b",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f45e2b71_783d44b5",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-10T08:57:57Z",
      "side": 1,
      "message": "You\u0027re right. We reload the changes on merge (I missed that and was thinking we might use indexed backed data).\n\nWe\u0027re fine then.\n\nhttps://gerrit.googlesource.com/gerrit/+/9d634283a3a282e3d88a90189a45f3cae5ccca84/java/com/google/gerrit/server/submit/MergeOp.java#504",
      "parentUuid": "66bb4d38_91be6cce",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        ],
        "failingAtoms": [
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/.*\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX"
        ],
        "failingAtoms": [
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "legacy": {
        "value": false
      }
    }
  ]
}