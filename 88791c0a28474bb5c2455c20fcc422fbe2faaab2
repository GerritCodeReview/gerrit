{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a61b11cd_30932d2c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-12-07T14:03:32Z",
      "side": 1,
      "message": "LGTM minus your blocker",
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318f130a_5eb63a28",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-06T16:50:12Z",
      "side": 1,
      "message": "This will not work for change datas loaded from the index, since we backfill them from the stored index field \"full_submit_requirements\" which is not yet available in our change schema definition at Google and requires an index upgrade. Hence it will return empty SR results and always make the change submittable.\n\nWe need to gate this by the SRs experiment flag, similar to what we did in https://gerrit-review.googlesource.com/c/gerrit/+/325492.",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1221ea2_88fbec0b",
        "filename": "java/com/google/gerrit/server/submit/MergeOp.java",
        "patchSetId": 14
      },
      "lineNbr": 312,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-12-07T14:09:37Z",
      "side": 1,
      "message": "Actually, I thought that MergeOp will always freshly compute SubmitRules and requirements and not used any cached values? IIRC then we instantiate the ChangeData here with lazyload and there should also be a test for this as it is quite important behavior. The actual submission of a change must never depend on potentially stale data in the change index.",
      "parentUuid": "318f130a_5eb63a28",
      "range": {
        "startLine": 312,
        "startChar": 64,
        "endLine": 312,
        "endChar": 87
      },
      "revId": "88791c0a28474bb5c2455c20fcc422fbe2faaab2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}