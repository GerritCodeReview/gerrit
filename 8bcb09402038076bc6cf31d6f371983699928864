{
  "comments": [
    {
      "key": {
        "uuid": "57117cbd_9a26210f",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareReadOnlyRefDatabase.java",
        "patchSetId": 23
      },
      "lineNbr": 37,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-09-23T12:44:33Z",
      "side": 1,
      "message": "Can you make a DelegateRefDatabase for the delegation part, and inherit from that instead?",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "210cb2e0_ca50dbeb",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareReadOnlyRefDatabase.java",
        "patchSetId": 23
      },
      "lineNbr": 37,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-23T21:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "57117cbd_9a26210f",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 47
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "474729d0_b37ac029",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepository.java",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-09-23T12:44:33Z",
      "side": 1,
      "message": "Can you make a DelegateRepository to keep the delegation separate from the permission handling?",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 12
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb070565_548009cc",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepository.java",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-23T21:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "474729d0_b37ac029",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 12
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "146d7dc7_6266d65a",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 26,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-09-23T12:44:33Z",
      "side": 1,
      "message": "what is the use case for this if() statement?",
      "range": {
        "startLine": 26,
        "startChar": 9,
        "endLine": 26,
        "endChar": 52
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19d26c13_4ed161e6",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 26,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-23T21:09:46Z",
      "side": 1,
      "message": "Replaced with assertion. Done.",
      "parentUuid": "146d7dc7_6266d65a",
      "range": {
        "startLine": 26,
        "startChar": 9,
        "endLine": 26,
        "endChar": 52
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94eabe8a_3602ab32",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-09-23T12:44:33Z",
      "side": 1,
      "message": "what\u0027s your plan for submitting this series? Later on, you remove this. If this is temporary, document as such.",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 33
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aca1db2_aa029114",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-23T21:09:46Z",
      "side": 1,
      "message": "I verified and in the latest CL in this series this method is still used.",
      "parentUuid": "94eabe8a_3602ab32",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 33
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b2ba232_d12bb1e7",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2019-09-25T16:51:44Z",
      "side": 1,
      "message": "The unwrap method makes it easy for a careless person to undo the security benefits of this approach by simply unwrapping the repo in the wrong place again.\n\nI see you\u0027re only using it in ReceiveCommits. \n\nWhy can\u0027t the ReceiveCommits work on top of a PermissionAwareRefDB/Repo that uses delegation for the r/w parts too? I guess this might affect functionality like banned commits map. \n\nCould you instead pass the unwrapped repo to ReceiveCommits directly?\n\nFinally, in protocol v2, there is no full ref advertisement anymore.  I think you\u0027ll need to do something with the AllRefsWatcher in ReceiveCommits too, because that shouldn\u0027t work anymore if we were using protocol v2.",
      "parentUuid": "0aca1db2_aa029114",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 33
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb00cab5_c66c657e",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-26T07:35:31Z",
      "side": 1,
      "message": "\u003e The unwrap method makes it easy for a careless person to undo the security benefits of this approach by simply unwrapping the repo in the wrong place again.\n\u003e \n\u003e I see you\u0027re only using it in ReceiveCommits. \n\u003e \n\u003e Why can\u0027t the ReceiveCommits work on top of a PermissionAwareRefDB/Repo that uses delegation for the r/w parts too? I guess this might affect functionality like banned commits map. \n\u003e \n\u003e Could you instead pass the unwrapped repo to ReceiveCommits directly?\n\nYes, however, to be able to do it directly in ReceiveCommits, I have to change the modifier of the ReceiveCommits#unwrap() from package protected to public. Either way, reviewers are still there to prevent \"a careless person to undo the security benefits\". Done.\n\n\u003e Finally, in protocol v2, there is no full ref advertisement anymore.  I think you\u0027ll need to do something with the AllRefsWatcher in ReceiveCommits too, because that shouldn\u0027t work anymore if we were using protocol v2.\n\nAccording to the spec: [1] \"Reference advertisement will be omitted unless explicitly requested\". Also note, that the security vulnerability happened during the fetch and not the push operation.\n\nNot sure, though, what is the right course of action with AllRefsWatcher here. How it works on googlesource.com that supports Git wire protocol v2?\n\n[1] https://github.com/git/git/blob/master/Documentation/technical/protocol-v2.txt#L14",
      "parentUuid": "7b2ba232_d12bb1e7",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 33
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19ffbefe_ae5aaa69",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryManager.java",
        "patchSetId": 23
      },
      "lineNbr": 32,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-26T08:33:11Z",
      "side": 1,
      "message": "\u003e \u003e The unwrap method makes it easy for a careless person to undo the security \n\u003e \u003e Finally, in protocol v2, there is no full ref advertisement anymore.  I think you\u0027ll need to do something with the AllRefsWatcher in ReceiveCommits too, because that shouldn\u0027t work anymore if we were using protocol v2.\n\u003e \n\u003e According to the spec: [1] \"Reference advertisement will be omitted unless explicitly requested\". \n\n[...]\n\n\u003e [1] https://github.com/git/git/blob/master/Documentation/technical/protocol-v2.txt#L14Git\n\nI cherry-pciked this whole series, that enabled Git wire protocol v2 per default and enabled it on my Git client. And I have confirmed that git fetch uses Git wire protocol v2. It urns out, that also in git push command: [2], the ref advertisement hook is called, (the stack trace is here: [3]) so that AllRefsWatcher works as expected.\n\nAlso note, that even when the whole series is merged, we still want to support Git wire protocol v1. Either the Git client can be outdated, or Git wire protocol wasn\u0027t enabled on the client side.\n\n* [2] http://paste.openstack.org/show/779417\n* [3] http://paste.openstack.org/show/779418",
      "parentUuid": "fb00cab5_c66c657e",
      "range": {
        "startLine": 32,
        "startChar": 27,
        "endLine": 32,
        "endChar": 33
      },
      "revId": "8bcb09402038076bc6cf31d6f371983699928864",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}