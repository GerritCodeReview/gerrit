{
  "comments": [
    {
      "key": {
        "uuid": "3eb80ed4_39576f2e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 446,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-23T23:03:52Z",
      "side": 1,
      "message": "I think \"depending ancestors\" is redundant. For a given change, all ancestors are dependencies of that change.",
      "range": {
        "startLine": 446,
        "startChar": 33,
        "endLine": 446,
        "endChar": 52
      },
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3eb80ed4_f917b774",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 446,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-23T23:03:52Z",
      "side": 1,
      "message": "Long line.",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e12ced8_a9bf7dfd",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 446,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-24T18:19:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eb80ed4_f917b774",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e51faaa_dcb5cd21",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 446,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-24T18:19:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eb80ed4_39576f2e",
      "range": {
        "startLine": 446,
        "startChar": 33,
        "endLine": 446,
        "endChar": 52
      },
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3eb80ed4_595c234e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 527,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-23T23:03:52Z",
      "side": 1,
      "message": "Missing space before \"pending\".",
      "range": {
        "startLine": 527,
        "startChar": 13,
        "endLine": 527,
        "endChar": 20
      },
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e51faaa_fcba090f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 20
      },
      "lineNbr": 527,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-24T18:19:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3eb80ed4_595c234e",
      "range": {
        "startLine": 527,
        "startChar": 13,
        "endLine": 527,
        "endChar": 20
      },
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3eb80ed4_9965db15",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-23T23:03:52Z",
      "side": 1,
      "message": "Based on our earlier discussion today, I\u0027m no longer sure we want to filter based on the branch. Say you\u0027re trying to submit a merge commit that brings in some changes from another branch. Those changes need to be merged as well for the submit to succeed, but would be excluded by this search.\n\nI think we need a test case for that behavior as well.",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e12ced8_89c4b984",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-24T18:19:51Z",
      "side": 1,
      "message": "The problem here is the ambiguity you may have. There may be a change with the same change id and the same sha1 targeted at different branches if I understand correctly. If this is the case we only want to submit the change in the branch which we\u0027re currently operating on in the merging procedure.\n\nSo there is no real correct way to do it except asking the data base for \"give me the exact parent changes which  change X depends on\"",
      "parentUuid": "3eb80ed4_9965db15",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e51faaa_dcde2d50",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-24T23:54:52Z",
      "side": 1,
      "message": "I don\u0027t follow what you mean by \"give me the exact parent changes which  change X depends on\". In which branch? How would that solve the problem I stated, that we might be attempting to merge in unsubmittable parents from a side branch?\n\nConsider this scenario:\n\n  C\n  | \\\n  A  B\n\nwhere C and A are targeted to branch1, and B is targeted to branch2, and B has CR-1. We _must not_ merge C into branch1. Do you agree?\n\nRight now, looking at this code, the RevWalk will have identified A and B as potential dependencies of C that need to be submitted. But then when you call this method, B will not be returned. So the code will not bother to check B at all, and will assume it\u0027s ok to merge C. That is wrong.",
      "parentUuid": "3e12ced8_89c4b984",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e12ced8_a9d89d62",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-25T00:42:13Z",
      "side": 1,
      "message": "Currently we reject merging anything in a side branch, because it is tricky.\n\nConsider there is B and B\u0027 in your example, with B targeting branch2, CR-1, B\u0027(same change id, same sha1) targeting branch1, CR+2. Then we obviously want to pick B\u0027 which is in our branch.\n\nConsider it the other way round (swap the CR ratings). Then we would have a similar case to yours, which we don\u0027t want to merge.\n\nGiven these 2 examples, I concluded anything not having the same destination branch as the change which included this by rev walk, is not safe to merge. \n\nEven if B in your example had CR+2, you\u0027d modify a branch, which is not necessarily a destination branch of any change pulled in via the submitWholeTopic thing. So it would open a second way to modify different branches. And we probably don\u0027t want that either.\n\nSo the current code uses ref(branch) in here, which I consider quite safe. Notice the test in the other change, which tests the scenario you outlined, but an additional D having the same topic as C. If C cannot be merged because of ancestor problems, D should also not merge).",
      "parentUuid": "9e51faaa_dcde2d50",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e12ced8_e9fd7580",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-25T13:39:06Z",
      "side": 1,
      "message": "\u003e I concluded anything not having the same destination branch as the change which included this by rev walk, is not safe to merge. \n\nAssuming you mean anything _open_ not having the same dest, that\u0027s fine. We still have to preserve the ability to merge in closed changes from another branch, though.\n\n\u003e So the current code uses ref(branch) in here, which I consider quite safe. \n\nI\u0027m still not following how the code you have written does the safe thing. B\u0027s commit will be identified as a commit to pass to byCommitsOnBranchNotMerged, but because B is not on the branch, its change will not be returned. Then in MergeSuperSet where it calls byCommitsOnBranchNotMerged, it will never add B to the superset of changes that it needs to check the status of. MergeSuperSet will return A and C, which are both submittable, MergeOp will conclude C is ok to merge, which it is not.\n\nAm I missing something?\n\nRegardless, please make sure there is a test covering this case.",
      "parentUuid": "3e12ced8_a9d89d62",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e51faaa_5c121d63",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-25T16:22:01Z",
      "side": 1,
      "message": "There are 2 tests for it in https://gerrit-review.googlesource.com/#/c/68869/14/gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/rest/change/SubmitByMergeIfNecessaryIT.java (I need to reword the commit message there as it became more tests)",
      "parentUuid": "3e12ced8_e9fd7580",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e165aff_94e3841a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-06-25T19:05:53Z",
      "side": 1,
      "message": "If the behavior is correct, then I must be misunderstanding the code in this change. What did I miss?",
      "parentUuid": "9e51faaa_5c121d63",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de1c5221_9608ac62",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/InternalChangeQuery.java",
        "patchSetId": 20
      },
      "lineNbr": 137,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-06-25T19:28:21Z",
      "side": 1,
      "message": "If there is an ancestor which is not merged yet, we have different cases:\n1) The ancestor has one associated change, which is targeted at the same branch\n2) The ancestor has one associated change, which is targeted at another branch\n3) The ancestor has more than associated change(same sha1, same change id), which are targeted at different branches.\n  This has 2 sub categories:\n  3a) All changes are CR+2\n  3b) The change targeted at the same branch is CR+2, the other not\n  3c) The change targeted at the other branch is CR+2, while the one targeting the same branch is -2\n  3d) all the changes are CR-2\n4) The ancestor has no change associated with it.\n\n4) should never happen (direct pushes are merged already, everything else has to have a change)\n\nIn case 1) we want that ancestor change to be submitted and integrated.\nIn case 3) and a,b we want the change on the same branch to be submitted and integrated.\n\nIn 3c and 3d we expect Gerrit to prevent the merge as that change is not intended to be on the target branch.\n\nNow as far as I understand your question, you\u0027re worried about case 2)\n\nAnd if we choose to refuse to merge 2) this makes life very easy as we only care about the current branch in all cases then.\n\nThe code to prevent the case 2) being merged is in the first part of MergeOp:integrateIntoHistory as the merges cannot be performed.",
      "parentUuid": "9e165aff_94e3841a",
      "revId": "8df4f31c92ddde586e157c26dbdc3b01e879f50e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}