{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a88077c8_58270b0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2022-08-16T06:10:09Z",
      "side": 1,
      "message": "I would like an answer to the comment before this is submitted(please let me resolve the thread before submitting).\n\nthere are 2 separate issues\n- making a query with invalid input\n- getting an error when using invalid input instead of empty response\n\nIf getting an error is WAI(which is surprising) then this fix is complete and the change can be submitted. \nCan you check(perhaps via gob-ctl) if the server should throw an 500 error instead of empty response if we send \" \" as query otherwise we should be able to send \" \" as query and not have a 500 server response instead of avoiding sending space anytime.\n\nI guess the argument can be made of why send space as a query at all, but I think if there is some issue in which we construct the query and get a 500 then we could first fix that issue to get an empty response(ideal case) and then apply this fix to stop querying the space at all.\n",
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ff480f8_b9317196",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-08-16T06:37:48Z",
      "side": 1,
      "message": "I don\u0027t see why a server should not send an error if as you say it received an \"invalid input\".\n\nThe problem is that we are sending an empty white-string which is not escaped to the server.  This means that for instance if \u0027canSee\u0027 is included you get \" and cansee:${canSee}\".  If we wanted this to work correctly for the server we should escape the string and surround it with quotes. However, there\u0027s no point in doing so because we know there are no emails that start with a whitespace. \n\nStarting with the input query \"owner: ...\" is invalid because the whitespace stops the previous token \"owner:\u003cfoo\u003e\" and starts a new token. In fact, if you really want to you could avoid that we even make the query \u0027getSuggestedAccounts\u0027 at all because whitespace is an invalid character.\n\nThe error we get back is a 400 not a 500.\n\nI don\u0027t think it makes sense to have the server consider invalid input and return empty responses.\n\nIf you really want something with a whitespace, you have to escape it correctly: \u0027owner:\" \"\u0027",
      "parentUuid": "a88077c8_58270b0c",
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc951b5_7044b4f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2022-08-16T06:48:02Z",
      "side": 1,
      "message": "Invalid input doesn\u0027t mean we get a server error. This is what I first want verified with gob-ctl before we continue the discussion.\nIf the server does return 400 using gob-ctl as well or you can dig up the pointer in the server side code then we can resolve it.\n\nConsider if BE is doing the trimming on their end as well and we don\u0027t get the benefit of that simply because we did not construct the query string properly.\n\nDid you verify using gob-ctl if we indeed get the same response or we get an empty array.\nAsking for owners starting with emails is for me a technically valid query even though the answer should always be empty response.\n\nThe issue with the query construction might show up in other API requests which is why I want to take a look at our general query construction mechanism instead of focusing solely on the SuggestAccounts API.\n\nThe reason why I filed this bug is because I wanted to see if this query could be made without getting a 400 for which we need to verify how the server actually handles the \"owner:space\" query.\n\nLet me know if you prefer me to do it but I do think the bug involves.\n\n1. Figuring out if 400 is the correct response instead of [].\n2. Our query building mechanism can be improved to fix it.\n3. This change that does the trimming to not request spaces.\n\nI can imagine a potential API in the future that lets users specify space as the starting token and our query building mechanism shouldn\u0027t construct an invalid query in that case.",
      "parentUuid": "3ff480f8_b9317196",
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4851eaea_bd550778",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-08-16T07:25:35Z",
      "side": 1,
      "message": "An invalid input is exactly the kind of thing you\u0027d expect a server error for.  I\u0027ve looked into the code, the logic that fails isn\u0027t even inside of gerrit code, it\u0027s part of the antlr library.\n\nThe URL is malformed. If you wanted to ask for whitespace, you\u0027d have to escape it\n\nSo:\n```\nhttps://gerrit-review.googlesource.com/accounts/?o\u003dDETAILS\u0026q\u003d\"%20\"\u0026n\u003d10\n```\n\nInstead of \n```\nhttps://gerrit-review.googlesource.com/accounts/?o\u003dDETAILS\u0026q\u003d%20\u0026n\u003d10\n```",
      "parentUuid": "1fc951b5_7044b4f1",
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b802505_2b819cfc",
        "filename": "polygerrit-ui/app/services/gr-rest-api/gr-rest-api-impl.ts",
        "patchSetId": 2
      },
      "lineNbr": 1656,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2022-08-15T01:54:14Z",
      "side": 1,
      "message": "Couldn\u0027t this be `inputVal?.trim() || \u0027\u0027` or `inputVal?.trim() ?? \u0027\u0027`",
      "range": {
        "startLine": 1656,
        "startChar": 15,
        "endLine": 1656,
        "endChar": 47
      },
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08a5f988_22675ae8",
        "filename": "polygerrit-ui/app/services/gr-rest-api/gr-rest-api-impl.ts",
        "patchSetId": 2
      },
      "lineNbr": 1656,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-08-15T08:38:18Z",
      "side": 1,
      "message": "```suggestion\n    inputVal \u003d inputVal.trim();\n```",
      "parentUuid": "2b802505_2b819cfc",
      "range": {
        "startLine": 1656,
        "startChar": 15,
        "endLine": 1656,
        "endChar": 47
      },
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51301837_6d421608",
        "filename": "polygerrit-ui/app/services/gr-rest-api/gr-rest-api-impl.ts",
        "patchSetId": 2
      },
      "lineNbr": 1656,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-08-16T06:37:48Z",
      "side": 1,
      "message": "I tried that originally, inputVal can be undefined (at least in the tests).",
      "parentUuid": "08a5f988_22675ae8",
      "range": {
        "startLine": 1656,
        "startChar": 15,
        "endLine": 1656,
        "endChar": 47
      },
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc9bad1e_8f3054cf",
        "filename": "polygerrit-ui/app/services/gr-rest-api/gr-rest-api-impl.ts",
        "patchSetId": 2
      },
      "lineNbr": 1657,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-08-15T08:38:18Z",
      "side": 1,
      "message": "```suggestion\n    if (inputVal.length \u003e 0) {\n```",
      "revId": "8eb127690f7fb99679975b3c67688e6186ee68b8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}