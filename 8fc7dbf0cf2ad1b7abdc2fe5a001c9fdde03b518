{
  "comments": [
    {
      "key": {
        "uuid": "NKdlccxo",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-20T06:07:52Z",
      "side": 1,
      "message": "Why isn\u0027t the permission_sort cache hiding the bad performance of shortestExample? The code you are caching here is invoked only once for each unique set of references that need to be sorted. Does increasing your server\u0027s permission_sort cache fix the problem too?\n\nOr are you only looking at the initial startup time when the caching is populating?",
      "revId": "8fc7dbf0cf2ad1b7abdc2fe5a001c9fdde03b518",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NK5cPpDg",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1010362
      },
      "writtenOn": "2012-12-21T15:14:27Z",
      "side": 1,
      "message": "I ran the tests after the caches was done populating. The tests were made on a isolated test environment, and I am pretty sure I did not fill up the permission_sort-cache (too be fair, I only checked once). \n\nI\u0027m on vacation now, but when I get back to the Office, I will dig a bit deeper to see why the permission sort did not got hit enough.\n\nWhen I wrote this fix, I had just done some quick profiling and saw that Bric\u0027s getShortestExample() killed the performance (and cached it accordingly). As I guessed beforehand, I did see a quite big performance gain after this fix.",
      "parentUuid": "NKdlccxo",
      "revId": "8fc7dbf0cf2ad1b7abdc2fe5a001c9fdde03b518",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NKFrylS4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/util/MostSpecificComparator.java",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2012-12-20T01:47:04Z",
      "side": 1,
      "message": "Since this is static, these will grow indefinitely without an expiry mechanism.  To prevent this, should this be managed by the cache mechanisms allowing time or size restrictions to be configured?  Like you pointed out, it is likely small.  Shawn, do you care?",
      "revId": "8fc7dbf0cf2ad1b7abdc2fe5a001c9fdde03b518",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NKRljy9Y",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/util/MostSpecificComparator.java",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-20T05:41:56Z",
      "side": 1,
      "message": "Yes, I care. Please make this a proper cache object using our caching implementation.\n\nSince you want to compute the shortest example for a given regex, it can be a LoadingCache with the loader function accepting the regex, and returning the shortest version.",
      "parentUuid": "NKFrylS4",
      "revId": "8fc7dbf0cf2ad1b7abdc2fe5a001c9fdde03b518",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NHmTySi8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/util/MostSpecificComparator.java",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2012-12-19T22:08:04Z",
      "side": 1,
      "message": "this empty line should not be here but just above the line 97",
      "revId": "8fc7dbf0cf2ad1b7abdc2fe5a001c9fdde03b518",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}