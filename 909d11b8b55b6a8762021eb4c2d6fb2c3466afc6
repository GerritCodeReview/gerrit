{
  "comments": [
    {
      "key": {
        "uuid": "3d6bdd43_35bcc3ae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-02-14T07:52:17Z",
      "side": 1,
      "message": "Let me add \"migration\" to this list :)\n\nI think the hard parts about removing support for drafts are:\n\n1. smooth transition for users that use drafts today\n2. migration of existing draft changes and patch sets\n\nRegarding 1. there are 2 use cases for which users do use drafts:\n\na) As a staging area for preparing a change (or patch set, although it doesn\u0027t really work for patch sets) before it gets visible to other users. For this users upload a draft change, self-review it in Gerrit and publish it when they think it\u0027s ready. While such a self-review could be done locally with Git command line users prefer to look at their change in Gerrit before publishing as this is the tool they are used to. I think this use-case can be well covered by using change edits, but I think there are a few things for change edits that we need to implement first (e.g. allow having a change that only consists out of a change edit).\n\nb) Collaborate with other users in private. E.g. two users that do pair programming develop a change together and they upload early versions of the change so that they can exchange work, but those early versions are not ready for review yet, hence they want to have them as a draft. This is something that you can\u0027t do with change edits since change edits are not visible to other users. A poor mans solution for this would be to have a \"WIP\" marker in the commit message, but this wouldn\u0027t avoid sending out email to watchers etc.. There are also requests for being able to develop security fixes in private and publish them only after merge. This is something that you can\u0027t do with draft changes today, but also not with change edits. Our idea to solve this is to introduce a new concept for private changes, where the privacy is controlled by a bit on the change, and not a change status [1]. This alone may not be enough justification for implementing this in core, but we also need private changes for the migration (see below).\n\nRegarding 2. there are some problems:\n\na) We can\u0027t just make all existing draft changes public. That would be very unexpected for users that relied on the restricted visibility of draft changes. \n\nb) We can\u0027t delete all existing draft changes, because users don\u0027t want to loose this data.\n\nc) We can\u0027t convert all draft changes and draft patch sets to change edits. Since you can have only a single change edit on a change, this migration would fail if the user already has a change edit, or if there are multiple draft patch sets on the change.\n\nWe think a good solution for this would be to convert them to private changes, but other ideas are welcome. However converting draft changes to private changes requires us to implement private changes as a feature in Gerrit core (although otherwise it would be nice to implement this as a plugin).\n\nAnother aspect regarding 2. is NoteDb. In NoteDb the draft information is stored in the change meta branches. To remove/modify this draft data we must rewrite the history of all change meta branches.\n\nAlso we may want to cleanup project configs and remove draft related permissions from them for all projects.\n\nI guess everyone agrees that drafts don\u0027t work well and that we want to remove the support for the draft workflow. However first I really want to have clarity about how the existing draft use cases are covered when drafts are gone and how the migration problem will be solved. \n\n[1] https://gerrit-review.googlesource.com/94557",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79c33d40_0c4f6c66",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-14T10:16:52Z",
      "side": 1,
      "message": "\u003e Let me add \"migration\" to this list :)\n\n:-) see below.\n\n\u003e Regarding 1. there are 2 use cases for which users do use drafts:\n\u003e a) As a staging area for preparing a change ...\n\nI agree, it should be enough to use edits, be able to delete regular changes, and delete regular patch sets (not possible now, but see accepted issue i linked to).\n\n\u003e b) Collaborate with other users in private.\n\nYes it\u0027s possible now. However, this hiding and high secrecy on public repositories feature, so to say to hide changes from own team members, is all very specialized workflow and IMO, it could be easily lost, as with early gerrit migrations:\n\n* Old change screen migration to new change screen lost some features\n* Google abandoned OpenID 2, there was this announcement, done: [1].\n\nI volunteer to write a similar announcement to dev mailing list about removal of draft workflow.\n\n\u003e a) We can\u0027t just make all existing draft changes public\n\nSure we can:\n\n  update changes set status \u003d \u0027n\u0027 where status \u003d \u0027d\u0027\n\nTo make this migration path less painful, we could release intermediate gerrit version where, unconditionally, we warn when users upload drafts changes:\n\n  git push origin HEAD:refs/drafts/master\n\nwith:\n\n  WARNING: the draft workflow is deprecated and is subject to be removed in future gerrit releases.\n\n\u003e We think a good solution for this would be to convert them to private changes, but other ideas are welcome. \n\nAs I said on Patrick\u0027s proposal, i do not fully understand private/protected changes feature request from previous Google code review systems. Is the private bit is sticky? Can private change be turned from private to public? Visa versa?\n\nCan I do this:\n\n* regular change with number of regular patch set is uploaded\n* suddenly someone thinks it\u0027s high secret, at that point change owner has three options:\n\n* 1. remove the regular patch set that turned the change to be high secret\n* 2. remove the change\n* 3. set non-sticky private bit\n\nCan private change be merged? If yes, what happens if I pull the commit from the repository? How could I see the communication thread of private change, if I am a team member, but wasn\u0027t explicitly added as a reviewer of this change. Or should the private change be turned to non-private first before merging? Should I be able to turn private change after it was merged, but x years passed to non private?\n\nIf all transition in every step: before upload, after upload, before merge from non-private to public and visa versa is possible, then the Work-In-Progress (WIP) workflow is very similar: to flip a bit from wip to non wip (ready).\n\nThe only difference between wip and private changes workflows is the implication of flipping the bit: in private/protected changes, all you want is to behave exactly like in draft workflow (please, correct me, if I got it wrong): restrict the visibility. In WIP workflow all what is needed, to shut down the mail firehouse, and take that change down from all reviewers dashboards.\n\nOne migration scenario that I could imagine would be then:\n\n* implement private change workflow\n* implement wip workflow\n\nDefine draft migration strategy (if wanted, it could be even done per project base) to be one of:\n\n* 1. DARFT -\u003e /dev/null\n* 2. DRAFT -\u003e private changes workflow\n* 3. DRAFT -\u003e work in progress workflow\n\nChallenge: it would be very tough time frame to do both alternative workflows as a plugins or gerrit libraries, new extension approach Luca suggested during last hackathon.\n\nIf Chromium team urgently needs that private changes workflow, another option/compromise would be to *temporarily* add both workflows (private changes|wip) to core, make it configurable, to unblock chromium migration. Later add missing extension points and extract those workflows as plugins/libraries, + allow alternative workflows based on change fields.\n\n* [1] https://groups.google.com/d/msg/repo-discuss/Hjn-6BV3KBU/utFpx47DP5MJ",
      "parentUuid": "3d6bdd43_35bcc3ae",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "010c796b_fe2edf47",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-02-14T11:58:01Z",
      "side": 1,
      "message": "\u003e \u003e Regarding 1. there are 2 use cases for which users do use drafts:\n \u003e \u003e a) As a staging area for preparing a change ...\n \u003e \n \u003e I agree, it should be enough to use edits, be able to delete\n \u003e regular changes, and delete regular patch sets (not possible now,\n \u003e but see accepted issue i linked to).\n\nYeah, supporting deletion on regular changes/patch sets should be supported too.\nThat should be pretty straight-forward.\nI\u0027m just not sure how much work it is to support changes which only have a change edit, but no regular patch sets. This is needed so that you can start a new change with an edit and review it yourself before publish.\n\n \u003e \u003e b) Collaborate with other users in private.\n \u003e \n \u003e Yes it\u0027s possible now. However, this hiding and high secrecy on\n \u003e public repositories feature, so to say to hide changes from own\n \u003e team members, is all very specialized workflow and IMO, it could be\n \u003e easily lost, as with early gerrit migrations:\n\nYes I also don\u0027t think that this is a critical feature and that it would be okay to say that we no longer support private collaboration on changes. I only would implement it now, because it helps us with the migration of existing draft changes.\n\n \u003e \u003e a) We can\u0027t just make all existing draft changes public\n \u003e \n \u003e Sure we can:\n \u003e \n \u003e update changes set status \u003d \u0027n\u0027 where status \u003d \u0027d\u0027\n\nSure. It\u0027s not a technical problem. Still I think it would makes users very unhappy, if we suddenly make everything public. Of course we could announce the deprecation of drafts and encourage all users to either publish or delete their drafts, then let some time pass remind them again and  then later forcefully migrate the rest. I only believe that uses wouldn\u0027t consider this migration as \"smooth\", but rather disruptive, which I would like to avoid.\n\n\n \u003e To make this migration path less painful, we could release\n \u003e intermediate gerrit version where, unconditionally, we warn when\n \u003e users upload drafts changes:\n \u003e \n \u003e git push origin HEAD:refs/drafts/master\n \u003e \n \u003e with:\n \u003e \n \u003e WARNING: the draft workflow is deprecated and is subject to be\n \u003e removed in future gerrit releases.\n\nThis wouldn\u0027t warn users with existing drafts, maybe they don\u0027t push new drafts.\nBut I agree that we probably need such a warning for a transition phase in any case.\n\n \u003e \u003e We think a good solution for this would be to convert them to\n \u003e private changes, but other ideas are welcome.\n \u003e \n \u003e As I said on Patrick\u0027s proposal, i do not fully understand\n \u003e private/protected changes feature request from previous Google code\n \u003e review systems. Is the private bit is sticky? Can private change be\n \u003e turned from private to public? Visa versa?\n\nThe private bit is very simple. It\u0027s on change level and applies to all patch sets of the change. Either the full change is private or the full change is visible.\n\n \u003e Can I do this:\n \u003e \n \u003e * regular change with number of regular patch set is uploaded\n \u003e * suddenly someone thinks it\u0027s high secret, at that point change\n \u003e owner has three options:\n \u003e \n \u003e * 1. remove the regular patch set that turned the change to be high\n \u003e secret\n \u003e * 2. remove the change\n \u003e * 3. set non-sticky private bit\n\nYes, the private bit, can be flipped forth and back, independently of the change state.\nSo if someone turns a public change private, it\u0027s no longer visible to all users. We may be nice and tell those users that cannot see the change anymore that the change is private now, rather then letting them see a Resource not found error.\n\n \u003e Can private change be merged? If yes, what happens if I pull the\n \u003e commit from the repository? How could I see the communication\n \u003e thread of private change, if I am a team member, but wasn\u0027t\n \u003e explicitly added as a reviewer of this change. Or should the\n \u003e private change be turned to non-private first before merging?\n \u003e Should I be able to turn private change after it was merged, but x\n \u003e years passed to non private?\n\nYou would be able to merge private changes, just like regular changes. Of course this means that people pulling from the repository will see the final commit, but this is the same as if someone would have pushed directly into the repository and code review was by-passed. The change with all comments would stay private, but could be turned public any time.\nIt should even be possible to make merged changes private after years (although I don\u0027t see a good use case for this). As I said the private bit should be completely independent from the change state, which should also make the implementation easier.\n\n \u003e If all transition in every step: before upload, after upload,\n \u003e before merge from non-private to public and visa versa is possible,\n \u003e then the Work-In-Progress (WIP) workflow is very similar: to flip a\n \u003e bit from wip to non wip (ready).\n \u003e \n \u003e The only difference between wip and private changes workflows is\n \u003e the implication of flipping the bit: in private/protected changes,\n \u003e all you want is to behave exactly like in draft workflow (please,\n \u003e correct me, if I got it wrong): restrict the visibility. In WIP\n \u003e workflow all what is needed, to shut down the mail firehouse, and\n \u003e take that change down from all reviewers dashboards.\n\nYes, WIP is similar. The effect of flipping the WIP bit would have different effects of course.\nBut for WIP there may also be additional constraints, like not being able to make a merged change as WIP, and not being able to submit a change while it is still WIP.\n\n \u003e One migration scenario that I could imagine would be then:\n \u003e \n \u003e * implement private change workflow\n \u003e * implement wip workflow\n\nYes, I think it\u0027s a good opportunity to also implement the WIP workflow now in core. It was just bad to implement it as another change status, as it was bad to implement drafts as a change status. But this we have learned now :)\n\n \u003e Define draft migration strategy (if wanted, it could be even done\n \u003e per project base) to be one of:\n \u003e \n \u003e * 1. DARFT -\u003e /dev/null\n \u003e * 2. DRAFT -\u003e private changes workflow\n \u003e * 3. DRAFT -\u003e work in progress workflow\n\nYes, if this is decided by the project owner (or admin), all of those should work.\nOnly if we would need to decide for one, then I would go for 3. since it\u0027s the most restrictive migration, and hence least surprising for users. We would like to use 3. for all of our servers.\n\n \u003e Challenge: it would be very tough time frame to do both alternative\n \u003e workflows as a plugins or gerrit libraries, new extension approach\n \u003e Luca suggested during last hackathon.\n\nYeah, implementing a workflow in a plugin is much more work. I think we are not really there yet (e.g. NoteDb and change index don\u0027t support plugin fields). But even if, then we still couldn\u0027t use the plugin during the migration.\n\n \u003e If Chromium team urgently needs that private changes workflow,\n \u003e another option/compromise would be to *temporarily* add both\n \u003e workflows (private changes|wip) to core, make it configurable, to\n \u003e unblock chromium migration. Later add missing extension points and\n \u003e extract those workflows as plugins/libraries, + allow alternative\n \u003e workflows based on change fields.\n\nI agree, we can still move these workflow supports out into a plugins later. No need to keep them in core forever.",
      "parentUuid": "79c33d40_0c4f6c66",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4780989_29958d7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-02-14T12:41:44Z",
      "side": 1,
      "message": "\u003e I agree, we can still move these workflow supports out into a\n \u003e plugins later. No need to keep them in core forever.\n\nLooks like the concept of workflow support is a good candidate for the Munich hackathon :-)",
      "parentUuid": "010c796b_fe2edf47",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "544733cc_5fafa8ec",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-14T13:02:49Z",
      "side": 1,
      "message": "\u003e \u003e * 1. DARFT -\u003e /dev/null\n \u003e \u003e * 2. DRAFT -\u003e private changes workflow\n \u003e \u003e * 3. DRAFT -\u003e work in progress workflow\n \u003e \n \u003e Yes, if this is decided by the project owner (or admin), all of\n \u003e those should work.\n \u003e Only if we would need to decide for one, then I would go for 3.\n \u003e since it\u0027s the most restrictive migration, and hence least\n \u003e surprising for users. We would like to use 3. for all of our\n \u003e servers.\n\nYou meant 2. right? ;-) As in 3. (WIP case) the changes would be published and visible for all users and not only change reviewers, as it was the case with draft workflow.",
      "parentUuid": "010c796b_fe2edf47",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05f2c0d6_8d71305d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 13,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-02-14T13:02:49Z",
      "side": 1,
      "message": "Indeed ;-) Actually a trivial problem, that is surprisingly hard to solve as a plugin. One advantage to make it core feature though, is that other plugins could respect the wip bit, say reviewers plugin, or owners or find_owners and friends. They could consider the wip bit is set, and turn off the notification firehouse. It would be even harder to do if wip is a plugin, as we still don\u0027t support inter-plugin dependencies, that sounds like a topic of another Gerrit Hackathon.\n\nHowever, the implementation in *core* for wip workflow would be really straight forward:\n\n* add boolean bit wip to Change\n* allow to pass wip git option on push:\n\n  git push -o wip origin HEAD:refs/for/master\n\nand set this bit on Change instance\n\n* persist this as footer field\n* add isWip secondary index field, to find all my wip changes\n* adjust reviewers predicate to filter out all wip changes\n* when sending mails don\u0027t send anything if the wip bit is set\n* Add UI for flipping WIP bit in GWT UI and PG UI\n\nFurther constraints, as pointed out by Edwin:\n\n* Changes with WIP bit set, cannot be merged (well, we could probably ignore it for now, to simplify implementation)\n* For merged changes WIP bit cannot be set\n\nAny volunteers to help with implementations/reviews of the WIP workflow? ;-)",
      "parentUuid": "d4780989_29958d7c",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 13,
        "endChar": 7
      },
      "revId": "909d11b8b55b6a8762021eb4c2d6fb2c3466afc6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}