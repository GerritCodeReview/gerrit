{
  "comments": [
    {
      "key": {
        "uuid": "AAABCH///PQ\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/FastForwardOnly.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-06-11T05:24:40Z",
      "side": 1,
      "message": "Maybe put this for loop in a function in parent (or a new \"Merger\" parent) since it is used by two subclasses.  Same goes for the merge loop in the other two classes.\n\nAnother approach would be to only have two subclasses: one for cherrypick, and one for the other 3 cases since they share so much.  A third even simpler approach might be to just leave the three similar approaches in the parent and only override with the really big one.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH//+/A\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2011-06-14T00:45:30Z",
      "side": 1,
      "message": "This factory can probably be dropped since you have MergeOpFactory now to do the same thing.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH///PM\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOp.java",
        "patchSetId": 1
      },
      "lineNbr": 603,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-06-11T05:24:40Z",
      "side": 1,
      "message": "Erroneous wrap?",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH///PU\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-06-11T05:24:40Z",
      "side": 1,
      "message": "I think that new classes get 2011 even if copied from old classes?",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH//+/M\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2011-06-14T00:45:30Z",
      "side": 1,
      "message": "Eh, it depends on how much survives... and how interesting that code is. Here I would argue the date should be 2011. My old code they copied isn\u0027t really copyrightable as its small and the only way to write this code in this language.\n\nThe new code is clearly 2011 stuff, and is what is relevant to this new class. So I would say 2011 here.",
      "parentUuid": "AAABCH///PU\u003d",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH///2c\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1004010
      },
      "writtenOn": "2011-06-08T14:52:18Z",
      "side": 1,
      "message": "I\u0027m not confident this is the smarter way to handle all these parameters from here to MergeOp. The best option would be make guice inject them directly into MergeOp through its subclasses. But I haven\u0027t found a way to do so.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH//+/I\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2011-06-14T00:45:30Z",
      "side": 1,
      "message": "Use a factory for each of the subclass types.\n\nThat way each subclass can take the arguments it needs via its own @Inject constructor, and arguments can be passed along via the @Assisted injection parameter. We have many examples of this in our code base, just search for @Assisted.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH///z8\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-06-11T05:24:40Z",
      "side": 1,
      "message": "Style nit:  I suspect that these types of trailing blank lines should go away.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABCH//+/E\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/MergeOpFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2011-06-14T00:45:30Z",
      "side": 1,
      "message": "Yes, please remove the trailing blank lines.",
      "revId": "91ebb0e1a732c7326f760dce7c74b6723a391cef",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}