{
  "comments": [
    {
      "key": {
        "uuid": "NLlRALDY",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-22T01:07:41Z",
      "side": 1,
      "message": "nit: if (p !\u003d null)",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Ndyv3GR4",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1000253
      },
      "writtenOn": "2012-12-31T21:40:44Z",
      "side": 1,
      "message": "Removed this block following your suggestion below",
      "parentUuid": "NLlRALDY",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NLnRFKEU",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-22T01:07:41Z",
      "side": 1,
      "message": "this method can be shorter:\n\n  return p !\u003d null ? p.get() : null;",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NdwvyXS0",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1000253
      },
      "writtenOn": "2012-12-31T21:40:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "NLnRFKEU",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NKtgurZI",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000253
      },
      "writtenOn": "2012-12-21T23:14:18Z",
      "side": 1,
      "message": "Is there a better way to handle this situation?  This code successfully prevents the second plugin from being loaded, but the log message is not as helpful as it could be:\n\n [2012-12-21 14:33:26,777] WARN  com.google.gerrit.server.plugins.PluginLoader : Cannot load plugin static-avatar-provider\njava.lang.RuntimeException: 2Type already provided by FactoryProxy[key\u003dKey[type\u003dcom.google.gerrit.server.avatar.AvatarProvider, annotation\u003d@com.google.inject.internal.UniqueAnnotations$Internal(value\u003d95)], provider\u003dcom.google.inject.internal.ConstructorBindingImpl$Factory@d032cf5[Scopes.SINGLETON]]\n\tat com.google.gerrit.extensions.registration.DynamicItem.set(DynamicItem.java:186)\n\tat com.google.gerrit.extensions.registration.PrivateInternals_DynamicTypes.attachItems(PrivateInternals_DynamicTypes.java:99)\n\tat com.google.gerrit.server.plugins.PluginGuiceEnvironment.attachItem(PluginGuiceEnvironment.java:209)\n\tat com.google.gerrit.server.plugins.PluginGuiceEnvironment.onStartPlugin(PluginGuiceEnvironment.java:195)\n\tat com.google.gerrit.server.plugins.PluginLoader.runPlugin(PluginLoader.java:356)\n\tat com.google.gerrit.server.plugins.PluginLoader.rescan(PluginLoader.java:325)\n\tat com.google.gerrit.server.plugins.PluginLoader.start(PluginLoader.java:242)\n\tat com.google.gerrit.lifecycle.LifecycleManager.start(LifecycleManager.java:74)\n\tat com.google.gerrit.pgm.Daemon.run(Daemon.java:171)\n\tat com.google.gerrit.pgm.util.AbstractProgram.main(AbstractProgram.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat com.google.gerrit.launcher.GerritLauncher.invokeProgram(GerritLauncher.java:168)\n\tat com.google.gerrit.launcher.GerritLauncher.mainImpl(GerritLauncher.java:92)\n\tat com.google.gerrit.launcher.GerritLauncher.main(GerritLauncher.java:50)\n\tat Main.main(Main.java:25)",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NLjRPsGU",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-22T01:07:41Z",
      "side": 1,
      "message": "I would use ProvisionException maybe instead of RuntimeException, or IllegalStateException, but otherwise I\u0027m not sure you can get a cleaner error here.\n\nMaybe you can pass the Key into the constructor. You have it in the itemOf() method above. Pass it to the Provider, and then the Provider can pass it to the DynamicItem. Then you have the Key available to say what type was already provided.\n\nYou could get better data about which plugin supplied the current Provider if you pass the plugin name into the set() method. This is a bit more work because you need to carry the plugin name when the set method is called from the plugin. But this should be doable in the existing Guice glue code you are already writing to invoke DynamicItem.set.\n\nIf you do that, you need to make a new tiny type to put into the AtomicReference. Instead of a Provider\u003cT\u003e you need something that is a pair of Provider\u003cT\u003e and the description string of who supplied the current value.",
      "parentUuid": "NKtgurZI",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "Nd2sBIQ8",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1000253
      },
      "writtenOn": "2012-12-31T21:40:44Z",
      "side": 1,
      "message": "Sorry, my (lack of) guice knowledge is really showing here -\n\nI played around with adding the Key to the Exception String, but don\u0027t see any new or helpful information.  We call itemOf() from the GerritGlobalModule, so how would the Key have information on the type already provided?\n\nMy test code:\n\n throw new ProvisionException(\"Type already provided by \"\n          + this.item.get() + \"\\nUsing key \" + this.key);\n\nlog contents:\n\n [2012-12-31 15:22:32,238] WARN  com.google.gerrit.server.plugins.PluginLoader : Cannot load plugin static-avatar-provider\ncom.google.inject.ProvisionException: Guice provision errors:\n\n 1) Type already provided by FactoryProxy[key\u003dKey[type\u003dcom.google.gerrit.server.avatar.AvatarProvider, annotation\u003d@com.google.inject.internal.UniqueAnnotations$Internal(value\u003d95)], provider\u003dcom.google.inject.internal.ConstructorBindingImpl$Factory@230e2610[Scopes.SINGLETON]]\nUsing key Key[type\u003dcom.google.gerrit.extensions.registration.DynamicItem\u003ccom.google.gerrit.server.avatar.AvatarProvider\u003e, annotation\u003d[none]]\n\nWhat am I missing?",
      "parentUuid": "NLjRPsGU",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NcXFPWGQ",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-01-01T17:32:38Z",
      "side": 1,
      "message": "The new error message you have is slightly easier to read than the original error, but still doesn\u0027t tell us which plugin. If you can\u0027t figure out how to get the plugin name in there upload what you have and I\u0027ll see if I can add the plugin name for you.",
      "parentUuid": "Nd2sBIQ8",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NKvgrcX8",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItem.java",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1000253
      },
      "writtenOn": "2012-12-21T23:14:18Z",
      "side": 1,
      "message": "Same question as above",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "NLhRKtFQ",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/registration/DynamicItemProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-12-22T01:07:41Z",
      "side": 1,
      "message": "We probably do want to here, that would be an indication the main server is configured wrong in Guice.",
      "revId": "93f09e2a639f70d4630347d3e721617123e5c0ec",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}