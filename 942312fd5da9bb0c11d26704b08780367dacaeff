{
  "comments": [
    {
      "key": {
        "uuid": "8e6375c3_173cb4b1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 355,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T00:38:02Z",
      "side": 1,
      "message": "No need to wrap this exception, we already throw OrmException from this method. The reason you needed to wrap it above in getDescription was you were implementing a method in the UiAction interface that is not allowed to throw.",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_a9f9fd90",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 355,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-14T00:50:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8e6375c3_173cb4b1",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_f7e100de",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 366,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T00:38:02Z",
      "side": 1,
      "message": "There are cases here where you might not want to return null. Specifically, consider a race where one of the other changes in the topic is abandoned after the byTopic() call above but before the corresponding submitToDatabase() call for that change. Then change.getStatus().isOpen() will return false, and submitToDatabase() will return null.\n\nWhat\u0027s the right thing to do in this case? Abort this atomic submit? I can see the argument for that, I guess. But I can also see the argument the other way, that we should continue the submit because every currently-open change is still submittable.",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_37c4584e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 366,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-14T00:50:10Z",
      "side": 1,
      "message": "I\u0027d think aborting is the safe thing to do here. Why is a change abandoned in that moment?\n\nSo you\u0027d just ignore the return of submitToDatabase and think it\u0027s fine if some are abandoned during the submission?",
      "parentUuid": "8e6375c3_f7e100de",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_b7fea874",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 366,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T00:53:25Z",
      "side": 1,
      "message": "\u003e Why is a change abandoned in that moment?\n\nIt\u0027s a race. Perhaps the change was owned by someone else and they decided they wanted to abandon it.\n\n\u003e So you\u0027d just ignore the return of submitToDatabase and think it\u0027s fine if some are abandoned during the submission?\n\nNot ignore the return value. Make it return the change regardless of whether or not it was modified. Only abort if the status is not in {SUBMITTED,ABANDONED}.\n\nExcept maybe you\u0027d also want to double-check the topic.\n\nEh, maybe aborting is easier.",
      "parentUuid": "8e6375c3_37c4584e",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_f7f8208a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 366,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-14T00:56:44Z",
      "side": 1,
      "message": "\u003e It\u0027s a race. Perhaps the change was owned by someone else and they decided they wanted to abandon it.\n\nThis is an indication to me that the user or the someone else thinks the topic as it was before is a partial bad idea. This is why I strongly favor aborting. (Not just cleaner code, but also what the user would expect? Modifying changes in flight shall abort the \"in flight\" rather than submitting only half the topic)",
      "parentUuid": "8e6375c3_b7fea874",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_89feb974",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 366,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T01:02:49Z",
      "side": 1,
      "message": "\u003e This is why I strongly favor aborting.\n\nOk. This is another situation where we want to be able to communicate this back to the user, but we\u0027re already punting on that.\n\n\u003e Modifying changes in flight shall abort the \"in flight\" rather than submitting only half the topic\n\nWell, except it does still submit only half the topic, because submitToDatabase was still called on the first half, and there are no multi-change transactions so you can\u0027t rollback automatically. It doesn\u0027t merge any of the topic, though.\n\nI wonder if it makes more sense to continue calling submitToDatabase on the rest of them. Then maybe you\u0027ll end up with N-1 changes in SUBMITTED and 1 change in ABANDONED, rather than a handful in SUBMITTED, a handful in NEW, and the one in ABANDONED.",
      "parentUuid": "8e6375c3_f7f8208a",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_293cedb1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 380,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T00:38:02Z",
      "side": 1,
      "message": "This method is getting a little hard to read. Instead of:\n\n public void foo() {\n   boolean option \u003d ...;\n   if (option) {\n     step1WithOption();\n   } else {\n     step1WithoutOption();\n   }\n   step2();\n   if (option) {\n     step3WithOption();\n   } else {\n     step3WithoutOption();\n   }\n   step4();\n   if (option) {\n     step5WithOption();\n   } else {\n     step5WithoutOption();\n   }\n }\n\nDo:\n\n public void foo() {\n   boolean option \u003d ...;\n   if (option) {\n     fooWithOption();\n   } else {\n     fooWithoutOption();\n   }\n }\n\n private void fooWithOption() {\n   step1WithOption();\n   step2();\n   step3WithOption();\n   step4();\n   step5WithOption();\n }\n\n private void fooWithoutOption() {\n   step1WithoutOption();\n   step2();\n   step3WithoutOption();\n   step4();\n   step5WithoutOption();\n }\n\nIMHO this improves readability. If you feel strongly otherwise, you don\u0027t have to.",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_77ced06f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 380,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-14T00:50:10Z",
      "side": 1,
      "message": "I\u0027ll test it",
      "parentUuid": "cedbadab_293cedb1",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_e921358f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 381,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T00:38:02Z",
      "side": 1,
      "message": "Submitted.",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_57d1cc0a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 8
      },
      "lineNbr": 381,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-14T00:50:10Z",
      "side": 1,
      "message": "heh, now I do wonder how I should make use of it as I see a problem with the indexing being asynchronous. I\u0027d just call the indexer to do its work and be happy? This may lead to confusing states for the user. If we were to wait until everything was indexed the user would know by the site \"hanging\" that there is still work done in the background?",
      "parentUuid": "cedbadab_e921358f",
      "revId": "942312fd5da9bb0c11d26704b08780367dacaeff",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}