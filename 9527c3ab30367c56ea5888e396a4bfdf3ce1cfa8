{
  "comments": [
    {
      "key": {
        "uuid": "d8420ca4_4aa26656",
        "filename": "java/com/google/gerrit/server/account/ExternalGroupsKeyReader.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-03-24T08:39:11Z",
      "side": 1,
      "message": "nit: Please add JavaDoc",
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34558a63_915cd362",
        "filename": "java/com/google/gerrit/server/account/ExternalGroupsKeyReader.java",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-03-24T20:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8420ca4_4aa26656",
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d4d598d_f56afd23",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-03-24T08:05:56Z",
      "side": 1,
      "message": "Don\u0027t import this explicitly.  Just import AccountGroup (done on the previous line) and refer to AccountGroup.UUID explicitly in the code below.",
      "range": {
        "startLine": 27,
        "startChar": 34,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9455777b_ba6192de",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-03-24T20:30:45Z",
      "side": 1,
      "message": "Thanks David for the note. Done.",
      "parentUuid": "0d4d598d_f56afd23",
      "range": {
        "startLine": 27,
        "startChar": 34,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1afc0534_de683bba",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-03-24T08:05:56Z",
      "side": 1,
      "message": "AccountGroup.UUID",
      "range": {
        "startLine": 229,
        "startChar": 25,
        "endLine": 229,
        "endChar": 29
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "687a49f6_6bd74e24",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 229,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-03-24T20:30:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1afc0534_de683bba",
      "range": {
        "startLine": 229,
        "startChar": 25,
        "endLine": 229,
        "endChar": 29
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9912a23d_c7684498",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-03-24T08:39:11Z",
      "side": 1,
      "message": "The way that this is implemented now, it could race:\n\nt0: A group is added so currentKey will give a new Key next time we call it\nt1: The cache gets the new currentKey, it\u0027s a miss, the loader is invoked\nt2: A new group is added. currentKey *would* yield a different key\nt3: The loader is invoked, with key from t1. It will, however, now use the values from t2, so give a wrong value for the key.\n\nIt\u0027s always a forward-race because at t3 (with a key of t1) we\u0027ll never have values older than t1, so not that much of an issue. But I\u0027d like to avoid all types of races :-)\n\nOne way to work around this is to define your own Key class that gets a list (TreeSet?) of Refs (in essence, that\u0027s the key) the serializer then makes a has out of that.\n\n@AutoValue\nGroupsExternalKey {\nabstract TreeSet\u003cRef\u003e allGroupsRefs;\n\nstatic class Serializer ... {\n\nbyte[] serialize(ConflictKey object) {\n// compute hash\n}\n\npublic ConflictKey deserialize(byte[] in) {\n// We never deserialize keys.\nthrow new IllegalStateException();\n}\n\nThis way, the loader can use \u0027allGroupRefs\u0027 to do it\u0027s work and is guaranteed to be consistent with the key.\n\nThat is based on the assumption that we never deserializer keys (which I think is correct, but please check). If so, we could modify PersistedCacheDef#keySerializer to return a OneWaySerializer instead of a CacheSerializer that does not have a deserialize method. That\u0027s because we can\u0027t reconstruct allGroupsRefs from the hash. This interface change could be a follow-up to this change.",
      "range": {
        "startLine": 230,
        "startChar": 13,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6ef7155_a6c1b847",
        "filename": "java/com/google/gerrit/server/account/GroupIncludeCacheImpl.java",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-03-24T20:30:45Z",
      "side": 1,
      "message": "Thanks for your detailed explanation here Patrick!\n\nWell, I found the following usages inside the H2 Cache implementation:\n1) We don\u0027t use the key deserializer in order to obtain a value from the store. The way it works is that the key is serialized, passed to the SQL store that executes the statement, returns the serialized value and deserializes it.\n2) BUT, the key deserializer is used to compute a bloom filter. The bloom filter uses the mightContain method on keys before getting them, which I assume is implemented to enhance performance.\n\nNow I updated the implementation so that the persisted cache key is an object with a list of groups refs, implemented the serialize() and deserialize() methods but got rid of the hashing part. Do we really need to do the hashing?\n\nI still need to implement serialize/deserialize properly here.",
      "parentUuid": "9912a23d_c7684498",
      "range": {
        "startLine": 230,
        "startChar": 13,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56633105_1cd07870",
        "filename": "proto/cache.proto",
        "patchSetId": 8
      },
      "lineNbr": 273,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-03-24T08:39:11Z",
      "side": 1,
      "message": "nit: \n\n// Value for ...\nNext ID: 2",
      "revId": "9527c3ab30367c56ea5888e396a4bfdf3ce1cfa8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}