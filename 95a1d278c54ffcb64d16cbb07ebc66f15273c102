{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1702e7d4_2b144ab9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-04-27T15:19:15Z",
      "side": 1,
      "message": "I\u0027m confused why this is being called \"Backfill\". Maybe it\u0027s just an english language confusion, do you maybe mean \"Populate\"? Backfill makes me think of a one-time effort to fix data in one source by adding it from another source. Here I think you intend to convert the \u0027starred\u0027 field to an optional ChangeInfo field as a fix that should have been included in change I36c1e2f5. Am I understanding that right?\n\nI\u0027m making a point of this because it affects the naming in the rest of this change, especially the `BACKFILL_STARRED_FIELD` option. I think my understanding above is correct, then you can rename that option to `STARRED` and it will be clearer and more consistent with the other options (like `REVIEWED`).",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "949d98b1_70465847",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2023-05-02T10:44:10Z",
      "side": 1,
      "message": "You\u0027re right. I meant \"Populate\" (excuse my English).\n\n\u003e Here I think you intend to convert the \u0027starred\u0027 field to an optional ChangeInfo field as a fix that should have been included in change I36c1e2f5. Am I understanding that right?\n\nRight.\n\nI agree my naming was bad. Thanks for the suggestion. It\u0027s much better since it\u0027s now on par with the other change options and more consistent.\n\nDone.",
      "parentUuid": "1702e7d4_2b144ab9",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7ad2ef2_00ff0441",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-04-27T15:19:15Z",
      "side": 1,
      "message": "This is not \"very cheap\" for all RefDatabase implementations. I don\u0027t know if you have a way to do the lookup in bulk, but I would consider it if you can.",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 63
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b648693_10c295fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2023-05-02T10:44:10Z",
      "side": 1,
      "message": "In PS5 I was doing \u0027n\u0027 calls to RefDatabase#exactRef (once per change) to check if they\u0027re starred. I found another method: RefDatabase#exactRef(String... refs). I adapted the code and used the latter. Please note that the implementation of the new method loops on refs and delegates to #exactRef(String ref) so should make no difference, but I substituted it anyway in case another implementations of the multi-refs method allow optimizations.\n\nRE (this is not very cheap): I previously came across some of our internal traces and a call to `RefDatabase#exact` typically takes few microseconds. In this change we\u0027re also populating this field with a flag (default \u003d false) and on dashboards there are usually around 50 changes, so this should be performant.",
      "parentUuid": "d7ad2ef2_00ff0441",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 63
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f7f3740_49983d1b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-05-02T20:32:33Z",
      "side": 1,
      "message": "\u003e In PS5 I was doing \u0027n\u0027 calls to RefDatabase#exactRef (once per change) to check if they\u0027re starred. I found another method: RefDatabase#exactRef(String... refs). I adapted the code and used the latter. Please note that the implementation of the new method loops on refs and delegates to #exactRef(String ref) so should make no difference, but I substituted it anyway in case another implementations of the multi-refs method allow optimizations.\n\nThanks!\n\n\u003e \n\u003e RE (this is not very cheap): I previously came across some of our internal traces and a call to `RefDatabase#exact` typically takes few microseconds. In this change we\u0027re also populating this field with a flag (default \u003d false) and on dashboards there are usually around 50 changes, so this should be performant.\n\nYes, but isn\u0027t that `RefDatabase` a `ReftableDatabase`? Most Gerrit installs will be using `RefDirectory` instead and an exactRef could be much slower depending on what file system they\u0027re on, the values of core.trustFolderStat/core.trustPackedRefsStat, and overall # of refs in the All-Users repository.\n\nAll that said, I don\u0027t know that there\u0027s a better option, but I wanted to make sure you were aware in case it affects any design choices you made.",
      "parentUuid": "5b648693_10c295fb",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 63
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60383f58_b6509f59",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2023-05-03T09:01:17Z",
      "side": 1,
      "message": "\u003e Yes, but isn\u0027t that RefDatabase a ReftableDatabase?\n\nI think so but not quite sure. I think we use a custom implementation of the DfsReftableDatabase.\n\n\u003e Most Gerrit installs will be using RefDirectory instead and an exactRef could be much slower depending on what file system they\u0027re on, the values of core.trustFolderStat/core.trustPackedRefsStat, and overall # of refs in the All-Users repository.\n\nThanks for bringing to my attention. Out of curiosity, are you aware of similar performance numbers for file-based ref databases? Is the latency significantly higher?",
      "parentUuid": "5f7f3740_49983d1b",
      "range": {
        "startLine": 26,
        "startChar": 4,
        "endLine": 26,
        "endChar": 63
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c55bb30_69d74b8f",
        "filename": "java/com/google/gerrit/server/restapi/change/QueryChanges.java",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-04-27T15:19:15Z",
      "side": 1,
      "message": "Why aren\u0027t you doing this in ChangeJson like all the other options are handled?",
      "range": {
        "startLine": 227,
        "startChar": 33,
        "endLine": 227,
        "endChar": 51
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87c6a5ae_5bbba4fe",
        "filename": "java/com/google/gerrit/server/restapi/change/QueryChanges.java",
        "patchSetId": 5
      },
      "lineNbr": 227,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2023-05-02T10:44:10Z",
      "side": 1,
      "message": "Right. thanks for pointing this out. Done.",
      "parentUuid": "8c55bb30_69d74b8f",
      "range": {
        "startLine": 227,
        "startChar": 33,
        "endLine": 227,
        "endChar": 51
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac2ff9c2_4ec8f5bf",
        "filename": "java/com/google/gerrit/server/restapi/change/QueryChanges.java",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-04-27T15:19:15Z",
      "side": 1,
      "message": "This should be in a try-with-resources\n\n```\n try (Repository allUsersRepo \u003d repoManager.openRepository(allUsers)) {\n```",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 236,
        "endChar": 69
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8020d435_ed10971f",
        "filename": "java/com/google/gerrit/server/restapi/change/QueryChanges.java",
        "patchSetId": 5
      },
      "lineNbr": 236,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2023-05-02T10:44:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac2ff9c2_4ec8f5bf",
      "range": {
        "startLine": 236,
        "startChar": 6,
        "endLine": 236,
        "endChar": 69
      },
      "revId": "95a1d278c54ffcb64d16cbb07ebc66f15273c102",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}