{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "190bf646_627cc725",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-25T09:43:08Z",
      "side": 1,
      "message": "Looks good to me! left few comments.",
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a32a02_2db14d23",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-25T09:43:08Z",
      "side": 1,
      "message": "Why did we add it?",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc3ebaa3_42f5288b",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-25T11:09:51Z",
      "side": 1,
      "message": "See my comment in https://gerrit.googlesource.com/gerrit/+/refs/changes/54/352554/8/java/com/google/gerrit/index/IndexedField.java#252\n\nIntegerRange is always stored in FieldDef:\nhttps://gerrit.googlesource.com/gerrit/+/refs/changes/54/352554/8/java/com/google/gerrit/index/FieldDef.java#55\n\nwhile I don\u0027t really see my this fields has to be stored, I think we have to keep it for compatibility reasons.",
      "parentUuid": "12a32a02_2db14d23",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c198efe4_e165ac81",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-28T09:29:06Z",
      "side": 1,
      "message": "thanks for explaining. I\u0027m a bit confused, since this is an \"integer\" field, not an \"intRange\". Am I missing something?",
      "parentUuid": "fc3ebaa3_42f5288b",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "253f3744_69734e30",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-28T10:54:00Z",
      "side": 1,
      "message": "In our new definitions, \u0027range\u0027 is a search spec, IndexedFields are only types for storage purposes (so IndexedField is an integer, but SearchSpec is a Field (see Line 469).\n\nI think this is actually not correct, since the \u0027stored\u0027 property defines if the field is allowed to be returned from the index, and applies per search.\n\nI changed this property to apply to the search spec in https://gerrit-review.git.corp.google.com/c/gerrit/+/353215",
      "parentUuid": "c198efe4_e165ac81",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d17ce5d6_48c6755f",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-28T11:08:39Z",
      "side": 1,
      "message": "Ah right. L469 has that. Thanks!\n\nAre you sure we should move stored property to spec? e.g. it looks to me if we have {one field, with 3 specs}, we should specify if the field is stored for the field, not the spec? i.e. from the server POV we want the change \"ID\" to be stored, such that when we recover ChangeData from an index document (row, etc...) we are able to deserialize the \"ID\" field into ChangeData. That shouldn\u0027t be related to how this field is searchable (e.g. full_text, vs. exact)?\n\nIn other words, what does it mean to have the \"full_text\" spec stored, but not the \"exact\"?",
      "parentUuid": "253f3744_69734e30",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50f430b6_8a924a38",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-28T11:18:43Z",
      "side": 1,
      "message": "Agree, let\u0027s keep it as is.",
      "parentUuid": "d17ce5d6_48c6755f",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "305ae998_c653a744",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-28T11:19:25Z",
      "side": 1,
      "message": "Resolving, please +2 if looks good :)",
      "parentUuid": "50f430b6_8a924a38",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18a970b2_4757da23",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 466,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-28T11:21:11Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "305ae998_c653a744",
      "range": {
        "startLine": 466,
        "startChar": 11,
        "endLine": 466,
        "endChar": 17
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b483c722_375017f0",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-25T09:43:08Z",
      "side": 1,
      "message": "[Optional] we can extract all \"Indexfield\"s\u0027 names to static final Strings at the top, and add Javadocs of how these names are used? (I recall you said we don\u0027t need them internally, and only spec names are mapped to our storage defs)\n\nwe discussed before that we only use Specs, but Lucene/Elastic need the field name, they can then reference these constants if we added them here.",
      "range": {
        "startLine": 759,
        "startChar": 54,
        "endLine": 759,
        "endChar": 60
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ea83c6a_7cd19342",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-25T11:09:51Z",
      "side": 1,
      "message": "All indexes only reference fields, never field names directly. I think that is actually the reason why the field names are not separate constants.\nI would keep it as is. I.e. if we introduce such public constant,imagine someone changes the value of such constant, but the field name remains the same. If index implementation rely on the constant, but the field is stored under a different name, they can easily break.",
      "parentUuid": "b483c722_375017f0",
      "range": {
        "startLine": 759,
        "startChar": 54,
        "endLine": 759,
        "endChar": 60
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf51fce9_1a0823a1",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 759,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-28T09:29:06Z",
      "side": 1,
      "message": "Ack. Thanks for explaining.",
      "parentUuid": "7ea83c6a_7cd19342",
      "range": {
        "startLine": 759,
        "startChar": 54,
        "endLine": 759,
        "endChar": 60
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44bac6f7_4f8f8e97",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 785,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-25T09:43:08Z",
      "side": 1,
      "message": "Q: why did we add required here but, e.g., we didn\u0027t add it in the previous field \"TrackingFooter\"? What fields are we marking as required? (if relevant, can you also add the reason to the commit message)?\n\n(It can also be that a patchset still has no votes, hence this field might be empty. How is this working while we\u0027re enforcing required?)",
      "range": {
        "startLine": 785,
        "startChar": 62,
        "endLine": 785,
        "endChar": 70
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02e71db3_43ce2ecc",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 785,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-11-25T11:09:51Z",
      "side": 1,
      "message": "required just means NOT NULL, so it is always true for the Iterable, unless we return NULL instead of a list somewhere.\n\nI only added required for the fields that (I think) the basic change info, e.g. the info that the change can not be surfaced without on the UI (such as labels, owner, id ...).\n\nI could set required for tracking footers, but this is not strictly necessary.",
      "parentUuid": "44bac6f7_4f8f8e97",
      "range": {
        "startLine": 785,
        "startChar": 62,
        "endLine": 785,
        "endChar": 70
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1e8fb90_a1acade3",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 785,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-28T09:29:06Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "02e71db3_43ce2ecc",
      "range": {
        "startLine": 785,
        "startChar": 62,
        "endLine": 785,
        "endChar": 70
      },
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5977e98b_051bc48d",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 8
      },
      "lineNbr": 1040,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-11-25T09:43:08Z",
      "side": 1,
      "message": "Why not drop this, and define two specs (exact, fulltext) for the same COMMIT_MESSAGE_FIELD?\n\nanswer: we truncate commit message exact.",
      "revId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "97d02874ba625ec3a1c06ddeb1040a9e0076cc4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}