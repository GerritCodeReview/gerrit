{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2dbd9118_4a7c566f",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T08:32:17Z",
      "side": 1,
      "message": "nit: I\u0027d also add that injecting any classes from the API plugin is supported. There\u0027s no limitation on injecting only `Dynamic*` dependencies. The API plugin can provide a cache, service or any other _thing_ that could be consumed from other plugins.",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396ecf7a_4bdca2e9",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T11:39:06Z",
      "side": 1,
      "message": "\u003e nit: I\u0027d also add that injecting any classes from the API plugin is supported.\n\ndoes it not say this in the previous sentence?\n\n ```Plugins can then consume this API by injecting the classes defined by it.```\n\n\u003e There\u0027s no limitation on injecting only `Dynamic*` dependencies.\n \nThe aim of the \"for example\" in that sentence is to highlight that this is not an exhaustive list. I mentioned the dynamic* because I believe they will be first citizens in the addition and replacement of existing behaviour.\n\n\u003e The API plugin can provide a cache, service or any other thing that could be consumed from other plugins.\n\nNot necessarily. Classes might or might not be injectable depending on whether they depend on classes that have not been bound by Guice yet.\n\nIf you look at the healthcheck implementation, for example [1] you will notice the refactoring around `HealthCheckMetrics.Factory healthCheckMetricsFactory`, which couldn\u0027t be instantiated due to `MetricMaker` not being bound to any concrete implementation yet (the sysInjector will do this).\n\nI think I will need to expand on this, WDYT @luca.milanesio@gmail.com, @darekm@google.com?\n\n[1] https://gerrit-review.googlesource.com/c/plugins/healthcheck/+/373454",
      "parentUuid": "2dbd9118_4a7c566f",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fa8ac65_bbe84234",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T12:02:18Z",
      "side": 1,
      "message": "\u003e \u003e nit: I\u0027d also add that injecting any classes from the API plugin is supported.\n\u003e \n\u003e does it not say this in the previous sentence?\n\u003e \n\u003e  ```Plugins can then consume this API by injecting the classes defined by it.```\n\nhow about: `the consumer plugin can then consume any classes provided by the API plugin`\n\n\u003e \u003e There\u0027s no limitation on injecting only `Dynamic*` dependencies.\n\u003e  \n\u003e The aim of the \"for example\" in that sentence is to highlight that this is not an exhaustive list. I mentioned the dynamic* because I believe they will be the first citizens in the addition and replacement of existing behaviour.\n\nI\u0027d be more explicit here, as I\u0027ve already seen some thinking that only dynamic* things are allowed to be injected from API plugins.\n\n\u003e \u003e The API plugin can provide a cache, service or any other thing that could be consumed from other plugins.\n\u003e \n\u003e Not necessarily. Classes might or might not be injectable depending on whether they depend on classes that have not been bound by Guice yet.\n\nyou don\u0027t need to have a binding in Guice for injection to work, let\u0027s consider a `SharedService` class as follows:\n\n```java\n@Singleton\npublic class SharedService {\n  @Inject \n  SharedService() {}\n  \n  public Result someMethod() {\n    ...\n  }\n}\n```\n\nthis then can be injected into any consumer plugin without binding in the ApiModule.\n\n\n\u003e If you look at the healthcheck implementation, for example [1] you will notice the refactoring around `HealthCheckMetrics.Factory healthCheckMetricsFactory`, which couldn\u0027t be instantiated due to `MetricMaker` not being bound to any concrete implementation yet (the sysInjector will do this).\n\nThat\u0027s an implementation detail that is specific for the `helthcheck` plugin, which is also an \"advanced\" case. I\u0027m just trying to say that one doesn\u0027t need all of the _fancy_ dynamic* things in order to use the ApiModule.\n\nAlso, the API plugin, can have an empty module definition and provide a bunch of interfaces or data classes that are shared between other plugins.\n\nYou can also check my simple [x-plugin dependency demonstration plugin](https://github.com/dluksza/gerrit-x-plugin-dependency-poc-example)",
      "parentUuid": "396ecf7a_4bdca2e9",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f805e467_7167836e",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T15:11:49Z",
      "side": 1,
      "message": "\u003e \u003e \u003e nit: I\u0027d also add that injecting any classes from the API plugin is supported.\n\u003e \u003e \n\u003e \u003e does it not say this in the previous sentence?\n\u003e \u003e \n\u003e \u003e  ```Plugins can then consume this API by injecting the classes defined by it.```\n\u003e \n\u003e how about: `the consumer plugin can then consume any classes provided by the API plugin`\n\u003e \n\u003e \u003e \u003e There\u0027s no limitation on injecting only `Dynamic*` dependencies.\n\u003e \u003e  \n\u003e \u003e The aim of the \"for example\" in that sentence is to highlight that this is not an exhaustive list. I mentioned the dynamic* because I believe they will be the first citizens in the addition and replacement of existing behaviour.\n\u003e \n\u003e I\u0027d be more explicit here, as I\u0027ve already seen some thinking that only dynamic* things are allowed to be injected from API plugins.\n\n\nWhere did you see this thinking?\n\n\u003e \n\u003e \u003e \u003e The API plugin can provide a cache, service or any other thing that could be consumed from other plugins.\n\u003e \u003e \n\u003e \u003e Not necessarily. Classes might or might not be injectable depending on whether they depend on classes that have not been bound by Guice yet.\n\u003e \n\u003e you don\u0027t need to have a binding in Guice for injection to work, let\u0027s consider a `SharedService` class as follows:\n\u003e \n\u003e ```java\n\u003e @Singleton\n\u003e public class SharedService {\n\u003e   @Inject \n\u003e   SharedService() {}\n\u003e   \n\u003e   public Result someMethod() {\n\u003e     ...\n\u003e   }\n\u003e }\n\u003e ```\n\u003e \n\u003e this then can be injected into any consumer plugin without binding in the ApiModule.\n\nYep, makes sense\n\n\u003e \n\u003e \n\u003e \u003e If you look at the healthcheck implementation, for example [1] you will notice the refactoring around `HealthCheckMetrics.Factory healthCheckMetricsFactory`, which couldn\u0027t be instantiated due to `MetricMaker` not being bound to any concrete implementation yet (the sysInjector will do this).\n\u003e \n\u003e That\u0027s an implementation detail that is specific for the `helthcheck` plugin, which is also an \"advanced\" case. I\u0027m just trying to say that one doesn\u0027t need all of the _fancy_ dynamic* things in order to use the ApiModule.\n\n\nI don\u0027t know if I\u0027d call this \"advanced\" case üòä but this is exactly what I think should be documented, that the API cannot provide necessarily any \"cache, service or any other thing\", if those classes require bindings that have not happened yet.\n\nBut I understand the point you\u0027re trying to make.\nLet me see if I can add/rephrase the docs. \n\n\u003e \n\u003e Also, the API plugin, can have an empty module definition and provide a bunch of interfaces or data classes that are shared between other plugins.\n\u003e \n\u003e You can also check my simple [x-plugin dependency demonstration plugin](https://github.com/dluksza/gerrit-x-plugin-dependency-poc-example)\n\n\nüëç",
      "parentUuid": "7fa8ac65_bbe84234",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29d4b62a_f35a12d5",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T15:36:13Z",
      "side": 1,
      "message": "\u003e Where did you see this thinking?\n\nAFAIR, during the hackathon in Goetheborg Luca or DavidO, were slightly surprised that my example plugin did work without any dynamic* binding.\n\n\u003e But I understand the point you\u0027re trying to make.\n\u003e Let me see if I can add/rephrase the docs.\n\nüëç",
      "parentUuid": "f805e467_7167836e",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e1a7d80_72a88853",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2023-10-20T17:10:38Z",
      "side": 1,
      "message": "IMHO we should highlight the possibility mentioned by Darek as it would allow to decompose common functionality to _common plugin_ and I can confirm that the example works agains the current `master`:\n```\n[2023-10-20T19:02:25.384+02:00] [main] INFO  com.google.gerrit.server.plugins.PluginLoader : Loaded plugin api-provider (w/ ApiModule), version a72ff9d\n[2023-10-20T19:02:25.388+02:00] [main] INFO  org.luksza.gerrit.DefaultGreetingsService : Ahoj R2D2!!\n[2023-10-20T19:02:25.388+02:00] [main] INFO  com.google.gerrit.server.plugins.PluginLoader : Loaded plugin api-consumer, version a72ff9d\n```",
      "parentUuid": "29d4b62a_f35a12d5",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e26ebe6_f6e3045b",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-21T01:23:48Z",
      "side": 1,
      "message": "I would say _common interface_ rather than _plugin_. But you are right that the mechanism can be abused for not using the interface at all but just rely on the fact that all the plugins that have a `Gerrit-ApiModule` are loaded inside the same Guice injector and they are the parent of all the others.\n\nI would do that with *caution* though because it is likely to be an impediment for making the mechanism safer.",
      "parentUuid": "1e1a7d80_72a88853",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e83d0e2_5a220a57",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-21T11:50:06Z",
      "side": 1,
      "message": "\u003e I would say common interface rather than plugin. But you are right that the mechanism can be abused for not using the interface at all but just rely on the fact that all the plugins that have a Gerrit-ApiModule are loaded inside the same Guice injector and they are the parent of all the others.\n\nI\u0027d only consider an _abuse_ only if the `ApiModule` has only DTOs and interfaces, without any _service_. When there\u0027s a _service_ class it isn\u0027t an abuse. For example, consider that you have multiple plugins that need to communicate with a proprietary external system. Without `ApiModule` you\u0027d have a separate connection pool in each plugin, but with `ApiModule` you can expose one connection pool consumed from other plugins. I\u0027d consider that a good design, not an abuse ;)",
      "parentUuid": "8e26ebe6_f6e3045b",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebf07577_b358e33d",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 139,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-10-21T11:58:50Z",
      "side": 1,
      "message": "Yep, agreed.",
      "parentUuid": "6e83d0e2_5a220a57",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58665db5_6bd41384",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T08:32:17Z",
      "side": 1,
      "message": "nit: can we add \"plugin B must declare `Gerrit-ApiModule` in its `MANIFEST.MF`\", this is assumed in this section, but I\u0027d prefer to have it explicitly mentioned. We can also word it in a way that \"plugin B must expose API module\" or something, but IMO mentioning it explicitly would be helpful and save some debugging and WTF for the consumers.",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab608395_b92f9f8e",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 149,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T11:39:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58665db5_6bd41384",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d50e541_af753b62",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T08:32:17Z",
      "side": 1,
      "message": "nit: how about adding \"and may lead to unpredictable instance behaviour or even a crash\".",
      "range": {
        "startLine": 164,
        "startChar": 47,
        "endLine": 164,
        "endChar": 48
      },
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b63853d9_bf389e2a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T11:39:06Z",
      "side": 1,
      "message": "I think it is a good idea to add a sentence to address this. \nI am not sure what you mean by \"a crash\".\n\nA crash of the jvm? of the plugin(s)? runtime exceptions?\n\nIn the parent ticket\u0027s commit we said:\n\n```\nThe behaviour in this case is unpredictable and depends on the\nspecifics of the classes involved.\n```\n\nI will use the same wording",
      "parentUuid": "5d50e541_af753b62",
      "range": {
        "startLine": 164,
        "startChar": 47,
        "endLine": 164,
        "endChar": 48
      },
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40bf4670_5737f25e",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T12:02:18Z",
      "side": 1,
      "message": "sounds good to me üëç",
      "parentUuid": "b63853d9_bf389e2a",
      "range": {
        "startLine": 164,
        "startChar": 47,
        "endLine": 164,
        "endChar": 48
      },
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df36e346_00225f7c",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T15:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40bf4670_5737f25e",
      "range": {
        "startLine": 164,
        "startChar": 47,
        "endLine": 164,
        "endChar": 48
      },
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0d7f279_b571717a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-10-20T08:32:17Z",
      "side": 1,
      "message": "IMO we mention that API plugins cannot depend on another API plugin.",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fa4ef75_48014b26",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 5
      },
      "lineNbr": 165,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2023-10-20T11:39:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0d7f279_b571717a",
      "revId": "98f2d6b704bc16968570f42975edd7ff30057e64",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}