{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c0e18c7_c6da0b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-12T12:53:21Z",
      "side": 1,
      "message": "Looks nice! Just two nits.",
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "368fc55f_710b7e2a",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-12T12:53:21Z",
      "side": 1,
      "message": "Following the meaning and JavaDoc, should we call this \"canOverride\".\n\ncanInherit\u003dfalse would suggest to me that this requirement is applicable only to the current project and will not inherit further down. But that\u0027s not the functionality we need. Admins/owners want to make it so that this requirement is enforced in all child projects and child project owners can\u0027t turn it off.",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e076a5f6_4a0090e4",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-04-12T15:33:40Z",
      "side": 1,
      "message": "mmm, we just saw that `canOverride` confuses with `overrideExpression` (especially that it has nothing to do with it), so I renamed it to canInherit. See my discussion with Edwin in [1].\n\nI can rename to \"allowOverrideInSubprojects\" or something similar. WDYT?\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/301927/1..4/java/com/google/gerrit/entities/SubmitRequirement.java#b59.",
      "parentUuid": "368fc55f_710b7e2a",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "161ce2e5_2a4de030",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-13T12:27:41Z",
      "side": 1,
      "message": "I don\u0027t mind the name that much, actually. We just can\u0027t change the semantic. We can invert the boolean if we like an inverted name better. It has to work as \"this SR can\u0027t be overridden in child projects\". So it can\u0027t be \"this SR can inherit to child projects\".\n\nHow about: allowOverrideInChildProjects (default \u003d true)\n\n(most places call a sub project \u0027child\u0027 in the existing code).",
      "parentUuid": "e076a5f6_4a0090e4",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2a4893_f4b135f9",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-04-13T12:42:14Z",
      "side": 1,
      "message": "What do you think about naming it \"isFinal\" (relating to use of \u0027final\u0027 in Java)?",
      "parentUuid": "161ce2e5_2a4de030",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0cb7ab_e7e86ac0",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-13T12:50:03Z",
      "side": 1,
      "message": "Works for me. Pretty much any name works for me as long as we keep the required semantics :-)",
      "parentUuid": "dc2a4893_f4b135f9",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "537bd69a_d2ddde27",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-04-26T14:18:32Z",
      "side": 1,
      "message": "\"isFinal\" is good and short but I\u0027d rather prefer a longer and self-explanatory version. I went with \"allowOverrideInChildProjects\" as it can\u0027t be confused.",
      "parentUuid": "5c0cb7ab_e7e86ac0",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd816d8_46a152f7",
        "filename": "java/com/google/gerrit/entities/SubmitRequirement.java",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-04-26T14:47:15Z",
      "side": 1,
      "message": "Fine with me. FWIW I like \"isFinal\" more since \"allowOverrideInChildProjects\" is quite long for a config parameter name in project.config.",
      "parentUuid": "537bd69a_d2ddde27",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 36
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "309e80e7_93c0b5ca",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-12T12:53:21Z",
      "side": 1,
      "message": "I think before we do that we\u0027d need to run benchmarks to proof that it\u0027s actually necessary (i.e. the parsing of the string using our grammar is slower than X milliseconds).\n\nCaching a string is elegant because it\u0027s immutable and takes almost no space. So a I think we need a justification for a more complex alternative.",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19c51089_b50fc9f0",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-04-12T15:33:40Z",
      "side": 1,
      "message": "The discussion was in https://gerrit-review.googlesource.com/c/gerrit/+/301927/1..4/java/com/google/gerrit/entities/SubmitRequirement.java#b36.\n\nThe advantages are:\n1) The ability to perform syntax validation.\n2) Sparing parsing the expression many times by multiple callers. SR will be parsed once when loaded from the project\u0027s config.\n\nFor caching, we could still cache it as a String and reload the parse tree while serializing.",
      "parentUuid": "309e80e7_93c0b5ca",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33e06282_161ea90d",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-13T12:27:41Z",
      "side": 1,
      "message": "I don\u0027t understand why we can do syntax validation only if we cache the parsed tree (vs. the string)?\n\nFrom my experience, it\u0027s actually the opposite: If we cache the parsed tree, that means we have to parse it when we deserialize the string from the persisted cache. That\u0027s a bad place to throw a InvalidSubmitRequirementException.\n\nA better place to throw such an exception is when the SR is actually used (the best place is o.c. before the bad config is created).\n\n(2) Is a good argument in case parsing is not trivially cheap.\n\nI think Edwin was mostly asking for this interface to return the parsed tree, not necessarily that we cache the parsed tree? (note that if we cache it, it has to be deeply immutable).\n\nAnyway, happy to chat about this later when we actually want to cache a tree. The code now does not do that, so seems good in any case :-)",
      "parentUuid": "19c51089_b50fc9f0",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afcffc97_95348db7",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-04-13T12:42:14Z",
      "side": 1,
      "message": "I think what should be achieved is that\na) callers do not need to do the parsing on their own, they can just get the parsed predicate tree (whether it is parsed when the config is read, or when a caller asks for the predicate tree is not important to me)\nb) the handling of invalid submit requirements is consistent for all callers (e.g. always throw an exception, or always say that the change is not submittable similar to RULE_ERROR works nowadays)",
      "parentUuid": "33e06282_161ea90d",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "567614ea_8df97f2c",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-04-26T14:18:32Z",
      "side": 1,
      "message": "I also don\u0027t like persisting the whole expression tree.\n\nWe could store the expression tree as a field in this class, but that could be transient (no need to persist it) since it can be derived from the expression string.\n\nAs Edwin said, parsing and handling of invalid submit requirements will only be done in one place: the project config. All callers can retrieve the parsed predicate tree afterwards.",
      "parentUuid": "afcffc97_95348db7",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "63fa424b_aeae8cc0",
        "filename": "java/com/google/gerrit/entities/SubmitRequirementExpression.java",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-04-26T14:47:15Z",
      "side": 1,
      "message": "I actually think there is one argument for doing the parsing directly when the project.config file is loaded (instead of doing the parsing only on first access). If the parsing is done immediately ReceiveCommit will automatically reject pushes that add non-parseable submit requirements [1].\n\n[1] https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/git/receive/ReceiveCommits.java#1213",
      "parentUuid": "567614ea_8df97f2c",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 26
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61020234_19b5b5f6",
        "filename": "java/com/google/gerrit/server/project/ProjectConfig.java",
        "patchSetId": 4
      },
      "lineNbr": 1710,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-04-26T14:47:15Z",
      "side": 1,
      "message": "This needs to be renamed too, now.",
      "range": {
        "startLine": 1710,
        "startChar": 48,
        "endLine": 1710,
        "endChar": 66
      },
      "revId": "99d9e23fc57fc99d47e8c855efaaa9a4c4edc01f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}