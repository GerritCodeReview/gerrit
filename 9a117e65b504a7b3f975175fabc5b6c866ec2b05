{
  "comments": [
    {
      "key": {
        "uuid": "cedbadab_e98015d8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T17:01:07Z",
      "side": 1,
      "message": "This is inaccurate. The scope of this change is to add a new table to the database, it is not simply a REST API change.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abb4abb0_68c3236d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2015-01-20T09:44:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cedbadab_e98015d8",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 8
      },
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_379d3842",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T17:00:28Z",
      "side": 1,
      "message": "What is the \"reviewers channel\"? This is not a term we use in Gerrit.",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 54
      },
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee49514e_5294944b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-14T19:49:53Z",
      "side": 1,
      "message": "I called it that way, to make it very here, how current approach sucks: mixing review channel: \"Comment table\" and vreification chanel: different table in header of change screen.",
      "parentUuid": "8e6375c3_379d3842",
      "range": {
        "startLine": 11,
        "startChar": 37,
        "endLine": 11,
        "endChar": 54
      },
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_579aac4a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T17:00:28Z",
      "side": 1,
      "message": "Huh? There is no such table.",
      "range": {
        "startLine": 16,
        "startChar": 34,
        "endLine": 16,
        "endChar": 49
      },
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_094f6935",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T18:55:52Z",
      "side": 1,
      "message": "Is this value supposed to be purely informative, or is it supposed to enter into submit rule evaluations? If the latter, you\u0027ve got more work to do.\n\nAnother reason why adding a bit to PatchSetApprovals may make more sense.",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce4e4d56_b1c3006b",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-14T19:49:53Z",
      "side": 1,
      "message": "Only informative to be visualized in header of change screen.",
      "parentUuid": "cedbadab_094f6935",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cedbadab_4997a11f",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T17:00:28Z",
      "side": 1,
      "message": "What does this field mean?",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aed03989_88aa378b",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1012623
      },
      "writtenOn": "2015-01-14T18:42:49Z",
      "side": 1,
      "message": "I also answered this question in PS 13 of change I6886d77e0e\n\nMy intention for having the \u0027verifier\u0027 was to allow the gerrit user to report the user that actually executed the test.  The \u0027verifier\u0027 may or may not be the same as the gerrit user that reported the result therefore I was think it should be a little more arbitrary.\n\nFor example:\nLets say we setup a zuul user in gerrit (zuul would be the user that reports results to gerrit).  We may also setup a non-gerrit user \u0027hipster\u0027 to execute the test.  Zuul could trigger on a gerrit change, tell hipster to execute the test, hipster executes the test and reports the result to zuul who would forward it to gerrit.  In this scenario zuul is just a middle man and the user that actually executed the test is \u0027hipster\u0027 therefore \u0027hipster\u0027 would be the verifier in this case.",
      "parentUuid": "cedbadab_4997a11f",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6375c3_d7c23c16",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-14T18:55:52Z",
      "side": 1,
      "message": "Ok, so this is some piece of metadata that is important to your CI system. Fair enough.\n\nBut what is so important about _this_ piece of metadata compared to any other piece of metadata?\n\nI can think of a bunch of other metadata that other CI systems may think are important. Just off the top of my head:\n\n* time it took to run verification\n* some sort of status enum for the verification, beyond the actual review score (e.g. TIMED_OUT, FLAKY, ...)\n* a list of tests that were run\n\nIs the intent for this class to become a kitchen sink of all possible verification metadata? To the point that the data model of Gerrit subsumes the data model of Jenkins plus Zuul plus the thing we use at Google, ad absurdum?\n\nI strongly believe we don\u0027t want to get into the business of deciding which verification metadata needs to be stored in Gerrit. I think a freeform comment and _maybe_ a URL (though arguably the URL could just go in the comment) are sufficient.\n\nBut that brings me back to my previous question: if there isn\u0027t any particular metadata stored in this table that is different from what we have in ChangeMessages/PatchSetApprovals, other than the fact that this record was produced by a bot, why do we need the separate table?",
      "parentUuid": "aed03989_88aa378b",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee49514e_9227dca3",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-14T19:49:53Z",
      "side": 1,
      "message": "\u003e why do we need the separate table?\n\nCompare Key implementation in PatchSetVerification above and PatchSetApproval. You see the difference? Account id is missing and LabelId has nothing to do with LabelId in PatchSetApproval. So with current design you can only put one record from Diffy in PatchSetApproval for label \"Verified\" with +1.\n\nBut what if Diffy would want to report these data for ps 1:\n\none row in PatchSetApproval account_id \u003d Diffy, category \u003d \"Verified\", value \u003d -1, and say 6 rows in PatchSetVerification table:\n\n* category        | value| Log\n* --------------------------------------\n* Mac OS X 32 bit | OK   | \u003curl to log\u003e\n* Mac OS X 64 bit | OK   | \u003curl to log\u003e\n* Linux 32 bit    | OK   | \u003curl to log\u003e\n* Linux 64 bit    | OK   | \u003curl to log\u003e\n* Win x86 32 bit  | NOK  | \u003curl to log\u003e\n* Win x86 64 bit  | NOK  | \u003curl to log\u003e\n\nThese information is presented in the header of the change screen, as additional tab, to the left of related tab, as Verification tab. (Nothing to do with review comments, thus the different chanel name).",
      "parentUuid": "8e6375c3_d7c23c16",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebba239b_2aa67fc7",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1012623
      },
      "writtenOn": "2015-01-20T17:47:20Z",
      "side": 1,
      "message": "I see your point about this piece of metadata.  Maybe providing a  label, value, and comment is all that\u0027s really needed.  I would have no problem removing this and renaming \u0027url\u0027 to \u0027comment\u0027.",
      "parentUuid": "8e6375c3_d7c23c16",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb6ce3f2_3a0fa127",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-20T19:09:21Z",
      "side": 1,
      "message": "Ok, thanks David for pointing out the differences in the primary key.\n\nI\u0027m very leery of using LabelId if we\u0027re not actually tying this into the submit rule evaluation. \"Labels\" are by definition the things that are defined in project.config that have specific ranges, permissions, and evaluation functions associated with them. If the \"labels\" in this table are not serving that purpose, then calling them \"labels\" is only confusing.\n\nBut we\u0027re at the same question as before. If we strip out all the optional metadata so this table is literally just a timestamp and a freeform comment, why not just add a bit field to ChangeMessages?",
      "parentUuid": "ebba239b_2aa67fc7",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abb4abb0_28fa0b80",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-20T19:40:00Z",
      "side": 1,
      "message": "| \"Labels\" are by definition the things that are defined in project.config ...\n\nWell, we are extending the concept of labels (may be better name would be verification category) in this series to not only something that is resricted to be supplied to the submit rule evaluation. So the \"PEP8\" is a valid verification label/category in this context. One future extension may be to force projects to define their verification labels/categories in project.confg and to reject not allowed/known labels/categories.  Note that these labels are going to be presented in the header of change screen, so we may want to restrict them.\n\n| If we strip out all the optional metadata so this table is literally just a timestamp and a freeform comment, why not just add a bit field to ChangeMessages?\n\nInteresting suggestion. So we have three options:\n\n* 1. Add verification channel bit field to PATCH_SET_APPROVALS table and allow to mix \"submit-rule-labels\" and \"verification  labels-only\" in the same table o differentiate between channels. Let\u0027s assume for now, that we could accept  account-id as part of the primary key in both cases\n* 2. Add verification channel bit, category and value to CHANGE_MESSAGES to differentiate between channels\n* 3. Add PATCH_SET_VERIFICATIONS own table to differentiate concerns\n\nOptions 1 and 2 feel for me like a hack, though. When not ongoing migration to Git backend the way to go would be option 3?",
      "parentUuid": "eb6ce3f2_3a0fa127",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb6ce3f2_9a1d8d5a",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-20T20:26:49Z",
      "side": 1,
      "message": "\u003e Well, we are extending the concept of labels\n\nI don\u0027t see the point. Labels already has a perfectly well-defined definition A. In this change we have a completely unrelated definition B. So the proposal is to redefine labels from \"A\" to \"A or B\". But there is not enough similarity between A and B for this to make sense.\n\n\u003e Add verification channel bit field\n\nIMHO the fact that we are saying this channel is used for \"verification\" is _also_ an implementation detail of a particular CI system\u0027s view of the world.\n\nI think we should be using this channel for _any_ kind of message from automation. That could include things like notifications of rolling out code to production, which is not associated with a numeric score.\n\nReally, the _only_ reason that we want this entire change (that I\u0027ve heard so far--feel free to elaborate) is so that we have some mechanism to separate out noisy messages from automation into a separate tab in the UI. So I think we should be focusing our efforts on the _simplest_ way to accomplish that goal.\n\nAdding hundreds of lines of REST API endpoints and database access glue just to accomplish this one simple UI change is clearly not the simplest way.\n\nAdding a single bit field for \"should this message appear in the main tab or in the automation tab\" is much simpler.\n\n\u003e Options 1 and 2 feel for me like a hack, though.\n\nSorry, I think we just disagree on this. Just because my proposed solution is simpler doesn\u0027t make it a \"hack\" IMHO. Just because Sven\u0027s proposed solution is multiple hundreds of lines doesn\u0027t make it \"real\" or \"not a hack\".",
      "parentUuid": "abb4abb0_28fa0b80",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bb9a7ac_278c7a18",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-20T22:03:52Z",
      "side": 1,
      "message": "| Just because my proposed solution is simpler doesn\u0027t make it a \"hack\" IMHO.\n\nThere is a clear contradiction in your argumentation. Lets concentrate on approach 1. You are saying both statements:\n\n* a) Labels already has a perfectly well-defined definition A. In this change we have a completely unrelated definition B. So the proposal is to redefine labels from \"A\" to \"A or B\". But there is not enough similarity between A and B for this to make sense.\n* b) Let\u0027s store both separated *and* unrelated concerns (see argumentation in a) in one table: PATCH_SET_APPROVALS.\n\nI don\u0027t think that the approach you are proposing is (much) simpler. You still have to extend the database, existing SSH commands and REST endpoints to filter out unrelated stuff and not to pollute clients that don\u0027t need different categories/labels.\n\nAnd of course, every invasive change you are doing for one specific channel would have concequences for another, check for example proposed SSH command interface in this series.\n\nNot to mention that in future the separate channels would become more channel specific extensions. So i am  convinced, that this initial overhead: own persistence backend, own SSH command(s) and own REST endpoint(s) is justified, to establish this difference between human-review and bots- notification channels.",
      "parentUuid": "eb6ce3f2_9a1d8d5a",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b9e9722_9be82bb7",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-20T22:05:34Z",
      "side": 1,
      "message": "\u003e b) Let\u0027s store both separated *and* unrelated concerns (see argumentation in a) in one table: PATCH_SET_APPROVALS.\n\nSorry I was not explicit about this. My current proposal is to do this _only_ in ChangeMessages.",
      "parentUuid": "8bb9a7ac_278c7a18",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b9e9722_5ba4e398",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-20T22:10:47Z",
      "side": 1,
      "message": "\u003e You still have to extend the database,\n\nYes, but adding a bit field is simpler than adding a table.\n\n\u003e existing SSH commands and REST endpoints to filter out unrelated stuff\n\nRemember the goal: produce two separate tabs on the change screen. We do not need to provide separate commands/endpoints to accomplish this goal. We only need to plumb the new bit field through to the ChangeMessageInfo from the existing endpoints.\n\nIf we do decide to add query parameters or separate endpoints for filtering out bot results, that would still share almost all the code with handlers that return the full ChangeMessageInfo list. That is strictly less work than adding a new verification message JSON type and a new endpoint that queries the new table rather than sharing code to query the existing table.\n\n\u003e and not to pollute clients that don\u0027t need different categories/labels.\n\nNot sure what you mean by \"need different categories/labels\" here. I thought we were talking about use cases that need bot messages in addition to/instead of human messages.",
      "parentUuid": "8bb9a7ac_278c7a18",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bb9a7ac_47764e79",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-20T22:28:15Z",
      "side": 1,
      "message": "| Remember the goal: produce two separate tabs on the change screen.\n\nNot two, only one would be enough. There should be a table with (at least) 4 columns:\n\n Who, What, When, How\n \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n user, OK/NOK/Unknown, timestamp, log \n\nLet\u0027s say we add bit (human|bot) and optional char 80 column (outcome) to ChangeMessages to differentiate between human and bot messages.\n\nSo you suggest to abuse existing SSH review command and review endpoint for writing and reading from it. You need to know what channel to write to, so you would need to extend the interfaces.\n\n| Not sure what you mean by \"need different categories/labels\" here.\n\nYou would have different places in the UI to render human reviewer comments and bots notifications. In human case you are not interested in to get bots notifications and the opposite.",
      "parentUuid": "0b9e9722_5ba4e398",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebb4e3df_3acda1c7",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-01-21T08:01:24Z",
      "side": 1,
      "message": "I forgot one important info: label/category. Commit message contains the categories.\n\n* gate-horizon-pep8\n* gate-horizon-docs\n* ...\n\nThe idea was to use dedicated table column for this category. I guess your suggestion is to somehow encript all these data in CLOB column in ChangeMessages. UI code must understand the encoding of the message then, to dissect the needed parts, like label/category, outcome and log. So junk in junk out doesn\u0027t work here.\n\nNot to mention further requirements, like indexing the bot notifications and providing user specific quieries based on this valuable data, like statistics, or which job has the highest failure rates for specific project? Or find all changes where PEP8 is failed within 3 days in latest patch set, etc.",
      "parentUuid": "8bb9a7ac_47764e79",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0be697ff_dbfe73c0",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2015-01-21T08:30:15Z",
      "side": 1,
      "message": "\"...Sven\u0027s proposed solution...\"\nFYI\nIt\u0027s originally Mr Ostrovsky\u0027s change [1].\nI just helped out in refactoring the original mach-1-change to make it more \"reviewable\".\nCredit where credit\u0027s due...\n\n[1] https://gerrit-review.googlesource.com/#/c/58283/",
      "parentUuid": "eb6ce3f2_9a1d8d5a",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b8c0fba_dd750bba",
        "filename": "gerrit-reviewdb/src/main/java/com/google/gerrit/reviewdb/client/PatchSetVerification.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-26T20:38:01Z",
      "side": 1,
      "message": "\u003e UI code must understand the encoding of the message then, to dissect the needed parts, like label/category, outcome and log. So junk in junk out doesn\u0027t work here.\n\u003e\n\u003e Not to mention further requirements, like indexing the bot notifications and providing user specific quieries based on this valuable data, like statistics, or which job has the highest failure rates for specific project? Or find all changes where PEP8 is failed within 3 days in latest patch set, etc.\n\nThis is _exactly_ all the metadata that I strongly believe we should _not_ be building into Gerrit. If you want a fancy table view or searchable database of CI results, build it in your CI system.\n\nIf we put this metadata in Gerrit, it is _invariably_ going to work for some CI systems and not for others. (Or some bots that want to annotate code reviews but aren\u0027t CI systems at all.) We are not going to build into Gerrit a superset of all CI metadata across every CI system in the world.",
      "parentUuid": "ebb4e3df_3acda1c7",
      "revId": "9a117e65b504a7b3f975175fabc5b6c866ec2b05",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}