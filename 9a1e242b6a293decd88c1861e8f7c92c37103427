{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1529340541 -0400\nnonce ADrMV7Yl/bDQ2Gpt1GdnlaHgVwyIaTKhY57IQXWw4/bNMRDF/ejPDpVtM4meqh4rI3d8LbiZXZiR\n\n0000000000000000000000000000000000000000 9a1e242b6a293decd88c1861e8f7c92c37103427 refs/for/master\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlsn4n0VHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMZgIP/RJR0/nm0LGjOgxoVCVKIoPxzQh9\npmuTZwfbjyK9DmmqlzeAHArVN88hoa2sZEsRHH66ETdR6CQwHqcTTP1powJ5bD51\nKJenEZ6i/WrO1kDZ3FpEWLcFTfLyxr0CBQu1iXoBgmhzXwdmdd8OVA4+dYWRU25A\nMyGSKrznaGKu8XkBOyj+K2GcK1L5/XzcG4TIzUxYk4YEyH8nfgA+rTz1L2tTy7+p\nwkZYjpjsSq7VLsL9nl4GZwSiZSZ560OcHSbGzpXQ1Z0lcBHaWA9SPX2Xjnk7lT5z\n/iVuE7VQworlq9UhqmVY9sPXa11Q1XkQ7TQ/4gHnaebe7/KNFsBuzhb9L4g/RlqI\n0rWLotwpFI35j3K10huiPcUNdYBFvDDI8NBn1yTRl6fMLpbXKGB/fVew10608gh7\n0u3i1VWVRBvfEvYrsLWD5mtb5wU2twLPedD85kPfJF3hio14a5skvHLQBzMWwZwL\nJg0J6TeGzWURpa2f4svgnBvutHgeguYcOpraVhQWffDfUc8T92Z2nuNvwL3L0vQC\nBoJg+H6g4tverHFtQRKLkGoPyoLzF9D9ecRZa2BiYlVSvhRNt5deUklJawGur7ij\nM/4yamulWwnkDbKGk3iKYt4NNDibh39rFzt4kTzyTIhnkRsj72bcG7HyvUAGmvyg\nkEQLczmRKnY5cULr\n\u003db4RG\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "2a5dae8f_797d3e3a",
        "filename": "java/com/google/gerrit/server/cache/CacheProvider.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-06-19T09:45:48Z",
      "side": 1,
      "message": "Can we use ProjectCacheImpl.CACHE_NAME?",
      "range": {
        "startLine": 92,
        "startChar": 27,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82859891_e19ab825",
        "filename": "java/com/google/gerrit/server/cache/CacheProvider.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-06-19T14:18:35Z",
      "side": 1,
      "message": "I\u0027d rather not introduce a dependency from the server.cache package to the server.project package.\n\nAn idea for future cleanup would be to move all the cache name string constants to a single file in server.cache.",
      "parentUuid": "2a5dae8f_797d3e3a",
      "range": {
        "startLine": 92,
        "startChar": 27,
        "endLine": 92,
        "endChar": 37
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c030f926_5006045b",
        "filename": "java/com/google/gerrit/server/cache/CacheProvider.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-06-19T15:03:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "82859891_e19ab825",
      "range": {
        "startLine": 92,
        "startChar": 27,
        "endLine": 92,
        "endChar": 37
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "325c9a90_6b1cc948",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-06-19T11:13:36Z",
      "side": 1,
      "message": "Good idea to introduce a method. In the future, we should do this for the above code blocks, too.",
      "range": {
        "startLine": 99,
        "startChar": 4,
        "endLine": 99,
        "endChar": 24
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf327a9c_c84b090f",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-06-19T09:45:48Z",
      "side": 1,
      "message": "Same here",
      "range": {
        "startLine": 109,
        "startChar": 33,
        "endLine": 109,
        "endChar": 43
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1037e186_8c72d670",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-06-19T14:18:35Z",
      "side": 1,
      "message": "Same answer",
      "parentUuid": "cf327a9c_c84b090f",
      "range": {
        "startLine": 109,
        "startChar": 33,
        "endLine": 109,
        "endChar": 43
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f63241ef_b213b0d7",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-06-19T11:13:36Z",
      "side": 1,
      "message": "Since we now use ConfigUtil#getTimeUnit with different parameters, the behavior is slightly different when negative values are specified in the config file. Previously, we threw an exception. Now, we take the default value. Considering that the behavior of both ConfigUtil#getTimeUnit methods isn\u0027t consistent regarding that aspect (e.g. \"foo\" would be converted to the default value but \"1 foo\" would throw an exception), I think we can ignore that change of behavior.",
      "range": {
        "startLine": 121,
        "startChar": 29,
        "endLine": 121,
        "endChar": 51
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd08dff0_b13486dd",
        "filename": "java/com/google/gerrit/server/cache/mem/DefaultMemoryCacheFactory.java",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-06-19T14:18:35Z",
      "side": 1,
      "message": "I saw that and I honestly don\u0027t know why the two getTimeUnit methods have different semantics. I this case, CacheBuilder#refreshAfterWrite will throw IAE if you pass it a negative value anyway, so the behavior is ultimately the same.",
      "parentUuid": "f63241ef_b213b0d7",
      "range": {
        "startLine": 121,
        "startChar": 29,
        "endLine": 121,
        "endChar": 51
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fb6e516_238b6891",
        "filename": "java/com/google/gerrit/server/project/ProjectCacheImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-06-19T11:13:36Z",
      "side": 1,
      "message": "Are you sure this is background work? By calling invalidate(), we presumably remove the old value contained in the cache. Refresh calls CacheLoader#load (and not reload) if the old value isn\u0027t present. Although the implementation of LoadingCache#refresh in LocalCache internally calls a method called loadAsync() at some point, I don\u0027t see any code adding asynchronism for the CacheLoader#load case. The Javadoc of LoadingCache#refresh seems to support that assessment.\n\nIf refresh is a synchronous load call, do we still want to call it here?",
      "range": {
        "startLine": 183,
        "startChar": 9,
        "endLine": 183,
        "endChar": 24
      },
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcd03e9a_a9a702f7",
        "filename": "java/com/google/gerrit/server/project/ProjectCacheImpl.java",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-06-19T14:18:35Z",
      "side": 1,
      "message": "Ah, I didn\u0027t realize it wasn\u0027t async. Not worth it.\n\nAnyway, on further inspection, the reindex call on line 186 will incur a load immediately in this thread anyway, so it probably wasn\u0027t buying us anything.",
      "parentUuid": "1fb6e516_238b6891",
      "range": {
        "startLine": 183,
        "startChar": 9,
        "endLine": 183,
        "endChar": 24
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "9a1e242b6a293decd88c1861e8f7c92c37103427",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}