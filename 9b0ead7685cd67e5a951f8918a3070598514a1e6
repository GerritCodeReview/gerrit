{
  "comments": [
    {
      "key": {
        "uuid": "aa0bf316_7810a19f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-12-18T08:04:39Z",
      "side": 1,
      "message": "If I understand this correctly, reindex only takes place on add and remove of drafts.\n\nWhat about draft comments that already existed before upgrading to this version?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "9b0ead7685cd67e5a951f8918a3070598514a1e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6afc9b2b_fe038154",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-18T08:47:35Z",
      "side": 1,
      "message": "During online or offline reindexing the new field is considered. But I think I missed the fact, that during online reindex we would still have old schema version without this new field. So that the old version of the predicate that is using database should be preserved and depending on the outcome of the condition Schema.getField().exists(\"Draftby\") routed through old or new predicate implementation.",
      "parentUuid": "aa0bf316_7810a19f",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "9b0ead7685cd67e5a951f8918a3070598514a1e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6afc9b2b_9efa3d8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2015-12-18T10:03:36Z",
      "side": 1,
      "message": "Yes, exactly. We should keep the existing logic as well whilst we are still on the old index version.",
      "parentUuid": "6afc9b2b_fe038154",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "9b0ead7685cd67e5a951f8918a3070598514a1e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a0e2f27_77e9d0d5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/ChangeSchemas.java",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-12-18T07:52:17Z",
      "side": 1,
      "message": "Previous schema versions should be annotated with @Deprecated.  Seems to have been missed on V24 aswell.",
      "revId": "9b0ead7685cd67e5a951f8918a3070598514a1e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eabb2b9e_2a543f00",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/index/ChangeSchemas.java",
        "patchSetId": 2
      },
      "lineNbr": 380,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-22T19:41:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a0e2f27_77e9d0d5",
      "revId": "9b0ead7685cd67e5a951f8918a3070598514a1e6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}