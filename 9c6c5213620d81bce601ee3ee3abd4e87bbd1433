{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "95b4329f_15195643",
        "filename": "polygerrit-ui/app/elements/shared/gr-download-commands/gr-download-commands.ts",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-05-25T19:41:51Z",
      "side": 1,
      "message": "we have plenty of other occurrences of usage of querySelector(.*)! in the codebase and they are without any TODO(TS).\nDo we want to discourage this usage? Not sure how to resolve this. Create a queryAndAssert() type function for usage outside the test-suite?",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 55
      },
      "revId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb73d114_8fa1107a",
        "filename": "polygerrit-ui/app/elements/shared/gr-download-commands/gr-download-commands.ts",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:20:50Z",
      "side": 1,
      "message": "Yes, I would vote for moving queryAndAssert from test into core.\n\nThis will also allow us to replace the $ usages.\n\nNote that for LitElement there is a decorator for this, so we only have to deal with this until we have converted Polymer elements to Lit elements:\n\n  @query(\u0027.imageArea\u0027) protected imageArea!: HTMLDivElement;",
      "parentUuid": "95b4329f_15195643",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 55
      },
      "revId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03ed3b33_5f433b28",
        "filename": "polygerrit-ui/app/elements/shared/gr-download-commands/gr-download-commands.ts",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:20:50Z",
      "side": 1,
      "message": "This does not contain `toLowerCase`, which I think is essential here.",
      "range": {
        "startLine": 124,
        "startChar": 11,
        "endLine": 124,
        "endChar": 25
      },
      "revId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61ce3d95_562a22c1",
        "filename": "polygerrit-ui/app/utils/dom-util.ts",
        "patchSetId": 7
      },
      "lineNbr": 223,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:20:50Z",
      "side": 1,
      "message": "Having such a utility is nice for unification, but I would try to not allow `prefix` and `token` parameters. The goal should be to do it in the same way everywhere.",
      "revId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader",
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX"
        ],
        "failingAtoms": [
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9c6c5213620d81bce601ee3ee3abd4e87bbd1433",
      "legacy": {
        "value": false
      }
    }
  ]
}