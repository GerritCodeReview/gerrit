{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1492715600 -0400\nnonce AFMZ2GwA/jFzdtMuEw4Tjx5JtwcKEmTkFUdN24NSIVNRN90n8KKupN6Vkvq1nLs7xQD4Gw3NBUU3\n\n0000000000000000000000000000000000000000 ab8c5f97a3baa4b2657e63c3b13962e2d62e3359 refs/for/master%r\u003dsop@google.com,r\u003dekempin,r\u003dtparker@google.com,r\u003daliceks\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJY+QhQAAoJEF/XxZqaEoiMPugP/07zn+dj/Fbn9H3IQ5Fj2fGK\nfRLRzwidiK6NPbV8UdUg7wZmKQE+wSMtTdnqeRarObdikWntymuZxWW5Me+VvkvJ\nK5UdWoBEsZgRnc0TncsbHB94RmeQZq9DW6HI/wBkDSGP9d6xnAoNas6Z67sgTfyF\nwX3yhAeXQZruzvOPKzhEFkXRDPuVORBwXdNbZl/vUxD762+9lR84M3Fy4dvZ5/Vv\nSqMp6CMmHKp6jWvLE0TnBIz2DEsaNNOJLq2tUPRrtSJh4Rwy0lL3++fNxNytSSyk\nIoE+W1lu3SmDivT0yq5yC2YpGeQOIliGjt6XigxTcsb5u65u17wuL6jSCXDSudAO\nHI6Idk8rkhY1OHxxPqO8U9+t6M4qfOIC/nx9mrLqzlP/yCHSy3bl2gmQQOgYDpKG\nLh1D0TiLbncIuqjtnrPXKXjaSlosv8Yw+viqG945ObDNc8zMmC92A91ZVYk1dU5a\n0VXF+qfpKabDcbnj7fv13kBn1FqLWpGxKeiLUb+vcBP8RWRpG9t/V6Z2N0hi3+hA\niyoHq10VJlTYetbwxcdUDrehRyR/0tkLEVhkc5Cl3GTA9mGkmACqoJPYtx2Ansh5\nE2t22SdLogY0wIlZMNOn6wih5/OY6Fer1ijgO4lIk2TwgvksdMUkaIdDTjxV6u76\nqmFhFbCq2/SLaIPWkuwY\n\u003dYqhn\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "b5e52275_cdc09c2a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-05-02T11:28:21Z",
      "side": 1,
      "message": "I think we need more/updated documentation in BatchUpdateOp. If not read closely, the current Javadoc comments could suggest that an Op implementation is called only once. We should emphasize that the Op can be re-executed and hence sharing data via private fields should be carefully done. In addition, we should point out that any relevant repository state must be read within updateChange() instead of passing it in from the outside.",
      "range": {
        "startLine": 23,
        "startChar": 32,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "9fdd7bcfe200d30674efc0943ffcfbb783347562",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c8c036c_6aea3939",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-05-02T12:28:56Z",
      "side": 1,
      "message": "\u003e We should emphasize that the Op can be re-executed\n\nFortunately this is not actually the case: a particular Op instance will only be executed once. In fact, this is precisely one of the reasons I went with the approach in this change, as opposed to supporting retrying individual Ops: if Ops can be retried, then there are many Ops that need to be rewritten to stop sharing fields between phases. But with the model in this change, the retrying happens at a higher level: the body of the Action includes creating the BatchUpdate and all its Ops.\n\nIn this paragraph, the approach I\u0027m saying we should _not_ take is:\n\n try (Repository repo \u003d repoManager.openRepository(project);\n     BatchUpdate bu \u003d batchUpdateFactory.create(project)) {\n   RevCommit newCommit \u003d buildNewCommitBasedOn(repo.exactRef(theBranch));\n   bu.setRepository(repo);\n   bu.addOpThunk(changeId, () -\u003e new InsertCommitOp(newCommit));\n   bu.executeWithRetry();\n }\n\nReading the commit outside the retry is an example of \"repository state that was read prior\" to beginning the retry loop. If there is a lock failure because theBranch advanced, retrying using the same newCommit will never succeed. This is why retrying should happen at the highest level possible.\n\nOf course, it\u0027s still technically possible with the approach in this change to retry at too low a level. One way we mitigate this issue is making it trivially easy to retry at the top level of a REST API handler, as in the next change. So while it\u0027s not *impossible* to hold it wrong, it\u0027s at least easier to hold it right than wrong. Another is to put some strong language in the RetryHelper documentation to emphasize that retrying should happen at the highest level possible\n\n\u003e I think we need more/updated documentation in BatchUpdateOp.\n\nThis is a fair point, we should still make the BatchUpdateOp javadoc explicit that each method in an Op is executed at most once. But that\u0027s unrelated to this change, and one goal of the approach in this change is to be compatible with the existing BatchUpdateOp semantics.",
      "parentUuid": "b5e52275_cdc09c2a",
      "range": {
        "startLine": 23,
        "startChar": 32,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "9fdd7bcfe200d30674efc0943ffcfbb783347562",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5633fb5_8e162344",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/notedb/NoteDbOnlyIT.java",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-05-02T11:28:21Z",
      "side": 1,
      "message": "optional: Why not use\n\n bu.execute(new ConcurrentWritingListener(updateRepoCalledCount));\n\ninstead?",
      "range": {
        "startLine": 165,
        "startChar": 16,
        "endLine": 169,
        "endChar": 27
      },
      "revId": "9fdd7bcfe200d30674efc0943ffcfbb783347562",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}