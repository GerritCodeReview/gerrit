:linkattrs:
= Gerrit Code Review - Submitting Changes Across Repositories by using Topics

== Goal

This document describes how to propose and submit code changes across multiple Git repositories together in Gerrit.

== When to Use

Oftentimes, especially for larger code bases, code is split across multiple
repositories. The Android operating system’s code base, for example, consists of
https://android.googlesource.com/[hundreds] of separate repositories. When making
a change, you might make code changes that span multiple repositories. For
example, one repository could define an API which is used in another repository.
Submitting these changes across these repositories separately could cause the
build to break for other developers.

Gerrit provides a mechanism called link:intro-user.html#topics[Topics] to submit changes together to
prevent this problem.

|===
|NOTE: Usage of topics to submit multiple changes together requires your Gerrit host 
 having link:config-gerrit.html#change.submitWholeTopic[config.submitWholeTopic] set to 
 true.
|===

== What is a Topic?

* A topic is a string that can be associated with a change.
* Multiple changes can use that topic to be submitted at the same time (assuming approvals, etc.). 
* Submitting a change with a topic causes all of the changes in the topic *to be 
  submitted together*
  ** Topics that span only a single repository are guaranteed to be submitted together
  ** Topics that span multiple repositories simply triggers submission of all changes. No other guarantees are given. Submission of all changes could fail, so you could get a partial topic submission. This is very rare but can happen.
  ** Submitting a topic will submit any dependent changes as well. For example, an unsubmitted parent change will also be submitted, even if it isn’t in the original topic.
  
  This topic behavior applies recursively: Because when a change in a topic is submitted, all changes in the topic  get submitted, if the dependent changes of the original topic A had a topic B (distinct from the original topic), all changes in this topic B will also be submitted.

* A change with a topic is submittable when *all changes* in the topic are submittable and all of the changes’ dependent changes (and their topics) are also submittable.

Here are a few intricacies you should be aware of:

1. Topics do not work across Gerrit instances (AKA hosts). They can be used only across repositories on the *same* Gerrit instance i.e. they use the same hostname in the URL.

2. A topic can be any string, and they are not namespaced in a Gerrit host; there is a chance for collisions and inadvertently grouping changes together that weren’t meant to be grouped. This could even happen with changes you can’t see, leading to more confusion e.g. (change not submittable, but you can't see why it's not submittable.). We suggest prefixing topic strings with the author’s username e.g. “username-” to help avoid this.

|===
|NOTE: Because 1) a topic is only submittable when all of its changes are submittable 
 and 2) submission tries to submit un-submitted dependent changes and all changes in 
 their topics, *dependent changes that aren’t in the topic AND that aren’t submittable 
 will block a topic’s submission.* If your topic isn’t submittable and you can’t figure 
 out why, this might be a reason.
|===

You can view the assigned topic from the change screen in Gerrit:

image::images/cross-repository-changes-topic.png[width=600]

== Submitting Changes Using Topics

=== 1. *Associate the changes to a topic*

The first step is to associate all the changes you want to be submitted together 
with the same topic. There are multiple ways to associate changes with a topic.

==== From the command line
You can set the topic name when uploading to Gerrit

----
$ git push origin HEAD:refs/heads/master -o topic=[YOUR_TOPIC_NAME]
----

*OR*

----
$ git push origin HEAD:refs/for/master%topic=[YOUR_TOPIC_NAME]
----

If you’re using https://source.android.com/setup/develop[repo] to upload a change 
to Android Gerrit, you can associate a topic via:
----
$ repo upload -o topic=[YOUR_TOPIC_NAME]
----

If you’re using https://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools.html[depot_tools] to upload a change to 
Chromium Gerrit, you can associate a topic via:
----
$ git cl upload --topic=[YOUR_TOPIC_NAME]
----

==== From the UI

If the change has already been created, you can add a topic from the change page 
by clicking ADD TOPIC, found on the left side of the top of the Change screen.

image::images/cross-repository-changes-add-topic.png[width=600]

=== 2. *Go through the normal code review process*

Each change still goes through the normal code review process where reviewers 
vote on each change individually. The changes won’t be able to be submitted until 
*all* changes in the topic are submittable. 

The requirements for submittability vary based on rules set by your repository 
administrators; often this includes being approved by all requisite parties, 
passing presubmit testing, and being able to merge cleanly (without conflicts) 
into the target branch.

=== 3. *Submit the change*

When all changes in the topic are submittable, you’ll see *SUBMIT WHOLE TOPIC* at 
the top of the _Change screen_. Clicking it will submit all the changes in the 
topic.

image::images/cross-repository-changes-submit-topic.png[width=600]

=== Example Submission[[example_submission]]

I create a change A1 (topic A) and then a child change B1 (topic B), and then also 
create changes A2 (topic A) and B2 (topic B) in different repositories (A2 and B2 are 
not related). Then, submitting change B1 would submit all of those 4 changes since 
triggering submit on B1 submits all topic B, and all dependent changes and their 
topics (so all of topic A).

== Reverting a Submission

After a topic is submitted, you can revert all or one of the changes by clicking the 
“REVERT” button on any change. 

image::images/cross-repository-changes-revert-topic.png[width=600]

This will give you the option to either revert just the change in question or the entire topic:

image::images/cross-repository-changes-revert-topic-options.png[width=600]

Reverting the entire submission creates revert commits for each change and 
automatically associates them together under the same topic. To submit 
these changes, go through the normal review process. 

When submitting a topic, dependent changes and their topics are submitted 
as well. The RevertSubmission creates reverts for all the changes that were 
submitted at that time. When reverting the submission described in <<example_submission,Example Submission>>, all 4 of those changes will get reverted.

|===
| NOTE: We say “reverting a submission” instead of “reverting a submitted   
  topic” because the revert is limited to the submission, not the entire topic. As described earlier, topics are uniquely defined by the string and could be reused, so if:
  
  1. Submission #1 uses topic A
  
  2. Later, Submission #2 uses topic A again

  Reverting submission #2 only reverts the changes in that submission, not all changes included in topic A.
|===

== Cherry-Picking a Topic

You may want to cherry-pick the changes (i.e. copy the changes) of a topic 
to another repository or branch, perhaps because you have multiple branches 
that all need to be updated with the same change as with a security fix. 
Gerrit provides a mechanism to create these changes.

From the overflow menu (3 dot icon) in the top right of the Change Screen, 
select “Cherry pick.” In the screenshot below, we’re showing this on a 
submitted change, but this option is available if the change is pending as 
well.

image::images/cross-repository-changes-cp-menu.png[width=600]

Afterwards, you’ll be presented with a modal where you can “Cherry Pick entire topic.”

image::images/cross-repository-changes-cp-modal.png[width=600]

Enter the branch name that you want to target for these repositories. The 
branch must already exist on all of the repositories. After clicking 
“CHERRY PICK,” Gerrit will create new changes all targeting the entered 
branch in their respective repositories, and these new changes will all be 
associated with a new, uniquely-generated topic name.

To submit the cherry-picked changes, go through the normal submission 
process.

|===
| NOTE: You cannot cherry pick changes that all target the same repository 
  from the Gerrit UI at this time; you’ll get an error message saying 
  “changes cannot be of the same repository.” To accomplish this, you’d 
  need to do the cherry-pick locally.
|===

== Searching for Topics

In the Gerrit search bar, you can search for changes attached to specific topics using the topics operator e.g. topic:"MY_TOPIC_NAME”
