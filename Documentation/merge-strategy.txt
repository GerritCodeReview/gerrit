Gerrit Code Review - Merge Strategies
=====================================

A merge strategy is the action used by Gerrit to submit
an approved change to its destination branch. Supported options are:
+
* FAST_FORWARD_ONLY: produces a strictly linear history.
* MERGE_IF_NECESSARY: create a merge commit when required.
* MERGE_ALWAYS: always create a merge commit.
* CHERRY_PICK: always cherry-pick the commit.

Merge Strategies in Gerrit are based on reference namespace
patterns. They can be set on a single reference name to match
one branch (e.g. `refs/heads/master`), or on a reference
namespace (e.g. `refs/heads/*`) to match any branch starting
with that prefix. So a merge strategy with `refs/heads/*` will
match `refs/heads/master` and `refs/heads/experimental`, etc.

Reference names can also be described with a regular expression
by prefixing the reference name with `^`.  For example
`^refs/heads/[a-z]{1,8}` matches all lower case branch names
between 1 and 8 characters long.  Within a regular expression `.`
is a wildcard matching any character, but may be escaped as `\.`.
The link:http://www.brics.dk/automaton/[dk.brics.automaton library]
is used for evaluation of regular expression merge strategies
rules. See the library documentation for details on this
particular regular expression flavor.

Defaults to MERGE_IF_NECESSARY.

Project Merge Strategies Lists
----------------------------

A system wide merge strategy list affecting all projects is stored in
project "`All-Projects`".  This inheritance can be configured
through link:cmd-set-project-parent.html[gerrit set-project-parent].

Per-project merge strategy lists are also supported.

All Projects
~~~~~~~~~~~~

Any merge strategy granted to `All-Projects` is automatically
inherited by every other project in the same Gerrit instance.

Only members of the group `Administrators` may edit the merge
strategy list for `All-Projects`.

Ownership of this project cannot be delegated to another group.
This restriction is by design.  Granting ownership to another
group gives nearly the same level of access as membership in
`Administrators` does, as group members would be able to alter
permissions for every managed project.

Per-Project
~~~~~~~~~~~

The per-project merge strategy list is evaluated before the global
`All-Projects` list, permitting override capability to project owners.

This way, if to `All-Projects` we have:
  [submit refs/*]
    action = mergeIfNecessary
  [submit refs/heads/master]
    action = cherryPick
  [submit refs/heads/integration]
    action = fastForwardOnly

And then in a project called 'A' we have:
  [submit refs/*]
    action = fastForwardOnly
  [submit refs/heads/master]
    action = fastForwardOnly

Finally, in a project called 'B', having 'A' as the parent:
  [submit refs/*]
    action = cherryPick

Considering patchsets being merged on Project B:
* To refs/heads/development branch, use cherryPick
* To refs/heads/master branch, use fastForwardOnly
* To refs/heads/integration, use fastForwardOnly


Use Content Merge
----------------------------

If enabled to a merge strategy, Gerrit will try to perform
a 3-way merge of text file content when a file has been
modified by both the destination branch and the change being
submitted. This option only takes effect if submit type is not
FAST_FORWARD_ONLY. Disabled by default.

Example of how enabling it to a merge strategy:
  [submit refs/*]
    mergeContent = true
    action = mergeIfNecessary

GERRIT
------
Part of link:index.html[Gerrit Code Review]
