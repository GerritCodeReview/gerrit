Gerrit Code Review - Project Configuration
==========================================

All Git repositories under gerrit.basePath must be registered in
the Gerrit database in order to be accessed through SSH, or through
the web interface.

Create Through SSH
------------------

Creating a new repository over SSH is perhaps the easiest way to
configure a new project:

====
  ssh -p 29418 review.example.com gerrit create-project --name new/project
====

See link:cmd-create-project.html[gerrit create-project] for more
details.


Manual Creation
---------------

Projects may also be manually registered with the database.

Create Git Repository
~~~~~~~~~~~~~~~~~~~~~

Create a Git repository under gerrit.basePath:

====
  git --git-dir=$base_path/new/project.git init
====

[TIP]
By tradition the repository directory name should have a `.git`
suffix.

To also make this repository available over the anonymous git://
protocol, don't forget to create a `git-daemon-export-ok` file:

====
  touch $base_path/new/project.git/git-daemon-export-ok
====

Register Project
~~~~~~~~~~~~~~~~

One insert is needed to register a project with Gerrit.

[NOTE]
Note that the `.git` suffix is not typically included in the
project name, as it looks cleaner in the web when not shown.
Gerrit automatically assumes that `project.git` is the Git repository
for a project named `project`.

====
  INSERT INTO projects
  (use_contributor_agreements
   ,submit_type
   ,name)
  VALUES
  ('N'
  ,'M'
  ,'new/project');
====

[[submit_type]]
Change Submit Action
--------------------

The method Gerrit uses to submit a change to a project can be
modified by any project owner through the project console, `Admin` >
`Projects`.  The following methods are supported:

* Fast Forward Only
+
This method produces a strictly linear history.  All merges must
be handled on the client, prior to uploading to Gerrit for review.
+
To submit a change, the change must be a strict superset of the
destination branch.  That is, the change must already contain the
tip of the destination branch at submit time.

* Merge If Necessary
+
This is the default for a new project (and why `\'M'` is suggested
above in the insert statement).
+
If the change being submitted is a strict superset of the destination
branch, then the branch is fast-forwarded to the change.  If not,
then a merge commit is automatically created.  This is identical
to the classical `git merge` behavior, or `git merge \--ff`.

* Always Merge
+
Always produce a merge commit, even if the change is a strict
superset of the destination branch.  This is identical to the
behavior of `git merge \--no-ff`, and may be useful if the
project needs to follow submits with `git log \--first-parent`.

* Cherry Pick
+
Always cherry pick the patch set, ignoring the parent lineage
and instead creating a brand new commit on top of the current
branch head.
+
When cherry picking a change, Gerrit automatically appends onto the
end of the commit message a short summary of the change's approvals,
and a URL link back to the change on the web.  The committer header
is also set to the submitter, while the author header retains the
original patch set author.

* Sub-Tree
+
This method extends the behavior of Cherry Pick by automatically
splitting out changes to sub-tree changes into their own commits.  If
a subtree merge has been performed to pull in some other project,
Gerrit will automatically split out changes to that subtree when this
merge strategy is used.  This allows the changes to be the subtree
project to be more easily shared.
+
For example, consider the following commit graph.  Commit E was
merged in as a subtree creating commit B.  In commit C, the contents
of that subtree were modified.  Change C has been uploaded as a
change in Gerrit.
+
-----------------------------------
  A---B---C  super-project
     /
D---E        subtree-project
-----------------------------------
+
After the change has been submitted, the modification in the subtree
will be split out and merged back in again in as follows:  Commit F is
split out automatically from the change to the subtree in C.  C is then
modified to include F as a parent which results in C'.  (Note that the
trees that C and C' point to are exactly the same - no actual changes are
made to the content of the commit.)
+
-----------------------------------
  A---B---C'  super-project
     /   /
D---E---F     subtree-project
-----------------------------------
+
Because change C did introduce a modification to the subtree, F is
actually now a new branch.  If changes continue in upstream the full
picture will look like this:
+
-----------------------------------
    A---B---C'  super-project
       /   /
  D---E---F     subtree-branch
       \
        G---H   subtree-upstream
-----------------------------------
+
Later on it may be desirable to merge in the latest changes from
subtree-upstream into the super project.  For example if
subtree-upstream commit H is merged into super-project, the result
will look like this:
+
-----------------------------------
    A---B---C'--I   super-project
       /   /   /
  D---E---F   /     subtree-branch
       \     /
        G---H       subtree-upstream
-----------------------------------
+
When the change is submitted, Gerrit will split out the
changes as follows:  J will be created automatically and I will be
rewritten as I' to include J as a parent.
+
-----------------------------------
    A---B---C'--I'  super-project
       /   /   /
  D---E---F---J     subtree-branch
       \     /
        G---H       subtree-upstream
-----------------------------------



Registering Additional Branches
-------------------------------

Branches can be created over the SSH port by any `git push` client,
if the user has been granted the `Push Branch` > `Create Branch`
(or higher) access right.

Additional branches can also be created through the web UI, assuming
at least one commit already exists in the project repository.
A project owner can create additional branches under `Admin` >
`Projects` > `Branches`.  Enter the new branch name, and the
starting Git revision.  Branch names that don't start with `refs/`
will automatically have `refs/heads/` prefixed to ensure they are
a standard Git branch name.  Almost any valid SHA-1 expression can
be used to specify the starting revision, so long as it resolves
to a commit object.  Abbreviated SHA-1s are not supported.

GERRIT
------
Part of link:index.html[Gerrit Code Review]
