== New Gerrit URL Schema
-------
Design Proposal • PUBLIC
Author: hiesel@google.com • Status: Published • Last Edited: 2016-12-01
~~~~~~~

=== Problem Statement
Given Gerrit’s current URL schema, a load balancer cannot determine which project a request refers to without making a secondary index request. This complicates the use of off-the-shelf load balancers for sharded Gerrit instances as most would only allow routing decisions based on the information that is present in the request. On top, relying solely on the legacy change id in the URL makes moving projects between hosts inconvenient as there might be a collision of change ids.
Proposed Solution
We propose to add the project name as a path component to all change URLs to enable routing decisions for sharded instances based on the request information.
Therefore, we introduce a new project literal p to mark the start of a project name and distinguish it from other URLs. Since the project name can contain forward slashes, /+c/ is used to mark the end of the project name. This schema was pioneered by Gitiles’ /+/ and has worked well in the past.

Since we also allow /+ as part of a project name, the parser will take the last occurrence in the URL as the delimiter. The literal c will be moved after the project name delimiter and mark the beginning of the numeric change id. In addition we will disallow the creation of new projects containing /+.

These are specific examples of how this change will affect URLs in the UI:
Old:
https://gerrit-review.googlesource.com/#/c/248741/ (GWTUI)
https://gerrit-review.googlesource.com/c/248741/ (Polygerrit)
https://gerrit-review.googlesource.com/#/q/status:open (GWTUI)
New:
https://gerrit-review.googlesource.com/#/p/platform/system/bt/+c/248741/ (GWTUI)
https://gerrit-review.googlesource.com/p/platform/system/bt/+c/248741/ (Polygerrit)
https://gerrit-review.googlesource.com/#/q/status:open (GWTUI * no change)


In the REST API we are already accepting three different change identifiers: 
* The project~branch~changeId triplet
* A changeId if it uniquely identifies a change
* The change number


We will deprecate all three of these patterns and replace them with project/+/changeNumber.
These are specific examples of how this change will affect URLs in the REST API:
Old
GET /changes/myProject~master~I8473b95934b57326311a706c9c2bde9940/reviewers/
GET /changes/foo%2fbar~master~I8473b95934b57326311a706c9c2bde9940/reviewers/
GET /changes/I8473b95934b57326311a706c9c2bde9940/reviewers/
GET /changes/12345/reviewers/

New
GET /changes/myProject/+/12345/reviewers/
GET /changes/foo/bar/+/12345/reviewers/
GET /changes/myProject/+/12345/reviewers/
GET /changes/myProject/+/12345/reviewers/

We have added an example to contrib/ to demonstrate different sharding key extraction strategies using a single regular expression based on the new URL schema.

=== How do off-the-shelf load balancers support this solution?
Looking at available open-source load balancers, this schema would be well supported:
* (HA Proxy) Has full regex support on URLs. The project can be extracted from the URL and used for load balancing fairly easy.
* (nginx) Has a hash method that can be used for load balancing. The input can be generated by applying a regex to the URL. So sharding by project name is fairly easy.

=== Compatibility
We will redirect all requests that use the previous schema to the new schema using HTTP 301 (Moved Permanently). This will not break any requests where the client follows redirects (such as users clicking on links in bug trackers) but might impact scripts that aren’t set up to follow redirects. While a quick fix for this is to follow redirects in scripts, administrators should work with script authors to ensure a smooth transition to the new schema.

For the REST API, we will also set up redirects from all three old patterns to the new pattern, but eventually deprecate them in a future Gerrit release as there are only used by scripts that can be adapted to the new pattern.

=== Considered Alternatives
* [Current Status] Keep the current URL schema
This makes load balancing based solely on the URL impossible. Our recent discussion at the Gerrit User Summit revealed that a growing number of people in the Gerrit community need to distribute the traffic to their instances and have difficulties doing so with the current schema.
* [URL Schema] Use the change ID instead of the change number
Technically feasible when using project-name/branch/changeID but users like a readable URL. In addition, this would still require a lookup as the change number is used for the NoteDb meta ref.
* [URL Schema] Add project to URL and use sequence numbers per project
When adding the project name to the URL, we could also replace the change number with a per-project sequence number as having an increasing counter of changes per project seems reasonable. However, the change number is used in NoteDb on the change branch and introducing a new mapping from change number to sequence number would confuse users.
* [URL Schema] Escaping the project name instead of using a delimiter
We currently escape the project name in the REST API when using the triplet for identifying a change. However, having escaping in a user-visible URL (example: /c/foo%2fbar%2fbar) makes it rather unreadable for humans.
* [URL Schema] Use the full triplet in the URL
Gitiles uses the full triplet project-name/branch/change-number, because it in the Git context, specifying a branch makes sense. For Gerrit, this information is not needed - neither for load balancing, nor for an efficient NoteDb lookup as the project name (= repo name) and the change number (= ref) are sufficient. Furthermore, there is no reason to display branch names for changes to humans.
* [URL Schema] Statically map projects to shorter UUIDs
It would be feasible to map project names to shorter UUIDs at the cost of unreadable URLs and the need to provide the static mapping or a mapping function to a load balancer.
* [Load Balancer] Provide a custom load balancer
We could also provide a custom load balancer implementation as either a standalone or an extension to an off-the-shelf load balancer that has a static lookup table for mapping from change id to project. However, maintaining a custom load balancer seems to be an unreasonable effort and providing an extension to an existing load balancer that can memorize a mapping between change id and project would lock administrators in to using this load balancer.

=== Discussion
We understand that this is a controversial change, but see a growing need for good load-balancing support within the community. We have considered many alternatives and adding the project name to the URL seems the most natural to the user considering the readability of the URL. The basic tradeoff we make is accepting a longer URL at the upside of getting great load-balance support and sparing overhead with secondary index requests which will benefit request latency.