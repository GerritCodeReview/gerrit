= Inline Edit

This page explains the workflow for creating and amending changes in the
browser.


[[create-change]]
== Creating a New Empty Change

A new change can be created directly in the browser, meaning it is not necessary
to clone the whole repository to make trivial changes.

There are two different ways to create an empty change:

By clicking on the 'Create Change' button in the project screen:

[[create-change-from-project-info-screen]]

image::images/inline-edit-create-change-project-screen.png[width=800, link="images/inline-edit-create-change-project-screen.png"]

The user can select the branch on which the new change should be created:

image::images/inline-edit-create-change-project-screen-dialog.png[width=800, link="images/inline-edit-create-change-project-screen-dialog.png"]

By clicking the 'Follow-Up' button on the change screen, to create an empty
change based on the selected change.

[[create-change-from-change-screen]]

image::images/inline-edit-create-follow-up-change.png[width=800, link="images/inline-edit-create-follow-up-change.png"]

[[editing-change]]
== Editing Changes

To switch to edit mode, press the 'Edit' button at the top of the file list:

[[switch-to-edit-mode]]
image::images/inline-edit-enter-edit-mode-from-file-list.png[width=800, link="images/inline-edit-enter-edit-mode-from-file-list.png"]

While in edit mode, it is possible to add new files to the change by clicking
the 'Add...' button at the top of the file list.

Files can be removed from the change, or restored, by clicking the icon to the
left of the file name.

To switch from edit mode back to review mode, click the 'Done Editing' button.

image::images/inline-edit-file-list-in-edit-mode.png[width=800, link="images/inline-edit-file-list-in-edit-mode.png"]

[[open-full-screen-editor]]
While in edit mode, clicking on a file name in the file list opens a full
screen editor for that file.

To save or abort edits and return to the change screen, click the 'Save' or
'Cancel' button.

image::images/inline-edit-full-screen-editor.png[width=800, link="images/inline-edit-full-screen-editor.png"]

[[switch-to-edit-mode-from-side-by-side]]

While in review mode, it is possible to switch directly to edit mode and into an
editor for a file under review by clicking on the edit icon in the patch set list
on the side-by-side diff view.

image::images/inline-edit-enter-edit-mode-from-diff.png[width=800, link="images/inline-edit-enter-edit-mode-from-diff.png"]

[[reviewing-changes-made-in-change-edit]]
== Reviewing Change Edits

Change edits are reviewed in the same way as regular patch sets, using the
side-by-side diff screen. Change edits are shown as 'edit' in the patch list
on the diff screen:

image::images/inline-edit-edit-in-diff-screen-patch-list.png[width=800, link="images/inline-edit-edit-in-diff-screen-patch-list.png"]

and on the change screen:

image::images/inline-edit-edit-in-patch-list.png[width=800, link="images/inline-edit-edit-in-patch-list.png"]

Note that patch sets may exist that were created after the change edit was created.

For example this sequence:

`1 2 3 4 5 6 7 8 9 edit 10`

means that the change edit was created on top of patch set number 9 and a regular
patch set was uploaded later.

[[change-edit-actions]]
== Change Edit Actions

Change edits can be deleted, published, rebased and patch that represents change
edit can be downloaded like regular patch sets.

[[delete-change-edit]]

Change edit is saved on special ref. When change edit is deleted, this ref is
deleted as well. To delete change edit click on "Delete Edit" button.

[[publish-change-edit]]

When change is based on current patch set, it can be published, meant it get
prompted to regular patch set and the ref, that represents the change edit is
deleted. To publish change edit click on "Publlish Edit" button. When this button
is not visible, then the patch set the edit is based on is not the current patch
set. In this case see next section how to rebase change edit.

[[rebase-change-edit]]

Only change edits that based on the current patch set can be published. When in
the menatime new patch set was uploaded, change edit must be rebased first on top
of current patch set. To do that click on "Rebase Edit". When during rebase conflict
occurs, it currently can bed resolved in browser. In this case the change edit must
be downloaded (see next section) and conflicts must be resolved you user local
environment.

[[download-change-edit-patch]]

Like regular patch sets, change edits can be downloaded with download-command plugin.
Note that this plugin must be installed for this feature to work. To download patch
select the desired scheme from "Download" dropdown and copy the command to your
terminal.

[[not-implemented-features]]
== Not Implemented Features

* [PENDING CHANGE]
Allow to rename files from the repository (not contained in the change).

* Allow to rename files that already contained in the change (from the file table).
The same rename file dialog can be used with preselected and disabled original file
name.

* [PENDING CHANGE]
The inline editor uses settings decided from the user's diff preferences, but those
preferences are only modifiable from the side-by-side diff screen. It should be possible
to open the preferences also from within the editor.

* Activate spell checking when CodeMirror supports it: [1]

[1] https://github.com/codemirror/CodeMirror/issues/1017

* Changed files in change edit should be marked as changed in file table in edit mode.
One option is to use dirty icon or "*" char in front of changed files, another option
is to use different hyperlink color for changed files (red?), to avoid adding yet another
column to the file table

* Add navigation icons in header area of edit screen. When dozen files need to be changed
in context of change edit, this is not the best workflow to open one file in edit screen,
change it, save it, close edit screen and select next file from the file table to edit.
"<-" | "->" icons in header of edit screen could be used to navigate to the next file to
change from the file table. This would behave like the navigation icons in SBS2 with
automagic logic on click:

** "save-when-file-was-changed" or
** "close-when-no-changes"

* Allow to activate different key maps, supported by CM: Emacs, Sublime, Vim. Load key
maps dynamically. Currently default mode is used. Change it to vim? VIM key map is already
loaded and it supports goto-line feature seamlessly.

* Allow to upload/amend change edit with `git push`. When rebase of change edit on top
of current patch set is failing because of conflicts, change edit can be pulled out from
Gerrit, amended, but cannot be pushed again as modified change edit per `git` command yet:

  $ git push origin HEAD:refs/for/master%edit

* Implement conflict resolution during rebase of change edit using inline edit
feature by creating new edit on top of current patch set with auto merge content

* Similarly, reuse inline edit feature for conflict resolution during rebase of regular
patch sets

GERRIT
------
Part of link:index.html[Gerrit Code Review]

SEARCHBOX
---------
