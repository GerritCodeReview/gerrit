Release notes for Gerrit 2.5
============================

Gerrit 2.5 is now available:

link:http://code.google.com/p/gerrit/downloads/detail?name=gerrit-2.5.war[http://code.google.com/p/gerrit/downloads/detail?name=gerrit-2.5.war]

Upgrade Warnings
----------------

[[replication]]
Replication
~~~~~~~~~~~

Gerrit 2.5 no longer includes replication support out of the box.
Servers that reply upon `replication.config` to copy Git repository
data to other locations must also install the replication plugin.

Cache Configuration
~~~~~~~~~~~~~~~~~~~

Disk caches are now backed by individual H2 databases, rather than
Ehcache's own private format. Administrators are encouraged to clear
the `'$site_path'/cache` directory before starting the new server.

The `cache.NAME.diskLimit` configuration variable is now expressed in
bytes of disk used. This is a change from previous versions of Gerrit,
which expressed the limit as the number of entries rather than bytes.
Bytes of disk is a more accurate way to size what is held. Admins that
set this variable must update their configurations, as the old values
are too small. For example a setting of `diskLimit = 65535` will only
store 64 KiB worth of data on disk and can no longer hold 65,000 patch
sets. It is recommended to delete the diskLimit variable (if set) and
rely on the built-in default of `128m`.

The `cache.diff.memoryLimit` and `cache.diff_intraline.memoryLimit`
configuration variables are now expressed in bytes of memory used,
rather than number of entries in the cache. This is a change from
previous versions of Gerrit and gives administrators more control over
how memory is partioned within a server. Admins that set this variable
must update their configurations, as the old values are too small.
For example a setting of `memoryLimit = 1024` now means only 1 KiB of
data (which may not even hold 1 patch set), not 1024 patch sets.  It
is recommended to set these to `10m` for 10 MiB of memory, and
increase as necessary.

The `cache.NAME.maxAge` variable now means the maximum amount of time
that can elapse between reads of the source data into the cache, no
matter how often it is being accessed. In prior versions it meant how
long an item could be held without being requested by a client before
it was discarded. The new meaning of elapsed time before consulting
the source data is more useful, as it enables a strict bound on how
stale the cached data can be. This is especially useful for slave
servers account and permission data, or the `ldap_groups` cache, where
updates are often made to the source without telling Gerrit to reload
the cache.

Plugins
~~~~~~~

The Gerrit server functionality can be extended by installing plugins.
Depending on how tightly the extension code is coupled with the Gerrit
server code, there is a distinction between
link:../Documentation/dev-plugins.html#plugin[plugins] and
link:../Documentation/dev-plugins.html#extension[extensions].

* link:#replication[Move replication logic to replication plugin]
+
This splits all of the replication code out of the core server
and moves it into a standard plugin.

* link:../Documentation/dev-plugins.html[Documentation about
  plugin development] including instructions for:
** link:../Documentation/dev-plugins.html#getting-started[how to get
   started with plugin development]
** link:../Documentation/dev-plugins.html#deployment[plugin
   deployment/installation]

* link:../Documentation/dev-plugins.html#API[API for plugins and
  extentions]

* Support for  link:../Documentation/dev-plugins.html#ssh[SSH command
  plugins]
+
Allows plugin developers to declare additional SSH commands.

* Support for link:../Documentation/dev-plugins.html#http[HTTP
  plugins]
+
Plugins may contribute to the /plugins/NAME/ URL space.

* Automatic registration of plugin bindings
+
If a plugin has no modules declared in the manifest, automatically
generate the modules for the plugin based on the class files that
appear in the plugin and the `@Export` annotations that appear on
these concrete classes.
+
For any non-abstract command that extends SshCommand, plugins may
declare the command with `@Export("name")` to
link:../Documentation/dev-plugins.html#ssh[bind the implementation
as that SSH command].
+
Likewise link:../Documentation/dev-plugins.html#http[HTTP servlets
can also be bound to URLs].

* link:../Documentation/dev-plugins.html#data-directory[Support a data
  directory for plugins on demand]

* Support serving static/ and Documentation/ from plugins
+
The static/ and Documentation/ resource directories of a plugin can be
served over HTTP for any loaded and running plugin, even if it has no
other HTTP handlers. This permits a plugin to supply icons or other
graphics for the web UI, or documentation content to help users learn
how to use the plugin.

* link:../Documentation/dev-plugins.html#documentation[Auto-formatting
  of plugin HTTP pages from Markdown files]
+
If Gerrit detects that a requested plugin resource does not exist, but
instead a file with a `.md` extension does exist, Gerrit opens the
`.md` file and reformat as html.

* Support of link:../Documentation/dev-plugins.html#macros[macros in
  Markdown plugin documentation]

* link:../Documentation/dev-plugins.html#auto-index[Automatic
  generation of an index for the plugin documentation]

* Web UI for plugins
+
Administrators can see the list of installed plugins in the WebUI
under `Admin` > `Plugins`. For each plugin the plugin status is shown
and it is possible to navigate to the plugin documentation.

* Servlet to list plugins
+
Administrators can retrieve plugin information from a REST interface
by loading `<server-url>/a/plugins/`.

* Support SSH commands to
** link:../Documentation/cmd-plugin-ls.html[list the installed
   plugins]
** link:../Documentation/cmd-plugin-install.html[install plugins]
** link:../Documentation/cmd-plugin-remove.html[disable plugins]
** link:../Documentation/cmd-plugin-reload.html[reload plugins]

* Automatically load/unload/reload plugins
+
The PluginScanner thread runs every 1 minute by default and loads any
newly created plugins, unloads any deleted plugins, and reloads any
plugins that have been modified.
+
The check frequency can be configured by setting
link:../Documentation/config-gerrit.html#plugins.checkFrequency[
plugins.checkFrequency] in the Gerrit config file. By configuration
the scanner can also be disabled.

* link:../Documentation/dev-plugins.html#classpath[Loading of plugins
  in own ClassLoader]

* Plugin cleanup in the background
+
When a plugin is stopped, schedule a Plugin Cleaner task to run
1 minute later to try and clean out the garbage and release the
JAR from `$site_path/tmp`.

* Export `LifecycleListener` as extension point
+
Extensions may need to know when they are starting or stopping.
Export the interface that they can use to learn this information.

* Support injection of `ServerInformation` into extensions and plugins
+
Plugins can take this value by injection and learn the current
server state during their own LifecycleListener. This enables a
plugin to determine if it is loading as part of server startup, or
because it was dynamically installed or reloaded by an administrator.

* link:../Documentation/dev-plugins.html#archetype[Maven archetype for
  creating gerrit plugin projects]
