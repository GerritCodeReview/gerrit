{
  "comments": [
    {
      "key": {
        "uuid": "1b6fbae6_547be3ea",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2017-09-06T18:17:15Z",
      "side": 1,
      "message": "Nit: typo",
      "range": {
        "startLine": 61,
        "startChar": 69,
        "endLine": 61,
        "endChar": 77
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1de8550c_bb2d6daa",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-09-06T20:42:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b6fbae6_547be3ea",
      "range": {
        "startLine": 61,
        "startChar": 69,
        "endLine": 61,
        "endChar": 77
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a36efb4c_a394d896",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2017-09-06T18:17:15Z",
      "side": 1,
      "message": "Is the payload ever so deep that a shallow clone is not enough?",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40c2add8_da8749c1",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-09-06T18:52:32Z",
      "side": 1,
      "message": "Yes, payloads can be very deep. And we modify responses, on many levels.\nDeep-cloning would fix this, but probably best would be to use JSON.parse(JSON.stringify()) or just to store strings and parse every time.",
      "parentUuid": "a36efb4c_a394d896",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f6feb66_c3880494",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-09-06T20:42:03Z",
      "side": 1,
      "message": "The shallow clone is enough to fix this issue, since the top-level object reference is what caused the bug.\n\nHowever you make a good point that the deep clone would also fix bugs in any observers on sub-properties. (I\u0027m not aware of any currently.)\n\nWould this be suitable as a follow up change?",
      "parentUuid": "40c2add8_da8749c1",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf3cbc6_a214b234",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-09-06T21:56:40Z",
      "side": 1,
      "message": "Actually, I\u0027ll just do this now instead.",
      "parentUuid": "3f6feb66_c3880494",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "778391ac_70e52672",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-09-06T22:15:20Z",
      "side": 1,
      "message": "Changed to deep cloning using Viktar\u0027s suggestion of stringifying and re-parsing.\n\nStoring the original string as Viktar also suggests would be a nice upgrade in the future, but will involve larger changes to the ETag decorator\u0027s interface.",
      "parentUuid": "baf3cbc6_a214b234",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5803d633_e405b339",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-09-06T23:33:24Z",
      "side": 1,
      "message": "\u003e Alternatively, .collect method could store original response instead to avoid stringification.\n\nThat\u0027s essentially what I mean by \"Storing the original string\". This makes total sense to me as an upgrade to the ETag decorator, but seeing how it would change the decorator\u0027s interface, as well as its tests it wouldn\u0027t be so trivial.\n\nDo you think I can file an issue a follow up on this change? Or are you saying that it\u0027s a blocker and needs to be done here?",
      "parentUuid": "778391ac_70e52672",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d976dbcf_fc415c53",
        "filename": "polygerrit-ui/app/elements/shared/gr-rest-api-interface/gr-etag-decorator.js",
        "patchSetId": 7
      },
      "lineNbr": 64,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-09-07T17:45:10Z",
      "side": 1,
      "message": "Etag decorator already receives response in collect(), so interface change isn\u0027t required.\nThe problem is that gr-rest-api-interface reads body via response.text(), thus blocking reusing.\nThis can be avoided if response is cloned in getResponseObject(), like this:\n\n    getResponseObject(response) {\n      return response.clone().text().then(text \u003d\u003e {\n\nUp to you though, this isn\u0027t a submission blocker certainly.",
      "parentUuid": "5803d633_e405b339",
      "range": {
        "startLine": 64,
        "startChar": 34,
        "endLine": 64,
        "endChar": 41
      },
      "revId": "a1b3202046580de43f54037cb90a05eea416fdae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}