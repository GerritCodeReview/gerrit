{
  "comments": [
    {
      "key": {
        "uuid": "d9ceadb1_fe1170a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-13T22:38:50Z",
      "side": 1,
      "message": "Sp:\n\n Prospective",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df975086_ec0b52bd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-14T18:51:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9ceadb1_fe1170a9",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54c7d9bd_d85bbb50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-13T22:38:50Z",
      "side": 1,
      "message": "This bug describes a bad DOM insertion, but its not clear to me how that can happen from the code this change replaces. Can you add some more context to how this change addresses this issue?",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 15
      },
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "687217dd_7264d245",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-14T18:51:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54c7d9bd_d85bbb50",
      "range": {
        "startLine": 9,
        "startChar": 5,
        "endLine": 9,
        "endChar": 15
      },
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcfe256b_beb6b04d",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.js",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-13T22:38:50Z",
      "side": 1,
      "message": "It makes a lot of sense why a this flush is useful here, but does the new `_suggestionEls` property also fix something?\n\nWould it make any sense to just call...\n\n this.$.cursor.stops \u003d this.$.suggestions.querySelectorAll(\u0027li\u0027);\n\n...?",
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1a8d901_5c2794ea",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.js",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-14T18:51:46Z",
      "side": 1,
      "message": "I\u0027d prefer to keep an extra property than to deal with element availability and readiness.\n\nFor example, suggestions arrive after element is detached.",
      "parentUuid": "bcfe256b_beb6b04d",
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5386038c_a5bb608f",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.js",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-14T19:18:51Z",
      "side": 1,
      "message": "\u003e For example, suggestions arrive after element is detached.\n\nIs there an error if suggestions arrive after detachment? If the element\u0027s JS implementation has not be GC\u0027d and is handling REST responses then I\u0027d expect that neither has the DOM.\n\nSince `_suggestionEls` is only used to populate stops, and it\u0027s only assigned here, then isn\u0027t assigning `this.$.cursor.stops` equivalent? Is there a case where it isn\u0027t equivalent?",
      "parentUuid": "c1a8d901_5c2794ea",
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aee702a_1223afe4",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.js",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-14T20:52:28Z",
      "side": 1,
      "message": "I simply don\u0027t know internals of web components, Polymer, and shady dom polyfills enough to be sure that this.$.cursor.stops is reliable in this case.\n\nI\u0027m quite certain that Polymer would make sure binding doesn\u0027t explode, regardless on the moment it\u0027s being updated.\n\nI don\u0027t feel strongly, though.",
      "parentUuid": "5386038c_a5bb608f",
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b12d558_d5f601f5",
        "filename": "polygerrit-ui/app/elements/shared/gr-autocomplete/gr-autocomplete.js",
        "patchSetId": 1
      },
      "lineNbr": 186,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-14T21:12:21Z",
      "side": 1,
      "message": "\u003e I don\u0027t feel strongly, though.\n\nI don\u0027t feel strongly either, in this case. I just want to help limit the scope of defensive coding so our code doesn\u0027t get too bogged down in safety checks and workarounds.\n\n\u003e I simply don\u0027t know internals of web components, Polymer, and shady dom polyfills enough to be sure that this.$.cursor.stops is reliable in this case.\n\nMaybe you\u0027re referring to the issue with the CC list problem (hopefully) fixed by I37c6a7eb4b4. In that case, it seems at least partially related to the fact that the CC list was in a dom-if, which isn\u0027t the case here.\n\n\u003e I\u0027m quite certain that Polymer would make sure binding doesn\u0027t explode, regardless on the moment it\u0027s being updated.\n\nIt should be relatively easy to test by detaching an autocomplete and then manually setting `element._suggestions` to some array. If it doesn\u0027t explode in that case, would you be more confident in using `this.$.cursor.stops`?",
      "parentUuid": "8aee702a_1223afe4",
      "revId": "a2a3990b464bdc883c0a4fa6a19e6ef18e639957",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}