{
  "comments": [
    {
      "key": {
        "uuid": "df7dd9d4_993078ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-08-21T07:20:32Z",
      "side": 1,
      "message": "72 chars",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2788e544_05aeb031",
        "filename": "polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-shared-style.js",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-08-19T17:01:46Z",
      "side": 1,
      "message": "can be very helpful to have some JSDoc here explaining the changes compared to `Gerrit.css` as now its a two steps process:\n1. `new GrSharedStyle()` to create an instance with the styles\n2. use `instance.apply(element)` to apply the css to any element you want to apply the css on.\n\nafter switching to `class` syntax, it should help a lot on the readability",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7dc3134_5ed98561",
        "filename": "polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-shared-style.js",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-08-19T17:26:55Z",
      "side": 1,
      "message": "Yes, will do if we decide go forward with this solution.",
      "parentUuid": "2788e544_05aeb031",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac3a435a_a9d92da5",
        "filename": "polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-shared-style.js",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-08-21T07:20:32Z",
      "side": 1,
      "message": "The common approach is that plugin.blaApi() would create an API instance of some sort per plugin:\n\n  Plugin.prototype.annotationApi \u003d function() {\n    return new GrAnnotationActionsInterface(this);\n  };\n\n  Plugin.prototype.changeActions \u003d function() {\n    return new GrChangeActionsInterface(this, ...);\n  };\n\n  Plugin.prototype.changeReply \u003d function() {\n    return new GrChangeReplyInterface(this, ...);\n  };\n\n  Plugin.prototype.changeView \u003d function() {\n    return new GrChangeViewApi(this);\n  };\n\n  Plugin.prototype.theme \u003d function() {\n    return new GrThemeApi(this);\n  };\n\n  Plugin.prototype.project \u003d function() {\n    return new GrRepoApi(this);\n  };\n\n  Plugin.prototype.changeMetadata \u003d function() {\n    return new GrChangeMetadataApi(this);\n  };\n\n  Plugin.prototype.admin \u003d function() {\n    return new GrAdminApi(this);\n  };\n\n  Plugin.prototype.settings \u003d function() {\n    return new GrSettingsApi(this);\n  };\n\nIt would be nice to keep this pattern, just for consistency. OTOH that would either mean that the API instance (e.g. \"StyleApi\") creates yet another instance of another class (e.g. \"StyleClass\"), or StyleAPI would have to maintain mappings of rule strings and class names.\n\nWDYT?",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb67686_f72755c5",
        "filename": "polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-shared-style.js",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2019-08-21T07:20:32Z",
      "side": 1,
      "message": "The naming \"SharedStyle\" conflicts with https://gerrit-review.googlesource.com/c/gerrit/+/234296.\n\nI would rather go for StyleHelper, StyleUtil or AdhocStyle or something like that. This is not really about sharing styles between plugins and the core app. This is just for (non-Polymer) plugins for creating adhoc css rules and using them within this one plugin.",
      "range": {
        "startLine": 22,
        "startChar": 11,
        "endLine": 22,
        "endChar": 24
      },
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee0c2f5e_49e3ea87",
        "filename": "polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-shared-style.js",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-08-21T09:00:33Z",
      "side": 1,
      "message": "The first approach looks good for me (\"creates yet another instances....\"). I checked usage of Gerrit.css in google3 - plugin object is accessible in all places, where Gerrit.css is used - shouldn\u0027t be a problem.\nI am afraid of external plugins - they can use Gerrit.css and don\u0027t have plugin object in this place, but it is easy to solve for their authors.\nAlso, the StyleApi will not use plugin object at all, but I don\u0027t think this is important for plugin\u0027s author.",
      "parentUuid": "ac3a435a_a9d92da5",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aee8ce7_d4e7638c",
        "filename": "polygerrit-ui/app/samples/coverage-plugin.html",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-08-19T17:01:46Z",
      "side": 1,
      "message": "are coverageStyle and emptyStyle only used in following two methods and are these two methods used only for these conditions ? if so, \ncan we pass the `displayCoverage` or the `raw css rule` down to `annotateRange` and `annotateLineNumner` instead ? so the css related part will just be inside of those two methods, and the emptyStyle seems can be just replaced with `do nothing`. (will make the usage of this GrSharedStyle much clear as well).",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30994387_467caee4",
        "filename": "polygerrit-ui/app/samples/coverage-plugin.html",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2019-08-19T17:26:55Z",
      "side": 1,
      "message": "In my understanding, annotateRange and annotateLineNumber is a part of API, so it is better to minimize changes in these functions.\n\nPassing \u0027displayCoverage\u0027 will tightly couple these functions to this plugin - not good.\n\nPassing \u0027raw css rule\u0027 will require some cache inside annotate - otherwise multiple GrSharedStyle will be created and multiple \u003cstyle\u003e tags will be added.",
      "parentUuid": "5aee8ce7_d4e7638c",
      "revId": "a2c873924aee0ee4cbfbf52a236933c06006c092",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}