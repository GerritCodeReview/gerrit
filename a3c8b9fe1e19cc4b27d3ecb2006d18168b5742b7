{
  "comments": [
    {
      "key": {
        "uuid": "b64deb11_c2e39239",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/edit/ChangeEditIT.java",
        "patchSetId": 11
      },
      "lineNbr": 416,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:26:59Z",
      "side": 1,
      "message": "Constant",
      "range": {
        "startLine": 416,
        "startChar": 17,
        "endLine": 416,
        "endChar": 20
      },
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a7ab22_2b7339b7",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/edit/ChangeEditIT.java",
        "patchSetId": 11
      },
      "lineNbr": 416,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T18:18:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b64deb11_c2e39239",
      "range": {
        "startLine": 416,
        "startChar": 17,
        "endLine": 416,
        "endChar": 20
      },
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_a2e68649",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/edit/ChangeEditIT.java",
        "patchSetId": 11
      },
      "lineNbr": 426,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:26:59Z",
      "side": 1,
      "message": "Static import like all the rest?",
      "range": {
        "startLine": 426,
        "startChar": 17,
        "endLine": 426,
        "endChar": 33
      },
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6a7ab22_cb5d5526",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/edit/ChangeEditIT.java",
        "patchSetId": 11
      },
      "lineNbr": 426,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T18:18:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b64deb11_a2e68649",
      "range": {
        "startLine": 426,
        "startChar": 17,
        "endLine": 426,
        "endChar": 33
      },
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b64deb11_8206ea3a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 11
      },
      "lineNbr": 273,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-14T19:26:59Z",
      "side": 1,
      "message": "So if the file is not found in the tree of the edit, we fall back to getting the file from the base patch set. This seems wrong. It means if we do\n\n DELETE /changes/X/edit/path\n\nfollowed by\n\n GET /changes/X/edit/path\n\nwe will get back the original contents, not a 204?\n\nAlso I believe this branch is not covered in the tests.",
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6509fa6_dc7cedf9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 11
      },
      "lineNbr": 273,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T12:52:09Z",
      "side": 1,
      "message": "| This seems wrong\n\nThis is subtle and I can see how this code may looks confusing, and I should probably put a comment here. Let me try to explain why i think it is correct. With change edit feature we are supporting five different modification operations:\n\n* 1. modify file contained in the edit\n* 2. modify file not contained yet in the edit\n* 3. restore file\n* 4. delete file\n* 5. add new file (not contained in the repository)\n\nTo implement first two use cases, we need to retrieve the content of the file.\n\nCase 1. is the content from the edit itself, that is the lines 268-271 above. Case 2. the file is not in edit yet, and here we have a fallback to the lines where you put this comment. From the file table code pointe of view, it as easy as to say:\n\n   private static RestApi contentEdit(Change.Id id, String filename) {\n    return ChangeApi.edit(id.get()).id(filename);\n  }\n\nDone. And because we try to avoid to propagate the knowledge of base patch set to change edit consumer code (FileTable) the only viable alternative here would be to differentiate between get file from edit/get file from revision, and we would end up from the edit to start fire revision specific requests:\n\n* get content from edit: GET /changes/\u003cid\u003e/edit/path\n* get content from revision: GET /changes/\u003cid\u003e/revisions/\u003cid\u003e/files/oath/content\n\nSo my answer is let\u0027s server code to do the right job, instead of making client more complex and to avoid to require to propagate base patch set number the edit is based on to the client code.",
      "parentUuid": "b64deb11_8206ea3a",
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f618432e_f5f478f0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 11
      },
      "lineNbr": 273,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-08-15T16:56:59Z",
      "side": 1,
      "message": "I agree that you should be able to get the contents of a file not yet contained in the edit with GET /changes/X/edit/path. But I don\u0027t think you need this fallback case for that to work.\n\nSay the tree SHA-1 of the edit is T1, the tree SHA-1 of the base is T0. We are trying to get the contents of path P \"in the edit.\"\n\nIf P differs between T0 and T1, then we say P is \"in the edit\". In that case, we do a TreeWalk of T1 and look up P (which is what FileContentUtil.getContent() does).\n\nIf, on the other hand, P is the same between T0 and T1, then we say P is \"not in the edit\". However, we can still look up the contents of P by doing a TreeWalk of T1. It\u0027ll give us the same value as if we looked it up in T0, no fallback necessary. (Remember that T1, like any other git tree, is an entire snapshot of the repository contents, and contains a value for every path present at that commit.)\n\nFinally, if P was deleted in T1 but exists in T0, we need some way of indicating that to the user, and returning a 204 seems like the best way to do that.",
      "parentUuid": "d6509fa6_dc7cedf9",
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16ca37de_66944e7f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/ChangeEdits.java",
        "patchSetId": 11
      },
      "lineNbr": 273,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-08-15T18:18:14Z",
      "side": 1,
      "message": "Fallback removed, 204 returned, new unit test is added that is covering this case. Done.",
      "parentUuid": "f618432e_f5f478f0",
      "revId": "a3c8b9fe1e19cc4b27d3ecb2006d18168b5742b7",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}