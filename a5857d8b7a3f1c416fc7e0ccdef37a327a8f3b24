{
  "comments": [
    {
      "key": {
        "uuid": "5b588f80_332547c1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-02-13T07:17:59Z",
      "side": 1,
      "message": "Why it is a requirement to be able to skip major versions during upgrades? Should we support direct migration from 2.6 to 3.0?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 52
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ae9204e_b5652095",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-02-13T07:40:48Z",
      "side": 1,
      "message": "I\u0027m not sure if we should support direct migration from versions as old as 2.6, but I don\u0027t think it\u0027s unreasonable to go from 2.14 to 2.16. It seems a few people want to do that, hence it\u0027s been reported as an issue on the mailing list a couple of times. As far as I can see, the broken 150 to 151 migration is the only one that blocks it.\n\nAlso for our (Collabnet) customers, we have a lot of them on 2.14 and it\u0027s difficult, if not impossible, to mandate them to do a two stage upgrade if they want to go to 2.16.",
      "parentUuid": "5b588f80_332547c1",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 52
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "569df8b5_46df494f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-02-14T09:29:17Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a formal requirement, but if people are willing to contribute changes to make it possible, then I don\u0027t think we should reject them.",
      "parentUuid": "9ae9204e_b5652095",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 52
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e72c62_1636a1f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-02-14T16:47:51Z",
      "side": 1,
      "message": "I think it\u0027s been an expected norm for a while that you can skip versions for schema upgrades unless the release notes explicitly state that you cannot. 2.10 [1] for example, specifically calls out you must upgrade to 2.8 or 2.9 first.\n\nBeyond that, I agree that if we can keep that working with effort someone is willing to contribute, we should. It makes it easier to take advantage of newer libraries and optimizations (such as [2]) when upgrading.\n\n[1] http://gerrit-documentation.storage.googleapis.com/ReleaseNotes/ReleaseNotes-2.10.html\n[2] https://gerrit-review.googlesource.com/c/gerrit/+/249812",
      "parentUuid": "569df8b5_46df494f",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 52
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2976ff05_89be5536",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-02-13T07:17:59Z",
      "side": 1,
      "message": "What if someone is trying to migrate 2.6 to 3.0. How do we know this that actually account_groups column is missing? It is hard coded and not induced from the error message.",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1127f62_a56a629a",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-02-13T07:40:48Z",
      "side": 1,
      "message": "Because the migration is only trying to update that column and I wanted to reduce the comparison down to the minimum to account for potential variation in the error message between sql dialects.\n\nNote I have only actually tested this against postgresql though.",
      "parentUuid": "2976ff05_89be5536",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3caadb37_e176e850",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-02-14T09:29:17Z",
      "side": 1,
      "message": "If we could be more specific here, that would feel safer to me.",
      "parentUuid": "e1127f62_a56a629a",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3146e86_0fe53eb1",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-02-14T10:51:09Z",
      "side": 1,
      "message": "Agreed. I\u0027ll need to look into what differences there are in the error message, if any, between the various SQL dialects.",
      "parentUuid": "3caadb37_e176e850",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a49033f_3c9eaef2",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-03-18T08:41:24Z",
      "side": 1,
      "message": "I\u0027ve reworked it to use jdbc to detect if the column exists before attempting the migration, and then creating it if it\u0027s not there, rather than catching the exception and attempting to detect it from the exception message.",
      "parentUuid": "f3146e86_0fe53eb1",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 71
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8eb1ff_a4aef3fe",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-02-14T09:29:17Z",
      "side": 1,
      "message": "This reads like it could potentially introduce wrong timestamps/assumptions for creations. Can you add a comment why that is not an issue?",
      "range": {
        "startLine": 49,
        "startChar": 82,
        "endLine": 49,
        "endChar": 99
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d80d149_71e12bf8",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-02-14T10:51:09Z",
      "side": 1,
      "message": "The column doesn\u0027t exist at this point, so there\u0027s no way we can get the real data. I\u0027m not sure what else we can do other than giving it a default value.",
      "parentUuid": "4a8eb1ff_a4aef3fe",
      "range": {
        "startLine": 49,
        "startChar": 82,
        "endLine": 49,
        "endChar": 99
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcac24d6_2b97a207",
        "filename": "java/com/google/gerrit/server/schema/Schema_151.java",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2020-03-18T08:41:24Z",
      "side": 1,
      "message": "Marking this a resolved; as mentioned before if there column wasn\u0027t there there\u0027s no way to get the real data.",
      "parentUuid": "2d80d149_71e12bf8",
      "range": {
        "startLine": 49,
        "startChar": 82,
        "endLine": 49,
        "endChar": 99
      },
      "revId": "a5857d8b7a3f1c416fc7e0ccdef37a327a8f3b24",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}