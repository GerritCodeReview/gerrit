{
  "comments": [
    {
      "key": {
        "uuid": "724e4182_cf9f4bba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "This part is a bit unclear to me, maybe it should say \"to control the submitability of changes\"?",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "043da0e5_81e0a7f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "724e4182_cf9f4bba",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17cf1359_d433902e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "It\u0027s not really a \"custom\" submit type, but it\u0027s a possibility to control from Prolog which of the (existing) submit types should be used to submit a change.",
      "range": {
        "startLine": 38,
        "startChar": 18,
        "endLine": 38,
        "endChar": 37
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa0a8fb_e36a1d9d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done, thanks for the precision",
      "parentUuid": "17cf1359_d433902e",
      "range": {
        "startLine": 38,
        "startChar": 18,
        "endLine": 38,
        "endChar": 37
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd35d57d_8a215d74",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-05T09:10:48Z",
      "side": 1,
      "message": "Currently, we have the concept of submit_filter which is a mean for parent project(s) to enforce\n(some) submit rules on child projects. submit_filter it is actually not inheritance of submit rules.\nInstead, submit_filter from parent project transforms the result of the submit_rule from a child project.\n\nI am not sure if you considered submit filters at all and if what you are writing here\nis neutral to the concept of submit filters or intended to be a replacement for them?\n\nIMHO, the concept of submit filter is a core feature. They are implemented in Prolog\nbut they are a core concept.\n\nWe have users who use a submit filter on a common parent project to enforce mandatory\nsubmit-ability conditions on a set of child projects. Child projects can still define\nown submit rules but they cannot escape the (enforced) rules form parent project(s).\n\nIMHO, we should be able to define submit filter on a (parent) project using any plugin(s)\nwhich provides submit filters, independently on which plugins are used to implement\nsubmit rules on child projects.",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b62707_566d3c42",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T22:29:06Z",
      "side": 1,
      "message": "tl;dr: inheritance is very nice, and the objective is not to remove submit_filter. It is hard to enforce inheritance, so we don\u0027t.\n\nThanks a lot for your comments.\n\nThe current Prolog implementation checks the parent projects directly, and uses a nice trick to share rules with the child projects (submit_filter). Unfortunately, I don\u0027t think it is possible to enforce this in a Java interface.\n\nAll the implementations/interfaces I can think of come with disadvantages:\n\n- If we add a parameter \"Project\" to the evaluate method, we would switch contexts many times (from Java to Prolog, the other way around ... then going up one project, and doing it all again).\n\n- I try to be retro-compatible with the existing Prolog implementation as much as possible.\n\nHence the solution I mention here: each plugin defines the way it handles inheritance. This means some plugins will NOT implement inheritance, some will enforce the  parents projects\u0027 rules to the sub-projects ... and some will do it the right way.\n\nIt is important to have in mind an other change I did: changing the way SubmitRecords are handled. My changes introduce this: each plugin returns one or several SubmitRecord, and if at least one is not OK, the change can\u0027t be submitted.\n\nThis should make inheritance very easy: you check the parent\u0027s rules, create a SubmitRecord. You check the child\u0027s rules and create a second SubmitRecord. If any of those two SubmitRecords is not OK, the change is blocked.\n\nThis also makes it easier for plugins to work together: the submit_filter takes a SubmitRecord for argument.\nWith multiple plugins, how do we know in what order to call the plugins? \n\n\u003e IMHO, the concept of submit filter is a core feature. They are implemented in Prolog\n\u003e but they are a core concept.\n\nI can agree with you that inheriting rules is a core feature.\nIMHO the implementations can vary. With the proposed solution, the defined Prolog rules will continue to work the way they should.\nA parent project using Prolog also works on a child that does not use the prolog plugin, as Prolog is called every time.\n\n\n\u003e IMHO, we should be able to define submit filter on a (parent) project using any plugin(s) which provides submit filters, independently on which plugins are used to implement submit rules on child projects.\n\nI don\u0027t have examples to provide for this, as the only \"plugin\" is\nthe existing Prolog implementation.\nHow I see it, in the future: each plugin supporting inheritance allows to define the rules that it \"knows\", and provides options to apply these rules to child projects as well.\nIf a plugin doesn\u0027t support inheritance, it can always be tweaked later to add this feature.\n\n\nI hope this was clear and meets your expectations. If you think I am missing something, feel free to tell me, it\u0027s a pleasure reading from you (especially as you did write things relative to this topic!).",
      "parentUuid": "cd35d57d_8a215d74",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37f9d0c6_b343ee8a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-07T14:20:47Z",
      "side": 1,
      "message": "\u003e Hence the solution I mention here: each plugin defines the way it handles inheritance. This means some plugins will NOT implement inheritance, some will enforce the  parents projects\u0027 rules to the sub-projects ... and some will do it the right way.\n\nI do not really insist on submit_filter but on a feature it brings: enforce submit rules\non child projects from a parent project.\n\n\u003e \n\u003e It is important to have in mind an other change I did: changing the way SubmitRecords are handled. My changes introduce this: each plugin returns one or several SubmitRecord, and if at least one is not OK, the change can\u0027t be submitted.\n\nThis is clear from your documentation and sounds reasonable.\n\n\u003e \n\u003e This should make inheritance very easy: you check the parent\u0027s rules,\n\nSo would you always check parent\u0027t rules (enforced by Gerrit core) or do you leave it\nto each plugin to decide if parent rules are checked?\n\nBtw (sorry if this is already in your code and I didn\u0027t read it), how is it defined\nwhich set of (submit rule) plugins are relevant for a (child) project? Is this\ninformation stored on the (child) project level? If yes, what if I want to \nenforce some submit rules, from a plugin foo-submit-rule which supports inheritance,\nbut owners of the (child) project remove foo-submit-rule plugin from the list of\nused plugins for their project?\n\n \n\u003e \u003e IMHO, we should be able to define submit filter on a (parent) project using any plugin(s) which provides submit filters, independently on which plugins are used to implement submit rules on child projects.\n\u003e \n\u003e I don\u0027t have examples to provide for this, as the only \"plugin\" is\n\u003e the existing Prolog implementation.\n\u003e How I see it, in the future: each plugin supporting inheritance allows to define the rules that it \"knows\", and provides options to apply these rules to child projects as well.\n\nRepeating the same question: how would a plugin foo-submit-rule know that it is relevant\nfor a child project if its usage was defined on a parent project level?\nEither we have to always walk through all parent projects (enforced by Gerrit core)\nor we have to call each plugin for every change because it may be relevant\ndue to its usage from a parent project. The former seems more efficient than the latter.",
      "parentUuid": "23b62707_566d3c42",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a88f09dd_e2ad5700",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2740,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "prevent",
      "range": {
        "startLine": 2740,
        "startChar": 0,
        "endLine": 2740,
        "endChar": 7
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f5790d7_c86b257c",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2740,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a88f09dd_e2ad5700",
      "range": {
        "startLine": 2740,
        "startChar": 0,
        "endLine": 2740,
        "endChar": 7
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "163c9b3c_cd2416bb",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2742,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "three?",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85972a19_9392ef7d",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2742,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "163c9b3c_cd2416bb",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9811f600_38d245c6",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2747,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "I think I would prefer this to be NOT_READY.",
      "range": {
        "startLine": 2747,
        "startChar": 41,
        "endLine": 2747,
        "endChar": 43
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d4afb59_85bcb8c5",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2747,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9811f600_38d245c6",
      "range": {
        "startLine": 2747,
        "startChar": 41,
        "endLine": 2747,
        "endChar": 43
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880815fb_1a66b004",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2777,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2018-03-05T08:39:01Z",
      "side": 1,
      "message": "This is now: Collection\u003cSubmitRecord\u003e\n\nIt would be good to discuss an empty collection in the docs above as well especially that this enables opt-outs and these won\u0027t be recorded in NoteDb when the change is submitted.",
      "range": {
        "startLine": 2777,
        "startChar": 9,
        "endLine": 2777,
        "endChar": 21
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2b7f30_cef73813",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2777,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "880815fb_1a66b004",
      "range": {
        "startLine": 2777,
        "startChar": 9,
        "endLine": 2777,
        "endChar": 21
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "447fbfed_30f7a046",
        "filename": "java/com/google/gerrit/server/rules/SubmitRule.java",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-05T10:25:44Z",
      "side": 1,
      "message": "In this change we see a new extension point but we don\u0027t see how it is used from Gerrit core.\nI don\u0027t think we can approve and submit an extension point without seeing how and where\nin Gerrit core it gets used?\n\nIf we need to look in a follow-up change to find that code then this one and the one where\nthe extension point gets used, can only be reviewed and submitted together.\nInn that case, they should be squashed into one change.",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75c978f8_4b2103a2",
        "filename": "java/com/google/gerrit/server/rules/SubmitRule.java",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T22:29:06Z",
      "side": 1,
      "message": "The commits order has been \"fixed\".",
      "parentUuid": "447fbfed_30f7a046",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}