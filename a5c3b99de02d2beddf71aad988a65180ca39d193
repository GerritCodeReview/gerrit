{
  "comments": [
    {
      "key": {
        "uuid": "724e4182_cf9f4bba",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "This part is a bit unclear to me, maybe it should say \"to control the submitability of changes\"?",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "043da0e5_81e0a7f6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 9,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "724e4182_cf9f4bba",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 65
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17cf1359_d433902e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "It\u0027s not really a \"custom\" submit type, but it\u0027s a possibility to control from Prolog which of the (existing) submit types should be used to submit a change.",
      "range": {
        "startLine": 38,
        "startChar": 18,
        "endLine": 38,
        "endChar": 37
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aa0a8fb_e36a1d9d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done, thanks for the precision",
      "parentUuid": "17cf1359_d433902e",
      "range": {
        "startLine": 38,
        "startChar": 18,
        "endLine": 38,
        "endChar": 37
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd35d57d_8a215d74",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-05T09:10:48Z",
      "side": 1,
      "message": "Currently, we have the concept of submit_filter which is a mean for parent project(s) to enforce\n(some) submit rules on child projects. submit_filter it is actually not inheritance of submit rules.\nInstead, submit_filter from parent project transforms the result of the submit_rule from a child project.\n\nI am not sure if you considered submit filters at all and if what you are writing here\nis neutral to the concept of submit filters or intended to be a replacement for them?\n\nIMHO, the concept of submit filter is a core feature. They are implemented in Prolog\nbut they are a core concept.\n\nWe have users who use a submit filter on a common parent project to enforce mandatory\nsubmit-ability conditions on a set of child projects. Child projects can still define\nown submit rules but they cannot escape the (enforced) rules form parent project(s).\n\nIMHO, we should be able to define submit filter on a (parent) project using any plugin(s)\nwhich provides submit filters, independently on which plugins are used to implement\nsubmit rules on child projects.",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b62707_566d3c42",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T22:29:06Z",
      "side": 1,
      "message": "tl;dr: inheritance is very nice, and the objective is not to remove submit_filter. It is hard to enforce inheritance, so we don\u0027t.\n\nThanks a lot for your comments.\n\nThe current Prolog implementation checks the parent projects directly, and uses a nice trick to share rules with the child projects (submit_filter). Unfortunately, I don\u0027t think it is possible to enforce this in a Java interface.\n\nAll the implementations/interfaces I can think of come with disadvantages:\n\n- If we add a parameter \"Project\" to the evaluate method, we would switch contexts many times (from Java to Prolog, the other way around ... then going up one project, and doing it all again).\n\n- I try to be retro-compatible with the existing Prolog implementation as much as possible.\n\nHence the solution I mention here: each plugin defines the way it handles inheritance. This means some plugins will NOT implement inheritance, some will enforce the  parents projects\u0027 rules to the sub-projects ... and some will do it the right way.\n\nIt is important to have in mind an other change I did: changing the way SubmitRecords are handled. My changes introduce this: each plugin returns one or several SubmitRecord, and if at least one is not OK, the change can\u0027t be submitted.\n\nThis should make inheritance very easy: you check the parent\u0027s rules, create a SubmitRecord. You check the child\u0027s rules and create a second SubmitRecord. If any of those two SubmitRecords is not OK, the change is blocked.\n\nThis also makes it easier for plugins to work together: the submit_filter takes a SubmitRecord for argument.\nWith multiple plugins, how do we know in what order to call the plugins? \n\n\u003e IMHO, the concept of submit filter is a core feature. They are implemented in Prolog\n\u003e but they are a core concept.\n\nI can agree with you that inheriting rules is a core feature.\nIMHO the implementations can vary. With the proposed solution, the defined Prolog rules will continue to work the way they should.\nA parent project using Prolog also works on a child that does not use the prolog plugin, as Prolog is called every time.\n\n\n\u003e IMHO, we should be able to define submit filter on a (parent) project using any plugin(s) which provides submit filters, independently on which plugins are used to implement submit rules on child projects.\n\nI don\u0027t have examples to provide for this, as the only \"plugin\" is\nthe existing Prolog implementation.\nHow I see it, in the future: each plugin supporting inheritance allows to define the rules that it \"knows\", and provides options to apply these rules to child projects as well.\nIf a plugin doesn\u0027t support inheritance, it can always be tweaked later to add this feature.\n\n\nI hope this was clear and meets your expectations. If you think I am missing something, feel free to tell me, it\u0027s a pleasure reading from you (especially as you did write things relative to this topic!).",
      "parentUuid": "cd35d57d_8a215d74",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37f9d0c6_b343ee8a",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-07T14:20:47Z",
      "side": 1,
      "message": "\u003e Hence the solution I mention here: each plugin defines the way it handles inheritance. This means some plugins will NOT implement inheritance, some will enforce the  parents projects\u0027 rules to the sub-projects ... and some will do it the right way.\n\nI do not really insist on submit_filter but on a feature it brings: enforce submit rules\non child projects from a parent project.\n\n\u003e \n\u003e It is important to have in mind an other change I did: changing the way SubmitRecords are handled. My changes introduce this: each plugin returns one or several SubmitRecord, and if at least one is not OK, the change can\u0027t be submitted.\n\nThis is clear from your documentation and sounds reasonable.\n\n\u003e \n\u003e This should make inheritance very easy: you check the parent\u0027s rules,\n\nSo would you always check parent\u0027t rules (enforced by Gerrit core) or do you leave it\nto each plugin to decide if parent rules are checked?\n\nBtw (sorry if this is already in your code and I didn\u0027t read it), how is it defined\nwhich set of (submit rule) plugins are relevant for a (child) project? Is this\ninformation stored on the (child) project level? If yes, what if I want to \nenforce some submit rules, from a plugin foo-submit-rule which supports inheritance,\nbut owners of the (child) project remove foo-submit-rule plugin from the list of\nused plugins for their project?\n\n \n\u003e \u003e IMHO, we should be able to define submit filter on a (parent) project using any plugin(s) which provides submit filters, independently on which plugins are used to implement submit rules on child projects.\n\u003e \n\u003e I don\u0027t have examples to provide for this, as the only \"plugin\" is\n\u003e the existing Prolog implementation.\n\u003e How I see it, in the future: each plugin supporting inheritance allows to define the rules that it \"knows\", and provides options to apply these rules to child projects as well.\n\nRepeating the same question: how would a plugin foo-submit-rule know that it is relevant\nfor a child project if its usage was defined on a parent project level?\nEither we have to always walk through all parent projects (enforced by Gerrit core)\nor we have to call each plugin for every change because it may be relevant\ndue to its usage from a parent project. The former seems more efficient than the latter.",
      "parentUuid": "23b62707_566d3c42",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e660965_86797b6f",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-07T14:51:21Z",
      "side": 1,
      "message": "\u003e Either we have to always walk through all parent projects (enforced by Gerrit core)\nFor a given changes, all the plugins are called *once*. Each plugin decides if\nit should participate in the voting process, accordingly to its rules ...\nand the rules of the parent projects.\n\n\u003eThe former seems more efficient than the latter.\nI don\u0027t agree with you on this point.\n\nHaving an interface \u0027evaluate(ChangeData, Project)`, called several time by Gerrit,\nwould increase the cost, as it implies switching from \"Plugin\" to Core gerrit over\nand over again. This is especially bad with a dynamic ScriptEngine. Prolog is a good\nexample, if I understand it correctly: it gathers the parent \"rules\" and uses them in\none sweep.\n\n\nI also think this would make it harder for the plugins to aggregate requirements.\nLet\u0027s assume we have a project (MyProject) inheriting rules from All-Projects.\nAll-Projects requires a Verified+1 label.\nMyProject requires a Verified+2 label.\nAlthough this is the same rule, it would lead to two Requirements: \"Needs Verified +2\"\nand \"Needs Verified +1\".\n(And it is Core\u0027s problem to handle it, which might be a bit hard)\n\n\nWith the current implementation, this would be a bug in the plugin, and it would\nbe easy to handle, on a per case basis.\n\n\n\u003e If yes, what if I want to \n\u003e enforce some submit rules, from a plugin foo-submit-rule which supports inheritance,\n\u003e but owners of the (child) project remove foo-submit-rule plugin from the list of\n\u003e used plugins for their project?\nAlthough this is not the case, I will answer for the record.\nIn case we use a \"per project plugins list\", we might add a method to the interface,\n`boolean shouldBeCalled(ChangeData)`, and let the plugin define custom\nconditions to be enabled (is a `rules.pl` file present? Is there an OWNERS file?).\n\nI don\u0027t think this method would be a good idea: with the current implementation,\nif a plugin doesn\u0027t want to be enabled for a project, it returns an empty collection.",
      "parentUuid": "37f9d0c6_b343ee8a",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a06ae4e_9ad33737",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-07T14:55:20Z",
      "side": 1,
      "message": "I think the current idea is to always ask all plugins.\n\nEach plugin must detect on its own if it is enabled or not. If a plugin is not enabled it can stay neutral. E.g. the Prolog plugin can stay neutral if there are no rules.pl files.\n\nSupporting inheritance is a responsibility of the plugin, but supporting inheritance is optional.\n\nE.g. the Prolog plugin would look at the rules.pl file in the project of the change, but also at the rules.pl files from all parent projects. Hence it can respect submit_filters and rules can be enforced.\n\nFor plugins that don\u0027t support inheritance you cannot enforce rules. This may be a reason for admins to not install them.",
      "parentUuid": "37f9d0c6_b343ee8a",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb241a32_c92446cd",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-07T17:12:38Z",
      "side": 1,
      "message": "\u003e For a given changes, all the plugins are called *once*. Each plugin\n \u003e decides if\n \u003e it should participate in the voting process, accordingly to its\n \u003e rules ...\n \u003e and the rules of the parent projects.\n\nThis means that if we have N plugins supporting inheritance, we will\nhave N times walking the project\u0027s parent tree. If the walk would be\ndone once by Gerrit core then there would be only one such walk.\nThis argument may be irrelevant. For a well configured Gerrit server\nall projects are anyway cached in-memory and walking project tree shouldn\u0027t\nbe expensive.\n\n \u003e \n \u003e \u003eThe former seems more efficient than the latter.\n \u003e I don\u0027t agree with you on this point.\n \u003e \n \u003e Having an interface \u0027evaluate(ChangeData, Project)`, called several\n \u003e time by Gerrit,\n \u003e would increase the cost, as it implies switching from \"Plugin\" to\n \u003e Core gerrit over\n \u003e and over again. This is especially bad with a dynamic ScriptEngine.\n\nIt might be, I don\u0027t know how scripting engines would behave in such cases.\n\nBtw, I don\u0027t know if we should really expect a big usage of scripting\nengines. A couple of years ago we got support for Gerrit scripting\nplugins, which significantly increased complexity of the plugin machinery\nand because of which David O. abandoned his work\non supporting plugin dependencies, but still we do not see any\nsignificant number of scripting plugins. AFAIK, all relevant Gerrit\nplugins are written in Java.\n\nI bet that 99% of Gerrit users would stick to the usage of simple\nsubmit rules like: 1+1\u003d2, non-author-code-review, etc... which\nwould work out of the box without any need for scripting. And if\nthey can pick such submit rules form the UI and also combine them\nthey will be fully satisfied.\n\nI am not against supporting submit rules written as scripts, but I currently\nbelieve that this may be over-valued.\n\n \u003e Prolog is a good\n \u003e example, if I understand it correctly: it gathers the parent\n \u003e \"rules\" and uses them in\n \u003e one sweep.\n\nI guess it was just faster to implement it this way :-) but, yes, it was also\na more efficient implementation.\n\nBtw, Prolog based submit rules evaluation uses reductionLimit [1] setting\nto protect Gerrit from misbehaving rules.pl scripts written by project owners.\nWe would need to support a similar protection for any other supported scripting language\nin which project owners can write their submit rules.\n\n[1] https://gerrit-review.googlesource.com/Documentation/config-gerrit.html#rules.reductionLimit",
      "parentUuid": "4e660965_86797b6f",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "267d6872_35ff5254",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-07T17:12:38Z",
      "side": 1,
      "message": "\u003e I think the current idea is to always ask all plugins.\n\nOK, fair enough. At least this means that enforcing submit rules\nfrom a parent project remains possible.\n\n\n \u003e Each plugin must detect on its own if it is enabled or not. If a\n \u003e plugin is not enabled it can stay neutral. E.g. the Prolog plugin\n \u003e can stay neutral if there are no rules.pl files.\n\nI agree that there is some beauty in the simplicity of this design.\nGerrit core doesn\u0027t need to care much about how submit rules\nare executed. It only need to ensure a simple condition: if any\nplugin says NO, then the result is NO.",
      "parentUuid": "2a06ae4e_9ad33737",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98d48dc7_1ed91996",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-08T17:08:46Z",
      "side": 1,
      "message": "\u003e Btw, I don\u0027t know if we should really expect a big usage of scripting engines.\nI agree with you, but I\u0027m sure there is room for a lot of improvement.\nI don\u0027t know for sure what the implementation details would be, but\nbeing able to define rules in a simple language (Lua, JavaScript..?)\nmight be helpful.\nAn other option I consider: being able to define pre-submit requirements\nin a file contained in the repository. I (again) don\u0027t have the details\nfor this, but keeping the rules near the code sounds like a great feature.\n\nI will probably write a plugin allowing simple configuration of the rules,\nall in Java.\nA non-definitive list includes: conditions on the comments (unresolved, ...),\ncan the change owner approve it, simple function on the labels,\nregex on the commit message...\nThis simple thing should match at least 95% of the use cases.\n\n\n\u003e AFAIK, all relevant Gerrit plugins are written in Java.\nAll ... except the Prolog rules ;-)\n\n\u003e I am not against supporting submit rules written as scripts, but I currently\n\u003e believe that this may be over-valued.\nI think the Java extension point will already allow users to solve 99.99% of the\ncases.\n\n\u003e We would need to support a similar protection for any other supported scripting language\n\u003e in which project owners can write their submit rules.\nRest assured, I keep this in mind!\nWith \"powerful\" scripting languages, we also have to protect Gerrit from leaks,\nie: getting the list of users with their emails (and passwords?), getting\nthe databases\u0027 passwords...\n\nPS: I might work a bit on dependencies across plugins. If I understand correctly, \nit was made harder because of the scripting plugins, which are no more?",
      "parentUuid": "fb241a32_c92446cd",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe6c1cb_2e4154a3",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2735,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-12T10:26:27Z",
      "side": 1,
      "message": "\u003e \u003e AFAIK, all relevant Gerrit plugins are written in Java.\n \u003e All ... except the Prolog rules ;-)\n\nThe whole Prolog machinery was embedded in Gerrit core, right?\nPlugins could contribute custom prolog predicates, but AFAIK\nmost of these are implemented in Java.\n\n \u003e PS: I might work a bit on dependencies across plugins.\nThat would be great.\n\n\u003e If I\n \u003e understand correctly,\n \u003e it was made harder because of the scripting plugins, which are no\n \u003e more?\n\nYes, this is what I remember from talking about that topic with David Ostrovsky who tried implementing plugin dependencies. I think I found\nthese changes [1]\n\n[1] https://gerrit-review.googlesource.com/#/q/status:abandoned+topic:plugin-dependencies",
      "parentUuid": "98d48dc7_1ed91996",
      "range": {
        "startLine": 2734,
        "startChar": 0,
        "endLine": 2735,
        "endChar": 93
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a88f09dd_e2ad5700",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2740,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "prevent",
      "range": {
        "startLine": 2740,
        "startChar": 0,
        "endLine": 2740,
        "endChar": 7
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f5790d7_c86b257c",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2740,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a88f09dd_e2ad5700",
      "range": {
        "startLine": 2740,
        "startChar": 0,
        "endLine": 2740,
        "endChar": 7
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "163c9b3c_cd2416bb",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2742,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "three?",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85972a19_9392ef7d",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2742,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "163c9b3c_cd2416bb",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9811f600_38d245c6",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2747,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2018-03-05T12:08:38Z",
      "side": 1,
      "message": "I think I would prefer this to be NOT_READY.",
      "range": {
        "startLine": 2747,
        "startChar": 41,
        "endLine": 2747,
        "endChar": 43
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d4afb59_85bcb8c5",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2747,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9811f600_38d245c6",
      "range": {
        "startLine": 2747,
        "startChar": 41,
        "endLine": 2747,
        "endChar": 43
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880815fb_1a66b004",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2777,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2018-03-05T08:39:01Z",
      "side": 1,
      "message": "This is now: Collection\u003cSubmitRecord\u003e\n\nIt would be good to discuss an empty collection in the docs above as well especially that this enables opt-outs and these won\u0027t be recorded in NoteDb when the change is submitted.",
      "range": {
        "startLine": 2777,
        "startChar": 9,
        "endLine": 2777,
        "endChar": 21
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b2b7f30_cef73813",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 7
      },
      "lineNbr": 2777,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T15:37:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "880815fb_1a66b004",
      "range": {
        "startLine": 2777,
        "startChar": 9,
        "endLine": 2777,
        "endChar": 21
      },
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "447fbfed_30f7a046",
        "filename": "java/com/google/gerrit/server/rules/SubmitRule.java",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-05T10:25:44Z",
      "side": 1,
      "message": "In this change we see a new extension point but we don\u0027t see how it is used from Gerrit core.\nI don\u0027t think we can approve and submit an extension point without seeing how and where\nin Gerrit core it gets used?\n\nIf we need to look in a follow-up change to find that code then this one and the one where\nthe extension point gets used, can only be reviewed and submitted together.\nInn that case, they should be squashed into one change.",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75c978f8_4b2103a2",
        "filename": "java/com/google/gerrit/server/rules/SubmitRule.java",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1061517
      },
      "writtenOn": "2018-03-05T22:29:06Z",
      "side": 1,
      "message": "The commits order has been \"fixed\".",
      "parentUuid": "447fbfed_30f7a046",
      "revId": "a5c3b99de02d2beddf71aad988a65180ca39d193",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}