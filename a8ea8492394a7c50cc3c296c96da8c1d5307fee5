{
  "comments": [
    {
      "key": {
        "uuid": "7dd4ba0b_29258f46",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-11T09:02:13Z",
      "side": 1,
      "message": "The idea was to redefine the GroupMemberAuditListener interface in such a way that future adjustments (for instance further event types like \u0027renames\u0027) can be added without breaking implementations of GroupMemberAuditListener. Such a redefinition would naturally move away from the ReviewDb types. I would very much prefer that we address the redefinition of GroupMemberAuditListener first and avoid changing GroupMemberAuditListener again and again.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eb50d83_117a1fa0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-12-11T09:39:46Z",
      "side": 1,
      "message": "Further event types like \"renames\" could be a new method directly and thus will not affect existing methods? e.g.\n\nvoid onRenameGroups(Account.Id actor, String newName, Timestamp renamedOn);\n\nRefactoring like the current change is not good enough if in the future we want to add more properties thourgh the existing interfaces. But what do we want to add? \n\nIf we want to redesign this listener using new Event types, would we have the following new interfaces?\n1- GroupAddAccountsEvent\n2- GroupDeleteAccountsEvent\n3- GroupAddSubgroupsEvent\n4- GroupDeleteSubgroupsEvent\n\nThey will be used by the four methods we have now. In the furture, when we can add \"GroupRenameEvent\". By doing this, we don\u0027t need to change the interfaces, instead we can update these event types to update behaviors, which sounds good to me.\n\nDo I understand the idea you\u0027re expecting correctly?",
      "parentUuid": "7dd4ba0b_29258f46",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cedc8849_439cd1c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-12T10:35:29Z",
      "side": 1,
      "message": "I don\u0027t have a finished idea yet, just some suggestions. ;-)\n\nThe first decision is about the methods: Do we want to have just one method which delivers an event or do we want to have several dedicated methods with possibly more general events?\n\nI see advantages and disadvantages for both of them. Because of Java 8, we at least have the possibility to add default methods in the future which don\u0027t break implementations of the listener. If we go that way (that is having one dedicated method for each audit type), we should consider to define the existing methods as default ones as well.\n\nIn my opinion, the events we pass as method parameters should be immutable DTOs. (I know that AccountGroup.UUID is in theory mutable but we can\u0027t do anything about it right now.) So, I would define the event types with the help of AutoValue.\n\nIn addition, we could define an interface GroupAuditEvent, which lists common properties such as the acting user, the affected group, and a timestamp. The specific audit events should implement that interface.\n\nIf we decide to use a dedicated method for each audit type, we don\u0027t need four event types right now. Adding a member doesn\u0027t require any different details from removing a member. As we have two methods for distinguishing the taken action (add or delete), we can just use the same event.\n\nRegarding naming: We should try to be consistent. Accounts which are part of a group are called \u0027members\u0027 throughout Gerrit and groups are called \u0027subgroups\u0027. We should use those terms for the names of the methods and possibly the events. The name of the listener isn\u0027t really adequate either anymore. As we now have the possibility to get it straight, we should take it.",
      "parentUuid": "1eb50d83_117a1fa0",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19539421_0f124bf2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2018-01-25T13:19:06Z",
      "side": 1,
      "message": "As your suggestion, I\u0027m planning to go as follows:\n1- Define interface \"GroupAuditEvent\" with method: \"getActor\", \"getModifiedGroup\", \"getTimestamp\".\n2- \"GroupMemberAuditEvent\" implements the \"GroupAuditEvent\" with an additional \"getModifiedMembers\".\n   \"GroupSubgroupAuditEvent\" implements the \"GroupAuditEvent\" with an additional \"getModifiedSubgroups\".\n3- The four dedidated event methods will be:\n   void onAddAccountsToGroup(GroupMemberAuditEvent);\n   void onDeleteAccountsFromGroup(GroupMemberAuditEvent);\n   void onAddGroupsToGroup(GroupSubgroupAuditEvent);\n   void onDeleteGroupsFromGroup(GroupSubGroupAuditEvent);\n\nThe 4 new methods could be defined as default. \n\nFor those 4 old methods, existing listeners may only notice they have to adjust when we remove those 4 methods. Thus we might choose to delete them directly. If we do like above, hopefully, we only need to break them once.",
      "parentUuid": "cedc8849_439cd1c6",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70d510a4_2dc9b53e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-25T14:28:12Z",
      "side": 1,
      "message": "\u003e As your suggestion, I\u0027m planning to go as follows:\n\u003e 1- Define interface \"GroupAuditEvent\" with method: \"getActor\", \"getModifiedGroup\", \"getTimestamp\".\n\u003e 2- \"GroupMemberAuditEvent\" implements the \"GroupAuditEvent\" with an additional \"getModifiedMembers\".\n\u003e    \"GroupSubgroupAuditEvent\" implements the \"GroupAuditEvent\" with an additional \"getModifiedSubgroups\".\n\u003e 3- The four dedidated event methods will be:\n\u003e    void onAddAccountsToGroup(GroupMemberAuditEvent);\n\u003e    void onDeleteAccountsFromGroup(GroupMemberAuditEvent);\n\u003e    void onAddGroupsToGroup(GroupSubgroupAuditEvent);\n\u003e    void onDeleteGroupsFromGroup(GroupSubGroupAuditEvent);\n\nSGTM.\n\nSome further thoughts:\n* If we already define new/different methods, why not choose names which are consistent with the terminology we use throughout our code: onAddMembers(..), onDeleteMembers(..), onAddSubgroup(..), and onDeleteSubgroup(..)?\n* As we are breaking existing listeners anyway, we could also adjust the name of the interface. GroupMemberAuditListener was suitable when it was introduced but the name doesn\u0027t serve its purpose properly anymore. It\u0027s not just about *members* anymore. What about GroupAuditListener? That name would also be better in case we add an onRename(..) method in the future.\n\n\u003e The 4 new methods could be defined as default. \n\u003e \n\u003e For those 4 old methods, existing listeners may only notice they have to adjust when we remove those 4 methods. Thus we might choose to delete them directly. If we do like above, hopefully, we only need to break them once.\n\nWhy should we try not to break existing listeners with this change? The change I55b8d10eb9 already broke existing listeners. In my opinion, breaking them again right now (in the same release) is better than postponing it to another release.",
      "parentUuid": "19539421_0f124bf2",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3f004f3_04968f27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2018-01-25T14:36:18Z",
      "side": 1,
      "message": "\u003e If we already define new/different methods, why not choose names which are consistent with the terminology we use throughout our code: onAddMembers(..), onDeleteMembers(..), onAddSubgroup(..), and onDeleteSubgroup(..)?\n\nAgree. We should do like that.\n\n\u003e As we are breaking existing listeners anyway, we could also adjust the name of the interface. GroupMemberAuditListener was suitable when it was introduced but the name doesn\u0027t serve its purpose properly anymore. It\u0027s not just about *members* anymore. What about GroupAuditListener? That name would also be better in case we add an onRename(..) method in the future.\n\nYes. The name \"GroupMemberAuditListener\" is not accurate enough. Let\u0027s pick up a better name \"GroupAuditListener\".\n\n\u003e Why should we try not to break existing listeners with this change? The change I55b8d10eb9 already broke existing listeners. In my opinion, breaking them again right now (in the same release) is better than postponing it to another release.\n\nThen let\u0027s redefine this listener and update its document accordingly.",
      "parentUuid": "70d510a4_2dc9b53e",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 14,
        "endChar": 34
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b98a22bc_1b48a103",
        "filename": "java/com/google/gerrit/server/audit/GroupMemberAuditListener.java",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2017-12-11T08:49:34Z",
      "side": 1,
      "message": "Using AccountGroup.UUID for the subgroups but AccountGroup.Id for the parent group seems to be a bit inconsistent. Should we rather use AccountGroup.UUID for the parent group as well?",
      "range": {
        "startLine": 64,
        "startChar": 6,
        "endLine": 65,
        "endChar": 36
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c63a5b1_1ad4d7ea",
        "filename": "java/com/google/gerrit/server/audit/GroupMemberAuditListener.java",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1031898
      },
      "writtenOn": "2017-12-11T09:39:46Z",
      "side": 1,
      "message": "I think we could use UUID here.",
      "parentUuid": "b98a22bc_1b48a103",
      "range": {
        "startLine": 64,
        "startChar": 6,
        "endLine": 65,
        "endChar": 36
      },
      "revId": "a8ea8492394a7c50cc3c296c96da8c1d5307fee5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}