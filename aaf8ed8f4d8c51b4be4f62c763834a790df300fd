{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bf53babb_477bef4c",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-01-12T18:01:17Z",
      "side": 1,
      "message": "Wait, I\u0027m confused. In what case(s) would we ever get incorrect results on 3.5 using these identifiers?",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b029958d_f8954ae2",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-01-13T10:26:35Z",
      "side": 1,
      "message": "Yes, we have experienced issues where a service that listens to events from Rabbit MQ is attempting to lookup a newly created change from project~branch~change-id but the round-trip was so short that the changes weren\u0027t always indexed when the service called the REST API which resulted in intermittent 404 responses even though the change actually existed (false negative).\nSince the extra lookup is based on caches and index it is vulnerable to staleness in those.\nIn most installation the probability of human users being noticeably affected is very low, but for services that process 100s of changes per minute it is enough to cause hick-ups and in turn support-issues when services misfire.",
      "parentUuid": "bf53babb_477bef4c",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36b78503_c276a7b0",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-01-13T15:52:33Z",
      "side": 1,
      "message": "\u003e Yes, we have experienced issues where a service that listens to events from Rabbit MQ is attempting to lookup a newly created change from project~branch~change-id but the round-trip was so short that the changes weren\u0027t always indexed when the service called the REST API which resulted in intermittent 404 responses even though the change actually existed (false negative).\n\u003e Since the extra lookup is based on caches and index it is vulnerable to staleness in those.\n\u003e In most installation the probability of human users being noticeably affected is very low, but for services that process 100s of changes per minute it is enough to cause hick-ups and in turn support-issues when services misfire.\n\nRight, I think that\u0027s a Lucene indexing race because of how the [searcherManager is configured](https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/lucene/AbstractLuceneIndex.java#193). It allows for a .5s staleness in results ðŸ˜ž\n\nHowever, if you\u0027re using the index-elasticsearch module, you don\u0027t have that problem ever because having the \u0027refresh\u003dtrue\u0027 parameter on index writes guarantees that subsequent reads see the write.\n\nBetter than adding this warning would be to treat the 0.5s staleness for Lucene as a bug that we should try to fix. We should at least include a link to that bug here for better context. Does that make sense to you?\n\nAlso, that covers the false-negative case, but I still don\u0027t see how you can get a false-positive. Do you have an example in mind for that?",
      "parentUuid": "b029958d_f8954ae2",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34ef256d_5802dfed",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-01-16T08:05:20Z",
      "side": 1,
      "message": "Not quite certain what has triggered this debate regarding recommending the users of the API to use the **actual** unique identifier (i.e. project~change-number due to the way the change-ref is formatted) when possible to ensure a correct response.\n\n\u003e Better than adding this warning would be to treat the 0.5s staleness for Lucene as a bug that we should try to fix. We should at least include a link to that bug here for better context. Does that make sense to you?\n\nNo, that doesn\u0027t make sense to me. We should inform Gerrit users about this type of behavior to spare them from running into these types of corner-cases or at least give them a chance to figure out what happened without having a deep understanding of the source-code and dig through that for a couple of days to find the answer (as I had to do).\nIf we should consider this a bug than at least it\u0027s a known bug and should be documented which would mean adding a sentence to this statement saying that we mean to fix this situation.\nBut even if we get the read latency down to 0.1 second it still is more stable to use project~change-number since it is the **actual** identifier.\n\n\u003e Also, that covers the false-negative case, but I still don\u0027t see how you can get a false-positive. Do you have an example in mind for that?\n\nDeleting a change.",
      "parentUuid": "36b78503_c276a7b0",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89f8f731_6cdd3fe9",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-01-19T14:36:29Z",
      "side": 1,
      "message": "Am __I__ making any sense @nasser.grainawi@linaro.org?",
      "parentUuid": "34ef256d_5802dfed",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e223eb83_29705e68",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-01-20T22:49:31Z",
      "side": 1,
      "message": "\u003e Am __I__ making any sense @nasser.grainawi@linaro.org?\n\nI\u0027m sorry, nothing wrong with you, I\u0027m just busy with $DAYJOB ðŸ˜Š\n\n\u003e Not quite certain what has triggered this debate regarding recommending the users of the API to use the actual unique identifier (i.e. project~change-number due to the way the change-ref is formatted) when possible to ensure a correct response.\n\nMy concern is the (new to me) assertion that the project+change-number is the unique identifier. I\u0027ve never seen that stated before and it\u0027s potentially a drastic impact to the project and users.\n\n\u003e Deleting a change.\n\nOk, so again a case where the index is out of date?\n\nTo continue on my concern from above, the fact that project+change-number often (always?) bypasses an index search seems like an implementation detail, not a guarantee of behavior for users.\n\n\u003e But even if we get the read latency down to 0.1 second it still is more stable to use project~change-number since it is the actual identifier.\n\nI don\u0027t think reducing the latency is the fix, removing it is. If a user executes a write API like creating or deleting a change, that API shouldn\u0027t complete/return until the index is guaranteed to respond to any reads correctly. That\u0027s exactly how the ES module already works. Why wouldn\u0027t we want that behavior if we could have it? That seems the best way to avoid the kind of pain you and your users had to go through (which completely sucks, I agree).",
      "parentUuid": "89f8f731_6cdd3fe9",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3577bd4_eeca3c39",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-01-23T07:37:42Z",
      "side": 1,
      "message": "\u003e \u003e Am __I__ making any sense @nasser.grainawi@linaro.org?\n\u003e \n\u003e I\u0027m sorry, nothing wrong with you, I\u0027m just busy with $DAYJOB ðŸ˜Š\n\u003e \n\nNo worries, I\u0027m in the same situation.\n\n\u003e \u003e Not quite certain what has triggered this debate regarding recommending the users of the API to use the actual unique identifier (i.e. project~change-number due to the way the change-ref is formatted) when possible to ensure a correct response.\n\u003e \n\u003e My concern is the (new to me) assertion that the project+change-number is the unique identifier. I\u0027ve never seen that stated before and it\u0027s potentially a drastic impact to the project and users.\n\nWell technically it is. You cannot look up the change without knowing the meta-change-ref and you cannot get the ref without the change-number and you don\u0027t know in which project to look for the ref without the project.\n_Personally I think there\u0027s a case for building the change-ref with branch~Change-Id instead, make project~branch~Change-Id the unique identifier and finally retire the ChangeNumber. But that\u0027s a different conversation._\n\n\u003e \n\u003e \u003e Deleting a change.\n\u003e \n\u003e Ok, so again a case where the index is out of date?\n\u003e \n\u003e To continue on my concern from above, the fact that project+change-number often (always?) bypasses an index search seems like an implementation detail, not a guarantee of behavior for users.\n\nIn some sense yes, Gerrit is implemented so that change-number~project is the unique key for the DB, for any other identifier you __need__ to lookup this pair from caches or index in order to be able to lookup the change in the DB. And the index implementation used in vanilla Gerrit has write-read latency.\n...but if that changes we should update this information.\n\n\u003e \n\u003e \u003e But even if we get the read latency down to 0.1 second it still is more stable to use project~change-number since it is the actual identifier.\n\u003e \n\u003e I don\u0027t think reducing the latency is the fix, removing it is. If a user executes a write API like creating or deleting a change, that API shouldn\u0027t complete/return until the index is guaranteed to respond to any reads correctly. That\u0027s exactly how the ES module already works. Why wouldn\u0027t we want that behavior if we could have it? That seems the best way to avoid the kind of pain you and your users had to go through (which completely sucks, I agree).\n\nAnd I\u0027m all for it, but until that is in place I think it\u0027s only fair to inform users of the current shortcomings.\nVanilla Gerrit comes with Lucene that has these problems. You could amend this statement with a suggestion that you can avoid the majority of these issues if you choose a better index implementation, without write-read latency, such as ES.",
      "parentUuid": "e223eb83_29705e68",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af57eeac_20a4646d",
        "filename": "Documentation/rest-api-changes.txt",
        "patchSetId": 3
      },
      "lineNbr": 6273,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-01-23T10:41:50Z",
      "side": 1,
      "message": "I believe that of course different indexing backends could make the issue more or less visible. However, that does not change the fact that the index is not updated atomically with the repository, therefore it may not be consistent.\n\nJust put an artificial \"sleep\" in the reindexing logic in Gerrit and, during the push of a new change press `CTRL+C` on the client. You will end up with a change in Gerrit that is not in the index.\n\nThis is how it works today and it has been the same since the introduction of Lucene AFAIK.",
      "parentUuid": "f3577bd4_eeca3c39",
      "range": {
        "startLine": 6273,
        "startChar": 0,
        "endLine": 6273,
        "endChar": 54
      },
      "revId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "aaf8ed8f4d8c51b4be4f62c763834a790df300fd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}