{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ad6c5e0e_cae71a5b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "This is not accurate. In original change 45114, where this command was added t worked just fine. So that this is regression from this refactoring change 134334. Can you mention here for the reference the abbreviated Change-Id: of root cause of this regression: Id3ec26677.\n\nAlso given, this is a regression, we usually try to upload fixed to the oldest still supported release line, that is currently 3.3. Can you move that change to stable-3.3 branch?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46371c01_d64ba62d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad6c5e0e_cae71a5b",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 10
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64340f1d_95bb12dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "Remove this part, if you follow my suggestion.",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 17,
        "endChar": 13
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f08c041_e568085d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64340f1d_95bb12dc",
      "range": {
        "startLine": 14,
        "startChar": 5,
        "endLine": 17,
        "endChar": 13
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c513d285_bc6422dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-10T18:37:52Z",
      "side": 1,
      "message": "It looks like the current testing for ssh commands is pretty simple and just checks that command --help output is as expected. Is there a good way to manipulate users and groups such that one group is subgroup of another and they have different membership lists so that ls-members --recursive output can be verified as being complete?\n\nI\u0027ll attempt to test this locally as well since its a bit easier for me to use our functional testing of Gerrit to check something like this than figure out how to manipulate Gerrit in that manner via the test framework.",
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eac8b3c_2e552dca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-10T18:57:24Z",
      "side": 1,
      "message": "I\u0027m attempting to test this downstream via https://review.opendev.org/c/opendev/system-config/+/828786",
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58570b12_371408a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-10T22:11:33Z",
      "side": 1,
      "message": "The job logs end up being a bit verbose but I think https://zuul.opendev.org/t/openstack/build/82be22c4e5b646438f0038851f3042f1/log/job-output.txt#30230-30264 shows this is working. Non recursive listings continue to show only the direct membership. Recursive listings include members from subgroups.",
      "parentUuid": "9eac8b3c_2e552dca",
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd2af9b1_11b55bde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "Thanks for flagging this regression and for the fix. Also it would be great to find a way to test it.",
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bb8945e_3eae8910",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "I\u0027ve pushed https://gerrit-review.googlesource.com/c/gerrit/+/330359 to stable-3.3. I\u0027ll abandon this change and push a merge up into 3.4 for testing in our downstream setup.",
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d91a47dd_810e3384",
        "filename": "java/com/google/gerrit/server/restapi/group/ListMembers.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "Keep this private.",
      "range": {
        "startLine": 51,
        "startChar": 2,
        "endLine": 51,
        "endChar": 11
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "284a3a97_91fc30d4",
        "filename": "java/com/google/gerrit/server/restapi/group/ListMembers.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d91a47dd_810e3384",
      "range": {
        "startLine": 51,
        "startChar": 2,
        "endLine": 51,
        "endChar": 11
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd19a663_af557abe",
        "filename": "java/com/google/gerrit/server/restapi/group/ListMembers.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "private\n\nLooking at the root cause of the problem, apply() method was erroneously replaced with getDirectMembers().\n\nMy idea is to reverse this by adding new protected method:\n\n  protected List\u003cAccountInfo\u003e getMembers(InternalGroup group) {\n    if (recursive) {\n      return getTransitiveMembers(group);\n    } else {\n      return getDirectMembers(group);\n    }\n  }",
      "range": {
        "startLine": 88,
        "startChar": 2,
        "endLine": 88,
        "endChar": 8
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ab0db2b_440ff3a8",
        "filename": "java/com/google/gerrit/server/restapi/group/ListMembers.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd19a663_af557abe",
      "range": {
        "startLine": 88,
        "startChar": 2,
        "endLine": 88,
        "endChar": 8
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df5bb62f_4e6458a0",
        "filename": "java/com/google/gerrit/sshd/commands/ListMembersCommand.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2022-02-12T16:14:23Z",
      "side": 1,
      "message": "See my other comments, so that this can just be:\n\n  List\u003cAccountInfo\u003e members \u003d getMembers(group.get());",
      "range": {
        "startLine": 83,
        "startChar": 6,
        "endLine": 88,
        "endChar": 7
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aeee7f1_95b8a533",
        "filename": "java/com/google/gerrit/sshd/commands/ListMembersCommand.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1011217
      },
      "writtenOn": "2022-02-14T16:45:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df5bb62f_4e6458a0",
      "range": {
        "startLine": 83,
        "startChar": 6,
        "endLine": 88,
        "endChar": 7
      },
      "revId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ab0027cd3e2691c7a99239553d49003ec052ea67",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}