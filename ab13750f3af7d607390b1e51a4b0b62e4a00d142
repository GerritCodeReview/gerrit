{
  "comments": [
    {
      "key": {
        "uuid": "7cbfe0de_d7b49c05",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 1
      },
      "lineNbr": 401,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-06T21:40:31Z",
      "side": 1,
      "message": "Don\u0027t throw an unchecked exception. The only place where you *had* to do this was in the UiAction method, because the signature didn\u0027t allow checked exceptions.\n\nI think ResourceConflictException would be fine here.",
      "revId": "ab13750f3af7d607390b1e51a4b0b62e4a00d142",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cbad4ec_d8128d54",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 1
      },
      "lineNbr": 401,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-02-06T21:49:35Z",
      "side": 1,
      "message": "This imitates the behavior of submitThisChange(), which has the check for a single change as:\n\n     List\u003cSubmitRecord\u003e submitRecords \u003d checkSubmitRule(cd,\n        rsrc.getPatchSet(), force);\n\nThe checkSubmitRule also just throws a ResourceConflictException if a label is missing. All the areChangesSubmittable is doing is having a loop around a bunch of changes and giving a textual return instead. \n\nSo I thought to have the same behavior as the single change commit, we want to also throw an exception here. So I would change that to ResourceConflictException instead of OrmRuntimeException. \n\nThis is in fact a precaution as the check if it is submittable should have been done before, when displaying the web UI or in the respective /detail or /actions REST API call. I only expect this exception to trigger, when you deliberately choose to call submit without checking if you are allowed to do so. And in that case a server throwing the hands up in the air, \"500!\" is totally fine?",
      "parentUuid": "7cbfe0de_d7b49c05",
      "revId": "ab13750f3af7d607390b1e51a4b0b62e4a00d142",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cbad4ec_782261a5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 1
      },
      "lineNbr": 401,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-06T21:54:19Z",
      "side": 1,
      "message": "\u003e I only expect this exception to trigger, when you deliberately choose to call submit without checking if you are allowed to do so.\n\nNot so. Your web UI could have an outdated version of the actions, where one of the changes recently became not submittable, and you clicked on the button.\n\n\u003e And in that case a server throwing the hands up in the air, \"500!\" is totally fine?\n\nNo, 409 is better. 500 means \"something broke.\" Nothing broke here, it was just a data race.",
      "parentUuid": "9cbad4ec_d8128d54",
      "revId": "ab13750f3af7d607390b1e51a4b0b62e4a00d142",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cbfe0de_57a1acbc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 1
      },
      "lineNbr": 401,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-02-06T22:24:29Z",
      "side": 1,
      "message": "That\u0027s true. By changing the OrmRuntimeException to ResourceConflictException it will exactly do that.\nThe exception would propagate up to RestApiServlet::service, where a ResourceConflictException is caught and translated into a 409 SC_CONFLICT.\n\nSo all which is wrong is the exception type here in my point of view.",
      "parentUuid": "9cbad4ec_782261a5",
      "revId": "ab13750f3af7d607390b1e51a4b0b62e4a00d142",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}