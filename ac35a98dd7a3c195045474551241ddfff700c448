{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "145fa966_b4b692a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-06T14:29:19Z",
      "side": 1,
      "message": "would be good to mention what are the limitations of the existing approach and what are the advantages of the new event being emitted to the `EventListener`.",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5e79105_8941178d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-06-19T07:21:28Z",
      "side": 1,
      "message": "I also think it could be made clearer that this does not replace the previous functionality but extends it to allow remote listeners to subscribe to batch-ref-updated events.",
      "parentUuid": "145fa966_b4b692a2",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe6a615c_9dad9197",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-06T14:29:19Z",
      "side": 1,
      "message": "```suggestion\nevents\n```",
      "range": {
        "startLine": 14,
        "startChar": 45,
        "endLine": 14,
        "endChar": 50
      },
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd450aac_593a5cdf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T12:02:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe6a615c_9dad9197",
      "range": {
        "startLine": 14,
        "startChar": 45,
        "endLine": 14,
        "endChar": 50
      },
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f246b43_2c6c62a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-08T20:34:21Z",
      "side": 1,
      "message": "I believe we are missing a few points:\n- Documentation update: we do need to have this documented as additional stream event\n- Tests, including expected JSON payload: the JSON payload sent to the stream events listeners need to be documented and tested as part of the contract\n- Configuration: sending the single ref-update or the batch-ref-update or both needs to be configurable. A user may have existing CI/CD systems that could blow-up with the new event.",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af6de935_1e96cfda",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-14T13:22:18Z",
      "side": 1,
      "message": "@maczech@gmail.com have you considered making it configurable? How does it work if you have both enabled? (individual refs and batch refs)\n\nWho\u0027s coming first? The batch first and all the individual afterwards?",
      "parentUuid": "2f246b43_2c6c62a3",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e9481ab_f4b8983d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-15T07:51:46Z",
      "side": 1,
      "message": "\u003e Who\u0027s coming first? The batch first and all the individual afterwards?\nFirst we are notifying all batch listeners and then individual ones\nhttps://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/extensions/events/GitReferenceUpdated.java#143\n\n\u003e have you considered making it configurable? How does it work if you have both enabled? (individual refs and batch refs)\n\nI can add a feature flat that should be a simple code change but I was wondering if we want to disable `ref-updated` events? If we enable both events first we send the `batch-ref-updated` one and then individual `ref-updated` events for every ref in the batch.\n\nI\u0027ve checked in the code and we always notify `GitBatchRefUpdateListener` even for single ref update[1][2]. This means that we don\u0027t need to listen to both event types we can focus only on `batch-ref-updated` events. But we are not ready to disable `ref-updated` events because some parts of Gerrit still rely on them, for example hooks and webhooks. \n\nOn the other hand I understand need to be able to disable `batch-ref-updates` we can have some external systems which can fail processing stream events if the see new event type. I will add a feature flag for that\n\n1. https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/extensions/events/GitReferenceUpdated.java#143\n\n2. https://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/extensions/events/GitReferenceUpdated.java#138",
      "parentUuid": "af6de935_1e96cfda",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42b09b83_3a4bf31f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-15T22:15:32Z",
      "side": 1,
      "message": "Yes, exactly. We should allow a \"transition version\" (v3.9) where:\n- You can start using the batch-ref-updated event\n- You can still serve the ref-updated event and switch that off once you\u0027re sure that nobody should use it anymore\n\nIn theory, you should be able to receive both of them, and I believe that should be the default.\n\nWDYT?",
      "parentUuid": "9e9481ab_f4b8983d",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71289506_1cbb0645",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-16T14:32:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42b09b83_3a4bf31f",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78bbf88e_835b6172",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-06T14:29:19Z",
      "side": 1,
      "message": "I think we should document the purpose this event serves via javadoc",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4266c463_fa79dcec",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-08T20:34:21Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "78bbf88e_835b6172",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "404f1094_b2244190",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T10:25:42Z",
      "side": 1,
      "message": "I can add javadoc but it will be the first Gerrit event with javadoc ðŸ˜Š",
      "parentUuid": "4266c463_fa79dcec",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0a79ada_e1da888c",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-14T13:22:18Z",
      "side": 1,
      "message": "True, may address all the others in a follow-up change?",
      "parentUuid": "404f1094_b2244190",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be90e068_ce6dd293",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-06T14:29:19Z",
      "side": 1,
      "message": "Looking into `RefUpdatedEvent` the `submitter` is of type `Supplier\u003cAccountAttribute\u003e`. It looks like the `AccountInfo` that we use here is a richer class compared to `AccountInfo`, but do we really need it? And also, if we switch to a `Supplier` type, does this make the implementation more flexible (given its an interface)?",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "192a9f92_716def1f",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T10:20:58Z",
      "side": 1,
      "message": "I was looking how we can use `AccountAttribute` but the problem is that when we generate the event we have access only to `AccountInfo`",
      "parentUuid": "be90e068_ce6dd293",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08a67e5c_4fd6572c",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T12:02:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "192a9f92_716def1f",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc82dc48_e3d6e627",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-07T11:08:36Z",
      "side": 1,
      "message": "Can you add a default constructor which will make this class easier for testing? Something similar to the `RefUpdatedEvent` - which will allow us to extend the class for test events.",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1ebe82f_0426c53c",
        "filename": "java/com/google/gerrit/server/events/BatchRefUpdateEvent.java",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T12:02:32Z",
      "side": 1,
      "message": "I believe we need default constructor for different reason. I\u0027m not sure if all serialize/deserialize libraries supports classes without constructor without params",
      "parentUuid": "fc82dc48_e3d6e627",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "949c0d5d_9a4f1a25",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-06T14:29:19Z",
      "side": 1,
      "message": "I thought we wanted to move away from the `GitBatchRefUpdateListener`, but i dont understand the code well enough to be able to suggest what other batch listener to use (or even piggyback on one of the existing listeners).\n\nAlso, i know you mention it in the commit msg, but i dont understand why we make this change in the `StreamEventsApiListener` (sorry ðŸ˜Š)",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "717caa96_d769fcbf",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-14T10:20:58Z",
      "side": 1,
      "message": "`StreamEventsApiListener` implements all *Listener interfaces and generates stream events via `EventsDispatcher`. Those events can be consumed by `EventListener` implemementations. By moving away from `GitBatchRefUpdateListener` we were thinking of generation stream event in `StreamEventsApiListener` so we do not need custom listeners which implements `GitBatchRefUpdateListener`",
      "parentUuid": "949c0d5d_9a4f1a25",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5665846_a21209a5",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-15T12:00:55Z",
      "side": 1,
      "message": "I guess the point i am missing is this\n\u003e Those events can be consumed by EventListener implemementations\n\nI dont know how/where this happens, if you could point to the code (or explain it a bit) then that would be much appreciated!",
      "parentUuid": "717caa96_d769fcbf",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "681305f0_382a9761",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2023-06-16T14:58:01Z",
      "side": 1,
      "message": "Sure let me point you to a few `EventLister` implementations:\nhttps://gerrit.googlesource.com/gerrit/+/refs/heads/master/java/com/google/gerrit/server/events/EventsMetrics.java\n\nhttps://gerrit.googlesource.com/plugins/pull-replication/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/replication/pull/ReplicationQueue.java\n\nhttps://gerrit.googlesource.com/plugins/events-kafka/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/kafka/publish/KafkaPublisher.java\n\nhttps://gerrit.googlesource.com/plugins/multi-site/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/multisite/validation/ProjectVersionRefUpdateImpl.java\n\nAll those listeners are added to the dynamic set similar to:\nhttps://gerrit.googlesource.com/plugins/multi-site/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/multisite/event/EventModule.java#53",
      "parentUuid": "e5665846_a21209a5",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fa6bfe_2d22c284",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-06-19T07:21:28Z",
      "side": 1,
      "message": "Maybe this clarifies it:\nThe previous implementation enabled to listen to batch-ref-update events only internally via the `GitBatchRefUpdateListener`, i.e. it was meant to allow plugins running in Gerrit to listen to those events. The event was however not published via stream events, i.e. users who subscribed to stream events via SSH or using the event-broker plugins would not get this event.\nThis change now publishes the batch-ref-updated event as a stream event, so that clients outside of the Gerrit instance firing it will be able to react on it. For example, the pull-replication plugin running in a different Gerrit instance and configured to use an events-broker to trigger replication will now be able to use the batch-ref-updated event. The advantage is that this way pull-replication will be able to get all refs of a batch, which will ensure a consistent state, e.g. between a change meta-ref and patchset-ref.",
      "parentUuid": "681305f0_382a9761",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7ff3ca2_3a016c29",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1157810
      },
      "writtenOn": "2023-06-19T13:38:32Z",
      "side": 1,
      "message": "Thanks for the background. My question is this:\nHow will the pull-replication plugin running in the same Gerrit instance as the one which fired the event, receive the event? The `ReplicationQueue` implements the `EventListener` interface, but the `StreamEventsApiListener` is not. So the `StreamApiEventListener` is posting the event through the dispatcher, and somehow this event ends up in the pull-replication plugin\u0027s `ReplicationQueue.onEvent`. It is that last bit i am unclear on.",
      "parentUuid": "72fa6bfe_2d22c284",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7bff29d_f28e1934",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2023-06-20T06:36:08Z",
      "side": 1,
      "message": "This would happen in line 441:\n\n```\nonEvent(Event) : void - com.google.gerrit.server.events.EventListener\n\trun(EventListener) : void - com.google.gerrit.server.events.EventBroker.fireEventForUnrestrictedListeners(...).() -\u003e {...} ExtensionImplConsumer\n\t\t[declaration] fireEventForUnrestrictedListeners(Event) : void - com.google.gerrit.server.events.EventBroker\n\t\t\tfireEvent(BranchNameKey, RefEvent) : void - com.google.gerrit.server.events.EventBroker\n\t\t\t\tpostEvent(BranchNameKey, RefEvent) : void - com.google.gerrit.server.events.EventBroker\n\t\t\t\t\trun(EventDispatcher) : void - com.google.gerrit.server.events.StreamEventsApiListener.onGitBatchRefUpdated(...).() -\u003e {...} ExtensionImplConsumer\n```\n\nThe pull-rpelication plugin would have to be adapted however to not use `ref-updated` but `batch-ref-updated`.\n\nSo pull-replication would use the implementation provided in this change in both cases. Thus, my example was not well chosen. The replication-plugin implements the `GitBatchRefUpdatedListener` in `ReplicationQueue` [1]. I believe that to be the better way, since there are less calls caused by events, i.e. filtering happens when the event is fired not when an event is received, but I don\u0027t know the pull-replication plugin well enough. There might be a reason to use the more general `EventBroker.onEvent()`. I would guess, that it was done that way to support instance internal and external events at the same time.\n\n[1] https://gerrit.googlesource.com/plugins/replication/+/refs/heads/master/src/main/java/com/googlesource/gerrit/plugins/replication/ReplicationQueue.java#57",
      "parentUuid": "c7ff3ca2_3a016c29",
      "revId": "ac35a98dd7a3c195045474551241ddfff700c448",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}