{
  "comments": [
    {
      "key": {
        "uuid": "d7868271_5f5827c0",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 356,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-06-12T09:15:14Z",
      "side": 1,
      "message": "AFAIK, the order of bindings declaration in Guice modules doesn\u0027t matter. Before creating an injector all bindings are put into a flat list and Guice figures out the order of instantiations based on dependencies between classes.\n\nWhile your change fixes the issue, the explanation here is too broad.\nWe have that concept of LifecycleModule, in Gerrit\u0027s own extension to Guice, which has these:\n\n  listener().to(SomeClassImplementingLifecycleListener.class);\n\nand the start() methods of each such listener are executed in the order they are declared.\nYour change actually makes sure that PluginLoader.start() is executed before the LuceneIndexModule.start(), this is the main point here.\n\nUnfortunately, we do not have explicit dependencies between LifecycleListeners, and when they\nare declared from different modules it is hard to see the order in which they are started.\nThis is a downside of using the LifecycleModule, IMHO.",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3bcbc47_52d0ff60",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 356,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-06-12T09:19:15Z",
      "side": 1,
      "message": "I know, I could have put even more detail and the issue is the LifecycleListener that starts the modules in the same order they are registered with it (the listener().to() you mentioned).\n\nThe loading of the plugins are performed using Guice but their bindings are not made by the PluginModule itself but only by the PluginLoader which is started by the start() method invoked by the LifecycleListener.\n\nI will put a larger and more detailed comment as suggested.",
      "parentUuid": "d7868271_5f5827c0",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bfc32c2_7d39588e",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 356,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-06-12T10:40:31Z",
      "side": 1,
      "message": "Done, I\u0027ve extended the comment to include your feedback, thanks.",
      "parentUuid": "e3bcbc47_52d0ff60",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2622edf4_d1f93f6b",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 356,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-12T12:52:21Z",
      "side": 1,
      "message": "\u003e Unfortunately, we do not have explicit dependencies between\n \u003e LifecycleListeners, and when they\n \u003e are declared from different modules it is hard to see the order in\n \u003e which they are started.\n \u003e This is a downside of using the LifecycleModule, IMHO.\n\nWe could easily fix that and not depend on the order of registration, as you pointed out, it\u0027s very hard to control, as it is related to the internal implementation details of Guice. The fix would be pretty straight forward: we would borrow, the initialization order approach from JEE (servlet and filter): http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd, load-on-startup element:\n\n   The load-on-startup element indicates that this\n    servlet should be loaded (instantiated and have\n    its init() called) on the startup of the web\n    application. The optional contents of these\n    element must be an integer indicating the order in\n    which the servlet should be loaded. If the value\n    is a negative integer, or the element is not\n    present, the container is free to load the servlet\n    whenever it chooses. If the value is a positive\n    integer or 0, the container must load and\n    initialize the servlet as the application is\n    deployed. The container must guarantee that\n    servlets marked with lower integers are loaded\n    before servlets marked with higher integers. The\n    container may choose the order of loading of\n    servlets with the same load-on-start-up value.\n\nbut would optionally define it programmatically in the corresponding LifecycleListener implementations. For that we would add a default method, say startOrder() to the LifecycleListener interface that should return the number from 0 to 9, or -1 if not particular oder. 0 is the highest priority, and the 9 is the lowest.\n\n  /** Listener interested in server startup and shutdown events. */\n @ExtensionPoint\n public interface LifecycleListener extends EventListener {\n   default int startOrder() {\n      return -1; // no particular order, i.e. registration order\n   }\n  [...]\n\nNow, we would overwrite IndexCollection to return say 9, and adapt LifecycleManager.start() to sort the listeners according to listener.startOrder() value before actually iterating over the provider list that was created according to default registration order:\n\n   /** Start all listeners, in the start order and registered order. */\n   public void start() {\n      // Get the listeners\n      List\u003cLifecycleListener\u003e actualListeners \u003d ... get Listeners from Provders.\n      List\u003cLifecycleListener\u003e sortedListeners \u003d ... sort according to startOrder() and/or registration order, if start order \u003d\u003d -1.\n      // start according to sorted order\n      for (LifecycleListener l : sortedListeners) {\n        l.start();\n      }\n   }\n\nI see, that the stop order should be done according to start order, but in reverse order.",
      "parentUuid": "d7868271_5f5827c0",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dc9a651_f2a17b0b",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 361,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-06-12T08:53:57Z",
      "side": 1,
      "message": "The confusing part in this comment is that we are talking about plugin loading, but referencing PluginRestApi module. This is because PluginRestApiModule installs PluginModule, that is actually responsible for the plugin loading. Do you thing it would make it more clear, to decouple both modules, and put only PluginModule(), and preserve the old location of PluginRestApiModule?",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5283ef88_bf4ce8f2",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 361,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-06-12T09:14:35Z",
      "side": 1,
      "message": "You are actually right: it is not the Rest API that needs to be loaded before but only the PluginModule which is loaded before that.\n\nLet me split this into two changes then:\n- Decoupling of the PluginRestApiModule from PluginModule\n- Reshuffling of the order of registration of PluginModule vs. IndexModule",
      "parentUuid": "2dc9a651_f2a17b0b",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ceda5a1_b052863b",
        "filename": "gerrit-pgm/src/main/java/com/google/gerrit/pgm/Daemon.java",
        "patchSetId": 5
      },
      "lineNbr": 361,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-06-12T10:41:06Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5283ef88_bf4ce8f2",
      "revId": "acec4d3f3003a0379375e933a8c314cc684d9bb3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}