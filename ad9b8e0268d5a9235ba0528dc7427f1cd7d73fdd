{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b6698af9_00463c44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "Sorry that it takes too long for review - we had holidays in Germany.\n",
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40d94b17_e5f5935f",
        "filename": "java/com/google/gerrit/server/cache/PerThreadCache.java",
        "patchSetId": 21
      },
      "lineNbr": 80,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "My impression from our discussion is that only refs should be cached (\"5. Limit the window to the RepoRefCache typed entries only\")\n\nWhat other types are you planning to add here?\nAt PatchSet 15 solution looks better for me, just need some improvements/renaming.\n\nIf you are going to add more types here, maybe we should discuss it again, because it now looks very complicated.\n\nIf no other types will be cached - let\u0027s remove all unnecessary complication + rename classes/methods to make them more refs specific. Like:\nopenReadonlyRequestWindow -\u003e openRequestRefsCacheWindow, etc...\n\nI understand that you are trying to split responsibilities, but in this situation I would prefer to have everything in one place with a clear description + comment that it never must be merged into master.",
      "range": {
        "startLine": 80,
        "startChar": 33,
        "endLine": 80,
        "endChar": 58
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8e81dc6_2f7ae760",
        "filename": "java/com/google/gerrit/server/cache/PerThreadCache.java",
        "patchSetId": 21
      },
      "lineNbr": 204,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "Is it possible to set this property to true for all tests (by default)?",
      "range": {
        "startLine": 204,
        "startChar": 8,
        "endLine": 204,
        "endChar": 100
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8acdddf4_32441dcd",
        "filename": "java/com/google/gerrit/server/events/StreamEventsApiListener.java",
        "patchSetId": 21
      },
      "lineNbr": 418,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "The new code doesn\u0027t catch OrmException if it is thrown by the dispatch.run or by the d.postEvent call. Not sure how important it is - could you please check this?\n\nOr maybe rewrite this with nested try-catch:\n  try {\n    Change chage;\n    ...\n    try (ReadonlyRequestWindow window \u003d ...) {\n       ... get change and create event\n    }\n    dispatcher.run(d -\u003e d.postEvent(change, event));\n  } catch (OrmException e) {\n    logger.atSevere().withCause(e).log(\"Failed to dispatch event\");\n  }",
      "range": {
        "startLine": 398,
        "startChar": 3,
        "endLine": 418,
        "endChar": 52
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3fb9889_6199eaac",
        "filename": "java/com/google/gerrit/server/extensions/events/CommentAdded.java",
        "patchSetId": 21
      },
      "lineNbr": 89,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "Same problem as with StreamEventsApiListener.\nI would prefer to use a solution with additional try... block, because it doesn\u0027t require additional returns.",
      "range": {
        "startLine": 66,
        "startChar": 4,
        "endLine": 89,
        "endChar": 52
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d99f752e_e7482f46",
        "filename": "java/com/google/gerrit/server/git/RepoRefCache.java",
        "patchSetId": 21
      },
      "lineNbr": 48,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "If the solution is for repo refs only, then maybe move it into PerThreadCache. So it is not spread in our code.",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909af225_a036de41",
        "filename": "java/com/google/gerrit/server/git/RepoRefCache.java",
        "patchSetId": 21
      },
      "lineNbr": 107,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-19T15:20:50Z",
      "side": 1,
      "message": "The same as comment above - maybe move to PerThreadCache (maybe put into some nested class there for grouping)",
      "range": {
        "startLine": 73,
        "startChar": 2,
        "endLine": 107,
        "endChar": 3
      },
      "revId": "ad9b8e0268d5a9235ba0528dc7427f1cd7d73fdd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}