{
  "comments": [
    {
      "key": {
        "uuid": "2dc51d24_4e05132c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "Can you mention, that \"notedb.patchSetApprovals.read \u003d true\" must not be set in gerrit.config. Otherwise the site is unusable?",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d6c3d14_96ecac38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-01-06T20:42:21Z",
      "side": 1,
      "message": "Done with IAE in NotesMigration, since this is otherwise undocumented. It\u0027s intended that everything break when read is set because we haven\u0027t written that code yet :)\n\nWe don\u0027t expect users to configure this in the typical case. For migration, we plan to introduce schema upgrades to rewrite the full notedb history in the same commit where we change the read flag.\n\nThe primary reason this is read from the configuration at all is to support online upgrades for googlesource.com, where we want to flip the flag only after completing the online schema upgrade. A secondary reason is to allow users to turn off reading in the event of a regression.",
      "parentUuid": "2dc51d24_4e05132c",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dc51d24_eeecff38",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "wrong indentation.\n\nI am certainly missing something (some migratition steps?), but this can not work. Consider the following scenario:\n\n* site has 100k open and closed changes\n* site is changed to notesdb.write \u003d notesdb.read* \u003d true\n* Gerrit site can not be used any more:\n\nNPE for all closed changes:\n\n java.lang.NullPointerException\n\tat com.google.gerrit.server.query.change.ChangeData.allApprovals(ChangeData.java:515)\n\tat com.google.gerrit.server.change.ChangeJson.labelsForClosedChange(ChangeJson.java:540)\n\tat com.google.gerrit.server.change.ChangeJson.labelsFor(ChangeJson.java:390)\n\tat com.google.gerrit.server.change.ChangeJson.toChangeInfo(ChangeJson.java:296)\n\tat com.google.gerrit.server.change.ChangeJson.toChangeInfo(ChangeJson.java:262)\n\tat com.google.gerrit.server.change.ChangeJson.formatList2(ChangeJson.java:246)\n\tat com.google.gerrit.server.query.change.QueryChanges.query0(QueryChanges.java:167)\n\tat com.google.gerrit.server.query.change.QueryChanges.query(QueryChanges.java:141)\n\tat com.google.gerrit.server.query.change.QueryChanges.apply(QueryChanges.java:108)\n\tat com.google.gerrit.server.query.change.QueryChanges.apply(QueryChanges.java:1)\n\tat com.google.gerrit.httpd.restapi.RestApiServlet.service(RestApiServlet.java:304)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat com.google.inject.servlet.ServletDefinition.doServiceImpl(ServletDefinition.java:278)\n\tat com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:268)\n\tat com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:180)\n\tat com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:93)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:85)\n\tat com.google.gerrit.pgm.http.jetty.GetUserFilter.doFilter(GetUserFilter.java:76)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gwtexpui.server.CacheControlFilter.doFilter(CacheControlFilter.java:70)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.RunAsFilter.doFilter(RunAsFilter.java:113)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.AllRequestFilter$FilterProxy$1.doFilter(AllRequestFilter.java:64)\n\tat com.google.gerrit.httpd.AllRequestFilter$FilterProxy.doFilter(AllRequestFilter.java:67)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.RequestContextFilter.doFilter(RequestContextFilter.java:75)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:120)\n\tat com.google.inject.servlet.GuiceFilter$1.call(GuiceFilter.java:132)\n\tat com.google.inject.servlet.GuiceFilter$1.call(GuiceFilter.java:129)\n\tat com.google.inject.servlet.GuiceFilter$Context.call(GuiceFilter.java:206)\n\tat com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:129)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1480)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:517)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:211)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1097)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:446)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:175)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1031)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:92)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:445)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:269)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532)\n\tat java.lang.Thread.run(Thread.java:744)\n\n\nNPE for all open canges:\n\njava.lang.NullPointerException\n\tat com.google.gerrit.server.ApprovalsUtil.byPatchSet(ApprovalsUtil.java:267)\n\tat com.google.gerrit.server.query.change.ChangeData.currentApprovals(ChangeData.java:401)\n\tat com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(ChangeData.java:130)\n\tat com.google.gerrit.server.change.ChangeJson.formatList2(ChangeJson.java:241)\n\tat com.google.gerrit.server.change.ChangeJson.format(ChangeJson.java:219)\n\tat com.google.gerrit.server.change.ChangeJson.format(ChangeJson.java:206)\n\tat com.google.gerrit.server.change.GetChange.apply(GetChange.java:49)\n\tat com.google.gerrit.server.change.GetDetail.apply(GetDetail.java:50)\n\tat com.google.gerrit.server.change.GetDetail.apply(GetDetail.java:1)\n\tat com.google.gerrit.httpd.restapi.RestApiServlet.service(RestApiServlet.java:304)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat com.google.inject.servlet.ServletDefinition.doServiceImpl(ServletDefinition.java:278)\n\tat com.google.inject.servlet.ServletDefinition.doService(ServletDefinition.java:268)\n\tat com.google.inject.servlet.ServletDefinition.service(ServletDefinition.java:180)\n\tat com.google.inject.servlet.ManagedServletPipeline.service(ManagedServletPipeline.java:93)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:85)\n\tat com.google.gerrit.pgm.http.jetty.GetUserFilter.doFilter(GetUserFilter.java:76)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gwtexpui.server.CacheControlFilter.doFilter(CacheControlFilter.java:70)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.RunAsFilter.doFilter(RunAsFilter.java:113)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.AllRequestFilter$FilterProxy$1.doFilter(AllRequestFilter.java:64)\n\tat com.google.gerrit.httpd.AllRequestFilter$FilterProxy.doFilter(AllRequestFilter.java:67)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.gerrit.httpd.RequestContextFilter.doFilter(RequestContextFilter.java:75)\n\tat com.google.inject.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:82)\n\tat com.google.inject.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:120)\n\tat com.google.inject.servlet.GuiceFilter$1.call(GuiceFilter.java:132)\n\tat com.google.inject.servlet.GuiceFilter$1.call(GuiceFilter.java:129)\n\tat com.google.inject.servlet.GuiceFilter$Context.call(GuiceFilter.java:206)\n\tat com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:129)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1480)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:517)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:211)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1097)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:446)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:175)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1031)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.handler.RequestLogHandler.handle(RequestLogHandler.java:92)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:445)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:269)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:229)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:601)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:532)\n\tat java.lang.Thread.run(Thread.java:744)",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad2f4db4_422ed2ad",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-01-06T20:42:21Z",
      "side": 1,
      "message": "As per my other comment, we expect reading to fail.\n\nBut good catch nonetheless, this points out that I am forgetting to call notes.load() from various places in ApprovalsUtil. Done.",
      "parentUuid": "2dc51d24_eeecff38",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d693906_35dcb085",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-06T21:19:31Z",
      "side": 1,
      "message": "You can\u0027t test ApprovalsUtil in current ChangeNotesTest unit test. Why not to implement a real acceptance unit test with full coverage of NotesDb functionality, like it is used in the real life with ApprovalsUtils and friends in addition to ChangeNotesTest that isn\u0027t under Guice control?",
      "parentUuid": "ad2f4db4_422ed2ad",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d6c3d14_16337c13",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-01-06T23:25:52Z",
      "side": 1,
      "message": "I wouldn\u0027t mind writing ApprovalsUtils unit tests. You\u0027re right that they won\u0027t be in ChangeNotesTests; those are unit tests for ChangeNotes/ChangeUpdate, not ApprovalsUtil :)\n\nI\u0027m not going to write notedb-specific acceptance tests. What I plan to do (but not in this change) is teach the current acceptance test framework to run with various permutations of NotesMigration. If we need better acceptance test coverage we can add more tests without making them notedb-specific.",
      "parentUuid": "0d693906_35dcb085",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ddcd92e_1ddc5385",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-07T05:48:00Z",
      "side": 1,
      "message": "\u003e What I plan to do (but not in this change) is teach the current acceptance test framework to run with various permutations of NotesMigration.\n\nQuoting the commit message of this change:\n\n \"Since most existing reads of the PatchSetApprovals table have been\nmigrated to ApprovalsUtil, most implementation changes happen there.\"\n\nThe test coverage for these implementation changes in PatchSetApprovals should be in the same change or in the same series.",
      "parentUuid": "2d6c3d14_16337c13",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dc5b95c_35e13044",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-01-07T16:56:55Z",
      "side": 1,
      "message": "Well the non-notedb code that moved to ApprovalsUtil starting in I5de63a421 didn\u0027t exactly have great unit test coverage in the places it was copied from. It should still have pretty good coverage in the acceptance tests (though checking now).\n\nThe notes code needs coverage. It will go in \"this series\" but I haven\u0027t written much more of \"this series\" yet because I wanted to start checking code in. This is because dealing with constantly rebasing this particular change and fixing conflicts was becoming untenable.",
      "parentUuid": "0ddcd92e_1ddc5385",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edc14553_14dc3485",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/ApprovalsUtil.java",
        "patchSetId": 3
      },
      "lineNbr": 259,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2014-01-07T17:32:25Z",
      "side": 1,
      "message": "ApprovalsUtil coverage from acceptance tests is surprisingly good: excluding the notedb-only branches, everything is covered except copyLabels.",
      "parentUuid": "0dc5b95c_35e13044",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6db475b0_88f9b7f5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/NotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "This is wrong: you can only read if you write, or make migration on the fly: try to read a change 4711, nothing is in notes db for this change, perform online migrate from ReviewDB to NotesDB.",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6db475b0_a8f6fb02",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/NotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "Changing this to:\n\n  cfg.setBoolean(\"notedb\", \"patchSetApprovals\", \"read\", false);\n\nmakes most tests fail.",
      "range": {
        "startLine": 37,
        "startChar": 4,
        "endLine": 37,
        "endChar": 64
      },
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dc51d24_8ef9bbf5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/NotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "I think we should check this for misconfiguration and fail loud and/or override it, e. g.:\n\n  if (!write) {\n    if (readFoo || readBar || readBaz || ...) {\n       log.error(\"notedb.write enabled because one of the readFoo was enabled\");\n       write \u003d true;\n    }\n  }",
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dc51d24_aef6f702",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/server/notedb/ChangeNotesTest.java",
        "patchSetId": 3
      },
      "lineNbr": 381,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2014-01-05T15:22:21Z",
      "side": 1,
      "message": "Well, that\u0027s easy. Unless i am missing some migration steps, i would like to see tests where notesdb.write and notesdb.foo.read were activated after change, ps and psa were created.\n\n* in setUp() create a change and psa\n* activate notedb.patchSetApprovals.read \u003d true with recently introduced configuration annotation per method\n* reading psa for this change returns null; now what?\n\n  @Test\n  @GerritConfig(name\u003d\"notedb.patchSetApprovals.read\", value\u003d\"true\")\n  void readNotWrittenPSA() {\n    ChangeNotes notes \u003d newNotes(change);\n    notes.getApprovals() ...\n  }",
      "range": {
        "startLine": 381,
        "startChar": 8,
        "endLine": 381,
        "endChar": 35
      },
      "revId": "ae785d0c210f76f22d8db65ca4d83afedc9b77a1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}