{
  "comments": [
    {
      "key": {
        "uuid": "0dd15d8c_a8c73b18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-05-26T23:49:53Z",
      "side": 1,
      "message": "Once upon a time, you told me we do this constant extraction just to be sure, so you could update the index live?\n\nIs my memory messing up something there?\n\nApart from that, the patch is good looking.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "af76f11ca69bf6807eba6e4ce2d6c9e3e6a3fc1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edd32994_473aee94",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-05-27T00:12:50Z",
      "side": 1,
      "message": "We need to look up the schema that should be used for each query. Once per query is sufficient, we don\u0027t need to check the volatile field for each predicate in the predicate tree.",
      "parentUuid": "0dd15d8c_a8c73b18",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "af76f11ca69bf6807eba6e4ce2d6c9e3e6a3fc1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd15d8c_48e31fa3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-05-27T00:28:47Z",
      "side": 1,
      "message": "This NPEs in a static initializer from BasicChangeRewrites.\n\nThe error message was very unhelpful because it happens that the first place where the class gets loaded is inside some sort of magic Guice provider implementation that swallows the actual ExceptionInInitializerError.\n\nTo get a more sensible error message, I added \"new BasicChangeRewrites()\" in a static block at the top of a test, which forces class loading in a context that doesn\u0027t swallow the error:\n\n java.lang.ExceptionInInitializerError\n \tat com.google.gerrit.server.query.change.LuceneQueryChangesTest.\u003cclinit\u003e(LuceneQueryChangesTest.java:30)\n \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n \tat java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n \tat java.lang.Class.newInstance(Class.java:375)\n \tat com.google.gerrit.testutil.ConfigSuite$ConfigRunner.createTest(ConfigSuite.java:127)\n \tat org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:236)\n \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n \tat org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:233)\n \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n \tat org.junit.runners.Suite.runChild(Suite.java:128)\n \tat org.junit.runners.Suite.runChild(Suite.java:24)\n \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n \tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n \tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n \tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n \tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n \tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n \tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n Caused by: java.lang.NullPointerException\n \tat com.google.gerrit.server.query.change.ChangeQueryBuilder$Arguments.\u003cinit\u003e(ChangeQueryBuilder.java:194)\n \tat com.google.gerrit.server.query.change.BasicChangeRewrites.\u003cclinit\u003e(BasicChangeRewrites.java:27)\n \t... 32 more\n \n\nI will add this step in a more common place to hopefully avoid this in the future.",
      "revId": "af76f11ca69bf6807eba6e4ce2d6c9e3e6a3fc1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edd32994_47e30ea3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 194,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-05-27T01:08:07Z",
      "side": 1,
      "message": "Rather than adding more sanity checks for BasicChangeRewrites, I just deleted a bunch of code.",
      "parentUuid": "0dd15d8c_48e31fa3",
      "revId": "af76f11ca69bf6807eba6e4ce2d6c9e3e6a3fc1b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}