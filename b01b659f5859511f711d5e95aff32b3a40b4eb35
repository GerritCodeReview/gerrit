{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06f6bc23_0c6a2cb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-08T07:29:55Z",
      "side": 1,
      "message": "I had a quick look, but did not finish review.\n\nYou\u0027re choosing to fix this in the backend, but have you considered a front-end solution? \n\nif we let the front-end do the substitution, it could use a richer UI, eg. show an account chip with avatar.  ",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "33fff0ea_96a6a648",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2021-04-08T10:01:01Z",
      "side": 1,
      "message": "I did consider that, but I think it is better to do in the backend:\n* We need to replace templates in the backend for indexing changes on comments anyway\n* In the same commit message, we might have templates for multiple accounts, which means frontend would have to call backend to get account information for each of the accounts in the message.\n* If we do it in the frontend for existing instances, each time we add a new feature we would have to add frontend support to it (especially if we add more templates at some point).\n\nShowing an avatar sounds like a UI feature request rather than fixing NoteDB :)",
      "parentUuid": "06f6bc23_0c6a2cb1",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87dcb9b7_ceef4eb4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-08T10:10:22Z",
      "side": 1,
      "message": "\u003e We need to replace templates in the backend for indexing changes on comments anyway\n\nAt first that sounded like a decisive reason, but it actually means that we are also persisting PII in the index, and if an account gets removed we won\u0027t have a way to cleanup the index.",
      "parentUuid": "33fff0ea_96a6a648",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "848ac390_b3588b09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2021-04-08T13:19:00Z",
      "side": 1,
      "message": "There seem to be two solutions to this:\na) Introduce the same indirection into the index, i.e. when searching the index for e.g. email address, we convert that to the account ID. Maybe this isn\u0027t even that hard. It might also enable template expansion on the FE, though I think the 3rd con Marija listed above is still valid.\nb) Have the Wipeout Flume update the index on account deletion. Or do that in the reindex_stale_* jobs; at first glance that seems to be feasible: http://google3/third_party/java_src/gerritcodereview/gerrit/java/com/google/gerrit/server/index/change/StalenessChecker.java?l\u003d104\u0026rcl\u003d366916968",
      "parentUuid": "87dcb9b7_ceef4eb4",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e2643fa_eb0a3815",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-08T14:42:30Z",
      "side": 1,
      "message": "\u003e Have the Wipeout Flume update the index on account deletion. \n\na wise man once said to me that it\u0027s better to avoid post-facto fixup jobs ðŸ˜Š\n\nInside Google, The wipeout flume may work for account deletions, but won\u0027t cut it for name changes, which is another area we want to improve. You could use the reindex flume by adding all the user refs as input to the staleness check.\n\nHowever\n\n* upstream Gerrit doesn\u0027t have flumes.\n\n* if we\u0027re trying to not persist PII, to me it seems most logical to avoid persisting it all places, including the index.\n\n\u003e In the same commit message, we might have templates for multiple accounts, which means frontend would have to call backend to get account information for each of the accounts in the message.\n\ncorrect. But we get the account IDs involved from NoteDb footers, right? So we can ship them in the ChangeInfo, without much extra overhead. \n\n\u003e each time we add a new feature we would have to add frontend support to it\n\nThe avatar/chip idea is probably nicer than necessary, but if you do textual substitution, it seems like an equal amount of work, whether you do it in the frontend or the backend, no?",
      "parentUuid": "848ac390_b3588b09",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec49d93c_ce7b6ac5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2021-04-09T10:47:08Z",
      "side": 1,
      "message": "I looked what we do with reviewer updates in the frontend with avatar and chip support\n* we have parser that is explicitly filtering out messages, provided by the backend and generate massages in frontend:\nhttp://google3/third_party/javascript/polygerrit/elements/shared/gr-rest-api-interface/gr-reviewer-updates-parser.ts?l\u003d100\nhttp://google3/third_party/javascript/polygerrit/elements/shared/gr-rest-api-interface/gr-reviewer-updates-parser.ts?l\u003d191\nhttp://google3/third_party/javascript/polygerrit/elements/change/gr-message/gr-message_html.ts?l\u003d295\n* It would require some more work in the frontend to have similar support for all other messages (i.e. similar parser).\n* Other messages we just show as it is from the backend,if we give all accounts, needed by the message in ChangeMessageInfo, we could do text replacement in a similar way, without extra work for new features and plugins.\nhttp://google3/third_party/javascript/polygerrit/types/common.ts?l\u003d523\u0026rcl\u003d367129249\n\n\nAs for the index:\n\nWe use index for fuzzy-match search on comment text:\nhttp://google3/third_party/java_src/gerritcodereview/gerrit/java/com/google/gerrit/server/index/change/ChangeField.java?l\u003d671\u0026rcl\u003d367129249\n\nWe could just cut emails/names from comments, then searches like:\ncomment:gerritforge@gmail.com comment:GerritForge CI would not work. I am not actually sure how useful it is, e.g. it is not an issue with most of operations today (e.g. when we add reviewer, the comment would not have a match in the backend).\n\nWDYT?",
      "parentUuid": "7e2643fa_eb0a3815",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a12ac9e3_c94beebe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2021-04-09T10:56:25Z",
      "side": 1,
      "message": "Added Ben, for opinion, we will have to make a change to the frontend first so we don\u0027t break existing comments.\n\nBen, what do you think, would it make sense to replace message templates in the backend, or let the frontend replace templates in comments (possibly with account chip and avatar, instead of simple user name, similarly to reviewer updates?) Could someone from the frontend team help with that?",
      "parentUuid": "ec49d93c_ce7b6ac5",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a99851_8ec96412",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-12T11:52:47Z",
      "side": 1,
      "message": "I heard the following arguments for the two options at hand:\n\n1) Do it entirely in the backend:\nWhat/How:\n- Store _gerrit-account-id:123 in NoteDb. Replace when reading.\n- API remains the same.\n- Index remains the same (still contains names,emails)\n\nConsequences:\n- Pro: Index search for names/emails in comments is almost for free\n- Pro: No API change (other callers besides our FE do not need to adapt)\n- Con: Change index once again contains names/emails\n- Con: Need async job to clean up change index when users delete their accounts or change their names (complexity)\n- Con: Harder to show a name chip in the FE\n\n2) Do it entirely in the frontend:\nWhat/How:\n- Store _gerrit-account-id:123 in NoteDb and the change index for comments\n- API changes (comment strings now contain _gerrit-account-id:123)\n- UI needs to replace comments/change messages/commit messages(?) and show a chip\n- Backend could serve additional account info on API so that FE doesn\u0027t have to ask back (e.g. ChangeMessageInfo can have a new field \"List\u003cAccountInfo\u003e users\" where we ship additional account infos)\n\nConsequences:\n- Pro: No issues with change index\n- Pro: Can easily show chips in the UI\n- Con: Harder to get change index search support\n- Con: More coupling between FE/BE (FE needs to adapt first)\n\nMy vote is clearly going towards (2) - do this replacement in the frontend. Ideally, I\u0027d want the backend to only deal with account IDs or external IDs and provide some AccountInfos in the API so that UI(s) can show richer messages (chips). But all our storages besides the account storage, both primary (NoteDb) and secondary (index) only ever know IDs, so they aren\u0027t problematic when names change or accounts get deleted.\n\nYou can think of this like a relational database where you have a \u0027Users\u0027 table and a \u0027Changes\u0027 table. The \u0027Changes\u0027 table should not contain names of users - just references to their IDs as foreign keys. That in the end also applies to in-string mentions.\nIf you compare our storage to a relational database, it\u0027s not that NoteDb is the equivalent of the relational database, it\u0027s actually that NoteDb+Indices provide a functionality comparable to the relational database (that has indices built in). So what applies to NoteDb, should also apply to indices.",
      "parentUuid": "a12ac9e3_c94beebe",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "725af570_78f354e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-12T12:04:08Z",
      "side": 1,
      "message": "\u003e Con: More coupling between FE/BE (FE needs to adapt first)\n\nthis is not a huge issue, is it? We would survive a few days with \"AccountId 1234\" appearing in comment texts, no?",
      "parentUuid": "65a99851_8ec96412",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75e4fa9f_86130224",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-04-12T12:20:40Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "725af570_78f354e2",
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8470baeb_e168613c",
        "filename": "java/com/google/gerrit/entities/ChangeMessage.java",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-08T07:29:55Z",
      "side": 1,
      "message": "does this need updatign?",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 52
      },
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a4cc22a9_8bedc58f",
        "filename": "java/com/google/gerrit/entities/ChangeMessage.java",
        "patchSetId": 2
      },
      "lineNbr": 153,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2021-04-08T10:01:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8470baeb_e168613c",
      "range": {
        "startLine": 153,
        "startChar": 0,
        "endLine": 153,
        "endChar": 52
      },
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a00a9da8_38a58d72",
        "filename": "java/com/google/gerrit/entities/ChangeMessage.java",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-04-08T07:29:55Z",
      "side": 1,
      "message": "detailedMessage\u003d ?",
      "range": {
        "startLine": 175,
        "startChar": 13,
        "endLine": 178,
        "endChar": 15
      },
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44d752e8_511845fe",
        "filename": "java/com/google/gerrit/entities/ChangeMessage.java",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2021-04-08T10:01:01Z",
      "side": 1,
      "message": "I though it could be redundant, but added.",
      "parentUuid": "a00a9da8_38a58d72",
      "range": {
        "startLine": 175,
        "startChar": 13,
        "endLine": 178,
        "endChar": 15
      },
      "revId": "b01b659f5859511f711d5e95aff32b3a40b4eb35",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}