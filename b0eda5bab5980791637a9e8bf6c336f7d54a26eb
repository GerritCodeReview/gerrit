{
  "comments": [
    {
      "key": {
        "uuid": "829956a6_cff8a6f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-01-31T14:03:21Z",
      "side": 1,
      "message": "This is no longer true.... :(\n\nYesterday, we had the cache lock again which looks like the kernel bug that Ben Manes pointed us to https://github.com/torvalds/linux/commit/76835b0ebf8a7fe85beb03c75121419a7dec52f0\n\nThe weird thing is our kernel version is supposed to have the fix already. Anyway, we are looking into upgrading or changing os and kernel.\n\nThat said, with Caffeine, we get the issue less often(almost 2 weeks without issue vs once a day) so I will keep using caffeine. FYI I will test 2.6.1 (currently using 2.6.0) in prod to confirm it works.\n\nI still think we should migrate to caffeine for the performance gain and also because it reduce the chance to be hit by the deadlock. I will reword the commit message if we still want this change.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 67
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e3a8542_dcf39850",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-25T11:13:07Z",
      "side": 1,
      "message": "I understand why we need to remove this circular dependency. To be honest, I toyed with the idea of removing it some months ago (for other reasons) and asked Saša why we had it in the first place. He said that the main concern was the speed of reindexing of the whole site.\n\nMy plan was to get rid of this specialty when restructuring the diff caches (but to make sure that we wouldn\u0027t loose too much performance by choosing a better general structure).\n\nAll in all, I really like this circular dependency to be gone. I just wanted to point out that large Gerrit hosts which have a limited PatchList cache might see a negative impact on the speed of reindexing of the whole site.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "709735f1_2803d536",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-01-25T14:04:14Z",
      "side": 1,
      "message": "@Saša, As far as I know, removing the circular dependency should not prevent the reindexing from being fast. Reidexing would be slow if diff_summary is never populated but according to my testing, diff_summary is populated even if the line in diff_loader to populate diff_summary is removed.\n\nI just retested: an entry is loaded in the diff_summary as soon as Gerrit receive the commit and create the change/patchset. Reidexing a change is also getting/and or loading the entry from diff_summary.\n\nSo why do we need to populate diff_summary when getting a value from diff cache?",
      "parentUuid": "7e3a8542_dcf39850",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6311c77_a5280d83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T14:31:30Z",
      "side": 1,
      "message": "\u003e @Saša, As far as I know, removing the circular dependency should not prevent the reindexing from being fast. Reidexing would be slow if diff_summary is never populated but according to my testing, diff_summary is populated even if the line in diff_loader to populate diff_summary is removed.\n\u003e \n\u003e I just retested: an entry is loaded in the diff_summary as soon as Gerrit receive the commit and create the change/patchset. Reidexing a change is also getting/and or loading the entry from diff_summary.\n\nIf the diff_summary cache is always populated, then I think that satisfies the requirement for keeping a full reindex fast. But are we sure that it is a guarantee that diff_summary is populated, and not just an accident?",
      "parentUuid": "709735f1_2803d536",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3745bb7b_5826f51a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:11:47Z",
      "side": 1,
      "message": "\u003e But are we sure that it is a guarantee that diff_summary is populated, and not just an accident?\n\nI think it is a guarantee, given the current code. It is first populated when reindexing the new change, specifically via ChangeField#getFileParts which calls ChangeData#currentFilePaths. This always calls into PatchListCacheImpl#getDiffSummary.\n\nWhat I was worried about is if maybe #currentFilePaths had a fallback path where it looked for an already-loaded PatchListEntry and skipped #getDiffSummary if so. Then it wouldn\u0027t be a guarantee, it would be sensitive to the order in which ChangeData fields are lazily populated. But fortunately, that is not the case here.\n\nSo I think we are safe to proceed, unless Saša has more to add.",
      "parentUuid": "a6311c77_a5280d83",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "742de7a3_727601a9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-01-31T13:41:52Z",
      "side": 1,
      "message": "Sorry for waiting on me.\n\nIIRC, this was only a small optimization as you can see in the relevant code review [1]. I think it is a good thing to remove that circular dependency.\nIn the worst case, if something is not in the diff_summary cache it will be computed when it is needed. But the current code looks good as Hugo and Dave pointed out.\n\n@Alice: I remember from our discussion that I expressed concern about invalidating diff_summary cache (by changing its version) and thus forcing all entries to be computed again. I don\u0027t recall that I said something about that circular dependency.\n\nNOTE: after [1] we also renamed the cache from diff_file_list to diff_summary. Don\u0027t get confused with the old cache name in [1] :-)\n\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/86814/3/gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListCacheImpl.java#97",
      "parentUuid": "3745bb7b_5826f51a",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e4b145c_6dd77cdc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-31T14:07:12Z",
      "side": 1,
      "message": "\u003e IIRC, this was only a small optimization as you can see in the relevant code review [1].\n\nBy the way, change 86814 (the review of I45f90deeba) isn\u0027t visible for me.\n\n\u003e @Alice: I remember from our discussion that I expressed concern about invalidating diff_summary cache (by changing its version) and thus forcing all entries to be computed again. I don\u0027t recall that I said something about that circular dependency.\n\nThat\u0027s where our email thread ended but I started with some questions including one about the line of code leading to this circular dependency. Anyway, I\u0027m happy that we remove that line of code. It will make my life easier when I restructure the caches.",
      "parentUuid": "742de7a3_727601a9",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}