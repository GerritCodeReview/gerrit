{
  "comments": [
    {
      "key": {
        "uuid": "7e3a8542_dcf39850",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-25T11:13:07Z",
      "side": 1,
      "message": "I understand why we need to remove this circular dependency. To be honest, I toyed with the idea of removing it some months ago (for other reasons) and asked Saša why we had it in the first place. He said that the main concern was the speed of reindexing of the whole site.\n\nMy plan was to get rid of this specialty when restructuring the diff caches (but to make sure that we wouldn\u0027t loose too much performance by choosing a better general structure).\n\nAll in all, I really like this circular dependency to be gone. I just wanted to point out that large Gerrit hosts which have a limited PatchList cache might see a negative impact on the speed of reindexing of the whole site.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "709735f1_2803d536",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-01-25T14:04:14Z",
      "side": 1,
      "message": "@Saša, As far as I know, removing the circular dependency should not prevent the reindexing from being fast. Reidexing would be slow if diff_summary is never populated but according to my testing, diff_summary is populated even if the line in diff_loader to populate diff_summary is removed.\n\nI just retested: an entry is loaded in the diff_summary as soon as Gerrit receive the commit and create the change/patchset. Reidexing a change is also getting/and or loading the entry from diff_summary.\n\nSo why do we need to populate diff_summary when getting a value from diff cache?",
      "parentUuid": "7e3a8542_dcf39850",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6311c77_a5280d83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T14:31:30Z",
      "side": 1,
      "message": "\u003e @Saša, As far as I know, removing the circular dependency should not prevent the reindexing from being fast. Reidexing would be slow if diff_summary is never populated but according to my testing, diff_summary is populated even if the line in diff_loader to populate diff_summary is removed.\n\u003e \n\u003e I just retested: an entry is loaded in the diff_summary as soon as Gerrit receive the commit and create the change/patchset. Reidexing a change is also getting/and or loading the entry from diff_summary.\n\nIf the diff_summary cache is always populated, then I think that satisfies the requirement for keeping a full reindex fast. But are we sure that it is a guarantee that diff_summary is populated, and not just an accident?",
      "parentUuid": "709735f1_2803d536",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3745bb7b_5826f51a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:11:47Z",
      "side": 1,
      "message": "\u003e But are we sure that it is a guarantee that diff_summary is populated, and not just an accident?\n\nI think it is a guarantee, given the current code. It is first populated when reindexing the new change, specifically via ChangeField#getFileParts which calls ChangeData#currentFilePaths. This always calls into PatchListCacheImpl#getDiffSummary.\n\nWhat I was worried about is if maybe #currentFilePaths had a fallback path where it looked for an already-loaded PatchListEntry and skipped #getDiffSummary if so. Then it wouldn\u0027t be a guarantee, it would be sensitive to the order in which ChangeData fields are lazily populated. But fortunately, that is not the case here.\n\nSo I think we are safe to proceed, unless Saša has more to add.",
      "parentUuid": "a6311c77_a5280d83",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 65,
        "endChar": 43
      },
      "revId": "b0eda5bab5980791637a9e8bf6c336f7d54a26eb",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}