{
  "comments": [
    {
      "key": {
        "uuid": "0c64d0c4_01c898c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-01T16:42:03Z",
      "side": 1,
      "message": "GroupsUpdate?",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 12
      },
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76bbd689_604ba3fd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-04T11:25:04Z",
      "side": 1,
      "message": "GroupsUpdate and GroupsOnInit are both correct here. The next time I\u0027ll update this change, I\u0027ll include both of them in this sentence.",
      "parentUuid": "0c64d0c4_01c898c8",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 12
      },
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f96316ca_1d21371c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-13T10:28:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76bbd689_604ba3fd",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 12
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "941b0841_d8650c58",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-01T16:42:03Z",
      "side": 1,
      "message": "IMO the clearest way to say \"give me the result or else throw a RuntimeException\" is \".get()\".\n\nI suppose the counterargument is that you have the opportunity with this exception message to provide slightly more useful information than a bare NoSuchElementException. But in this case, I don\u0027t see the added value of this exception message. A programmer will look at this line in the stack trace, where they will see \"auditLogFormatter.get()\". Seeing that line, I think pretty much any reader will be able to figure out that the problem is \"the AuditLogFormatter is necessary but missing\" without having to see an exception message that says exactly that.",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a07849e_a7b5148e",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-04T11:25:04Z",
      "side": 1,
      "message": "Calling Optional#get without Optional#isPresent is considered a programming error. I\u0027m willing (though reluctantly) to ignore that rule for tests but certainly not for production code. Apart from that general rule, I have further reasons why I think plainly calling Optional#get is not a good option here. Please tell me if you want/need to hear those.\n\nBy the way, I had considered to use a Precondition\u0027s check which calls Optional#isPresent in combination with Optional#get but found Optional#orElseThrow more elegant. If you like that variant more, I can change it.",
      "parentUuid": "941b0841_d8650c58",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46298e7b_db7fb725",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-12-14T11:33:21Z",
      "side": 1,
      "message": "Any thoughts on this? As mentioned, I can provide further reasons why I don\u0027t want to change it. You just need to ask for them. ;-)\n\nIf you don\u0027t agree with me, I am also willing to change it to a Precondition check.\n\nI just would like some feedback.",
      "parentUuid": "7a07849e_a7b5148e",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e7fc59_cb8c1322",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-18T14:55:58Z",
      "side": 1,
      "message": "I would like to hear both your specific and general reasons, for the edification of people reading this code review.\n\nI am fine with leaving the orElseThrow in, but I would slightly prefer if it were factored into a method with a name like requireAuditLogFormatter(), to reduce boilerplate and duplication of string constants. Unless you have additional reasons why that is bad idea.",
      "parentUuid": "46298e7b_db7fb725",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ccdf62a_d21387ea",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-09T17:04:50Z",
      "side": 1,
      "message": "Why I don\u0027t like to use Optional#get here:\n\n- Static code analyzers (e.g. IntelliJ inspections) which check for Optional#isPresent before Optional#get would complain. I find those checks very useful and wouldn\u0027t want to switch them off. To me, they have the same significance as checks which ensure that objects marked as nullable aren\u0027t accessed without null checks. Arguably, I could add a SuppressWarnings but that would never cover all code analyzers and is ugly compared to the alternatives.\n- Others (or myself in some years) might wonder why Optional#isPresent was forgotten. To increase readability (and avoid repeated cognitive effort), I would need to explain in the code why Optional#isPresent isn\u0027t necessary here. A comment would be an option. However, typically it\u0027s recommended to write the code in a way such that comments aren\u0027t necessary. So, a comment wouldn\u0027t be any better.\n- Whenever I need to access the value of an Optional, I spend some thoughts on which way is best. Only if I really need to use Optional#get (e.g. because there\u0027s a checked exception involved somewhere and hence Optional#map can\u0027t be used), I do so but always make sure to include Optional#isPresent. That\u0027s kind of an automatism. If I start to freely use Optional#get (without any pain attached), I worry that I develop bad habits. That might sound like a small issue but remember how sun.misc.Unsafe was never supposed to be used as widespread as it is nowadays. Its use got socially acceptable and hardly anybody spares a thought when using it (pre-Java-9).\n- Taking up the previous point, I always try to make the code as robust and resilient as possible. When code changes over time, I can\u0027t be sure that my original assumptions still hold. It\u0027s so easy to open up a new code path which executes the code in a slightly different way. Of course, tests should catch those cases but why not have an additional safety net. Why not design a class/method in such a way that it is hard to use it wrong or to break it? One could argue that we would like to generate exceptions and thus get informed about the system not behaving as we would like to. However, I think that we don\u0027t want to run into such situations with production code. In my opinion, production systems should behave as gracefully as possible provided they can still work correctly. Whether a class works as expected should be ensured by tests. So, if possible, I try to use Optional#ifPresent or Optional#orElseGet. In this case, I originally didn\u0027t go that way because I didn\u0027t know how to deal with an unknown serverId (which is necessary for the AuditLogFormatter). In the meantime, I changed my opinion and created I5466e586ee. I can squash it into this change if you prefer that.",
      "parentUuid": "43e7fc59_cb8c1322",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "905bd991_d24e169e",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-01-17T08:57:07Z",
      "side": 1,
      "message": "I finally found the comment from Brian Goetz which I had in mind all along. It\u0027s the last part in the brackets of http://stackoverflow.com/a/26328555/1487809.",
      "parentUuid": "8ccdf62a_d21387ea",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088328f8_905bc8b0",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:58:35Z",
      "side": 1,
      "message": "I think this is independent of the more general discussion we were having: is there a reason you would prefer not to have a private helper method that returns auditLogFormatter.orElseThrow(...)? I still don\u0027t especially like hard-coding this string twice.\n\nDoesn\u0027t need to block this change, though.",
      "range": {
        "startLine": 372,
        "startChar": 8,
        "endLine": 373,
        "endChar": 90
      },
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "423a6c45_e1deb01f",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:58:35Z",
      "side": 1,
      "message": "Thank you for the detailed explanations. The arguments about static analyzers and developing good habits are quite convincing.\n\nI do want to mention one point here:\n\n\u003e Of course, tests should catch those cases but why not have an additional safety net.\n\nOne reason to not have an additional safety net is if the safety net code contains significant complexity that is never exercised, because it\u0027s by definition in a branch of the code that is covered by tests. Given the choice between complex-but-untested fallback code and throwing ISE or similar, I would argue for throwing the exception. If we are writing complex fallbacks, those should at least be unit tested in isolation.\n\nI don\u0027t want to mischaracterize what you\u0027re saying here; I certainly don\u0027t think you\u0027re arguing in favor of writing complex, untested code, and I don\u0027t think you\u0027ve done that in this change. But I do think that this caveat needs to be mentioned in this discussion, given the likelihood that we will refer back to this thread later.\n\nOf course, there is still the question of what constitutes \"significant complexity\", which should be decided on a case-by-case basis. Concretely, I agree that your fallback AuditLogFormatter[1] is not complex enough to require a unit test, and for that reason I am totally fine with this change as-is.\n\n\u003e In the meantime, I changed my opinion and created I5466e586ee. I can squash it into this change if you prefer that.\n\nNo need to squash, I will go review that now.\n\n\n\u003e I finally found the comment from Brian Goetz which I had in mind all along. It\u0027s the last part in the brackets of http://stackoverflow.com/a/26328555/1487809.\n\nThis is a complete digression, but the opening part of the comment (not the part you\u0027re referencing) rings rather hollow to me:\n\n\"Of course, people will do what they want. But we did have a clear intention when adding this feature, and it was not to be a general purpose Maybe or Some type, as much as many people would have liked us to do so.\"\n\nIt sounds like what he is saying is: people wanted a Maybe type, and we designed a thing that looks an awful lot like a Maybe type, but we didn\u0027t intend it to actually *be* one. And then he acts surprised that people are using it like a Maybe type instead of like the thing that they intended. Come on, you coulda seen that one coming.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/146010/3/java/com/google/gerrit/server/schema/SchemaCreator.java#244",
      "parentUuid": "905bd991_d24e169e",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "180ee016_c921a94d",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 373,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T16:05:37Z",
      "side": 1,
      "message": "I would like to add one more argument against using plain .get():\n\n* Checking isPresent() before calling get() is exactly analogous to checking !\u003d null before dereferencing a pointer. I would probably never make the argument, \"Just dereference the pointer, and the NPE will indicate the programmer error\", so why would I make that argument for Optionals?\n\nAnd of course the arguments against \"just let it NPE\" are pretty much exactly the same ones you presented: static analysis, indicating programmer intent, developing good habits, etc.",
      "parentUuid": "423a6c45_e1deb01f",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40670414_afbff932",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-12-01T16:42:03Z",
      "side": 1,
      "message": "Same comment as above.",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621aad34_4241083e",
        "filename": "java/com/google/gerrit/server/group/db/GroupConfig.java",
        "patchSetId": 1
      },
      "lineNbr": 391,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:58:35Z",
      "side": 1,
      "message": "Resolved",
      "parentUuid": "40670414_afbff932",
      "revId": "b1776a89bf88cec828dc608f4e5858e1b1d901db",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}