{
  "comments": [
    {
      "key": {
        "uuid": "43d37948_7521486d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Could be just:\n\n  ObjectId newTree \u003d new TreeModifier(prevEdit.getTree()).apply(repository, modification);",
      "range": {
        "startLine": 341,
        "startChar": 6,
        "endLine": 343,
        "endChar": 65
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_56f3f4b7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/ChangeEditModifier.java",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "It could but I think that is more difficult to read and understand. Right now, the code tells the reader what it does. Another good alternative I see would be:\n\n TreeCreator.baseOn(prefEdit.getTree()).modifyBy(modification).createTree();\n\nProviding such a fluent API might be nice but I don\u0027t think the boilerplate code for the builder objects is worth it for this single usage.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_b5548036",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/DeleteFileModification.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-16T15:33:16Z",
      "side": 1,
      "message": "tiny and optional nit: replace necessary with required\n\nrequired is used 73 times in the code\nnecessary only 23 times",
      "range": {
        "startLine": 36,
        "startChar": 42,
        "endLine": 36,
        "endChar": 51
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_35407063",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/DeleteFileModification.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-16T16:18:40Z",
      "side": 1,
      "message": "I am not a native speaker but \u0027required\u0027 doesn\u0027t sound correct to me in this context. Those PathEdits aren\u0027t required because of some rules or regulations. They are just necessary to achieve the desired result. Of course, I might be wrong on that.\n\nIn general, I agree that we should have consistent names. However, this adjective isn\u0027t something which qualifies as a \u0027name\u0027 for me. For this reason, I wouldn\u0027t base a decision on the number of times it occurs in the code.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c9819c_13b0ecc7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/DeleteFileModification.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-16T23:54:03Z",
      "side": 1,
      "message": "How about just \u0027getPathEdits\u0027?",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_958aa46f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/DeleteFileModification.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-17T07:19:50Z",
      "side": 1,
      "message": "+1",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_1691fc70",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/DeleteFileModification.java",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T10:09:27Z",
      "side": 1,
      "message": "Done",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_35d63033",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "I think TreeModifier better reflects what it\u0027s done with Git tree in the context of Change Edit. We always operate on existing tree, that represents base watch set. In this directory all other names have modify/modification in its name. It was also extracted from ChangeEditModifier class.",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 24
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c9819c_935f5c82",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-17T11:00:51Z",
      "side": 1,
      "message": "\u003e We always operate on existing tree, that represents base watch set\n\nIs it not possible to create an edit on an empty repository, i.e. created without initial empty commit.",
      "range": {
        "startLine": 37,
        "startChar": 13,
        "endLine": 37,
        "endChar": 24
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_96e06cdc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 37,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "When I created the class, I called it TreeModifier. Later on, I decided to rename it because the main purpose of this class is the creation of a new tree object (and its addition to the repository). \u0027Modifier\u0027 sounds to me as if you just modify an existing tree (in place) without creating something new. I also thought about going with \u0027ModifiedTreeCreator\u0027 but found it too long.\n\nBy the way, the class could probably easily be adjusted to support the creation of trees without specifying a base tree (and hence not be a modifier). We don\u0027t need it at the moment and that\u0027s why I haven\u0027t implemented it but why limit the idea of the class?\n\nRegarding the empty repository: Change edits are always based on the patch set of a change. Even if the repository doesn\u0027t have an initial empty commit, the patch set will have it.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_f6856032",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Why the list of modifications? We only need one single modification, that can contains multiple path edits. Sounds like a YAGNI to me.",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 78
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_f5c8b85c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "I know that we\u0027ll need it. ;-)\nAs soon as we want to support the \u0027Apply fix\u0027 feature and allow fixes to modify several files, we\u0027ll have several tree modifications. It\u0027s one of the reasons why I started this refactoring.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_55a1ac93",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-18T09:01:57Z",
      "side": 1,
      "message": "| I know that we\u0027ll need it. ;-)\n\nNice ;-)\n\nThis project uses code review and reviewers of your changes may or ma not have the whole context and if you are doing something that is not obvious, like here, refactoring existing behavior, that only needs one single modification instance by extending it to use a list for different use cases that is not yet implemented, .... At very least I would expect a comment, or, what I would even prefer is to not use a List until it\u0027s actually needed. There is a couple of line of code that need to be adjusted.\n\nAnd to document that this list is abused in this commit you could say:\n\n  private final List\u003cTreeModification\u003e treeModifications \u003d new LinkedList\u003c\u003e(1);",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3884975_d1db6400",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-18T09:36:12Z",
      "side": 1,
      "message": "I just had a longer offline discussion with Alice. While I see your arguments, let\u0027s keep the list for now. In one of her upcoming changes, she will need this behavior and doing the refactoring upfront should prepare for that.\nI know that technically this could be done in a change series, but this is already a lot of code and keeping a long/large series current is very time consuming.\nThe list doesn\u0027t hurt any existing behavior and abusing it would require that the abusive change get\u0027s code-reviewed which we can all make sure doesn\u0027t happen :)",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_9684ec33",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Arguably, it\u0027s no needed to be an instance of this class. createNewTreeAndGetId() could be extended with new parameter: modification.",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 57,
        "endChar": 3
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_f5af9885",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Using this reasoning, why should the base tree remain a constructor parameter? We could combine everything in one static method. Consequently, this class should be just a utility helper class.\n\nI thought about that when refactoring the code and decided that I didn\u0027t want to have just another utility class. Stateless code is great when writing functional code but I don\u0027t think we should neglect all OO principles. The benefit I saw by using OO principles here is that other code parts which use this class clearly outline what is done which is:\n1. Take the specified tree as basis.\n2. Apply some modifications to it.\n3. Create a new tree object.\nOther developers who read the code hence can directly understand what happens instead of taking a look at the implementation or documentation.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_36d63833",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Just modify or apply?",
      "range": {
        "startLine": 68,
        "startChar": 18,
        "endLine": 68,
        "endChar": 39
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_b5a92083",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Using \u0027modify\u0027 on a Java object would imply for me that this Java object or some internals are modified. That\u0027s not the behavior of this method, though. \u0027apply\u0027 might be better but I\u0027m not really happy with it. This class isn\u0027t just an implementation of a command or action which can be applied. To me, \u0027apply\u0027 is a bit meaningless and doesn\u0027t convey the meaning that something is created. If your concern is that the method name is too long, I can abbreviate it to \u0027createNewTree\u0027 or \u0027createTree\u0027. I only added the last part because the method doesn\u0027t return a RevTree which I would expect from the name but I\u0027d rather remove that part than change the name into something meaningless.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_f65e80f8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "To avoid abuse of this class, and bother to check the pre condition, that treeModification was actually set, just pass it in. Then the caller would be a one liner:\n\n  return new TreeModifier(baseTree).apply(repository, modification);",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_d5b49cdc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Please see my remark above.\n\nBesides, I don\u0027t think that we need to prevent an abuse of this class. If no tree modification was specified, the resulting tree will be the base tree. If we were concerned about performance for this unused edge case, we could introduce a shortcut. However, I don\u0027t think that\u0027s necessary at the moment.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_966d0cae",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Can be inlined as it\u0027s only, used here.",
      "range": {
        "startLine": 77,
        "startChar": 28,
        "endLine": 77,
        "endChar": 37
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_550c0cf1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "I could inline it but I rather write code which can be read like a story from top to bottom.",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_56d9b462",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Just getPathEdits().",
      "range": {
        "startLine": 92,
        "startChar": 40,
        "endLine": 92,
        "endChar": 59
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_3542b0fd",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Done",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_75dca854",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 96,
        "startChar": 40,
        "endLine": 96,
        "endChar": 61
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_362bd84f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Done",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_56709482",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "static",
      "range": {
        "startLine": 101,
        "startChar": 2,
        "endLine": 101,
        "endChar": 9
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_d65824f6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Done. I know that there have been long discussions on the web whether private helper methods without instance variables should be static or not. Up to now, I see more advantages to not have them static. What are your reasons for preferring static methods?",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3884975_3199905a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-18T09:01:57Z",
      "side": 1,
      "message": "| What are your reasons for preferring static methods?\n\nNumber of reasons:\n\n* Depending on JVM implementation memory and time savings for static methods that are called very often could be measurable. Different byte code instruction is generated by the compiler (invokestatic : [1] vs. invokevirtual : [2]), \"this\" slot is missing, and virtual table lookup can be eliminated, as static methods cannot be overridden \n* Static methods can be invoked without creating an instance of the class\n* (and the most important reason for me) style used in this project: we prefer to mark class methods that do not access to the instance variables and thus the state as stateless by using the static modifier. I see that in dev-contrubting.txt this rule isn\u0027t mentioned. We should fix that.\n\n* [1] https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokestatic\n* [2] https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5.invokevirtual",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_75738891",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "private static",
      "range": {
        "startLine": 108,
        "startChar": 2,
        "endLine": 108,
        "endChar": 9
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_55708c82",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T10:00:29Z",
      "side": 1,
      "message": "I would rather swap the order of vars so that Repository is the first one.",
      "range": {
        "startLine": 108,
        "startChar": 33,
        "endLine": 108,
        "endChar": 69
      },
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_153fb483",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/edit/tree/TreeCreator.java",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-17T13:42:14Z",
      "side": 1,
      "message": "Done",
      "revId": "b43f7f89b9a0047c3a2035ccff38220978a23dd3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}