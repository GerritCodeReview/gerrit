{
  "comments": [
    {
      "key": {
        "uuid": "8952d8f6_fee50345",
        "filename": "polygerrit-ui/app/elements/plugins/gr-endpoint-decorator/gr-endpoint-decorator.js",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1023698
      },
      "writtenOn": "2017-12-08T23:09:24Z",
      "side": 0,
      "message": "Previously, the timeout would be queued even if this promise loses the race, so we\u0027d always log a \"timeout\" warning even if all the properties were set very quickly.\n\nThis proposed change makes it so that the timeout is queued and rejects with a message, but then if it lost the race, that rejection value is never used and never logged.",
      "revId": "b5688c67ba4972f6f714e526e06b0e7d09e55211",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "597d6593_c5698a40",
        "filename": "polygerrit-ui/app/elements/plugins/gr-endpoint-decorator/gr-endpoint-decorator.js",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-12-08T23:39:06Z",
      "side": 0,
      "message": "Good catch! \n\nI\u0027m clearly overthinking this, but in theory what if some other kind of error would be masked by the .catch()? Maybe, a bit more robust approach would be to clear timeout?\n\n      let timeoutId;\n      const timeout \u003d new Promise(\n        resolve \u003d\u003e timeoutId \u003d setTimeout(() \u003d\u003e {\n          console.warn(\n              \u0027Timeout waiting for endpoint properties initialization.\u0027 +\n              `plugin ${plugin.getPluginName()}, endpoint ${this.name}`);\n          resolve();\n        }, INIT_PROPERTIES_TIMEOUT_MS));\n      return Promise.race([timeout, Promise.all(expectProperties)])\n          .then(() \u003d\u003e {\n            clearTimeout(timeoutId);\n            return el;\n          });",
      "parentUuid": "8952d8f6_fee50345",
      "revId": "b5688c67ba4972f6f714e526e06b0e7d09e55211",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0019a8b_ffbae8a7",
        "filename": "polygerrit-ui/app/elements/plugins/gr-endpoint-decorator/gr-endpoint-decorator.js",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1023698
      },
      "writtenOn": "2017-12-08T23:57:46Z",
      "side": 0,
      "message": "I like that way as well... now changed.\n\nFor my understanding: if an exception is thrown anywhere in any of the promises, then the callback passed to catch will be invoked with the exception value and the exception will stop going up the call stack.\n\nIn general, the catch method of promises serves to both handle exceptions and rejections. Right?",
      "parentUuid": "597d6593_c5698a40",
      "revId": "b5688c67ba4972f6f714e526e06b0e7d09e55211",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8402b51d_b0c1d4ba",
        "filename": "polygerrit-ui/app/elements/plugins/gr-endpoint-decorator/gr-endpoint-decorator.js",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-12-09T06:04:26Z",
      "side": 0,
      "message": "Yes, but there are edge cases.\n\nhttps://stackoverflow.com/questions/33445415/javascript-promises-reject-vs-throw\n\nThanks for putting this together!",
      "parentUuid": "f0019a8b_ffbae8a7",
      "revId": "b5688c67ba4972f6f714e526e06b0e7d09e55211",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}