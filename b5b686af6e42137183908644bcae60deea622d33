{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "93207aa2_acb7fb11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-06-16T00:21:14Z",
      "side": 1,
      "message": "No formatting changes detected and passes `bazel build release \u0026\u0026 bazel test //...`",
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9c44b14_fb96a5e8",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-19T10:16:36Z",
      "side": 1,
      "message": "Instead of having this cache delegate to the searching changecacheimpl, can we implement both against an interface and use bindings to determine what is used instead?\n\nThe existing SearchingChangeCache module would make that easy already since it binds the implementation to `null` in secondaries.\n\nThe benchmark you posted means for primaries, this change is a no-op (besides making the logic more complex). For secondaries, it\u0027s a performance improvement, so I think it would be a win overall to just bind a different SearchingChangeCache in the replica.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56ad1a25_864e6132",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-06-20T18:11:16Z",
      "side": 1,
      "message": "\u003e Instead of having this cache delegate to the searching changecacheimpl, can we implement both against an interface and use bindings to determine what is used instead?\n\nI think that would make sense if we were not calling one from the other on primaries, and as I will explain below, I think we still want to do that.\n\n\u003e The benchmark you posted means for primaries, this change is a no-op (besides making the logic more complex). \n\nThis is not accurate. We are seeing good improvements on primaries. The \"ideal\" primary numbers measured are not easy to achieve in practice, some of the reasons are described in the CM: \n\n\"Although the numbers above do not show an improvement on \"best\" times\nfor primaries using ES, that\u0027s because those numbers represent the times\nachieved with the existing \"changes\" cache enabled. However, since the\nexisting \"changes\" cache is disabled by default, most sites will see an\nimprovement after this change with \u0027git upload-pack\u0027 on primaries also,\nand additionally with \u0027git receive-pack\u0027. Thus the warm times after this\nchange are more achievable and more likely to stay fast, even when other\nprojects are accessed in between. Before this change it is harder to\nachieve and maintain the warm times.\"\n\nAnother reason is also explained in the next paragraph about memory consumption, the \"changes\" cache likely consumes too much memory for larger sites to be useful (i.e. either the limit will be set too low to be useful, or if raised, it will consume too much). So I probably \"undersold\" this new cache a bit on primaries since it is very useful on primaries, and we definitely want it enabled there also.",
      "parentUuid": "d9c44b14_fb96a5e8",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4929fa58_f1f90b9b",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-06-20T19:07:26Z",
      "side": 1,
      "message": "\u003e \u003e Instead of having this cache delegate to the searching changecacheimpl, can we implement both against an interface and use bindings to determine what is used instead?\n\u003e \n\u003e I think that would make sense if we were not calling one from the other on primaries, and as I will explain below, I think we still want to do that.\n\u003e \n\u003e \u003e The benchmark you posted means for primaries, this change is a no-op (besides making the logic more complex). \n\u003e \n\u003e This is not accurate. We are seeing good improvements on primaries. The \"ideal\" primary numbers measured are not easy to achieve in practice, some of the reasons are described in the CM: \n\u003e \n\u003e \"Although the numbers above do not show an improvement on \"best\" times\n\u003e for primaries using ES, that\u0027s because those numbers represent the times\n\u003e achieved with the existing \"changes\" cache enabled. However, since the\n\u003e existing \"changes\" cache is disabled by default, most sites will see an\n\u003e improvement after this change with \u0027git upload-pack\u0027 on primaries also,\n\u003e and additionally with \u0027git receive-pack\u0027. Thus the warm times after this\n\u003e change are more achievable and more likely to stay fast, even when other\n\u003e projects are accessed in between. Before this change it is harder to\n\u003e achieve and maintain the warm times.\"\n\nThat is useful information, can you share some updated stats on the primary\nimprovements when the \"changes\" cache is disabled?\n\nWe may also consider to discontinue the \"changes\" change IMHO, I also have concerns about it, because of the fact of being expensive to compute and very likely to become stale and needing expensive reloading, especially for large mono-repos with tons of changes.\n\nWhat is the point of having a _bad_ and a _good_ cache for the same purpose? @Patrick do you guys have the \"changes\" cache enabled?",
      "parentUuid": "56ad1a25_864e6132",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e313962b_530307a4",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-06-20T19:28:37Z",
      "side": 1,
      "message": "\u003e That is useful information, can you share some updated stats on the primary\n\u003e improvements when the \"changes\" cache is disabled?\n\nFrom my testing, if the cache is disabled it returns to the cold times ~1m3s, instead of the warm times. It is mostly inconsistent when enabled, then with back to back tests on the same project, warm times can be achieved, but if other projects are exercised in between, then the warm times become inconsistent without necessarily returning all the way to the cold times.\n\n\u003e We may also consider to discontinue the \"changes\" change IMHO, I also have concerns about it, because of the fact of being expensive to compute and very likely to become stale and needing expensive reloading, especially for large mono-repos with tons of changes.\n\nAgreed. I am open to either direction here, and since it is a change for a stable branch I left the old cache in place to start, but I would gladly kill it if that is the what people want. We could also leave it and decide what to do with it once it gets upmerged more.\n\n\u003eWhat is the point of having a bad and a good cache for the same purpose? @Patrick do you guys have the \"changes\" cache enabled?\n\nMaybe it doesn\u0027t matter on \u0027stable-3.5\u0027 since google is running \u0027master\u0027 anyway, but since google is running multi-primary, it could be problematic if they are using it.",
      "parentUuid": "4929fa58_f1f90b9b",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4194d74e_033fc815",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "We are using \u0027changes\u0027 in multi primary and propagate evictions on ref update events. It reduces the number of requests we put onto our index by double-digit percent. I\u0027ve added more details and comments on the respective code parts.",
      "parentUuid": "e313962b_530307a4",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae76be1_3395e211",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 46,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "I have implemented the cache interface and am using injection bindings now. It should be easy to remove the old cache now if we choose to do so.",
      "parentUuid": "4194d74e_033fc815",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 76
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47a6c8d1_3ed25378",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "nit: naming is confusing. We have a ProjectCache that caches project details and configs.",
      "range": {
        "startLine": 68,
        "startChar": 48,
        "endLine": 68,
        "endChar": 60
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cfff6b4_820283a8",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47a6c8d1_3ed25378",
      "range": {
        "startLine": 68,
        "startChar": 48,
        "endLine": 68,
        "endChar": 60
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "489c8404_bae7681e",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "We have repos with 1+ M changes.\n\nThis logic will logic will scan all of their refs and parse change IDs. In the case where the changes cache exists, this is unnecessary because we\u0027ll only further populate the most recent 10k items.\n\nI suggest to deprecate the changes cache. Use the loading logic of the changes cache here in case the index is available (but don\u0027t load all change IDs first in that case because it\u0027s superflous).\n\nIn our deployment, we\u0027d rather not do incremental updates to the cache state because a full reload is just 30ms, but you can. If the class exposes an \u0027evict(Project.NameKey)\u0027 that\u0027d work for us, though.",
      "range": {
        "startLine": 78,
        "startChar": 70,
        "endLine": 78,
        "endChar": 87
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77a41323_70895c35",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "489c8404_bae7681e",
      "range": {
        "startLine": 78,
        "startChar": 70,
        "endLine": 78,
        "endChar": 87
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49d89781_e9632e2e",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 133,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "d",
      "range": {
        "startLine": 133,
        "startChar": 63,
        "endLine": 133,
        "endChar": 69
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5590a4fb_fa5b4010",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 133,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49d89781_e9632e2e",
      "range": {
        "startLine": 133,
        "startChar": 63,
        "endLine": 133,
        "endChar": 69
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8406542d_ff44e216",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "ChangeData is not thread-safe and mutable. Storing it this way might create races and leak information between requests. That\u0027s why SearchingChangeCache keeps a CachedChange autovalue instead.",
      "range": {
        "startLine": 135,
        "startChar": 19,
        "endLine": 135,
        "endChar": 29
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16be94ef_a376ffe2",
        "filename": "java/com/google/gerrit/server/git/ChangesByProjectCache.java",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "Yikes, good find, thanks! Done",
      "parentUuid": "8406542d_ff44e216",
      "range": {
        "startLine": 135,
        "startChar": 19,
        "endLine": 135,
        "endChar": 29
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a49f34e8_414a7299",
        "filename": "java/com/google/gerrit/server/query/change/ChangeData.java",
        "patchSetId": 5
      },
      "lineNbr": 561,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-06-22T12:59:42Z",
      "side": 1,
      "message": "Public is misleading because the change is not necessarily public. It might be protected by branch permissions (here and in other classes).\n\nI think this is should be changed because otherwise future implementations might see this and assume the change is really \"public\" and don\u0027t check any permissions on it.",
      "range": {
        "startLine": 561,
        "startChar": 19,
        "endLine": 561,
        "endChar": 25
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c4ff1b3_c3749363",
        "filename": "java/com/google/gerrit/server/query/change/ChangeData.java",
        "patchSetId": 5
      },
      "lineNbr": 561,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-08-09T16:22:30Z",
      "side": 1,
      "message": "All good points. Done.",
      "parentUuid": "a49f34e8_414a7299",
      "range": {
        "startLine": 561,
        "startChar": 19,
        "endLine": 561,
        "endChar": 25
      },
      "revId": "b5b686af6e42137183908644bcae60deea622d33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}