{
  "comments": [
    {
      "key": {
        "uuid": "ec61b3c4_13d99643",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-10-11T05:46:12Z",
      "side": 1,
      "message": "This won\u0027t work. \"git archive\" and \"jgit archive\" output are not guaranteed stable over time, because there can be bug fixes.\n\nIf we\u0027re using http_archive, we need a stable archive, or in other words a static file.\n\nCan we make it grab the code from a Git repo instead?",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a14a9ad_c2674e29",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-10-11T05:49:51Z",
      "side": 1,
      "message": "We can\u0027t make it build jgit from source that way because bazel doesn\u0027t like having nested WORKSPACE files.  I think there was a discussion about this somewhere earlier.",
      "parentUuid": "ec61b3c4_13d99643",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cd4297e_d1a72976",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-10-11T06:05:23Z",
      "side": 1,
      "message": "\u003e This won\u0027t work. \"git archive\" and \"jgit archive\" output are not guaranteed stable over time, because there can be bug fixes.\n\u003e \n\u003e If we\u0027re using http_archive, we need a stable archive, or in other words a static file.\n\nWhy it works for years for us fetching from GitHub and there are no bugs? Are GitHub/Microsoft software engineers better qualified then we are to release error free software? The unit and integration tests were invented in the software development process to avoid regression, weren\u0027t they?\n\n  $ wget https://github.com/davido/gerrit-oauth-provider/archive/0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz\n  $ sha256sum 0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz\naee6cae95aae2b824c780ba3a5ab587f1967d989a37872eb08debf1d71bf4f4c  0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz\n\nThen repeat the command sequence again:\n\n  $ wget https://github.com/davido/gerrit-oauth-provider/archive/0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz\n  [...]\n  Saving to: ‘0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz.1’\n  $ sha256sum 0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz.1\naee6cae95aae2b824c780ba3a5ab587f1967d989a37872eb08debf1d71bf4f4c  0f807f680d3b204e0d376b473d8a84076a67f138.tar.gz.1\n\nIf JGit archive command would have 100% test coverage and would work today as expected (after Matthias Sohn fixed this long standing bug recently, see: [1], [2], [3]), how can it be that it would break tomorrow again?\n\nAnd even if it would break, what damage can that breakage cause?! It would produce non-stable SHA1 and the fetch fail, wouldn\u0027t it?\n\nBottom line: If JGit project members are not confident in the quality of JGit  code, they should spend more time on writing tests.\n\n* [1] https://github.com/google/gitiles/issues/84\n* [2] https://bugs.eclipse.org/bugs/show_bug.cgi?id\u003d548312\n* [3] https://git.eclipse.org/r/#/c/144172/",
      "parentUuid": "ec61b3c4_13d99643",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b7555fc_eb9bed07",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-10-11T06:11:05Z",
      "side": 1,
      "message": "\u003e Are GitHub/Microsoft software engineers better qualified then we are to release error free software?\n\nSheesh, that\u0027s rude.\n\nWhat I\u0027m saying is that neither \"git archive\" nor \"jgit archive\" *intends* to produce output that is 100% stable over time. Archive formats change. Compressors change. The implementation changes.\n\nGitHub\u0027s releases feature literally stores the archive as a static file. You can do the same thing here by storing the static file in a cloud storage bucket.",
      "parentUuid": "5cd4297e_d1a72976",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0476cd68_e53c06e9",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-10-11T06:13:58Z",
      "side": 1,
      "message": "For more information on this topic, see the implementation of pristine-tar \u003chttps://joeyh.name/code/pristine-tar/\u003e. It has multiple versions of gzip embedded in its source code because that was the only way to reproduce historic tgz output.\n\n \u003e And even if it would break, what damage can that breakage cause?! It would produce non-stable SHA1 and the fetch fail, wouldn\u0027t it?\n\nYes, it would break the ability to check out old versions of Gerrit and rebuild them, which is an ability I rely on (for example for bisecting).",
      "parentUuid": "8b7555fc_eb9bed07",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9fb30f2_3fc9c632",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-10-11T06:17:17Z",
      "side": 1,
      "message": "That\u0027s not what this feature is trying to achieve. See discussion with Luca. The idea is to upload a JGit change to https://git.eclipse.org/r/ and upload another gerrit change to googlesource.com that depends on the JGit change, e.g.: API change in JGit, that is adapted in gerrit change.",
      "parentUuid": "8b7555fc_eb9bed07",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9efddd6_381782de",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-10-11T06:21:31Z",
      "side": 1,
      "message": "\u003e The idea is to upload a JGit change to https://git.eclipse.org/r/ and upload another gerrit change to googlesource.com that depends on the JGit change, e.g.: API change in JGit, that is adapted in gerrit change.\n\nYes, I agree with that goal.\n\nJust, if you want to use a stable archive URL (like you are doing here), please use static file storage for it. Implementing the JGit feature request you linked to will not make git.eclipse.org into static file storage.\n\nThis change in its current form produces a codebase that works today and would stop working when the compressed bytestream for the archive changes. That is what I am saying needs to be fixed. Some ways to do that would be (a) using a Git repository instead of http_archive or (b) using static file hosting.",
      "parentUuid": "d9fb30f2_3fc9c632",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c19ac930_a894012f",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-10-11T06:35:54Z",
      "side": 1,
      "message": "\u003e This change in its current form produces a codebase that works today and would stop working when the compressed bytestream for the archive changes.\n\nThe patch set 19 is fetching from: https://github.com/eclipse/jgit/archive/\u003csha1\u003e.tar.gz.\n\nThat\u0027s not a GitHub release but just an arbitrary commit. If it is not stable, then we should have rejected also other changes, like this one: [1], that was recently merged. However, if:\n\n  http_archive(\n      name \u003d \"io_bazel_rules_closure\",\n      sha256 \u003d \"eecd37c0eec79e12652c70f2d2e120623cba64616d759ddcedb19e614df618fa\",\n      strip_prefix \u003d \"rules_closure-d53c0d7755426349d3c443eea4aeedbda27a11be\",\n      urls \u003d [ \"https://github.com/bazelbuild/rules_closure/archive/d53c0d7755426349d3c443eea4aeedbda27a11be.tar.gz\"],\n  )\n\nwould always produce stable SHA1, why would what this change is doing wouldn\u0027t:\n\n  http_archive(\n      name \u003d \"jgit\",\n      strip_prefix \u003d \"jgit-\" + _JGIT_VERS,\n      sha256 \u003d _JGIT_SHA256,\n      urls \u003d [\n          \"https://github.com/eclipse/jgit/archive/\" + _JGIT_VERS + \".tar.gz\",\n      ],\n  )\n\nIOW, If I would remove this TODO comment we would be fine? \n\n* [1] https://gerrit-review.googlesource.com/c/gerrit/+/239935",
      "parentUuid": "c9efddd6_381782de",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a7f8aa8_0ab962d0",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2019-10-11T06:40:17Z",
      "side": 1,
      "message": "\u003e IOW, If I would remove this TODO comment we would be fine? \n\nYes, since github permanently \"caches\" archives, it would be fine.\n\nI\u0027d rather we used a rule that just uses the commit sha1 instead of caring about the bytestream of the tarball, but that\u0027s orthogonal to this change.",
      "parentUuid": "c19ac930_a894012f",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b09f44a_00f81093",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-10-11T07:03:30Z",
      "side": 1,
      "message": "\u003e \u003e IOW, If I would remove this TODO comment we would be fine? \n\u003e \n\u003e Yes, since github permanently \"caches\" archives, it would be fine.\n\u003e \n\u003e I\u0027d rather we used a rule that just uses the commit sha1 instead of caring about the bytestream of the tarball, but that\u0027s orthogonal to this change.\n\nIs this a show-stopper for getting this change merged? As DavidO pointed out, this isn\u0027t the first time we refer to SHA1s archives from GitHub.\n\nI agree that isn\u0027t ideal and we should get it fixed, however it shouldn\u0027t stop this change getting merged.",
      "parentUuid": "0a7f8aa8_0ab962d0",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1975dd96_13f5077f",
        "filename": "lib/jgit/jgit.bzl",
        "patchSetId": 19
      },
      "lineNbr": 22,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-10-11T07:09:21Z",
      "side": 1,
      "message": "I replaced from fetching using git archive command to git fetch for specific commit. I also added a comment to avoid that someone else change it to use http_archive again. Done.\n\n@Luca would it also simplify the setup to depend in Gerrit on non-merged JGit changes? We should immediately support this now, without any replication of non merged changes from eclipse.org to GitHub, right?",
      "parentUuid": "4b09f44a_00f81093",
      "revId": "b68bd8d5a3f0b8fde97f541d39e10888ffdde3b9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}