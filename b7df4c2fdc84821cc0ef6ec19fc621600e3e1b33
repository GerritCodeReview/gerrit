{
  "comments": [
    {
      "key": {
        "uuid": "7cbfe0de_5791acea",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 11
      },
      "lineNbr": 201,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2015-02-10T07:22:39Z",
      "side": 1,
      "message": "I see that this tests the current behaviour, but is it the behaviour that we actually want? I would rather expect that cherry-pick is a no-op if the cherry-picked commit is already based on the destination branch.",
      "range": {
        "startLine": 186,
        "startChar": 2,
        "endLine": 201,
        "endChar": 3
      },
      "revId": "b7df4c2fdc84821cc0ef6ec19fc621600e3e1b33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9cbad4ec_98dad5a0",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 11
      },
      "lineNbr": 201,
      "author": {
        "id": 1010516
      },
      "writtenOn": "2015-02-10T07:24:20Z",
      "side": 1,
      "message": "Why? It is useful for picking a commit out of its dependencies and rebase it on the destination branch.",
      "parentUuid": "7cbfe0de_5791acea",
      "range": {
        "startLine": 186,
        "startChar": 2,
        "endLine": 201,
        "endChar": 3
      },
      "revId": "b7df4c2fdc84821cc0ef6ec19fc621600e3e1b33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cbfe0de_179b340b",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 11
      },
      "lineNbr": 201,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2015-02-10T07:29:02Z",
      "side": 1,
      "message": "Yes, this makes sense and this is what the test below in line 204 is testing.\n\nIf I read this test here correctly the second patch set has exactly the same parent and diff as the first patch set. What is the use of the second patch set in this case? I think cherry-pick should recognize this situation and just do nothing.",
      "parentUuid": "9cbad4ec_98dad5a0",
      "range": {
        "startLine": 186,
        "startChar": 2,
        "endLine": 201,
        "endChar": 3
      },
      "revId": "b7df4c2fdc84821cc0ef6ec19fc621600e3e1b33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cbfe0de_777dd002",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/api/revision/RevisionIT.java",
        "patchSetId": 11
      },
      "lineNbr": 201,
      "author": {
        "id": 1010516
      },
      "writtenOn": "2015-02-10T07:30:35Z",
      "side": 1,
      "message": "Oh, sorry. I misread it.\n\nHere cherry-pick is effectively used to edit the commit message :)",
      "parentUuid": "7cbfe0de_179b340b",
      "range": {
        "startLine": 186,
        "startChar": 2,
        "endLine": 201,
        "endChar": 3
      },
      "revId": "b7df4c2fdc84821cc0ef6ec19fc621600e3e1b33",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}