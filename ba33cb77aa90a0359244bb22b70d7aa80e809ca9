{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "24b99293_a7253498",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2022-05-05T09:53:26Z",
      "side": 1,
      "message": "Thanks for great explanation!",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 29,
        "endChar": 0
      },
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b80a0826_0803e870",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2022-05-05T10:44:45Z",
      "side": 1,
      "message": "Sorry for the breakage, and thanks for the fix. I agree with the general analysis and direction, but I found two cases that do not seem ideal yet (though we may decide to fix them as a follow up).",
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c955077e_c23944f8",
        "filename": "polygerrit-ui/app/embed/diff/gr-diff-builder/gr-diff-builder-element.ts",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2022-05-05T10:44:45Z",
      "side": 1,
      "message": "I wonder if this now still makes sense: The cancel will reject the promise - but this promise is now no longer exposed anywhere - so why does it matter if it\u0027s cancelled? I think when you cancel a render, it should probably not send the \u0027render-content\u0027 (and more \u0027render-progress\u0027) events. This would require making the promise returned from process cancelable, no? Because I suspect cnaceling the promise returned from the `then` in line 296, does not affect whether the `then` intself is executed?",
      "range": {
        "startLine": 293,
        "startChar": 41,
        "endLine": 293,
        "endChar": 55
      },
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b23856a_e16c630b",
        "filename": "polygerrit-ui/app/embed/diff/gr-diff-builder/gr-diff-builder-element.ts",
        "patchSetId": 3
      },
      "lineNbr": 293,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-05T10:50:51Z",
      "side": 1,
      "message": "I was also wondering the same: Maybe we should just remove `_cancelableRenderPromise`, because it does not do much. We already do `processor.cancel()`. That should be sufficient. Also cancelling the promise probably has not effect.\n\nBut I don\u0027t want to do this in this change and take some time later looking more into cancelling the rendering.",
      "parentUuid": "c955077e_c23944f8",
      "range": {
        "startLine": 293,
        "startChar": 41,
        "endLine": 293,
        "endChar": 55
      },
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4014b6f7_6d5d7f21",
        "filename": "polygerrit-ui/app/embed/diff/gr-diff/gr-diff.ts",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1070860
      },
      "writtenOn": "2022-05-05T10:44:45Z",
      "side": 1,
      "message": "Is this still true? Is anyone relying on this? I believe render-content will only be fired when actual rendering happens, because otherwise the function returns early?",
      "range": {
        "startLine": 137,
        "startChar": 67,
        "endLine": 138,
        "endChar": 76
      },
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71de0f50_58f480ad",
        "filename": "polygerrit-ui/app/embed/diff/gr-diff/gr-diff.ts",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-05-05T10:50:51Z",
      "side": 1,
      "message": "Still true. See `fireEvent(this, \u0027render\u0027);` in `_renderDiffTable()`.",
      "parentUuid": "4014b6f7_6d5d7f21",
      "range": {
        "startLine": 137,
        "startChar": 67,
        "endLine": 138,
        "endChar": 76
      },
      "revId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ba33cb77aa90a0359244bb22b70d7aa80e809ca9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}