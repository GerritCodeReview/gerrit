{
  "comments": [
    {
      "key": {
        "uuid": "174cff89_84ab069c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-28T22:55:39Z",
      "side": 1,
      "message": "Why do you move this out of the constructor? \nInitially I assumed this is because of newer java versions, then I realized it\u0027s used just 2 lines prior.",
      "range": {
        "startLine": 115,
        "startChar": 26,
        "endLine": 115,
        "endChar": 33
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174cff89_449d0e7b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 115,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-28T23:19:53Z",
      "side": 1,
      "message": "Because it would be identical between the two constructors, so it saves a few lines of code. If not assigned, booleans default to false.",
      "parentUuid": "174cff89_84ab069c",
      "range": {
        "startLine": 115,
        "startChar": 26,
        "endLine": 115,
        "endChar": 33
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "372663b6_cd880938",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-28T23:19:53Z",
      "side": 1,
      "message": "This will disappear.\n\nSpecifically, it will eventually move into callers. They will also be more streamlined. Something like:\n\n // MyHandler.java\n @Override\n public Object apply(ChangeResource rsrc) {\n   try (BatchUpdate upd \u003d batchUpdateFactory.create(rsrc.getControl(), TimeUtil.nowTs())) {\n     doSomething(upd);\n     PatchSetInserter ins \u003d patchSetInserterFactory.create(..., upd);\n     ...\n     ins.insert();\n     upd.execute();\n   }\n }\n\nWhen _all_ callers know how to provide BatchUpdates, then we don\u0027t have to worry about optionally executing the batch and the ref updates, which is taking up about 20 loc in this method. That\u0027s what my TODOs are trying to say.",
      "range": {
        "startLine": 267,
        "startChar": 4,
        "endLine": 282,
        "endChar": 9
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_95e0e420",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 282,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "Ack. I think eventually hoisting this into the callers is the right thing to do longer term. For a reviewable change now, having the conditionals inside PatchSetInserter is fine.",
      "parentUuid": "372663b6_cd880938",
      "range": {
        "startLine": 267,
        "startChar": 4,
        "endLine": 282,
        "endChar": 9
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "372663b6_ad85bd1d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-28T23:19:53Z",
      "side": 1,
      "message": "This will disappear. Kind of. I\u0027m not 100% sure yet. What I have here is what\u0027s needed to keep the existing behavior of PatchSetInserter, but obviously we don\u0027t want every BatchUpdate caller to have to do all those checks.\n\nI see a few options, which we can mix and match:\n\n* Let UpdateException bubble up where we\u0027re not actually getting any benefit from unwrapping (e.g. IOException/OrmException).\n* For exception types that are understood by RestApiServlet.java:346, unwrap and rethrow them inside the preceding catch block. That allows *Op writers to trigger specific HTTP error codes, without requiring unwrapping at the execute site.\n* For exception types that are immediately wrapped and rethrown as REST API exceptions, change the *Ops _either_ to throw those exception types directly, or have the callers that are already doing the rewrapping also unwrap UpdateException first. For example, see CherryPick.java:91, which is one of the callers of PatchSetInserter. If we changed *Op to throw BadRequestException, we could drop the InvalidChangeOperationException. Alternatively, we could change CherryPick\u0027s catch block to:\n\n } catch (UpdateException e) {\n   if (e.getCause() instanceof InvalidChangeOperationException ) {\n     throw new BadRequestException(e.getCause().getMessage());\n   } else ...\n\n* Use some sort of structured return value other than exceptions, and have a higher-level handler like RestApiServlet interpret those. (This is the option I\u0027ve thought through the least.)",
      "range": {
        "startLine": 370,
        "startChar": 6,
        "endLine": 385,
        "endChar": 5
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5726779d_a6f2e6f5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "I don\u0027t know I can form an opinion right now.\n\nAllowing the callers in REST API handlers to not write catch blocks would be preferred. Which means BatchRefUpdate.execute() throws types understood by RestApiServlet.",
      "parentUuid": "372663b6_ad85bd1d",
      "range": {
        "startLine": 370,
        "startChar": 6,
        "endLine": 385,
        "endChar": 5
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d73267d2_0a301b13",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/PatchSetInserter.java",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-03T22:20:46Z",
      "side": 1,
      "message": "You don\u0027t have to respond now but here are some thoughts for when you do.\n\nThe downside of that approach is that in the short term it changes the exception types thrown within libraries deep in the stack.\n\nThink about things like MergeUtil: right now they throw JGit exceptions or NoSuchChangeExceptions or what have you.\nIdeally we convert all of those to take BatchUpdates as args, and add ops to the BatchUpdate. Those ops need to throw *something*. Should we just convert them to use exceptions understood by RestApiHandler? I\u0027m not convinced that\u0027s always a good idea. For example, one might naively convert NoSuchChangeException from a library call into ResourceNotFoundException. But the translation is not always that simple: sometimes NoSuchChangeException should 404, yes, but if we\u0027re doing something more complicated like trying to submit all changes in a topic from a single handler, a NoSuchChangeException should probably 500.\n\nMaybe we should throw something other than a NoSuchChangeException from that library call. But that\u0027s not always an option, like when the library in question is JGit.\n\nBottom line is exceptions have to be translated somewhere, unfortunately. The main advantage of doing it at the topmost level is that there are only relatively few \"topmost\" handlers, as opposed to translating them all when the ops are created. Of course, then you still run into problems like the one above.\n\nMight just be there\u0027s no good answer.",
      "parentUuid": "5726779d_a6f2e6f5",
      "range": {
        "startLine": 370,
        "startChar": 6,
        "endLine": 385,
        "endChar": 5
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77929b13_5fb12b12",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-01-29T05:00:40Z",
      "side": 1,
      "message": "abstract static",
      "range": {
        "startLine": 70,
        "startChar": 9,
        "endLine": 70,
        "endChar": 24
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_75c668a1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "Consider either Runnable (no checked exceptions) or Callable (checked exceptions) instead. These are far more common in the platform and libraries and can be much more composable than declaring your own almost sorta type.\n\nIf you use Callable just document that the return value is discarded.",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 82,
        "endChar": 40
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "372663b6_0d97315b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2015-01-28T22:55:39Z",
      "side": 1,
      "message": "What is the actual preferred coding style here?\nIirc there has also been classes having one argument per line.",
      "range": {
        "startLine": 131,
        "startChar": 21,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174cff89_0497165b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-28T23:19:53Z",
      "side": 1,
      "message": "My personal style tends to be one per line in @Inject constructors and squeeze them together otherwise. I don\u0027t have a very strong reason for that though.",
      "parentUuid": "372663b6_0d97315b",
      "range": {
        "startLine": 131,
        "startChar": 21,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b76333f1_e95df531",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-01-29T01:33:31Z",
      "side": 1,
      "message": "\"one per line in @Inject constructors\" seems to be the desired style according to recent review comments, but it\u0027s not mentioned in the style guide [1].\n\n[1] https://gerrit-review.googlesource.com/Documentation/dev-contributing.html#_style",
      "parentUuid": "174cff89_0497165b",
      "range": {
        "startLine": 131,
        "startChar": 21,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5726779d_e6d5be41",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "one per line happens because very often these things become kitchen sinks and we add more objects to the constructor later. when they are not line wrapped we have to reflow and it can be harder to see what the delta is.\n\ni don\u0027t care very much either way. but the longer the constructor\u0027s arg list is, the higher odds it grows later. or so it seems to me.",
      "parentUuid": "b76333f1_e95df531",
      "range": {
        "startLine": 131,
        "startChar": 21,
        "endLine": 134,
        "endChar": 20
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_55cb6ca5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "Consider Builder style and return this?",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_35d0f051",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "return this?",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_15d5f441",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "return this?",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_f5d9587c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 199,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "make this a field and just add a builder style method to set it false?",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c21e895_b5e3e02c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-02-03T22:08:54Z",
      "side": 1,
      "message": "Stupid question, should we defer this until after we executeChangeOps()?\n\nThat way someone watching this can see the database state match the ref state.",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d73267d2_2a2ddfb9",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 224,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-02-03T22:20:46Z",
      "side": 1,
      "message": "I thought that to, and at one point actually had a TODO in here about it, but that\u0027s not the way most callers work now. Both CherryPick and PachSetInserter (including prior to this change) fire the ref update event as soon as it happens.\n\nI can see the argument both ways, honestly.",
      "parentUuid": "3c21e895_b5e3e02c",
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77929b13_5f4a8b6c",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 249,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-01-29T01:33:31Z",
      "side": 1,
      "message": "Catch specific exceptions here rather than the generic Exception?",
      "range": {
        "startLine": 249,
        "startChar": 13,
        "endLine": 249,
        "endChar": 22
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b76333f1_c95a3138",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-01-29T01:33:31Z",
      "side": 1,
      "message": "And here?",
      "range": {
        "startLine": 267,
        "startChar": 13,
        "endLine": 267,
        "endChar": 22
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77929b13_bf54f709",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-01-29T04:01:44Z",
      "side": 1,
      "message": "PostOp.call and ChangeOp.call both throw Exception. See my comments in PatchSetInserter as to how exceptions from the *Ops rae handled. I\u0027m open to suggestions, but throwing one or two exception types in those methods is probably not going to meet the goals.",
      "parentUuid": "b76333f1_c95a3138",
      "range": {
        "startLine": 267,
        "startChar": 13,
        "endLine": 267,
        "endChar": 22
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b76333f1_49b6410d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 267,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-01-29T05:00:40Z",
      "side": 1,
      "message": "OK, if that\u0027s what\u0027s thrown.",
      "parentUuid": "77929b13_bf54f709",
      "range": {
        "startLine": 267,
        "startChar": 13,
        "endLine": 267,
        "endChar": 22
      },
      "revId": "bac7f2fa9bf8ed6a62fd2fefa6c54d1e0b648911",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}