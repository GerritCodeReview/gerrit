{
  "comments": [
    {
      "key": {
        "uuid": "0af5c83c_5f2eebc6",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-29T14:56:21Z",
      "side": 1,
      "message": "This is arbitrary assumption to try to guess the existing name by split on \u0027-\u0027 separator. When I rename javamelody-nodep artifact to be javamelody_nodep, that would break this code.",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af5c83c_df19dbaf",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-29T16:33:36Z",
      "side": 1,
      "message": "\u003e This is arbitrary assumption to try to guess the existing\n\u003e name by split on \u0027-\u0027 separator.\n\nIt\u0027s not arbitrary. It reflects what\u0027s used in the wild.\nThat\u0027s what all heuristics are.\n\n\u003e When I rename javamelody-nodep artifact to be\n\u003e javamelody_nodep, that would break this code.\n\nSure, one might implement more sophisticated splitting.\nBut currently, YAGNI weighs heavier for me.",
      "parentUuid": "0af5c83c_5f2eebc6",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_9c7005cf",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-30T07:31:09Z",
      "side": 1,
      "message": "I tend to agree. And to follow YAGNI is always good thing to do. So may be we should add some guidance for plugin developers about naming of multi-target plugins rules, that \"-\" sign is automagically discovered to detect the real directory to induce git version.",
      "parentUuid": "0af5c83c_df19dbaf",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ab8a0d4_39e04f09",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2015-08-04T09:04:28Z",
      "side": 1,
      "message": "Both my solution and this one depends on best guesses and assumptions.\nI am convinced that the right way to move forward with this issue is to enforce a naming convention for plugins (\u003cplugin-dir\u003e-\u003cplugin-specifier\u003e seems a good choice to me right now).\n\nAnother way would be if one could magically save the argument from the $ buck build command.\n\nbuck build plugins/\u003cpath-to-plugin.git-from-plugin-dir\u003e:one-of-my-plugins\n\nThe \u0027plugins/\u003cpath-to-plugin-from-plugin-dir\u003e\u0027 part would be so sweet... (assuming the BUCK file resides in the root of the plugin git) The location of the BUCK file that contains the build-def would be the next best thing, as it would most probably reside in the root of the plugin git (assumption again).\n\nHowever I\u0027m not man enough to figure out how one could get a hold of those at the moment...",
      "parentUuid": "aa059cff_9c7005cf",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8af6189c_4b28c5b6",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2015-08-04T10:07:08Z",
      "side": 1,
      "message": "This naming convention should be described in the documentation.",
      "parentUuid": "4ab8a0d4_39e04f09",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ab8a0d4_b9661f19",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-08-04T12:50:33Z",
      "side": 1,
      "message": "\u003e if one could magically save the argument from the\n\u003e $ buck build command.\n\nThat might not give the expected result, as one might have\naliases is place. Then for\n\n  buck build some-alias\n\none would be stuck with the alias and no easy way to drill\ndown to the rule.\n\n\u003e The location of the BUCK file [...] would be the next best\n\u003e thing\n\nI thought about that at first too.\nBut decided it would be too fragile/too much pain.\nHence, I uploaded only the current change.\n\nOne could get the BUCK file name by making the directory for\n`git describe` a parameter to gerrit_plugin.\nBut that would need modifications to all plugins, as\nthere is no good default for that parameter :-(\n\nThe alternative would be walking the traceback. That\u0027s not\ndouble-extra-super-solid, but it produces the correct\ndirectory, and it also allows you to clone the same plugin\ntwice under different names [1] and get the correct\n`git describe` output for each of the clones.\n\nMeh. Maybe the traceback solution is not that bad after\nall, as it comes with least assumptions on the plugin?\nAnyways, I uploaded the traceback variant to\n\n  https://gerrit-review.googlesource.com/#/c/70074/\n\n\n\n[1] That\u0027s used at WMF, as we\u0027re running two different\nits-phabricator plugins in parallel. One for phabricator,\nand one to fake legacy-bugzilla tickets onto their\nphabricator counterpart.",
      "parentUuid": "4ab8a0d4_39e04f09",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8af6189c_ab804903",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2015-08-04T13:42:49Z",
      "side": 1,
      "message": "I really like that approach.",
      "parentUuid": "4ab8a0d4_b9661f19",
      "range": {
        "startLine": 27,
        "startChar": 38,
        "endLine": 27,
        "endChar": 39
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d3082cc_c7aefe9c",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2015-07-29T13:55:09Z",
      "side": 1,
      "message": "Isn\u0027t there a more specific exception we can raise here?",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 26
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af5c83c_ff1c9fa1",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-29T16:33:36Z",
      "side": 1,
      "message": "I am not sure if there is any.\n\n  https://docs.python.org/2/library/exceptions.html\n\ndoes not give good alternatives. For me, the next best choice\nwould be \"NotImplementedError\", but that somewhat sounds like\n\"this is all under construction and not yet done\".\n\nNot sure. Would NotImplementedError be a better fit?\nOr did you have something else in mind?",
      "parentUuid": "0d3082cc_c7aefe9c",
      "range": {
        "startLine": 33,
        "startChar": 14,
        "endLine": 33,
        "endChar": 26
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_7c3f79e5",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-30T07:31:09Z",
      "side": 1,
      "message": "I already said it in my comment on Sven change, and I repeat it here: I don\u0027t think that breaking the build is appropriate thing to do in this particular case. Also note that gerrit_plugin.bucklet has different logic, by using VERSION file in plugin tree. So yes, in tree mode we failed to detect the directory here and we cannot report plugin version, but should the build break in this case? We can still recover, by issuing warning on stderr and render \"N/A\" as version name plugin\u0027s MANIFEST.\n\nWriting and building gerrit plugins is already hard enough, especially for new contributors, so let\u0027s try to avoid making this task even harder than it must be.",
      "range": {
        "startLine": 33,
        "startChar": 8,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af5c83c_7ffacf85",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-30T14:06:27Z",
      "side": 1,
      "message": "I think whether or not to fail is a discussion that\u0027s worth having.\nBut it is somewhat a separate issue though, because currently, Buck is\nfailing if no good repository description can be found.\nThis change does not mess with that, neither does it make writing\nplugins harder. On the contrary, it only helps Buck to find a good\ndescription more often.",
      "parentUuid": "aa059cff_7c3f79e5",
      "range": {
        "startLine": 33,
        "startChar": 8,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_fc0dc942",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-30T14:21:33Z",
      "side": 1,
      "message": "| Buck is failing if no good repository description can be found\n\nI see it differently. This change tries hard to recover from this failure, by making some assumptions that may or may not hold. As the outcome it would still fail with better message when assumption not hold, or with obscure message, when git describe fails, because may be the plugin wasn\u0027t added to Git at all. Instead you could just probe for the file that is going to be passed to `git describe` and see if this file exists, if not, stop here and report \"N/A\" and move forward with the life.\n\nIn follow-up change you may start guessing. But if you fail to guess, there should be still no failure.",
      "parentUuid": "0af5c83c_7ffacf85",
      "range": {
        "startLine": 33,
        "startChar": 8,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_dc0a0d29",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-30T15:01:20Z",
      "side": 1,
      "message": "\u003e Instead you could just probe for the file that is going to\n\u003e be passed to `git describe` and see if this file exists,\n\nThat\u0027s exactly what line 29 is doing by checking \u0027isdir()\u0027 :-)\n\n\u003e if not, stop here and report \"N/A\"\n\nAs said above, that\u0027d be an unrelated switch in Buck\u0027s\nbehaviour.\n\nIf you think that \u0027N/A\u0027 is better than what Buck is currently\ndoing (both with and without this change), please upload it as\na separate change.",
      "parentUuid": "aa059cff_fc0dc942",
      "range": {
        "startLine": 33,
        "startChar": 8,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_7c23f9af",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-30T16:59:43Z",
      "side": 1,
      "message": "| As said above, that\u0027d be an unrelated switch in Buck\u0027s\nbehaviour.\n\nYou\u0027ve convinced me. There is still place for improvement, but this change fixes javamelody build breakage and improves the error handling.",
      "parentUuid": "aa059cff_dc0a0d29",
      "range": {
        "startLine": 33,
        "startChar": 8,
        "endLine": 33,
        "endChar": 13
      },
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa059cff_1c2875b5",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-29T13:40:14Z",
      "side": 1,
      "message": "Without this fallback heuristic, building the javamelody plugin\nfails with\n\n  buck build plugins/javamelody:javamelody\n  Using buckd.\n  Traceback (most recent call last):\n  [...]\n      File \"/home/christian/sources/Gerrit/builder/master/gerrit/tools/default.defs\", line 134, in gerrit_plugin\n      mf_cmd \u003d \u0027v\u003d%s;\u0027 % git_describe(name)\n    File \"/home/christian/sources/Gerrit/builder/master/gerrit/tools/git.defs\", line 21, in git_describe\n      p \u003d subprocess.Popen(cmd, stdout \u003d subprocess.PIPE, cwd \u003d \u0027plugins/%s\u0027 % plugin)\n  [...]\n  OSError: [Errno 2] No such file or directory: \u0027plugins/javamelody-nodep\u0027\n  [...]",
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af5c83c_9ffa33ac",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-29T13:56:30Z",
      "side": 1,
      "message": "Sven\u0027s fix is pending for review that took another approach: [1].\n\n* [1] https://gerrit-review.googlesource.com/67186",
      "parentUuid": "aa059cff_1c2875b5",
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af5c83c_9f13538e",
        "filename": "tools/git.defs",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2015-07-29T16:33:36Z",
      "side": 1,
      "message": "Thanks for the pointer. I chimed in there.",
      "parentUuid": "0af5c83c_9ffa33ac",
      "revId": "be06ce6885ddb254723f8d18b9534e35b49ffdbc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}