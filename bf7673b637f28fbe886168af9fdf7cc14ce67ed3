{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4c6197d0_dcf7379d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T11:36:10Z",
      "side": 1,
      "message": "I believe this isn\u0027t really independent from his predecessor: if we keep them separate we actually break the user experience.\n\nCan you squash it with its predecessor?",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ee24239_b010f03f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T11:58:55Z",
      "side": 1,
      "message": "With this further fix, Gerrit starts but existing clients see a warning of a man-in-the-middle attack:\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e9ff107_71f90277",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T11:59:57Z",
      "side": 1,
      "message": "@Kenyon can you also try yourself E2E? It should be simple to reproduce:\n- install Gerrit v2.13\n- add your RSA key and verify that you can SSH\n- upgrade to Gerrit v2.16\n- verify you can still SSH as before",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad6fae3_18a050dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T12:12:46Z",
      "side": 1,
      "message": "The issue is this one:\n[2021-11-19 11:56:48,625] [sshd-SshServer[6c8d638a]-nio2-thread-6] WARN  org.apache.sshd.common.keyprovider.FileKeyPairProvider : Failed (InvalidKeyException) to load key resource\u003d/var/gerrit/etc/ssh_host_key: Unsupported private key file format: /var/gerrit/etc/ssh_host_key\n\nInstead of tolerating the situation, I believe we should read the old key and convert that into OpenSSH format. That would allow to avoid ignoring the key and preserving the same identity.",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "138b58fc_e5566883",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-19T20:11:44Z",
      "side": 1,
      "message": "Yes, there is a thread about that here, where a conversion during init is suggested: https://groups.google.com/g/repo-discuss/c/csJIIyekh28/m/yBuMSmOsBwAJ\n\nI thought that Gerrit still supported the old key format. I thought I tested using the old key type along with new ones and it worked.\n\nThere is a small Java program in that thread for doing the conversion. For my own upgrades, I am using an Ansible playbook which uses that program to convert the old host key.\n\nI suppose we could basically use that conversion code inside of gerrit. I\u0027m guessing it should go into java/com/google/gerrit/pgm/init/InitSshd.java.",
      "parentUuid": "cad6fae3_18a050dd",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de49da7b_59cf07f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-19T20:11:44Z",
      "side": 1,
      "message": "I was thinking the same thing this morning.",
      "parentUuid": "4c6197d0_dcf7379d",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1940a9b0_54e7e647",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-19T20:20:18Z",
      "side": 1,
      "message": "That\u0027s the catch: if we create the extra keys, they\u0027ll be generated in OpenSSH format and then we\u0027ll end up in the mixed mode mess.\n\nNot generating the extra keys would still work (as the upgrade to v2.16 without your fix did not have this problem) but longer term a new key generation will be required.\n\nHere we are talking about old RSA Keys that were generated at least 5 years ago and are today considered insecure anyway. A responsible Gerrit admin *must* rotate those keys and, when he does it, the clients will have to trust again the new key.\n\nConverting automatically the old obsolete keys into OpenSSH format is just hiding a bigger problem: the keys are unusable anyway. *IF* the Gerrit admin wants to do it, he has to do it consciously, and Gerrit shouldn\u0027t do it automatically.\n\nHope that makes sense.",
      "parentUuid": "138b58fc_e5566883",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dbe219b_0e2753f0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-23T18:21:52Z",
      "side": 1,
      "message": "\u003e Not generating the extra keys would still work (as the upgrade to v2.16 without your fix did not have this problem) but longer term a new key generation will be required.\n\u003e \n\u003e Here we are talking about old RSA Keys that were generated at least 5 years ago and are today considered insecure anyway. A responsible Gerrit admin *must* rotate those keys and, when he does it, the clients will have to trust again the new key.\n\u003e \n\u003e Converting automatically the old obsolete keys into OpenSSH format is just hiding a bigger problem: the keys are unusable anyway. *IF* the Gerrit admin wants to do it, he has to do it consciously, and Gerrit shouldn\u0027t do it automatically.\n\nWhy would the RSA keys be considered insecure? I understand that the ssh-rsa signature algorithm, which is based on SHA-1, is obsolete. But RSA keys themselves are still good.",
      "parentUuid": "1940a9b0_54e7e647",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e74e9720_2165da9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-23T19:22:15Z",
      "side": 1,
      "message": "[...]\n\n\u003e Why would the RSA keys be considered insecure? I understand that the ssh-rsa signature algorithm, which is based on SHA-1, is obsolete. But RSA keys themselves are still good.\n\nIf you generated an RSA key pair 5 years ago and you never rotated them, then the keys are considered insecure.\n\nThe security of a key lies in the maximum time that a potential attacker can \"guess\" the key. The longer the key, the longer the time it gets to guess the key by brute-force or other techniques.\n\nHope that explains my statement on why RSA keys generated over 5 years ago aren\u0027t secure anymore.",
      "parentUuid": "3dbe219b_0e2753f0",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d09d2dc3_644ec662",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-23T20:06:10Z",
      "side": 1,
      "message": "Yes, due to the duration, that makes sense.\n\nI still think that my two patches fix actual bugs in Gerrit, where the current code is not providing the expected experience for the Gerrit administrator. Host key rotation should be a separate activity, not forced unexpectedly during upgrade. If we don\u0027t fix these bugs, at least the release notes should say something about this situation.\n\nI have worked around this in my own upgrades by converting the key format as a separate step. So I leave it up to the Gerrit maintainers on what to do with these patches.",
      "parentUuid": "e74e9720_2165da9e",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08f81f77_3c7915a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-23T20:19:47Z",
      "side": 1,
      "message": "\u003e I still think that my two patches fix actual bugs in Gerrit, where the current code is not providing the expected experience for the Gerrit administrator.\n\nCurrently, Gerrit does not re-generate keys if there are existing keys. Also, it does not generate new keys that could be potentially incompatible with the existing keys. I agree that it should be documented more accurately.\n\n\u003e Host key rotation should be a separate activity, not forced unexpectedly during upgrade.\n\nAgreed, it should be a deliberate and conscious decision by the Gerrit admin.\n \n\u003e If we don\u0027t fix these bugs, at least the release notes should say something about this situation.\n\nWhich bug? The current behaviour? How do we fix it? Do we convert obsolete and insecure keys? Do we remove them? Do we ignore them? \n\nIMHO any automatic decision that eventually is related to obsolete keys is potentially dangerous. Possibly blocking the upgrade would be best, telling the Gerrit admin that there is an old key that is unsupported and potentially also insecure and needs to be removed.\n\n\u003e I have worked around this in my own upgrades by converting the key format as a separate step. So I leave it up to the Gerrit maintainers on what to do with these patches.\n\nYes, and that\u0027s the correct operation to perform. Converting the existing keys is a decision that the Gerrit admin needs to take according to the company policy about key rotation. If the existing key was a 4096 RSA just generated 1 year ago, it is possibly OK to convert it. If the existing key was a 1024 RSA generated 5 or more years ago, converting it is NOT the right decision: the key should be destroyed and regenerated.\n\nSecurity isn\u0027t an easy task: trying to make it easier and too automatic may introduce unnoticed security breaches which are far more serious that a regenerated key.",
      "parentUuid": "d09d2dc3_644ec662",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01a5d240_03fe9b4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-23T21:21:26Z",
      "side": 1,
      "message": "\u003e \u003e If we don\u0027t fix these bugs, at least the release notes should say something about this situation.\n\u003e \n\u003e Which bug? The current behaviour? How do we fix it? Do we convert obsolete and insecure keys? Do we remove them? Do we ignore them? \n\nThe first bug is that nonexistent key types should be generated during init. That\u0027s \u003chttps://gerrit-review.googlesource.com/323100\u003e.\n\nThe second bug is that ProvisionException with a \"multiple host keys exist\" message would be thrown even if there were not actually multiple host keys of the same type.\n\nThe fact that it\u0027s now five years later is relevant only if your policy is to rotate keys of a certain age or strength. You would have hit these bugs if you were upgrading the day Gerrit was released.\n\nMy preferred fix (because old Gerrit upgrades are already hard enough) would be to convert the keys, and log warnings at least every time Gerrit starts, which I think is what this other fellow proposed as well: https://groups.google.com/g/repo-discuss/c/csJIIyekh28/m/3lKNG3TrAwAJ",
      "parentUuid": "08f81f77_3c7915a3",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b685df0_4bdb784c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-11-23T21:31:05Z",
      "side": 1,
      "message": "\u003e \u003e \u003e If we don\u0027t fix these bugs, at least the release notes should say something about this situation.\n\u003e \u003e \n\u003e \u003e Which bug? The current behaviour? How do we fix it? Do we convert obsolete and insecure keys? Do we remove them? Do we ignore them? \n\u003e \n\u003e The first bug is that nonexistent key types should be generated during init. That\u0027s \u003chttps://gerrit-review.googlesource.com/323100\u003e.\n\nAgreed, however, if you had old key formats you could not generate the new keys, unless you make Gerrit to manage both formats at the same time. So, the fix is incomplete without the second functional improvement.\n\n\u003e The second bug is that ProvisionException with a \"multiple host keys exist\" message would be thrown even if there were not actually multiple host keys of the same type.\n\nThat is not a bug IMHO but the behaviour was correct: you should not start Gerrit in that case because you are in an unsupported situation. As mentioned above, you either improve Gerrit and allow to manage both keys at the same time OR you prevent Gerrit from starting and highlight the problem with the suggested remedies.\n\n\u003e The fact that it\u0027s now five years later is relevant only if your policy is to rotate keys of a certain age or strength.\n\nIf you don\u0027t have a SSH keys rotation policy, it would be best to not use SSH :-)\nHaving SSH doesn\u0027t mean to be \"secure\" because of the first \u0027S\u0027: security is a process is not a tool or a protocol.\n\nI believe we should highlight in Gerrit\u0027s documentation that SSH keys *have to be rotated*.\n \n\u003e My preferred fix (because old Gerrit upgrades are already hard enough) would be to convert the keys\n\nTrue, that is also an option, but I would still warn the Gerrit admin saying \"You are potentially using obsolete or insecure keys: do you really want to proceed? [y/N]\"\n\nWDYT?",
      "parentUuid": "01a5d240_03fe9b4b",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c052c2c9_efcbb2fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1111258
      },
      "writtenOn": "2021-11-23T21:38:17Z",
      "side": 1,
      "message": "Well, I don\u0027t use interactive init because I can\u0027t automate that, but otherwise agreed.\n\nOriginally I thought that the code still exists for Gerrit to work with Java-format keys, but I may have been mistaken about that.",
      "parentUuid": "5b685df0_4bdb784c",
      "revId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader",
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/.*\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX",
          "label:Verified\u003dMIN"
        ],
        "failingAtoms": []
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "bf7673b637f28fbe886168af9fdf7cc14ce67ed3",
      "legacy": {
        "value": false
      },
      "forced": {}
    }
  ]
}