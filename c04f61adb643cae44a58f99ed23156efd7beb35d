{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eaafc1c5_e4f38502",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-12-02T14:35:54Z",
      "side": 1,
      "message": "SG on the minimal fix. I agree there are better options but this is the safest minimal fix given the existing code.",
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b00c16f8_c1f80de7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2021-12-02T15:27:47Z",
      "side": 1,
      "message": "This doesn\u0027t seem to fix the linked bug. Tested locally.",
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5bbce09_881abcaa",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 2
      },
      "lineNbr": 1318,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-02T14:18:18Z",
      "side": 1,
      "message": "Why can\u0027t you simply do loadData and explicitly ask the model to reload rather than going through global events?",
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ffacbd6_f340dd5e",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 2
      },
      "lineNbr": 1318,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-12-02T14:33:33Z",
      "side": 1,
      "message": "That is an alternative.\n\nI am trying to do a minimal fix here. Firing \u0027reload\u0027 is consistent with what we have done so far. Pressing the Shirt-R shortcut also fires a reload event.\n\nBut I agree that going forward we will probably want to call out directly to the change-model. What I am not sure about is how dependent models will then receive reload calls. But that is not for this change to answer.\n\nNote that there is also the complication of avoiding double loading. The change-model must not get triggered by both the router change and the change view.",
      "parentUuid": "c5bbce09_881abcaa",
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba454d1_502f2c08",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 2
      },
      "lineNbr": 1892,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-12-02T14:35:54Z",
      "side": 1,
      "message": "can we change the name of this method?\nIt\u0027s not getting the ChangeDetail so the name is quite confusing.\n\nIt was requesting it at some point so the name was valid but don\u0027t think it\u0027s valid now.",
      "range": {
        "startLine": 1892,
        "startChar": 2,
        "endLine": 1892,
        "endChar": 18
      },
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37a7ca16_f7b40542",
        "filename": "polygerrit-ui/app/elements/change/gr-change-view/gr-change-view.ts",
        "patchSetId": 2
      },
      "lineNbr": 1892,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-12-02T14:38:06Z",
      "side": 1,
      "message": "Sure, feel free to send me a change.",
      "parentUuid": "cba454d1_502f2c08",
      "range": {
        "startLine": 1892,
        "startChar": 2,
        "endLine": 1892,
        "endChar": 18
      },
      "revId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        ],
        "failingAtoms": [
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX"
        ],
        "failingAtoms": [
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c04f61adb643cae44a58f99ed23156efd7beb35d",
      "legacy": {
        "value": false
      }
    }
  ]
}