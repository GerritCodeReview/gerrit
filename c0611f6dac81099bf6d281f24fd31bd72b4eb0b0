{
  "comments": [
    {
      "key": {
        "uuid": "11c51fc0_e2231f6e",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "Do we understand what they find confusing about it?",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 51
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72079cae_7c72bb56",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "I\u0027m not sure where this comes from. I don\u0027t know of any restriction like this.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 76
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8387d67_35905fe6",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "In concrete (technical?) terms, what is \"first-class support\"?",
      "range": {
        "startLine": 19,
        "startChar": 92,
        "endLine": 19,
        "endChar": 111
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ec44696_7ebcffcd",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "How does Gerrit as-is not already support these? (through the use of labels)",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 55
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d679c56_cf612f75",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "For the sake of discussion, the task plugin (using labels as results) covers these, except that we haven\u0027t ported the UI to PolyGerrit and upstreamed it.\n\nPlease read https://gerrit.googlesource.com/plugins/task/+/master/src/main/resources/Documentation/task.md if you haven\u0027t previously.",
      "range": {
        "startLine": 26,
        "startChar": 1,
        "endLine": 28,
        "endChar": 75
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc124f9f_9925b475",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "We had planned to add this functionality to the task plugin through a rules engine integration (as plugins can contribute rules).",
      "range": {
        "startLine": 29,
        "startChar": 0,
        "endLine": 29,
        "endChar": 60
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2baf73e2_1a0bde39",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "What does this imply? Isn\u0027t this up to the CI system itself to implement?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 49
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc0d932f_2ff54739",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "Which dashboard are you referring to here?",
      "range": {
        "startLine": 35,
        "startChar": 56,
        "endLine": 35,
        "endChar": 69
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa749be_859aee81",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "Why isn\u0027t this in the \"Must\" category? I think without this the implication would be that all builds/analyzers are applicable to all changes on a server, correct?\n\nDoes this also include a flexible way to indicate \"readiness\" for build/analyzer (for use by users, other CI systems, etc)?",
      "range": {
        "startLine": 37,
        "startChar": 1,
        "endLine": 37,
        "endChar": 100
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40fc7a70_6643b21f",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "Another nice-to-have would be the ability to mine the data to report CI system metrics (how long are changes waiting for CI, how many PSs fail, etc).",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "396000de_15b98707",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "I\u0027d like to add that we should be flexible enough that the idea of \"user as CI\" is supported.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 121
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecec2de6_91ac7e93",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2019-02-16T00:17:54Z",
      "side": 1,
      "message": "fyi, haven\u0027t reviewed past here yet, but wanted to publish comments.",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e22adc50_39c2ca62",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "did you mean: hit internal Gerrit limit",
      "range": {
        "startLine": 132,
        "startChar": 348,
        "endLine": 132,
        "endChar": 367
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "705005d1_eed1a90d",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "do you mean check results ?",
      "range": {
        "startLine": 137,
        "startChar": 57,
        "endLine": 137,
        "endChar": 63
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "668a3703_24e58858",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 149,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "This would be also possible by storing the checker configuration as a regular file in the respective branch(es) in the source code repository on which the checker should be run.\nChanges in checker configuration would then also show up naturally in the history of the source code repository they are checking and undergo the code review like any other source code.",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb0f20a_dc75b30a",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "I don\u0027t understand what you want to say here",
      "range": {
        "startLine": 155,
        "startChar": 235,
        "endLine": 155,
        "endChar": 281
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb920b06_c30eee14",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "looks like you mean \"the name is taken as UUID\"",
      "range": {
        "startLine": 170,
        "startChar": 155,
        "endLine": 170,
        "endChar": 180
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73c0f492_99ee095d",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-02-19T12:44:58Z",
      "side": 1,
      "message": "Did you mean: checker UUID is known?\n\nBtw, what will guarantee authenticity of the checker UUID in the incoming request\ni.e. that it is really from the system which is supposed to provide checks with that UUID?\nIn other words, what prevents another system to send checks with the same UUID?\n\ncontinuing in the next comment below ...",
      "range": {
        "startLine": 172,
        "startChar": 32,
        "endLine": 172,
        "endChar": 75
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8490c38f_5cc531b5",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 207,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "I think the newest patch set is the most urgent since it supersedes older patchsets, it may also make sense to cancel running checks for old patchsets if a newer one already exists in order to save resources on the check systems",
      "range": {
        "startLine": 207,
        "startChar": 109,
        "endLine": 207,
        "endChar": 149
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f50aabb_93cea2b8",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "does this mean all checkers available in this gerrit instance ?",
      "range": {
        "startLine": 222,
        "startChar": 33,
        "endLine": 222,
        "endChar": 45
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abd2d7f7_e7133095",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-02-19T12:44:58Z",
      "side": 1,
      "message": "What would that permission be? Will it be something like: check-UUID?\nThis way one could protect which user could be used for posting checks with the UUID.\nOf did you imagine something else?",
      "range": {
        "startLine": 227,
        "startChar": 0,
        "endLine": 227,
        "endChar": 88
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6beb8f1d_9277f47b",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 237,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-02-19T12:44:58Z",
      "side": 1,
      "message": "Does this mean that, by design, admins must be involved into configuring all (new) checkers?\nHow would that scale for large Gerrit sites with several thousands of repositories?\nWould it be possible for a development team to register new checker(s) and configure them for\ntheir own repositories without needing assistance of a Gerrit admin?",
      "range": {
        "startLine": 237,
        "startChar": 171,
        "endLine": 237,
        "endChar": 318
      },
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d71b5e85_bdc34bab",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 264,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "CI/CD systems tend to favour configuration as code these days, this means CI pipeline definitions are stored as source code in the source code repository which they act on. Similarly Gerrit checkers and their configuration could be defined in the same way. Gerrit would need to index these files when new versions arrive during push to feed an index for fast access to these definitions.",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e607eb1_d8f2a62c",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 264,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-19T17:53:27Z",
      "side": 1,
      "message": "When people talk about \"configuration as code\", I think often what they mean is \"code as a UI to configuration\". So the question we\u0027re considering here is whether writing code is actually the UI that people want to use for setting up checkers in Gerrit. I would argue that the answer is no: they may want to write code to configure their build/CI system, but they don\u0027t want to have to write *more* code to get their CI system wired up with Gerrit. The model here is, you configure your CI system using whatever UI it provides (web, code, etc.), and the CI system speaks the Gerrit REST API to set up the integration between the itself and Gerrit. Asking a human to manage that integration manually is not better UX.",
      "parentUuid": "d71b5e85_bdc34bab",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb97671b_3384a63f",
        "filename": "Documentation/ci-integration-design.txt",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2019-02-19T16:49:32Z",
      "side": 1,
      "message": "how about end timestamp which could enable performance stats and analysis ?",
      "revId": "c0611f6dac81099bf6d281f24fd31bd72b4eb0b0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}