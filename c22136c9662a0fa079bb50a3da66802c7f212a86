{
  "comments": [
    {
      "key": {
        "uuid": "b85c31dd_cb50b8ed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "I know, I also saw this lurking through when doing the original change :( . I think it\u0027s a limitation of JGit that it checks \u0027instanceof\u0027 on a generic, non-final object assuming there are just these two sub classes. It\u0027d be nice to address this in JGit to reduce the boiler-plate medium-term, but having two separate classes is probably OK for now.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 12,
        "endChar": 31
      },
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "072a7805_0efeded7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-05-01T16:02:21Z",
      "side": 1,
      "message": "and they override",
      "range": {
        "startLine": 14,
        "startChar": 49,
        "endLine": 14,
        "endChar": 68
      },
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f91648d4_8374baf6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 15,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-05-01T16:02:21Z",
      "side": 1,
      "message": "forward",
      "range": {
        "startLine": 15,
        "startChar": 35,
        "endLine": 15,
        "endChar": 45
      },
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8bc847_0c175b6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 17,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "nit: was",
      "range": {
        "startLine": 17,
        "startChar": 15,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11d41a6a_ebf8327b",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2019-04-30T15:46:09Z",
      "side": 1,
      "message": "Needs a license header.",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4320746f_fcdb88e5",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "I think JGit should provide this wrapper. This pushes the responsibility of implementing and overriding new methods into the JGit project where it can be handled much better. The alternative is to either use a Proxy (reflection) which from what I see doesn\u0027t work because DfsRepo is a class, not an interface OR to write a test that makes sure we catch methods added in the future.\n\nThe test to ensure proper coverage is the best shot for us at the moment. The test could use reflection to make sure the delegate is called on every method (but getRefDatabase).",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "789ecb24_ae35cf47",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-05-01T16:02:21Z",
      "side": 1,
      "message": "\u003e I think JGit should provide this wrapper. This pushes the responsibility of implementing and overriding new methods into the JGit project where it can be handled much better. The alternative is to either use a Proxy (reflection) which from what I see doesn\u0027t work because DfsRepo is a class, not an interface OR to write a test that makes sure we catch methods added in the future.\n\u003e \n\u003e The test to ensure proper coverage is the best shot for us at the moment. The test could use reflection to make sure the delegate is called on every method (but getRefDatabase).\n\nI believe it would be best to introduce a RepositoryInterface and DfsRepositoryInterface in JGit (see https://git.eclipse.org/r/c/141468/): should the interface change, we would then detect an error at compile time, rather than having to trigger the delegation by discovering the methods via reflection.\n\nAdditionally, as you said, JGit can then offer a [Dfs]RepositoryWrapper that still implements the same interface but delegate to the real object.\n\nWDYT?",
      "parentUuid": "4320746f_fcdb88e5",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4040a6c2_4c787ce0",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-05-02T06:34:01Z",
      "side": 1,
      "message": "\u003e \u003e I think JGit should provide this wrapper. This pushes the responsibility of implementing and overriding new methods into the JGit project where it can be handled much better. The alternative is to either use a Proxy (reflection) which from what I see doesn\u0027t work because DfsRepo is a class, not an interface OR to write a test that makes sure we catch methods added in the future.\n\u003e \u003e \n\u003e \u003e The test to ensure proper coverage is the best shot for us at the moment. The test could use reflection to make sure the delegate is called on every method (but getRefDatabase).\n\u003e \n\u003e I believe it would be best to introduce a RepositoryInterface and DfsRepositoryInterface in JGit (see https://git.eclipse.org/r/c/141468/): should the interface change, we would then detect an error at compile time, rather than having to trigger the delegation by discovering the methods via reflection.\n\nThe change has been rejected on the stable-5.2 branch. Unfortunately, we need to manage the nasty wrapping at Gerrit level, with the associated risks.",
      "parentUuid": "789ecb24_ae35cf47",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1383ae64_b620b574",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-05-02T07:14:33Z",
      "side": 1,
      "message": "\u003e WDYT?\n\nI think this is the right approach, but I have a pragmatic view of the world :-)\n\n\u003e The change has been rejected on the stable-5.2 branch. Unfortunately, we need to manage the nasty wrapping at Gerrit level, with the associated risks.\n\nThanks for trying. I think we shouldn\u0027t give up here. Maybe we can get that change into JGit master and then delete the Gerrit boiler plate in the near future.\n\nFor now, having the boiler plate around is acceptable in my opinion as long as there is tests preventing failures from creeping in.",
      "parentUuid": "4040a6c2_4c787ce0",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f3c8388_57e9934a",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareDfsRepository.java",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "nit: Please move all methods that just delegate out from above here to below here and have them ordered the same way as JGit orders them.",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d27ed3ed_927df4a6",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryWrapper.java",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2019-04-30T15:46:09Z",
      "side": 1,
      "message": "Needs a license header.",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f93b3be_88ab2e66",
        "filename": "java/com/google/gerrit/server/git/PermissionAwareRepositoryWrapper.java",
        "patchSetId": 7
      },
      "lineNbr": 6,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "nit: Please add a Javadoc for the interface and the method",
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e61b2f88_24c64e7d",
        "filename": "javatests/com/google/gerrit/acceptance/rest/project/GetCommitIT.java",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-04-30T15:58:09Z",
      "side": 1,
      "message": "nit: please fill up all available space (120 chars I believe) and remove unnecessary white space",
      "range": {
        "startLine": 111,
        "startChar": 4,
        "endLine": 111,
        "endChar": 8
      },
      "revId": "c22136c9662a0fa079bb50a3da66802c7f212a86",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}