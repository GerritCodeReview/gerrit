{
  "comments": [
    {
      "key": {
        "uuid": "66cfea46_37c9be68",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-27T20:22:11Z",
      "side": 1,
      "message": "Should this be named ..\n\n PROJECT_LEGACY\n\n.. so we can leave the other one named ..\n\n PROJECT\n\n.. ?",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 11
      },
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e7c8f8d_d3d5ddbe",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 1027267
      },
      "writtenOn": "2017-11-27T21:00:43Z",
      "side": 1,
      "message": "I didn\u0027t want to imply that this route was in any way deprecated (though I suppose calling something legacy here is actually doing the opposite, and saying it will be supported in perpetuity). I anticipate at some point we\u0027ll split this view into two, at which point the legacy route would no longer be legacy.\n\nWould you still like me to change it? I would rename it LEGACY_PROJECT to fit our naming pattern.",
      "parentUuid": "66cfea46_37c9be68",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 11
      },
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ae486f5_6a88d565",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 628,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-27T20:22:11Z",
      "side": 1,
      "message": "Can this be a redirect, so that we have only one canonical project URL?\n\nSomething like,\n\n_handleLegacyProjectRoute(ctx) {\n  this._redirect(\u0027/admin/projects/\u0027 + encodeURIComponent(ctx.params[0]));\n},",
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49311dae_11511bf6",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router.js",
        "patchSetId": 2
      },
      "lineNbr": 628,
      "author": {
        "id": 1027267
      },
      "writtenOn": "2017-11-27T21:00:43Z",
      "side": 1,
      "message": "I lean toward no, for the purpose of maintaining current UI switching behavior, at least until 2.16.",
      "parentUuid": "3ae486f5_6a88d565",
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0aa21db_25e94d0c",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router_test.html",
        "patchSetId": 2
      },
      "lineNbr": 1369,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-27T20:30:29Z",
      "side": 1,
      "message": "We intentionally have not included this sort of test because it hides the way page.js decides route precedence and parses parameters.\n\nSome routes are also not specified in regexes, but rather in page.js\u0027s custom string language with named parameters. These are not possible to test except *through* page.js, which we have not yet found a way to do.\n\nFor these reasons, I\u0027m not sure this suite should be included.",
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e993c0e1_6ac64983",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router_test.html",
        "patchSetId": 2
      },
      "lineNbr": 1369,
      "author": {
        "id": 1027267
      },
      "writtenOn": "2017-11-27T21:06:59Z",
      "side": 1,
      "message": "When I first wrote the regexp for this route, it didn\u0027t support the optional trailing prefixes that I wanted (/, /+, and /+/). With the subtle addition of a single \u0027?\u0027 character (to make one matching group non-greedy), it works. So I felt like there was a need to automatically assert that this behavior continues to work. It would be an easy thing to mess up later on, and it\u0027s unlikely that manual testing would pick up on it.\n\nIt\u0027s ok to me if this is imperfect. If behavior differs from page.js then that will bite us but that\u0027s no worse of a position than we\u0027d be in with no tests at all. I also don\u0027t need this suite to be complete. This is premature generalization, but I want to encourage more routing pattern testing (the hazards you mention notwithstanding).",
      "parentUuid": "d0aa21db_25e94d0c",
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84a51b69_549d9d4f",
        "filename": "polygerrit-ui/app/elements/core/gr-router/gr-router_test.html",
        "patchSetId": 2
      },
      "lineNbr": 1427,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-27T20:22:11Z",
      "side": 1,
      "message": "Nit: this line exceeds 80 characters.",
      "revId": "c2c820b2b07c671a220a53f49d1147e5760b2b72",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}