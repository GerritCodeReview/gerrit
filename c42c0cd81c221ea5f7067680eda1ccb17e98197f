{
  "comments": [
    {
      "key": {
        "uuid": "d92002e1_6840231e",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/IoUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-10-19T19:00:41Z",
      "side": 0,
      "message": "Would it also solve the problem, by fixing this overload:\n\n  public static void loadJARs(Path jars) {\n    loadJARs(Arrays.asList(jars));\n  }\n\nand letting all other places unchanged?",
      "revId": "c42c0cd81c221ea5f7067680eda1ccb17e98197f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b90a6e5b_cf915d4c",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/IoUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1012612
      },
      "writtenOn": "2015-10-19T19:17:49Z",
      "side": 0,
      "message": "Well, then you\u0027d lose the flexibility of the varargs overload here.  I did test, and we can do an overload of a single Path argument, and does appear to work.  But, when given the choice of the varargs version and the Iterable\u003cPath\u003e version, it seems like Java gets confused and guesses wrong sometimes?  Anyone more familiar with how Java is designed care to explain this behavior?",
      "parentUuid": "d92002e1_6840231e",
      "revId": "c42c0cd81c221ea5f7067680eda1ccb17e98197f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9e9e22c_40880eed",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/IoUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-10-20T16:07:49Z",
      "side": 0,
      "message": "| Well, then you\u0027d lose the flexibility of the varargs overload here. \n\nHow is your approach is better, when the varargs method was removed entirely? We don\u0027t use vagary in any place, but we do use calls with single Path and List of paths.",
      "parentUuid": "b90a6e5b_cf915d4c",
      "revId": "c42c0cd81c221ea5f7067680eda1ccb17e98197f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f90b06d5_79f187bf",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/IoUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 1012612
      },
      "writtenOn": "2015-10-20T17:45:02Z",
      "side": 0,
      "message": "I never said my approach was better; I didn\u0027t know if there was a reason for the varargs, and I was unclear about why this overload was lost in preference to the Iterable\u003cPath\u003e -- and the last thing I want to do is introduce the same issue again somewhere down the line. :)\n\nIf we\u0027re confident that overloading with a single Path argument will continue to work reliably, I agree -- that is much simpler than sprinkling the code with Arrays.asList().",
      "parentUuid": "d9e9e22c_40880eed",
      "revId": "c42c0cd81c221ea5f7067680eda1ccb17e98197f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}