{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2f8d7968_c34553e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-12-20T09:16:01Z",
      "side": 1,
      "message": "As long as this is only read by the download-commands plugin, shouldn\u0027t we just read the config in the downloads-commands plugin? Since this would break the assumed backwards compatibility of the plugin (all gerrit branches tracks master of that plugin).",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fc44a71_51ec13bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-12-20T09:16:22Z",
      "side": 1,
      "message": ".",
      "parentUuid": "2f8d7968_c34553e2",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be361d5c_fb87b568",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-12-20T13:47:35Z",
      "side": 1,
      "message": "- The download-commands plugin is pretty odd, its configuration is in core and implementation in a plugin, why that ?\n- It might be useful to also show the extended clone command including commit-msg hook and configuration of remote.origin.pushUrl in gitiles.\n- We could create a branch stable-3.9 and make the maintenance branches use that",
      "parentUuid": "6fc44a71_51ec13bd",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb79f2e8_703349d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2023-12-20T14:08:41Z",
      "side": 1,
      "message": "\u003e - The download-commands plugin is pretty odd, its configuration is in core and implementation in a plugin, why that?\n\nIt should come from the fact that download-commands was a core functionality first and I think the idea was that there would be a plethora of `download-command` plugins that could read the same config.\nIf you ask me it feels like an anti-pattern and the download configuration should be in the plugin only.\n\u003e - It might be useful to also show the extended clone command including commit-msg hook and configuration of remote.origin.pushUrl in gitiles.\n\nIf that comes into fruition we could move the configuration into core, or they could read the configuration separately.\n\u003e - We could create a branch stable-3.9 and make the maintenance branches use that\n\nI vote for reading this configuration in the plugin instead, I don\u0027t see anything gained by reading it in core. (If you ask me all other download-specific configuration such as `DownloadConfig` should move into the plugin as well but that might be a breaking change if there are alternative download plugins out in the wild that uses it).\n\nWe could document it in core as a config options possibly read by plugins that construct ssh URLs and a list of plugins that currently read it?",
      "parentUuid": "be361d5c_fb87b568",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3470a9fe_dcbc4909",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-20T17:30:22Z",
      "side": 1,
      "message": "\u003e \u003e - The download-commands plugin is pretty odd, its configuration is in core and implementation in a plugin, why that?\n\u003e \n\u003e It should come from the fact that download-commands was a core functionality first and I think the idea was that there would be a plethora of `download-command` plugins that could read the same config.\n\u003e If you ask me it feels like an anti-pattern and the download configuration should be in the plugin only.\n\nYeah, I have another download-commands change that\u0027s WIP where I need a new config as well and it wasn\u0027t clear to me why all the config logic is in core (I was also guessing due to legacy reasons). I would much prefer the plugin-specific config (i.e. `[plugin \"download-commands\"]` or `$site_dir/etc/download-commands.config`) in the plugin as that\u0027s consistent with all other plugins.\n\n\u003e \u003e - It might be useful to also show the extended clone command including commit-msg hook and configuration of remote.origin.pushUrl in gitiles.\n\u003e \n\u003e If that comes into fruition we could move the configuration into core, or they could read the configuration separately.\n\nOr gitiles could even depend on download-commands to provide it now that we have a documented cross-plugin dependency framework.\n\n\u003e \u003e - We could create a branch stable-3.9 and make the maintenance branches use that\n\u003e \n\u003e I vote for reading this configuration in the plugin instead, I don\u0027t see anything gained by reading it in core. (If you ask me all other download-specific configuration such as `DownloadConfig` should move into the plugin as well but that might be a breaking change if there are alternative download plugins out in the wild that uses it).\n\nI\u0027m less sure what to do about configs that are outside of the download-commands plugin namespace. It\u0027s a less common pattern to have a plugin owning a config that looks like a core config. Renaming this config to `plugin.download-commands.sshd-advertisedPrimary` and moving it to the plugin would solve that, but it feels a little strange.",
      "parentUuid": "cb79f2e8_703349d1",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1170610e_1884aa7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-12-21T12:47:24Z",
      "side": 1,
      "message": "There is no easy way to move the download config section and DownloadConfig to the plugin since that\u0027s also used in core.\n\nAnother option could be to merge the download-commands plugin into core, I feel that could make sense since a server without download commands seems incomplete.\n\nFor now I will go the route of least resistance and read the new option directly from the download-commands plugin to avoid changing core.\n\nLeaves the question how to name the new option\n- `download.sshd-advertisedPrimary` seems wrong since it\u0027s not related to download but to issuing push, stream-events or ssh commands which need to go to a primary\n- how about `sshd.advertisedPrimaryAddress` ?\n- `plugin.download-commands.sshdAdvertisedPrimaryAddress` would follow conventions used by most plugins but would be the first option of the download-commands plugin in this section",
      "parentUuid": "3470a9fe_dcbc4909",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33e56810_f3d29622",
        "filename": "java/com/google/gerrit/server/ssh/SshAddressesModule.java",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-19T19:10:20Z",
      "side": 1,
      "message": "Where does this get used?",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35d7b6bb_757d58a0",
        "filename": "java/com/google/gerrit/server/ssh/SshAddressesModule.java",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-12-19T22:54:22Z",
      "side": 1,
      "message": "https://gerrit-review.googlesource.com/c/plugins/download-commands/+/398557/2/src/main/java/com/googlesource/gerrit/plugins/download/scheme/SshScheme.java",
      "parentUuid": "33e56810_f3d29622",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a75fc9fe_a2b4bba4",
        "filename": "java/com/google/gerrit/server/ssh/SshAddressesModule.java",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-20T06:47:53Z",
      "side": 1,
      "message": "Thanks! I think you want them to have the same topic to link them in order to not break the build when you submit. Can you also add an `@UsedAt(UsedAt.Project.PLUGIN_DOWNLOAD_COMMANDS)` here?\n\nShould this have tests added?",
      "parentUuid": "35d7b6bb_757d58a0",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d4525c2_3563ea43",
        "filename": "java/com/google/gerrit/server/ssh/SshAddressesModule.java",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2023-12-20T13:47:35Z",
      "side": 1,
      "message": "Done\n\nyes, I will add tests",
      "parentUuid": "a75fc9fe_a2b4bba4",
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6488a8d_ec834290",
        "filename": "java/com/google/gerrit/server/ssh/SshAddressesModule.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-12-20T17:30:22Z",
      "side": 1,
      "message": "Should this go through `SocketUtil.format()` or `SocketUtil.resolve()`?",
      "range": {
        "startLine": 115,
        "startChar": 11,
        "endLine": 115,
        "endChar": 15
      },
      "revId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Forward-Compatibility",
        "description": {
          "value": "Changes to NoteDb, data serialization in ChangeField, or the entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\"","file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Frontend-Verified",
        "description": {
          "value": "Frontend compilation, tests, and linters pass"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Frontend-Verified\u003dMAX AND -label:Frontend-Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/master AND (file:\"^polygerrit-ui/.*\" OR is:merge)"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/master"],"failingAtoms":["file:\"^polygerrit-ui/.*\"","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Frontend-Verified=MAX AND -label:Frontend-Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR is:merge OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config","is:merge"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "c43fc4e1c8484e87396c31fe1782c413ed2bf327",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}