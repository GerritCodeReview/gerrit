{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9ffa0955_fd2729d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-08-14T19:53:21Z",
      "side": 1,
      "message": "```\nERROR: .../java/com/google/gerrit/testing/BUILD:3:13: Building java/com/google/gerrit/testing/libgerrit-test-util.jar (20 source files) and running annotation processors (AutoAnnotationProcessor, AutoValueProcessor, AutoOneOfProcessor) failed: (Exit 1): java failed: error executing command external/remotejdk11_linux/bin/java -XX:-CompactStrings \u0027--add-exports\u003djdk.compiler/com.sun.tools.javac.api\u003dALL-UNNAMED\u0027 \u0027--add-exports\u003djdk.compiler/com.sun.tools.javac.main\u003dALL-UNNAMED\u0027 ... (remaining 17 arguments skipped)\njava/com/google/gerrit/testing/InMemoryModule.java:195: error: constructor Module in class Module cannot be applied to given types;\n    install(new ChangesByProjectCache.Module(ChangesByProjectCache.UseIndex.TRUE), config);\n            ^\n  required: UseIndex,Config\n  found: UseIndex\n  reason: actual and formal argument lists differ in length\njava/com/google/gerrit/testing/InMemoryModule.java:195: error: cannot find symbol\n    install(new ChangesByProjectCache.Module(ChangesByProjectCache.UseIndex.TRUE), config);\n                                                                                   ^\n  symbol:   variable config\n  location: class InMemoryModule\nINFO: Elapsed time: 11.420s, Critical Path: 4.57s\nINFO: 122 processes: 16 disk cache hit, 68 internal, 19 linux-sandbox, 19 worker.\nFAILED: Build did NOT complete successfully\n```",
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d33b01a_5a463943",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-08-17T10:10:29Z",
      "side": 1,
      "message": "Please send me the change for review that merges 3.5 forward into master, so that I can make the necessary internal adjustments. Thanks.",
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954024b5_a96de3b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-09-20T20:32:05Z",
      "side": 1,
      "message": "Here is the 3.6 merge: https://gerrit-review.googlesource.com/c/gerrit/+/386978\n\nI think 3.6 might have a regression in GitVisibleChangeFilter.getVisibleChanges() compared to 3.5. The return loop iterates over the cds and does not catch StorageExceptions (in fact it actually throws some). Instead, I think it should be catching those and skipping that cd, that is what GitVisibleChangeFilter.loadChangeDatasOneByOne() does and it comments about how important it is to do.\n\n​The 3.5 code ignores \"broken\" changes in VisibleChangesCache.visibleChangesByScan()\nso it feels like a 3.6 regression, and that regression gets worse with my change because I lazily delay more loads until the permission check in the final loop compared to the current approach in 3.6. We may want to fix that regression first?",
      "parentUuid": "5d33b01a_5a463943",
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acfc6349_ed0a019a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2023-09-22T22:17:58Z",
      "side": 1,
      "message": "\u003e Here is the 3.6 merge: https://gerrit-review.googlesource.com/c/gerrit/+/386978\n\u003e \n\u003e I think 3.6 might have a regression in GitVisibleChangeFilter.getVisibleChanges() compared to 3.5. The return loop iterates over the cds and does not catch StorageExceptions (in fact it actually throws some). Instead, I think it should be catching those and skipping that cd, that is what GitVisibleChangeFilter.loadChangeDatasOneByOne() does and it comments about how important it is to do.\n\u003e \n\u003e ​The 3.5 code ignores \"broken\" changes in VisibleChangesCache.visibleChangesByScan()\n\u003e so it feels like a 3.6 regression, and that regression gets worse with my change because I lazily delay more loads until the permission check in the final loop compared to the current approach in 3.6. We may want to fix that regression first?\n\nDone in https://gerrit-review.googlesource.com/c/gerrit/+/387217 GitVisibleChangeFilter: Avoid throwing exceptions",
      "parentUuid": "954024b5_a96de3b6",
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f4a4df_523522fd",
        "filename": "Documentation/config-gerrit.txt",
        "patchSetId": 8
      },
      "lineNbr": 1016,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2023-08-17T10:10:29Z",
      "side": 1,
      "message": "This sounds like it will create OOM issues. We have projects with O(millions) of changes and I bet others have very large repos, too.",
      "range": {
        "startLine": 1015,
        "startChar": 57,
        "endLine": 1016,
        "endChar": 57
      },
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "222c4411_5b0a6b56",
        "filename": "Documentation/config-gerrit.txt",
        "patchSetId": 8
      },
      "lineNbr": 1016,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2023-09-20T20:32:05Z",
      "side": 1,
      "message": "Seeing as how counting the number of project in the cache is not particularly useful (some projects can be as large as all the other projects combined), I have switched this to a \"weighted\" approach and used the default settings. \n\nAs for the memory utilization, for perspective, we can fit all of our projects in memory with the memoryLimit set to 1500m.",
      "parentUuid": "a9f4a4df_523522fd",
      "range": {
        "startLine": 1015,
        "startChar": 57,
        "endLine": 1016,
        "endChar": 57
      },
      "revId": "c5182c7036713e95ef4b7372c7c6aec9fe9d85a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}