{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ab5c362c_ae13ce6f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "It does, but not always. See the related thread at https://gerrit-review.googlesource.com/c/gerrit/+/317099/comment/4d97063f_1c133d64/",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f669c64a_e8da305e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-09T21:28:56Z",
      "side": 1,
      "message": "I would favor taking advantage of the existing jgit caching instead of adding an extra layer in Gerrit. If we need to make it better, we can always add an Ref.evict() method to jgit. Having a generic jgit evict which responds to ref updates from the HA plugin would help all repositories, not just AllUsers.",
      "parentUuid": "ab5c362c_ae13ce6f",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6205427f_610cb316",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-10T08:55:41Z",
      "side": 1,
      "message": "\u003e I would favor taking advantage of the existing jgit caching instead of adding an extra layer in Gerrit. \n\nI agree 100% that we should have a caching of refs in place in the OpenSource version of JGit, similarly to what the Google\u0027s fork has. Is there anyone at Google that can contribute that?\n\nI believe the reason why the Google\u0027s setups did not find this significant regression is because their refs are very well cached.\n\nThere is another problem though: how can we fix Gerrit v3.2? This change is not an improvement but rather a fix of a significant performance regression (3600 times slower) of this cache.\n\nShould we just revert the offending change that caused the problem instead?\n\n@Patrick what do you think?",
      "parentUuid": "f669c64a_e8da305e",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68db5a29_7a688c44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-10T16:16:24Z",
      "side": 1,
      "message": "\u003e\u003e I would favor taking advantage of the existing jgit caching instead of adding an extra layer in Gerrit. \n\u003e\n\u003e I agree 100% that we should have a caching of refs in place in the OpenSource version of JGit, similarly to what the Google\u0027s fork has. Is there anyone at Google that can contribute that?\n\nIt does, trustFolderStat \u003d True\n\n\u003e Should we just revert the offending change that caused the problem instead?\n\nDoes turning on caching (trustFolderStat \u003d True) for this repo make this a non-issue?",
      "parentUuid": "6205427f_610cb316",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64b7c012_f72800fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-14T11:17:58Z",
      "side": 1,
      "message": "I did a bit of testing with locally started Gerrit app and here are the results.\n\n1. download the latest stable-3.1 (gerrit-3.1.16)\n* bootstrap site and create test_repo\n* push one-liner for review\n* push 200 one-liners, one-by-one for review (in for loop) to repo took 1m 7s\n* view open changes in UI\n* view open changes with the following curl\ncurl -w \"@$HOME/.curl-format.txt\"  -v -s http://localhost:8091/changes/\\?O\\\u003d81\\\u0026S\\\u003d0\\\u0026n\\\u003d25\\\u0026q\\\u003dstatus%3Aopen\n     time_namelookup:  0.000826s\n        time_connect:  0.001015s\n     time_appconnect:  0.000000s\n    time_pretransfer:  0.001069s\n       time_redirect:  0.000000s\n  time_starttransfer:  0.015318s\n                     ----------\n          time_total:  0.016775s\n\n2. download the latest stable-3.2 (gerrit-3.2.12)\n* bootstrap site and create test_repo\n* push one-liner for review\n* push 200 one-liners, one-by-one for review (in for loop) to repo took 1m 21s\n* view open changes in UI\n* view open changes with the following curl\ncurl -w \"@$HOME/.curl-format.txt\"  -v -s http://localhost:8091/changes/?O\u003d881\u0026S\u003d0\u0026n\u003d25\u0026q\u003dstatus%3Aopen%20-is%3Awip\n     time_namelookup:  0.000798s\n        time_connect:  0.000961s\n     time_appconnect:  0.000000s\n    time_pretransfer:  0.001021s\n       time_redirect:  0.000000s\n  time_starttransfer:  0.026635s\n                     ----------\n          time_total:  0.027209s\n\n3. use stable-3.2 (gerrit-3.2.12) with `core.trustFolderStat true` in `${GERRIT_ETC_DIR}/jgit.config`\n* bootstrap site and create test_repo\n* push one-liner for review\n* push 200 one-liners, one-by-one for review (in for loop) to repo took 1m 11s\n* view open changes in UI\n* view open changes with the following curl\ncurl -w \"@$HOME/.curl-format.txt\"  -v -s http://localhost:8091/changes/?O\u003d881\u0026S\u003d0\u0026n\u003d25\u0026q\u003dstatus%3Aopen%20-is%3Awip\n     time_namelookup:  0.000951s\n        time_connect:  0.001128s\n     time_appconnect:  0.000000s\n    time_pretransfer:  0.001177s\n       time_redirect:  0.000000s\n  time_starttransfer:  0.040785s\n                     ----------\n          time_total:  0.041317s\n\nsubsequent calls reduced the time to\n     time_namelookup:  0.000906s\n        time_connect:  0.001088s\n     time_appconnect:  0.000000s\n    time_pretransfer:  0.001138s\n       time_redirect:  0.000000s\n  time_starttransfer:  0.023022s\n                     ----------\n          time_total:  0.023785s\n\n4. use stable-3.2 (gerrit-3.2.12) with this change\n* bootstrap site and create test_repo\n* push one-liner for review\n* push 200 one-liners, one-by-one for review (in for loop) to repo took 1m 11s\n* view open changes in UI\n* view open changes with the following curl\ncurl -w \"@$HOME/.curl-format.txt\"  -v -s http://localhost:8091/changes/\\?O\\\u003d881\\\u0026S\\\u003d0\\\u0026n\\\u003d25\\\u0026q\\\u003dstatus%3Aopen%20-is%3Awip\n     time_namelookup:  0.000904s\n        time_connect:  0.001086s\n     time_appconnect:  0.000000s\n    time_pretransfer:  0.001143s\n       time_redirect:  0.000000s\n  time_starttransfer:  0.016510s\n                     ----------\n          time_total:  0.017913s\n\nTo sum it up: in this simple sequential scenario `push for review over ssh` for `stable-3.2` was comparable with `stable-3.1` and `stable-3.2` with cache only when `core.trustFolderStat true`. However it was still bitten by them in sheer single-threaded open-changes view by ~32%. If I have a bit of time I will try to add some concurrency (another thread pushing constantly to a different repo in the same time) to the picture. If you thinks about better scenario don\u0027t hesitate to suggest it :D",
      "parentUuid": "68db5a29_7a688c44",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d70eb78_f7196367",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-14T15:58:13Z",
      "side": 1,
      "message": "\u003e I did a bit of testing with locally started Gerrit app and here are the results.\n\nThanks for all the data below!\n\nCan you give us some more info about your setup?\n\n* What kind of disk was used for the repos?\n* If NFS, what does the network connection look like (are you in the same datacenter? ping time? etc)?\n* If local, SSD or spinning?\n* Was any repacking done in any repo before or after pushing the changes (either manual or scheduled)?\n* How many times did you repeat the curl get changes command for each test (i.e. was this an average or a single time for each)?\n* What did you do for \u0027bootstrap site\u0027? I\u0027d guess this is a little more than \u0027gerrit.war init\u0027? Are you creating multiple users?\n\n[snip]\n\n\u003e 3. use stable-3.2 (gerrit-3.2.12) with `core.trustFolderStat true` in `${GERRIT_ETC_DIR}/jgit.config`\n\nWhat was the value of core.trustFolderStat for the other tests? The default value is true. Were there any other jgit or gerrit settings that you had non-default values for?\n\n[snip]\n\n\u003e To sum it up: in this simple sequential scenario `push for review over ssh` for `stable-3.2` was comparable with `stable-3.1` and `stable-3.2` with cache only when `core.trustFolderStat true`. However it was still bitten by them in sheer single-threaded open-changes view by ~32%. If I have a bit of time I will try to add some concurrency (another thread pushing constantly to a different repo in the same time) to the picture. If you thinks about better scenario don\u0027t hesitate to suggest it :D\n\nI like the simplicity of the scenario. Simple is really nice for reproducing issues, thanks.",
      "parentUuid": "64b7c012_f72800fe",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56ab2df2_d62b145c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-14T19:35:29Z",
      "side": 1,
      "message": "I do not see in the above numbers and cases the use-case indicated in the Issue 14945. @Jacek did you make the REST-API calls to /a/changes/NNNN/detail in your test-cases?",
      "parentUuid": "1d70eb78_f7196367",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17952eb3_c12629b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-15T15:37:15Z",
      "side": 1,
      "message": "thanks for measuring! these numbers aren\u0027t that convincing, though. \n\nFor adding extra complexity, we\u0027d want to see an order of magnitude speed increase? This is a factor 2 at best.\n\nIf the packed/loose-ref is a performance concern, the simplest thing I can think of is trying to use mmap\u0027d I/O for the packed-refs file. That would cut down on reading I/O.",
      "parentUuid": "56ab2df2_d62b145c",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba667873_07180fb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-15T15:55:25Z",
      "side": 1,
      "message": "\u003eShould we just revert the offending change that caused the problem instead?\n\nThat seems hard to do, and probably not compliant with our stable release policy?\n\n\u003eI believe the reason why the Google\u0027s setups did not find this significant regression is because their refs are very well cached.\n\nWe use reftable on top of DFS. Once the tables are loaded into DFS, reads are completely in-memory.\n\nYou could try with reftable today; I\u0027d be interested to hear how well that works.",
      "parentUuid": "17952eb3_c12629b1",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83168013_d564be18",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-15T20:13:58Z",
      "side": 1,
      "message": "\u003e \u003eShould we just revert the offending change that caused the problem instead?\n\u003e That seems hard to do, and probably not compliant with our stable release policy?\n\nWell, I\u0027ve measured in the associated Bug raised a degradation of performance of the API by 3600x, which is a significant regression.\n\nHowever, you have a point: the revert of the offending change would be a significant change anyway, which isn\u0027t ideal at all.\n\n\u003e \u003eI believe the reason why the Google\u0027s setups did not find this significant regression is because their refs are very well cached.\n\u003e We use reftable on top of DFS. Once the tables are loaded into DFS, reads are completely in-memory.\n\u003e You could try with reftable today; I\u0027d be interested to hear how well that works.\n\nWould the open-source version of reftable do the same? I am not sure, however, that reftable is ready for production on Gerrit v3.2 :-(",
      "parentUuid": "ba667873_07180fb3",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df0194aa_f5f24fa4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-16T10:28:21Z",
      "side": 1,
      "message": "\u003e Would the open-source version of reftable do the same?\n\nSee https://gerrit.googlesource.com/jgit/+/211900aafd137061b1f12286bb1a24d495423aca/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileReftableStack.java#163\n\nit uses whatever Java does (a mmap\u0027d file would work well here too). The OS/NFS-client still has a local page cache for NFS, doesn\u0027t it? So the performance should better (the file is kept open, so you only have syscall overhead).",
      "parentUuid": "83168013_d564be18",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc9c7cf_3e84697d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-16T10:37:59Z",
      "side": 1,
      "message": "\u003e \u003e Would the open-source version of reftable do the same?\n\u003e \n\u003e See https://gerrit.googlesource.com/jgit/+/211900aafd137061b1f12286bb1a24d495423aca/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/FileReftableStack.java#163\n\ncool, will have a look, thanks.\n\n\u003e it uses whatever Java does (a mmap\u0027d file would work well here too). The OS/NFS-client still has a local page cache for NFS, doesn\u0027t it? So the performance should better (the file is kept open, so you only have syscall overhead).\n\nNot with trust folder stat set to false: it will go to the network to check the actual status of the files, not the cached one.",
      "parentUuid": "df0194aa_f5f24fa4",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95895529_90afb883",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-16T10:46:19Z",
      "side": 1,
      "message": "\u003e\u003eit uses whatever Java does (a mmap\u0027d file would work well here too). The OS/NFS-client still has a local page cache for NFS, doesn\u0027t it? So the performance should better (the file is kept open, so you only have syscall overhead).\n\n\u003eNot with trust folder stat set to false: it will go to the network to check the actual status of the files, not the cached one.\n\nthat seems unlikely, as FileInputStream is a Java class, and trustFolderStat is a JGit feature. How would FileInputStream know about trustFolderStat ?",
      "parentUuid": "bfc9c7cf_3e84697d",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8009c090_5114fa8c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-16T13:17:51Z",
      "side": 1,
      "message": "\u003e \u003e\u003eit uses whatever Java does (a mmap\u0027d file would work well here too). The OS/NFS-client still has a local page cache for NFS, doesn\u0027t it? So the performance should better (the file is kept open, so you only have syscall overhead).\n\u003e \n\u003e \u003eNot with trust folder stat set to false: it will go to the network to check the actual status of the files, not the cached one.\n\u003e \n\u003e that seems unlikely, as FileInputStream is a Java class, and trustFolderStat is a JGit feature. How would FileInputStream know about trustFolderStat ?\n\nJGit does more than just FileInputStream when you set trustFolderStat \u003d false. That *a lot more* is expensive, especially over NFS. For the details, I would leave Matthias to comment, who is more knowledgeable than me on the topic :-)",
      "parentUuid": "95895529_90afb883",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1cbff96_76c05ecc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-16T13:26:52Z",
      "side": 1,
      "message": "I wrote the code that does \"the things\" in case of reftable.  I don\u0027t think it uses trustFolderStat in any way, and it doesn\u0027t need to as the reftable code doesn\u0027t read directories.",
      "parentUuid": "8009c090_5114fa8c",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fb80f81_7d924c25",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-16T14:01:27Z",
      "side": 1,
      "message": "\u003e I wrote the code that does \"the things\" in case of reftable.  I don\u0027t think it uses trustFolderStat in any way, and it doesn\u0027t need to as the reftable code doesn\u0027t read directories.\n\nI believe it is going to be a good test to compare (when All-Users.git is on NFS):\n- v3.1.12\n- v3.2.12 (packedRefs + trustFolderStat \u003d true)\n- v3.2.12 (packedRefs + trustFolderStat \u003d false)\n- v3.2.12 (refTable)",
      "parentUuid": "f1cbff96_76c05ecc",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfa533e8_69580559",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-16T15:15:11Z",
      "side": 1,
      "message": "\u003e \u003e I wrote the code that does \"the things\" in case of reftable.  I don\u0027t think it uses trustFolderStat in any way, and it doesn\u0027t need to as the reftable code doesn\u0027t read directories.\n\u003e \n\u003e I believe it is going to be a good test to compare (when All-Users.git is on NFS):\n\u003e - v3.1.12\n\u003e - v3.2.12 (packedRefs + trustFolderStat \u003d true)\n\u003e - v3.2.12 (packedRefs + trustFolderStat \u003d false)\n\u003e - v3.2.12 (refTable)\n\nI think you need those same permutations for 3.1 as well (and I assume you meant 3.1.16?).\n\nSetup would be something like:\nAll-Users.git on NFS vs local ssd, site has X number of users?, test repo has Y existing refs (maybe needs heads/changes permutations as well?)? Start each test with fs caches dropped?\n\nAnd then permutations of:\n- v3.1.16 (packedRefs + trustFolderStat \u003d true)\n- v3.1.16 (packedRefs + trustFolderStat \u003d false)\n- v3.1.16 (reftable)\n- v3.2.12 (packedRefs + trustFolderStat \u003d true)\n- v3.2.12 (packedRefs + trustFolderStat \u003d false)\n- v3.2.12 (refTable)\n\nProbably repeat each test N times?\n\nI don\u0027t particularly care about the reftable results until reftable is in git.git, but Han-Wen/Google may want to see them if there\u0027s concern of regression.\n\nThis isn\u0027t trivial testing, but it\u0027s the kind of testing I\u0027m going to be looking for to justify Gerrit/JGit changes like this and I think it\u0027s the kind of bar we should all be aiming for.\n\nIdeally we can automate this kind of thing since I\u0027m sure this won\u0027t be the last performance concern we have, but maybe even getting a \u0027dev-performance\u0027 doc started with some of the methodology/justification for this testing would help set expectations for contributors? We\u0027ve been doing a lot of testing like this for schema/noteDb/reindex performance and we\u0027ll be doing a lot more to compare our 2.7 fork and 3.5 performance over the next year, so I\u0027m happy to try and help get this \"standardized\".",
      "parentUuid": "0fb80f81_7d924c25",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "968039c9_33e52524",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-16T15:20:47Z",
      "side": 1,
      "message": "On linux you can drop FS caches with \"echo 3 \u003e /proc/sys/vm/drop_caches\". You should probably also drop any related Gerrit caches when you do that to make things comparable.",
      "parentUuid": "bfa533e8_69580559",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "909440da_953b407a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-17T08:50:43Z",
      "side": 1,
      "message": "I added some numbers to the associated issue Issue 14945.\nThe trustFolderStat discussion looks not so relevant: with or without the numbers are pretty much similar.",
      "parentUuid": "968039c9_33e52524",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c27547_e24dda0b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-26T12:33:00Z",
      "side": 1,
      "message": "@Nasser, @Luca\n\nHere [1] is the simple test script and performance comparison of vanilla 3.2.12 version vs this change.\nTLDR; cache offers `2-4` times better performance for account-heavy operations using the same amount of resources and we are talking about really simple setup where Gerrit runs on local SSD and NFS and trustFolderStat is not even involved.\nI hope that it rationalises the benefit caching All-Users refs :) having said that I\u0027m open for discussion and different ideas on how to improve both code and test scenario.\n\n[1] https://gist.github.com/geminicaprograms/b2cae199793f0f2b18759a803000447f",
      "parentUuid": "56ab2df2_d62b145c",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2d4d12_b6084211",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-28T11:37:03Z",
      "side": 1,
      "message": "Thanks for looking into this, and especially for the benchmarks.\n\nI think the overall idea to cache refs is a good one, but would be it be possible to implement the cache as an in-memory RefDatabase? Right now, your cache only helps with account speedups, but we also have plans for stars/drafts (see https://gerrit-review.googlesource.com/c/gerrit/+/317099) for which we\u0027d have to build another cache.  If we could have a caching layer around JGit\u0027s RefDatabase, we\u0027d catch all these use cases in one go.\n\nAs a first step, you could simply read the list of refs into memory from JGit, and let it survive across requests. Reload it on writes (either as a RefUpdated event, because you saw a LOCK_FAILURE, or because you\u0027re executing a (Batch)RefUpdate on All-Users).",
      "parentUuid": "01c27547_e24dda0b",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e150626_c85d8a29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-29T22:12:08Z",
      "side": 1,
      "message": "\u003e [1] https://gist.github.com/geminicaprograms/b2cae199793f0f2b18759a803000447f\n\nThis shows perf before/after this change on 3.2. Could we also compare to 3.1 to see if this change brings performance back in line with that?\n\nAlso, to build on Han-Wen\u0027s point, if we\u0027re building caching around RefDatabase, why not have JGit itself do the caching?",
      "parentUuid": "2c2d4d12_b6084211",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d3de93c_df904eb1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-30T08:03:00Z",
      "side": 1,
      "message": "\u003e I think the overall idea to cache refs is a good one\n\n+1 and it would align also the OpenSource performance of reading a refs to the DFS implementation at Google, making future changes less problematic for both use-cases.\n\n\u003e but would be it be possible to implement the cache as an in-memory RefDatabase?\n\nI like it, would you do that in the Gerrit or JGit\u0027s code-base? I am just a bit concerned that this change is on stable-3.2 (which is due to be EOL by November this year) and, as you pointed out, radical changes to the code should be avoided.\n\nFor the master branch, I am 100% with you that the solution should be generalised and we\u0027ve still 1 month of development before cutting stable-3.5.\n\n\u003e Right now, your cache only helps with account speedups, but we also have plans for stars/drafts (see https://gerrit-review.googlesource.com/c/gerrit/+/317099) for which we\u0027d have to build another cache. \n\nYeah, there is a difference between the use-cases though:\n- AccountCache is used *all throughout Gerrit code* whenever you do anything that involves an account. The number of calls to the AccountCache.get() is very high and is linked with pretty much any use-case.\n- Fetching drafts is used for retrieving draft comments, period. The number of calls are directly related to a specific user action.\n\n\u003e If we could have a caching layer around JGit\u0027s RefDatabase, we\u0027d catch all these use cases in one go.\n\nI agree, is it something to escalate to the JGit developers\u0027 community? That caching layer should be in the JGit code-base IMHO.",
      "parentUuid": "9e150626_c85d8a29",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e773b5_a407647c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-09-30T08:10:25Z",
      "side": 1,
      "message": "\u003e Fetching drafts is used for retrieving draft comments, period. The number of calls are directly related to a specific user action.\n\nKeep in mind that dashboards use the drafts operator, so any slowdown would affect dashboards.\n\nI am +1 on a generalized RefCache. This would make it so that we can stop debating about SHA1s in cache keys :-)",
      "parentUuid": "3d3de93c_df904eb1",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8df072b_7e4f9ec4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2021-09-30T13:59:40Z",
      "side": 1,
      "message": "+1 for the proposal to add an in-memory RefDatabase in JGit which can wrap RefDirectory (or FileReftableDatabase) as a caching layer",
      "parentUuid": "c7e773b5_a407647c",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61e67a45_4a442d2d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 14,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-30T15:28:06Z",
      "side": 1,
      "message": "Proposing then to -2 this change and start over at JGit level, on stable-5.9 branch.",
      "parentUuid": "b8df072b_7e4f9ec4",
      "range": {
        "startLine": 14,
        "startChar": 20,
        "endLine": 14,
        "endChar": 43
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd14a2d2_6e61cf38",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "Couple issues here:\n\n1) I don\u0027t think JGit locks for reads\n2) This makes it sound reftable backend specific. Maybe reword to say \"potentially searches all refs for the ref in question\"?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 8
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e3721b9_f64fed62",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-10T06:08:39Z",
      "side": 1,
      "message": "I believe it does (at least this is the place where I have ended up y-day when I was debugging to prepare this descripton :))\norg.eclipse.jgit.internal.storage.reftable.ReftableDatabase.exactRef(String)\n\nand here is the code in question:\n\t@Nullable\n\tpublic Ref exactRef(String name) throws IOException {\n\t\tlock.lock();\n\t\ttry {\n\t\t\tReftable table \u003d reader();\n\t\t\tRef ref \u003d table.exactRef(name);\n\t\t\tif (ref !\u003d null \u0026\u0026 ref.isSymbolic()) {\n\t\t\t\treturn table.resolve(ref);\n\t\t\t}\n\t\t\treturn ref;\n\t\t} finally {\n\t\t\tlock.unlock();\n\t\t}\n\t}",
      "parentUuid": "fd14a2d2_6e61cf38",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 8
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a097e9a2_56878846",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-10T13:22:39Z",
      "side": 1,
      "message": "\u003e I believe it does (at least this is the place where I have ended up y-day when I was debugging to prepare this descripton :))\n\u003e org.eclipse.jgit.internal.storage.reftable.ReftableDatabase.exactRef(String)\n\nIt seems like you\u0027re looking at the reftable code. The generic RefDatabase implementation (for stable-3.2 jgit) is at https://gerrit.googlesource.com/jgit/+/73f8acdc5c97e068143c86765995c4fb6923ee91/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java#313 and does not have any locking.\n\nI am surprised that reftable locks on reads, but that seems like a different discussion.\n\nSince the reftable backend and the files backend are often going to have different behavior (as one would expect), we probably need to consider both when dealing with any kind of git ref issue, but especially for anything related to performance.",
      "parentUuid": "0e3721b9_f64fed62",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 8
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64adb8f_a94363a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-14T11:17:58Z",
      "side": 1,
      "message": "I have started `stable-3.2` and connected with debug and here is the content of the debug:\n\n0. org.eclipse.jgit.lib.Repository.exactRef(String)\n1. org.eclipse.jgit.internal.storage.file.RefDirectory.readAndResolve(String, RefList\u003cRef\u003e)\n2. org.eclipse.jgit.internal.storage.file.RefDirectory.readRef(String, RefList\u003cRef\u003e)\n\nIOW it seems that you were right by default it should end up in File operations, but I\u0027m not sure if that better or worse :D",
      "parentUuid": "a097e9a2_56878846",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 8
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49b3365a_e1a4539e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 18,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-15T15:37:15Z",
      "side": 1,
      "message": "the lock is here Java mutex. Reftable locks on read because the RefDatabase has to be thread-safe, and it uses a single byte[] block for reading.\n\nFile locks are expensive, but mutexes are cheap.",
      "parentUuid": "a64adb8f_a94363a5",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 8
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd6199ef_db6cb676",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-09T15:54:33Z",
      "side": 1,
      "message": "Thanks for adding the use cases where you think this affects things. Can you quantify before and after the performance effect on these use cases? i.e. before it takes Xs to do a git push to master, after it takes Ys to do a git push to master.",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c46bd0b5_189779f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-09T17:55:46Z",
      "side": 1,
      "message": "These are not all use cases as I believe that there is more... will try to get some numbers for you ;)",
      "parentUuid": "fd6199ef_db6cb676",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fb6b863_a7587f52",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-09T19:11:39Z",
      "side": 1,
      "message": "\u003e These are not all use cases as I believe that there is more... will try to get some numbers for you ;)\n\nI\u0027m not looking for more use cases, I am looking for the primary use case that you feel will be improved by this.",
      "parentUuid": "c46bd0b5_189779f4",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2951eb02_44670877",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-09T15:54:33Z",
      "side": 1,
      "message": "While this seems like a great candidate for caching, I am concerned about the \"correctness\" impact that this may have on operations. I think it would be worth pursuing a per request scope form of caching instead of a time based one. In other words, it would be better to always read this value at least once at the beginning of the request to ensure that it is up-to-date, and then use that value throughout the entire request so that it is not only faster, but consistent throughout the request. We use this technique for many of our plugin predicates. It provides a good balance between data correctness and speed, and I think it might apply well to this problem.",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c80309cd_f71fe56e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-09T17:55:46Z",
      "side": 1,
      "message": "I guess I haven\u0027t expressed myself correct:\nThere were 13 calls to AccountCacheImpl.get (13 x 3 different refs check as explained above) + 1 extra call to `refs/meta/external-ids` - which summed up to overal 40 calls to get refs objects.\n\nNow in terms of `refs/meta/external-ids` correctness - unless you do some behind-the-gerrit thing it should be nicely handled by `onGitReferenceUpdated` in typical cases and extra case is handled in ExternalIdNotes. All the other evictions were added because in IT tests it was expected to do sth behind the scene to end up in stale state... Having said that I\u0027m still open for more suggestions - can you point me to an example of such scope limited cache?\n\nBut IMHO it will still create the bottleneck for the busy servers as scopes will still compete on getting the same ref object ids (`refs/meta/external-ids` and `refs/users/default`) and it is a matter of load then...",
      "parentUuid": "2951eb02_44670877",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6c439bc_69d38d5c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2021-09-09T19:11:39Z",
      "side": 1,
      "message": "\u003e Now in terms of `refs/meta/external-ids` correctness - unless you do some behind-the-gerrit thing it should be nicely handled by `onGitReferenceUpdated` in typical cases and extra case is handled in ExternalIdNotes. All the other evictions were added because in IT tests it was expected to do sth behind the scene to end up in stale state... \n\nYes, in theory, however evictions are fragile. As others have pointed out, there are also the multi-primary use cases to care about. \n\n\u003e Having said that I\u0027m still open for more suggestions - can you point me to an example of such scope limited cache?\n\nThe examples I am familiar with do not use Guice or Guava for this. Any predicate which sets or looks up data either lazily, or in its constructor is effectively caching via a small scope. The task plugin caches a lot of task data in the TaskTree object which gets created once per query, but then reused for every change.\n\nThis use case might be more complicated, you could try passing a Cache object around to all the places it is used, but using Guice to do this would likely be better. I am imagining using Guice\u0027s @RequestScoped annotation to bind a cache class that represents this cache, and then injecting that cache wherever it is needed. This cache object could probably be as simple as a HashMap which knows how to lookup up values in the AllUsers project on \"misses\" (very similar to what you have, but without guava).\n\n\u003e But IMHO it will still create the bottleneck for the busy servers as scopes will still compete on getting the same ref object ids (`refs/meta/external-ids` and `refs/users/default`) and it is a matter of load then...\n\nThat could be, can you quantify this with numbers such as \"load average drops by X percent with this cache\"?",
      "parentUuid": "c80309cd_f71fe56e",
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4b6f90_94d20d75",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "Give the command used here?",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 53
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71ad1a2c_91a27edd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-10T06:08:39Z",
      "side": 1,
      "message": "Luca added a small method to `AccountIT` (https://gerrit-review.googlesource.com/c/gerrit/+/316763)\n\n  @Test\n  @UseLocalDisk\n  public void accountCachePerformaceTest() throws Exception {\n    int numAccounts \u003d 100;\n    int numIterations \u003d 100;\n    Account.Id[] accountIds \u003d new Account.Id[numAccounts];\n\n    for (int i \u003d 0; i \u003c numAccounts; i++) {\n      accountIds[i] \u003d accountCreator.create(\"account\" + i).id();\n    }\n\n    Stopwatch timer \u003d Stopwatch.createStarted();\n    for (int j \u003d 0; j \u003c numIterations; j++) {\n      for (Account.Id id : accountIds) {\n        assertThat(accountCache.get(id).isPresent()).isTrue();\n      }\n    }\n    timer.stop();\n\n    System.out.println(\"Execution time: \" + timer.elapsed(TimeUnit.MILLISECONDS) + \" ms\");\n  }\n\nAnd I\u0027m calling it with:\n  bazel test --test_output\u003dstreamed --test_filter\u003dcom.google.gerrit.acceptance.api.accounts.AccountIT.accountCachePerformaceTest //javatests/com/google/gerrit/acceptance/api/accounts:api_account\n\nNot sure if it should be a part of the commit message yet I have described of what is happening there above statement you refer to...",
      "parentUuid": "7f4b6f90_94d20d75",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 53
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "531e2d64_d3ebaa9c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-09T11:01:44Z",
      "side": 1,
      "message": "I forgot to mention that test case was added to AccountIT.java which means that in-memory Git repo is used to back the access to refs... I can imagine that calling it on real git server could result in even higher performance degradation...",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 55,
        "endChar": 0
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc7b4915_e51771e8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-10T06:08:39Z",
      "side": 1,
      "message": "Nvm - missed the `@UseLocalDisk` annotation in test that is used to get the numbers - IOW these are real numbers from having All-Users on a local SSD disk",
      "parentUuid": "531e2d64_d3ebaa9c",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 55,
        "endChar": 0
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3ea05d1_e2ee5ef3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "access",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 57,
        "endChar": 13
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91c61525_e37c312f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-14T11:17:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3ea05d1_e2ee5ef3",
      "range": {
        "startLine": 57,
        "startChar": 6,
        "endLine": 57,
        "endChar": 13
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb0b2d8e_c019f5bd",
        "filename": "java/com/google/gerrit/acceptance/ProjectResetter.java",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "usersRefsCache? I know it\u0027s longer, but refsCache seems a little too generic. Same for the other files that aren\u0027t account-specific.",
      "range": {
        "startLine": 96,
        "startChar": 55,
        "endLine": 96,
        "endChar": 64
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdb4777c_5df143ea",
        "filename": "java/com/google/gerrit/acceptance/ProjectResetter.java",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-14T11:17:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb0b2d8e_c019f5bd",
      "range": {
        "startLine": 96,
        "startChar": 55,
        "endLine": 96,
        "endChar": 64
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58cbae62_eb756f73",
        "filename": "java/com/google/gerrit/acceptance/ProjectResetter.java",
        "patchSetId": 3
      },
      "lineNbr": 337,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "Can you evict just the deleted ones?",
      "range": {
        "startLine": 337,
        "startChar": 16,
        "endLine": 337,
        "endChar": 26
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a07e76_5e2c3e5d",
        "filename": "java/com/google/gerrit/acceptance/ProjectResetter.java",
        "patchSetId": 3
      },
      "lineNbr": 337,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-10T06:08:39Z",
      "side": 1,
      "message": "deleted ones + \u0027refs/users/default\u0027 + \u0027refs/meta/external-ids\u0027 I believe it is cleaner this way and cannot be worse than what we have now :D",
      "parentUuid": "58cbae62_eb756f73",
      "range": {
        "startLine": 337,
        "startChar": 16,
        "endLine": 337,
        "endChar": 26
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3d810b6_7d5b5ca0",
        "filename": "java/com/google/gerrit/server/account/AllUsersObjectIdByRefCache.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "nit: I think you want singular \"object_id\" and singular \"ref\" since neither refers to a collection? (matching class name)",
      "range": {
        "startLine": 40,
        "startChar": 49,
        "endLine": 40,
        "endChar": 77
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9aaf3dbb_37055c91",
        "filename": "java/com/google/gerrit/server/account/AllUsersObjectIdByRefCache.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-14T11:17:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3d810b6_7d5b5ca0",
      "range": {
        "startLine": 40,
        "startChar": 49,
        "endLine": 40,
        "endChar": 77
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b980190c_27009195",
        "filename": "java/com/google/gerrit/server/account/externalids/ExternalIdNotes.java",
        "patchSetId": 3
      },
      "lineNbr": 752,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-09T10:55:04Z",
      "side": 1,
      "message": "the rationale behind the change:\n1. when account gets created it results in 2 ref updates (see line #498 in com.google.gerrit.server.account.AccountsUpdate.commit(Repository, UpdatedAccount))\n* refs/users/XX/YYYYY (account details update)\n* refs/meta/external-ids (external ids update)\n\n2. update to `refs/users/XX/YYYY` results in the account re-index but it happens before the `refs/meta/external-ids` update hence it uses stale data\n\n3. in order to avoid it (and also speed up the reindex) update refs/meta/external-ids cache with the current value of ObjectId - evict(refs/meta/external-ids) would work too but with this move extra reach to repo for ObjectId is avoided until `refs/meta/external-ids` update gets propagated (after reindex).",
      "range": {
        "startLine": 750,
        "startChar": 4,
        "endLine": 752,
        "endChar": 5
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f8e99de_9eb4dc05",
        "filename": "java/com/google/gerrit/server/account/externalids/ExternalIdNotes.java",
        "patchSetId": 3
      },
      "lineNbr": 752,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T18:32:07Z",
      "side": 1,
      "message": "\u003e the rationale behind the change:\n\u003e 1. when account gets created it results in 2 ref updates (see line #498 in com.google.gerrit.server.account.AccountsUpdate.commit(Repository, UpdatedAccount))\n\u003e * refs/users/XX/YYYYY (account details update)\n\u003e * refs/meta/external-ids (external ids update)\n\u003e \n\u003e 2. update to `refs/users/XX/YYYY` results in the account re-index but it happens before the `refs/meta/external-ids` update hence it uses stale data\n\nWhy aren\u0027t those two refs updated atomically? Wouldn\u0027t that solve this issue?",
      "parentUuid": "b980190c_27009195",
      "range": {
        "startLine": 750,
        "startChar": 4,
        "endLine": 752,
        "endChar": 5
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a51f4ddd_453bb549",
        "filename": "java/com/google/gerrit/server/account/externalids/ExternalIdNotes.java",
        "patchSetId": 3
      },
      "lineNbr": 752,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2021-09-10T06:08:39Z",
      "side": 1,
      "message": "They are updated atomically but ref updates resulting from it (damn I should have phrased it differently - now I see it :D) are sent sequentially one-by-one hence the issue and solution that I have applied...",
      "parentUuid": "6f8e99de_9eb4dc05",
      "range": {
        "startLine": 750,
        "startChar": 4,
        "endLine": 752,
        "endChar": 5
      },
      "revId": "c5f817cff8085a78a6cc88dd23a0f4d13b538fc1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}