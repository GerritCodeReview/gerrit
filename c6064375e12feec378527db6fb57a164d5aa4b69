{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6b7853dd_d6a791ff",
        "filename": "polygerrit-ui/app/elements/change-list/gr-change-list-view/gr-change-list-view.ts",
        "patchSetId": 3
      },
      "lineNbr": 266,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-09-23T10:02:19Z",
      "side": 1,
      "message": "Given that you want to wait for the dom, putting this in `updated` seems more appropriate? Then you won\u0027t need the timeout.",
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2557c0e1_4d2740da",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1148215
      },
      "writtenOn": "2022-09-23T09:29:39Z",
      "side": 1,
      "message": "Could you please add documentation to the class?\n- Class level comment\n- Comment descritpion for public fields\n- (Optionally) Comment description for private fields\n\nWould probably also good for the SearchViewState",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 28
      },
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00eba087_0e0ef7b6",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-09-23T10:02:19Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "2557c0e1_4d2740da",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 28
      },
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a790b5ac_16ad7229",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1148215
      },
      "writtenOn": "2022-09-23T09:29:39Z",
      "side": 1,
      "message": "Does line 113 above already guarantees that query will be \u0027\u0027 if undefined?",
      "range": {
        "startLine": 145,
        "startChar": 8,
        "endLine": 145,
        "endChar": 20
      },
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f01d28f2_60d9247b",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-09-23T10:02:19Z",
      "side": 1,
      "message": "This feels really hacky and rather arbitrary.  It also adds delay of 1s to loading.\n\nIs there no more reliable way to guarantee we\u0027re not loading for the wrong thing?\n\nMaybe something like \"userModel.isLoaded\" as a prop.",
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8efcac5_1e7b31da",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 181,
      "author": {
        "id": 1148215
      },
      "writtenOn": "2022-09-23T09:29:39Z",
      "side": 1,
      "message": "nit: Add output type",
      "range": {
        "startLine": 181,
        "startChar": 2,
        "endLine": 181,
        "endChar": 6
      },
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b627cc3_520d5e79",
        "filename": "polygerrit-ui/app/models/views/search.ts",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1148215
      },
      "writtenOn": "2022-09-23T09:29:39Z",
      "side": 1,
      "message": "I am sorry, I am confused, can you please explain, why do we return [] in this case?",
      "range": {
        "startLine": 190,
        "startChar": 4,
        "endLine": 190,
        "endChar": 67
      },
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5954efb0_2e0340e9",
        "filename": "polygerrit-ui/app/services/app-context-init.ts",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2022-09-23T10:02:19Z",
      "side": 1,
      "message": "Don\u0027t you need an equivalent in test-app-context-init?\n\nI find this assigning of variables a bit smelly.  Ideally you pass in these parameters as a constructor.\n\nI can see how this is challenging given the circular dependency.\n\nWhat about:\n\n```\nconst searchViewModel \u003d new SearchViewModel(\n    appContext.restApiService,\n    appContext.userModel,\n    () \u003d\u003e dependencies.get(navigationToken);\n  );\nThis makes it a resolver\n```",
      "revId": "c6064375e12feec378527db6fb57a164d5aa4b69",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}