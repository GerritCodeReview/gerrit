{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a8ebeafa_6484c10f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "I\u0027m not done with the review yet. I\u0027ll continue tomorrow. Just posting my comments already so that you can factor them in while you\u0027re working on the caches.",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "22c59a4c_83bb164d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Finished it. It took some time to go through and understand the rest of the code.",
      "parentUuid": "a8ebeafa_6484c10f",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54d8f0bc_cfb0324d",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "This is still unused as in the previous changes. If this is about the auto-merge commit, I think it should be in another class, which is outside/separate of the diff caches.",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 88
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cee69db_3bf05074",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54d8f0bc_cfb0324d",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 88
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c462f0e_dbf7486c",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 176,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "I don\u0027t see how this method will be used by other classes than GitFileDiffCache. Do we need to have it in DiffUtil?",
      "range": {
        "startLine": 176,
        "startChar": 36,
        "endLine": 176,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4429801_e12cc0ba",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 176,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I removed it. Done.",
      "parentUuid": "1c462f0e_dbf7486c",
      "range": {
        "startLine": 176,
        "startChar": 36,
        "endLine": 176,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c11d4550_50403782",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Where\u0027s the diff algorithm set?",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 6
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82c3e9de_324704f8",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Moved to the GitFileDiffCacheImpl.\nDone.",
      "parentUuid": "c11d4550_50403782",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 6
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e877788_0bc5b623",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 182,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "What about the similarity threshold? What if you want to switch rename detection off?",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 182,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba0d657_e786a2e0",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 182,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Right, this parameter should depend on the rename score from the key.\n\nWill do.",
      "parentUuid": "2e877788_0bc5b623",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 182,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "593f53c4_e8220653",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 182,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-01-05T11:56:32Z",
      "side": 1,
      "message": "Done. This is now handled in AllDiffsEvaluator. We forward the rename scores parameter to the git cache.",
      "parentUuid": "5ba0d657_e786a2e0",
      "range": {
        "startLine": 182,
        "startChar": 4,
        "endLine": 182,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5adf2d82_c578a622",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 187,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "I would have expected this path filer to be sufficient. For which situation do we need the FollowFilter?",
      "range": {
        "startLine": 187,
        "startChar": 28,
        "endLine": 187,
        "endChar": 65
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "939b9be9_bda4a298",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 187,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Path filter hasn\u0027t worked for all tests. I removed this logic and moved it to the GitFileDiffCache.",
      "parentUuid": "5adf2d82_c578a622",
      "range": {
        "startLine": 187,
        "startChar": 28,
        "endLine": 187,
        "endChar": 65
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e791a2c6_af95a02b",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "We typically don\u0027t submit commented code. Is this path filer not working yet?",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 190,
        "endChar": 34
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88cbdf23_ed538e40",
        "filename": "java/com/google/gerrit/server/patch/DiffUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, it was not working.\n\nI had the intention to follow with one or patchsets and remove the commented code before submitting it.\n\nDone.",
      "parentUuid": "e791a2c6_af95a02b",
      "range": {
        "startLine": 184,
        "startChar": 0,
        "endLine": 190,
        "endChar": 34
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5d59fa_925f4d20",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: Should be private.",
      "range": {
        "startLine": 75,
        "startChar": 2,
        "endLine": 75,
        "endChar": 26
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9ad5d2c_6a11d20a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: What about calling this \"gerrit_file_diff\" to avoid confusion among all the diff caches?",
      "range": {
        "startLine": 75,
        "startChar": 30,
        "endLine": 75,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15eb6532_31de88e9",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9ad5d2c_6a11d20a",
      "range": {
        "startLine": 75,
        "startChar": 30,
        "endLine": 75,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be8c3bf9_fc5aa3ba",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f5d59fa_925f4d20",
      "range": {
        "startLine": 75,
        "startChar": 2,
        "endLine": 75,
        "endChar": 26
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55fc148f_8ebf03c7",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "As discussed, this shouldn\u0027t use the old PatchListEntry. Instead, we should design a new AutoValue + Protobuf which is structured in a reasonable way with a good choice of fields. This output value needs to be separate from the one returned by the GitFileDiffCache as we\u0027ll have additional fields like size and a flag for edits due to rebase.",
      "range": {
        "startLine": 83,
        "startChar": 33,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e3b2b70_3993dcfd",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "55fc148f_8ebf03c7",
      "range": {
        "startLine": 83,
        "startChar": 33,
        "endLine": 83,
        "endChar": 47
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afda234e_27f3b505",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "See my other comments about the need for a weigher.",
      "range": {
        "startLine": 84,
        "startChar": 13,
        "endLine": 84,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10cfec10_9588d1ac",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 84,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. Added a weigher with weight \u003d 1. Will implement a proper weigher in a follow up change.",
      "parentUuid": "afda234e_27f3b505",
      "range": {
        "startLine": 84,
        "startChar": 13,
        "endLine": 84,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2f016fe_3c0e6a6b",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: Should be Iterable.",
      "range": {
        "startLine": 99,
        "startChar": 50,
        "endLine": 99,
        "endChar": 60
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3be9d0c7_be37b6f5",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "See my other comments about having the need for proper error handling.",
      "range": {
        "startLine": 99,
        "startChar": 72,
        "endLine": 99,
        "endChar": 97
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c4ebf16_db021334",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3be9d0c7_be37b6f5",
      "range": {
        "startLine": 99,
        "startChar": 72,
        "endLine": 99,
        "endChar": 97
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8d46e18_35fb7375",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2f016fe_3c0e6a6b",
      "range": {
        "startLine": 99,
        "startChar": 50,
        "endLine": 99,
        "endChar": 60
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f8c5dbc_cdd6102a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "I like this approach of delegating to the loadAll() method. Can we use it for the GitFileDiffCache, too?",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01566c71_5c85741b",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes. Done.",
      "parentUuid": "5f8c5dbc_cdd6102a",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b596276f_3bacd167",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "With the current implementation, an error for one diff computation means that the successful computations for all previous keys are thrown away. Do we really want that?\n\nAccording to the Javadoc description of CacheLoader#loadAll, returning a map which doesn\u0027t contain all keys will automatically produce an error for the getAll() call but still cache the returned values. We could use that mechanism.\n\nIf you adjust this approach, please also do so for the GitFileDiffCache.",
      "range": {
        "startLine": 121,
        "startChar": 36,
        "endLine": 121,
        "endChar": 43
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d3c922c_695a1dc4",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "As for GitFileDiffCache, we should probably sort out duplicate keys just in case. -\u003e Could use distinct() on the stream.",
      "range": {
        "startLine": 121,
        "startChar": 44,
        "endLine": 121,
        "endChar": 72
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c523c10_1043baa3",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d3c922c_695a1dc4",
      "range": {
        "startLine": 121,
        "startChar": 44,
        "endLine": 121,
        "endChar": 72
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1b0d4a0_9bc3f08a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b596276f_3bacd167",
      "range": {
        "startLine": 121,
        "startChar": 36,
        "endLine": 121,
        "endChar": 43
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "749b969d_2d5371c1",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: No need to materialize another list if you just need a stream. -\u003e Streams#stream from Guava does the trick.",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 127,
        "endChar": 17
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29a9b78e_c6511523",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 127,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "749b969d_2d5371c1",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 127,
        "endChar": 17
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b8d4f48_1a5bd800",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 152,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: Like in GitFileDiffCache, I find this name a bit confusing as it talks about the commit and not the commit message.",
      "range": {
        "startLine": 152,
        "startChar": 27,
        "endLine": 152,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a29aa7e_3f764051",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 152,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b8d4f48_1a5bd800",
      "range": {
        "startLine": 152,
        "startChar": 27,
        "endLine": 152,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f327399_ae7dd73a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit, here and below: Non-static call of static method.",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 157,
        "endChar": 37
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66adaae8_64838194",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 157,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f327399_ae7dd73a",
      "range": {
        "startLine": 157,
        "startChar": 16,
        "endLine": 157,
        "endChar": 37
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d154f03c_a3c91b57",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "This method is mostly the same as forCommit() except for the file path and the Text#forMergeList / Text#forCommit call. Can you extract the common code into a method?",
      "range": {
        "startLine": 164,
        "startChar": 27,
        "endLine": 164,
        "endChar": 39
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9a3042c_e80e9ecd",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 164,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d154f03c_a3c91b57",
      "range": {
        "startLine": 164,
        "startChar": 27,
        "endLine": 164,
        "endChar": 39
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40ffd1ac_4de2730c",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "It\u0027s interesting that you chose to step through the keys per file instead of per (key.oldCommit(), key.newCommit()) pair. Both approaches work. Maybe, the file-based approach is even better as I can\u0027t think of any disadvantages and it even saves us the separation into files later for EditTransformer.\n\nSeeing this file-based approach, I now understand why you wanted to adjust EditTransformer to work on single files (in the earlier patchsets of I3d31180b4). However, we wouldn\u0027t need to add additional methods to EditTransformer for single-file support. It\u0027s rather the contrary. If EditTransformer only works on single files, we could remove some of the logic in it. The old diff caches need the multi-file support, though. So, either we move the multi-file handling from EditTransformer to PatchListLoader or we wait with the cleanup until the old diff caches are gone. We shouldn\u0027t forget about the cleanup. So, please add a todo for whichever cleanup approach you choose.",
      "range": {
        "startLine": 183,
        "startChar": 6,
        "endLine": 183,
        "endChar": 79
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f86fd76c_5dceee25",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 183,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. I added a TODO in this file at the line that instantiates the EditTransformer.",
      "parentUuid": "40ffd1ac_4de2730c",
      "range": {
        "startLine": 183,
        "startChar": 6,
        "endLine": 183,
        "endChar": 79
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e04c67ac_0bf36d58",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 205,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "When designing the new AutoValue output type, make sure to not have two separate lists for the regular edits and the edits due to rebase. Those separate lists were just necessary as we couldn\u0027t change PatchListEntry and the contained Edit type in the necessary ways in the past. For a new type, we should just have an indicator per edit (e.g. flag, enum, ...) whether it\u0027s a regular one or whether it\u0027s coming from a rebase.\n\nThat approach is generally cleaner, requires much less data to save, and is also easier for callers (e.g. we wouldn\u0027t need to derive the edits_due_to_rebase in a totally different part of the code when we generate the DiffInfo objects). In addition, it allows us to add some improvements for edits due to rebase. For instance, we could split up edits for which some lines are part of a rebase and have one part represent a regular edit and the other part an edit due to rebase. That split up wasn\u0027t possible in the past with the separate lists.",
      "range": {
        "startLine": 204,
        "startChar": 16,
        "endLine": 205,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3ce75c02_1e2b17c8",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 205,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Replaced PatchListEntry with a new AutoValue.\nDone.",
      "parentUuid": "e04c67ac_0bf36d58",
      "range": {
        "startLine": 204,
        "startChar": 16,
        "endLine": 205,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6320c3ec_068cf502",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "With the new diff caches, we decided to use a different approach. The FileDiffCache should always return the requested file diffs, even if all of the edits are due to rebase. The filtering of such files will need to happen in the implementation of the GetFiles endpoint. That filtering should be very simple if you act on my suggestion above about introducing an indicator marking edits due to rebase.\n\nThis has a major advantage: Users had been complaining that they couldn\u0027t see such files if they opened them in the diff view (e.g. after clicking on a \u0027U\u0027 file which had a comment). With this move, that bug will go away.",
      "range": {
        "startLine": 209,
        "startChar": 8,
        "endLine": 211,
        "endChar": 9
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84e79ea9_04dfbf4e",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 211,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6320c3ec_068cf502",
      "range": {
        "startLine": 209,
        "startChar": 8,
        "endLine": 211,
        "endChar": 9
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b8b6d7f_f7a62baf",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Would it be possible to stay just with the type FileEdit? I only introduced ContextAwareEdit in the past as JGit\u0027s Edit type couldn\u0027t represent pure renames/copies (\u003d without edits). That limitation should be gone now with our own AutoValue types.",
      "range": {
        "startLine": 219,
        "startChar": 16,
        "endLine": 219,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e89aaa9_58fee8d8",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b8b6d7f_f7a62baf",
      "range": {
        "startLine": 219,
        "startChar": 16,
        "endLine": 219,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f73a7779_dd501bee",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 226,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "I\u0027m a bit confused why you create a list of the four parameters outside of getRebaseEdits() and then retrieve the four parameters inside the method from the list again. Isn\u0027t this a bit brittle? Why don\u0027t you simply pass the four parameters or the AllFileGitDiffs object?",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 226,
        "endChar": 46
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be4e6c0b_f88f0e28",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 226,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, what I\u0027m doing was unnecessary. I did the implementation on a couple of iterations and forgot to clean this up.\n\nDone.",
      "parentUuid": "f73a7779_dd501bee",
      "range": {
        "startLine": 220,
        "startChar": 6,
        "endLine": 226,
        "endChar": 46
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23e5847b_e5fbbed0",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 234,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Here and below: Why don\u0027t we use the parVsParDiff.oldName() and parVsParDiff.newName()?",
      "range": {
        "startLine": 233,
        "startChar": 22,
        "endLine": 234,
        "endChar": 61
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29e4ae1b_e4501a7a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 234,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I think for some reason it didn\u0027t work.\n\nThe parVsParDiff.oldName is the name we retrieve from DiffEntry (the output of DiffFormatter#scan). This o/p was slightly different from how we treat old/new paths in Gerrit (previously computed in PatchListEntry).\n\nDone!",
      "parentUuid": "23e5847b_e5fbbed0",
      "range": {
        "startLine": 233,
        "startChar": 22,
        "endLine": 234,
        "endChar": 61
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f556fee6_47885f35",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 259,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Why do we need this method considering that we only pass the edits of one file to EditTransformer? Can\u0027t we just take all values of the return value?",
      "range": {
        "startLine": 259,
        "startChar": 13,
        "endLine": 259,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cee635a2_3999c774",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 259,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f556fee6_47885f35",
      "range": {
        "startLine": 259,
        "startChar": 13,
        "endLine": 259,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a49726b_fcc46600",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: This method is placed a bit out of context. It\u0027s only used 200 lines later and doesn\u0027t have any special relation to the surrounding code lines here.",
      "range": {
        "startLine": 263,
        "startChar": 33,
        "endLine": 263,
        "endChar": 45
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de015543_d66dcc59",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 263,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "0a49726b_fcc46600",
      "range": {
        "startLine": 263,
        "startChar": 33,
        "endLine": 263,
        "endChar": 45
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fd1cc37_aea832b9",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Shouldn\u0027t this use the indicated diff algorithm?",
      "range": {
        "startLine": 310,
        "startChar": 23,
        "endLine": 310,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8592c52_25ee39e1",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 310,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5fd1cc37_aea832b9",
      "range": {
        "startLine": 310,
        "startChar": 23,
        "endLine": 310,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f684046b_49d7878a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 335,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "This comparator is only used for the /COMMIT_MSG and /MERGE_LIST entry even though the comparator would be equally relevant for all other diffs. Isn\u0027t it inconsistent that we don\u0027t use this comparator for all files?",
      "range": {
        "startLine": 335,
        "startChar": 37,
        "endLine": 335,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1af36c15_4fe206a8",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 335,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "The comparator for files is used in the GitFileDiffCache. I don\u0027t see any usage for comparator here. Am I missing anything?\n\nI removed this method from here, and used the one I introduced in DiffUtil (which is also used by the GitFileDiffCache).",
      "parentUuid": "f684046b_49d7878a",
      "range": {
        "startLine": 335,
        "startChar": 37,
        "endLine": 335,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d425fa8f_525bc852",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 367,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "You wanted to have some hints about which calls we can patch together.\nTL;DR:\nFirst batch: \"old commit vs. new commit\" and \"new parent vs. new commit\"\nSecond batch: \"old parent vs. old commit\" and \"old parent vs. new parent\"\n\nWe talked about this in the past. This has some further explanations.\n\nSituation described by you:\n\u003e In this case, a diff between ps_1 and ps_2 is requested. All commits have the same file but with different names (FN, RN1, RN2, RN3) and a slightly modified content between {FN, RN1} and {RN2, RN3} \n\u003e FN and RN1 are same.\n\u003e RN2 and RN3 are same.\n\nMy answer was:\nWe can send the {ps2 vs. ps1, newPath \u003d RN2} and the {ps2 vs. par2, newPath \u003d RN2} lookups to the GitFileDiffCache without additional consideration (-\u003e could batch them together). We would inspect the results of these lookups. The former lookup would tell us that we need to ask for RN1 instead RN2 and the latter lookup would tell us about RN3. Using that, we can then send the {ps1 vs. par1, newPath \u003d RN1} and the {par2 vs. par1, newPath \u003d RN3} lookups to the GitFileDiffCache.",
      "range": {
        "startLine": 367,
        "startChar": 18,
        "endLine": 367,
        "endChar": 35
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cc4eb1b_96c77146",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 367,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Thanks for the explanation. I added a TODO for this hint and can address in a follow up change.",
      "parentUuid": "d425fa8f_525bc852",
      "range": {
        "startLine": 367,
        "startChar": 18,
        "endLine": 367,
        "endChar": 35
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "690c6e91_a2821004",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 378,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: Please use a more descriptive method name.",
      "range": {
        "startLine": 378,
        "startChar": 40,
        "endLine": 378,
        "endChar": 44
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "37173269_064de550",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 378,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "renamed to #execute().",
      "parentUuid": "690c6e91_a2821004",
      "range": {
        "startLine": 378,
        "startChar": 40,
        "endLine": 378,
        "endChar": 44
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71d660c4_4b8e2b6b",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "As for the ModifiedFilesCache, the use of DiffUtil#areRelated and DiffUtil#getParentCommit is not ideal here. We always want to get the single parent of the two commits key.oldCommit() and key.newCommit() (and never the auto-merge commit or a second parent as the use of the DiffUtil#getParentCommit method might suggest). Those two commits can be easily retrieved from the calculations already done in DiffUtil#areRelated without further lookups/parsing. Hence, we should have a method which combines DiffUtil#areRelated and DiffUtil#getParentCommit for what we need here.",
      "range": {
        "startLine": 387,
        "startChar": 33,
        "endLine": 387,
        "endChar": 93
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ea59469_656152a2",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 387,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71d660c4_4b8e2b6b",
      "range": {
        "startLine": 387,
        "startChar": 33,
        "endLine": 387,
        "endChar": 93
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321fccd0_b1405837",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Combined with line 272, this resolves to key.newFilePath(). Why don\u0027t we simply use key.newfilePath directly here?",
      "range": {
        "startLine": 397,
        "startChar": 12,
        "endLine": 397,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca729c2_c18c3ef6",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 397,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "You are right. Done.",
      "parentUuid": "321fccd0_b1405837",
      "range": {
        "startLine": 397,
        "startChar": 12,
        "endLine": 397,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4103ba5_0c69a4a8",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 405,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Here and below: Why don\u0027t we use the oldParent/newParent SHA-1s which was deliberately extracted in lines 387/388?",
      "range": {
        "startLine": 405,
        "startChar": 25,
        "endLine": 405,
        "endChar": 60
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05320c7b_a2acad9c",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 405,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Right. Done.",
      "parentUuid": "a4103ba5_0c69a4a8",
      "range": {
        "startLine": 405,
        "startChar": 25,
        "endLine": 405,
        "endChar": 60
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "784bdb0d_e7628b9e",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 407,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Same as for the comment in line 428.\n\nIn addition, are file additions implicitly handled by line 272, which silently maps null values to key.newFilePath()? If so, that\u0027s very confusing and hidden behavior. Can we make this more explicit (including comments if the variables/methods don\u0027t make it clear by themselves)?",
      "range": {
        "startLine": 407,
        "startChar": 25,
        "endLine": 407,
        "endChar": 69
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3de4837_1cdedaeb",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 407,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "784bdb0d_e7628b9e",
      "range": {
        "startLine": 407,
        "startChar": 25,
        "endLine": 407,
        "endChar": 69
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e2e8740_48cb288c",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 417,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Same as for the comment in line 428.\n\nHonestly, I don\u0027t think that we need this dependency on a previous output value. According to my thoughts, this should just be key.newFileName(). Or is there a case for which key.newFileName() is not the same as this newName()?",
      "range": {
        "startLine": 417,
        "startChar": 25,
        "endLine": 417,
        "endChar": 70
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c02ada5b_675d96c9",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 417,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "6e2e8740_48cb288c",
      "range": {
        "startLine": 417,
        "startChar": 25,
        "endLine": 417,
        "endChar": 70
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72b4d53c_c53d42d5",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 428,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "It\u0027s very subtle that this line uses the computation output of the call in line 412. Can you change the whole structure so that this becomes more apparent?",
      "range": {
        "startLine": 428,
        "startChar": 14,
        "endLine": 428,
        "endChar": 80
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e197538f_d90a7b02",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 428,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I reduced the complexity a bit and added a comment here, indicating that we are using the output of the new commit vs. new parent computation. I\u0027m using this structure to avoid duplicate code in this method, since all operations are very similar.",
      "parentUuid": "72b4d53c_c53d42d5",
      "range": {
        "startLine": 428,
        "startChar": 14,
        "endLine": 428,
        "endChar": 80
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db0da017_61a8440a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 429,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "It\u0027s a bit puzzling at first that key.newFilePath shows up here as fallback. If the file was added between newParent and newCommit, we actually wouldn\u0027t need to have to determine the oldParent vs. newParent diff as nothing in that file could be an edit due to rebase anymore, right? Only if the returned diff is empty (or did I miss a case?), the oldParent vs. newParent diff becomes relevant again (e.g. to identify a file deletion which was due to rebase). Can you try to improve the code/structure to make this clearer? Could we maybe even skip the diff in the first situation I described?",
      "range": {
        "startLine": 429,
        "startChar": 79,
        "endLine": 429,
        "endChar": 96
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b63ad74a_00371922",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 429,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, I think you are right. I added a TODO and will think about this case in a follow up change.",
      "parentUuid": "db0da017_61a8440a",
      "range": {
        "startLine": 429,
        "startChar": 79,
        "endLine": 429,
        "endChar": 96
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90056ea2_3d8fce97",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 445,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Printing the error to std.out is not proper error handling. The empty finally is also a bit puzzling to me. Can we get rid of this complete method if you follow my other suggestions on this change?",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 445,
        "endChar": 20
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a5f4952_975d6e89",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 445,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90056ea2_3d8fce97",
      "range": {
        "startLine": 441,
        "startChar": 9,
        "endLine": 445,
        "endChar": 20
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8ca33af_bf0cb0b7",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 448,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "This method uses output parameters, which is discouraged. Having a clear return value would have spared me quite some understanding how this method works and returns results to the caller. Please convert this method to one which uses a return value.",
      "range": {
        "startLine": 448,
        "startChar": 19,
        "endLine": 448,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b75be64_a8c85291",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 448,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8ca33af_bf0cb0b7",
      "range": {
        "startLine": 448,
        "startChar": 19,
        "endLine": 448,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5638552a_b9ecf2b7",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "This condition is very confusing. I only understood what it\u0027s used for after I completely mapped the logic of all surrounding and calling code in my mind. Can you use a different code structure which doesn\u0027t require this condition? (Example: When constructing the keys as a pre-step, we could only create and add those keys to the batch-key collection for which we really want to compute the diffs in the current context.)\n\nMy understanding (for future readers):\nfileToAllDiffs.get(key).hasRebaseEdits is the condition which controls whether we compute the three additional diffs for edits due to rebase. getGitDiffsForManyKeys() is always called for these three diffs but this condition determines whether we really execute the diff.\noldVsNewDiff is necessary as we always want to compute the diff between the two specified commits.",
      "range": {
        "startLine": 461,
        "startChar": 10,
        "endLine": 461,
        "endChar": 69
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9508a38_239448b5",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 461,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.\n\nThis condition was very confusing. Got rid of it.",
      "parentUuid": "5638552a_b9ecf2b7",
      "range": {
        "startLine": 461,
        "startChar": 10,
        "endLine": 461,
        "endChar": 69
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1b48682_2e54bbdb",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 463,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Constructing the key for the GitFileDiffCache inside of getGitDiffsForManyKeys() makes this whole method more complicated than it needs to be. I think one step to simplification could be to construct the keys one step earlier (outside of this method). Then, we\u0027d have the logical steps of \"construct keys\" -\u003e \"call the cache\". For the first step, we can use custom methods for each different parent/commit combination to avoid all these extractor functions. The second step would be the same for all calls (-\u003e same code).",
      "range": {
        "startLine": 463,
        "startChar": 16,
        "endLine": 463,
        "endChar": 28
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f35227fc_9a634a0e",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 463,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1b48682_2e54bbdb",
      "range": {
        "startLine": 463,
        "startChar": 16,
        "endLine": 463,
        "endChar": 28
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bb03314_f4d6b353",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Do we have proper handling of such null values for the diff later in the code? After all, the wrapper value including its key will still be present, won\u0027t it?",
      "range": {
        "startLine": 485,
        "startChar": 10,
        "endLine": 487,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a28ea23_5f501579",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 487,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "The \"backFill\" method is removed now.",
      "parentUuid": "1bb03314_f4d6b353",
      "range": {
        "startLine": 485,
        "startChar": 10,
        "endLine": 487,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5d77037_94955210",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: We typically use AutoValue for such value objects.",
      "range": {
        "startLine": 492,
        "startChar": 25,
        "endLine": 492,
        "endChar": 40
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "766ef303_c20a1f0a",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I assign the fields of this class incrementally (i.e. after each call to the git diff cache, we assign one of the diffs).\nThat\u0027s why I couldn\u0027t set this as an Autovalue.",
      "parentUuid": "b5d77037_94955210",
      "range": {
        "startLine": 492,
        "startChar": 25,
        "endLine": 492,
        "endChar": 40
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71146007_87e7049f",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit: Seems to be unused. Intended?",
      "range": {
        "startLine": 503,
        "startChar": 8,
        "endLine": 503,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc2aa6d8_fc16bfd5",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 503,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "It\u0027s used. I don\u0027t know why it\u0027s marked as unused in the IDE. \n\nUsed in AllDiffsEvaluator#evaluate()",
      "parentUuid": "71146007_87e7049f",
      "range": {
        "startLine": 503,
        "startChar": 8,
        "endLine": 503,
        "endChar": 41
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77c4744_3f3abc2c",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 536,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "See my other comments on this (e.g. should always be set; similarity threshold 0-100 + magic value for disabling rename detection).",
      "range": {
        "startLine": 532,
        "startChar": 4,
        "endLine": 536,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8003d025_10e287d7",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 536,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f77c4744_3f3abc2c",
      "range": {
        "startLine": 532,
        "startChar": 4,
        "endLine": 536,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e713e62_253fb0f9",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 538,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Nit, here and for cmp(): Please use descriptive names for API fields and not abbreviations.",
      "range": {
        "startLine": 538,
        "startChar": 51,
        "endLine": 538,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c62adea_57372502",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 538,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e713e62_253fb0f9",
      "range": {
        "startLine": 538,
        "startChar": 51,
        "endLine": 538,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "277597c6_887a3035",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 540,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "I had hoped that we could get rid of these legacy artifacts in the new diff cache API and I\u0027m still convinced we can. The new API should be a clean \"I want the diff between these two commits for this file given these diff settings.\" There shouldn\u0027t be an additional \"oh, by the way, the oldCommit I gave you is parent X and you can trust me on that\". For instance, what happens if this latter information is wrong? We would return the wrong result, wouldn\u0027t we? That\u0027s not ideal and also inconvenient for callers.\n\nLooking at the usages of cmp() in this change, we only seem to need it for the /COMMIT_MSG and /MERGE_LIST files. There are two different case:\n1) For the generation of the /MERGE_LIST, we need to know which parent oldCommit() is. If it\u0027s not a specific parent (\u003d auto-merge), we fall back to parent 1. This case is easy to replace. From the RevCommit of newCommit(), we can determine whether oldCommit() represents a parent and which one.\n2) We need to determine whether the requested diff is between patchsets or against a parent/auto-merge so that we know whether to generate a diff between /COMMIT_MSG and /MERGE_LIST or just simulate a file addition. Checking for a parent is easy (see 1)). Auto-merge is a bit trickier regarding the involved considerations. When the auto-merge commit is created, we set all parents which are merged as parents of that auto-merge commit. Hence, we can at least rule out some non-auto-merge situations by comparing the parents of newCommit() with the parents of oldCommit(). If they are not the same (or the commits aren\u0027t merge commits), we haven\u0027t encountered the auto-merge situations. There\u0027s still the possibility that another patchset commit was given which has the same parents. It\u0027s unlikely but possible. To distinguish that situation, we could look at the commit message. If it contains the message we set in AutoMerge (I mean the \"Auto-merge of \" + merge.name() + \u0027\\n\u0027 part), we could be fairly sure that we\u0027ve encountered the auto-merge commit. I would have preferred an even cleaner approach but that\u0027s the best I can come up with when just reviewing the code. You might argue that we won\u0027t hand out a perfect result for each corner case (e.g. a patchset is  called \"Auto-merge of ...\") but I really wouldn\u0027t pollute the public diff cache API just because of such a rare corner case if we can\u0027t find a better solution.\n\nThere\u0027s a complete alternative approach for 2). We could decide to always compute the diff for /COMMIT_MSG and /MERGE_LIST. The simulation of the file addition could happen outside of the diff cache for relevant calls and the /COMMIT_MSG and /MERGE_LIST simply wouldn\u0027t be requested from the diff caches.\nOr an even further going alternative: We could generate the entries for /COMMIT_MSG and /MERGE_LIST on the fly instead of having them cached and generated as part of the diff caches. If the Diffs facade offers different methods for betweenPatchset() and againstParent()/againstAutoMerge(), we\u0027d have all the information to generate the correct version.\nAnother variant: Go with 2) except for the auto-merge part and correct the auto-merge case outside of the diff caches.\nYou see, I\u0027m brainstorming wildly. ;-)\n\nWe seem to check for parent-child relationship or even look up the parents at various parts of the FileDiffCache. When you adjust the code, make sure to not do the same calculations several times in one code path.",
      "range": {
        "startLine": 540,
        "startChar": 20,
        "endLine": 540,
        "endChar": 38
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a29a3a5f_b5ecfb69",
        "filename": "java/com/google/gerrit/server/patch/FileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 540,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. I got rid of ComparisonType from the cache interface. I added a TODO to enhance the computation of this with a follow up change.",
      "parentUuid": "277597c6_887a3035",
      "range": {
        "startLine": 540,
        "startChar": 20,
        "endLine": 540,
        "endChar": 38
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d23c06dd_b394d769",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: Should be private.",
      "range": {
        "startLine": 79,
        "startChar": 2,
        "endLine": 79,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71a86b19_a70b93f4",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: What about calling this \"git_file_diff\"?",
      "range": {
        "startLine": 79,
        "startChar": 34,
        "endLine": 79,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80703219_90bf7c91",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71a86b19_a70b93f4",
      "range": {
        "startLine": 79,
        "startChar": 34,
        "endLine": 79,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e32ad55b_45c0d35b",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d23c06dd_b394d769",
      "range": {
        "startLine": 79,
        "startChar": 2,
        "endLine": 79,
        "endChar": 30
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d277c3e3_66c4b750",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "See my comment about the need of a weigher on the previous changes.",
      "range": {
        "startLine": 86,
        "startChar": 12,
        "endLine": 86,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afc1616d_e7e015de",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d277c3e3_66c4b750",
      "range": {
        "startLine": 86,
        "startChar": 12,
        "endLine": 86,
        "endChar": 36
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47b1372_d89f8422",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Do we still need this method if we have getAll()?",
      "range": {
        "startLine": 102,
        "startChar": 21,
        "endLine": 102,
        "endChar": 24
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c0d6436_54f61cb8",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 102,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I think providing both get() and getAll() in the interface doesn\u0027t hurt (less code for callers instead of wrapping a single element in a list).",
      "parentUuid": "c47b1372_d89f8422",
      "range": {
        "startLine": 102,
        "startChar": 21,
        "endLine": 102,
        "endChar": 24
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c141842c_7c56c94c",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Is there a reason to not use Iterable like LoadingCache#getAll does?",
      "range": {
        "startLine": 106,
        "startChar": 47,
        "endLine": 106,
        "endChar": 57
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ee89bf6_a5d5b695",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "We shouldn\u0027t let the ExecutionException bubble up. Please add proper error handling. (Also for get() if we keep the method.)",
      "range": {
        "startLine": 106,
        "startChar": 69,
        "endLine": 106,
        "endChar": 94
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05f70661_0de94e81",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ee89bf6_a5d5b695",
      "range": {
        "startLine": 106,
        "startChar": 69,
        "endLine": 106,
        "endChar": 94
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90ceef4c_90eacd79",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 106,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c141842c_7c56c94c",
      "range": {
        "startLine": 106,
        "startChar": 47,
        "endLine": 106,
        "endChar": 57
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "519ea3f9_450d7646",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit, here and in loadAll(): Unnecessary simicolon.",
      "range": {
        "startLine": 134,
        "startChar": 77,
        "endLine": 134,
        "endChar": 78
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62117e8e_ae7f736a",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Here and in loadAll(): I\u0027m a bit confused now. You claimed to introduce DiffUtils to share some code and here the DiffFormatter is not re-used from DiffUtils. I\u0027m not totally sold on sharing the DiffFormatter via DiffUtils as I\u0027m pretty sure that we need slightly different configurations of it for the two caches (e.g. whitespace setting including the formatter only for file diffs and not for modified fiels). The rest of the settings is simple enough that we can duplicate their configuration. I saw that some of the configurations of the DiffFormatter are in DiffUtils#getOneGitTreeDiff. That seems pretty far away from this code. I\u0027d have expected that we properly set up the DiffFormatter and later just call scan() on it. For the setup, I\u0027d have introduced a method which takes the Repository and ObjectReader (and anything it needs for config) and called that method in a try-with-resources statement, potentially close to the call of scan().\n\nAddendum: For loadAll(), I would be tempted to create a new DiffFormatter for each key. I\u0027m not entirely sure that re-using the DiffFormatter is safe. In addition, I don\u0027t see much disadvantages if we created a DiffFormatter each time if we pass in the ObjectReader to it.",
      "range": {
        "startLine": 134,
        "startChar": 10,
        "endLine": 134,
        "endChar": 77
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70f8a795_170ed080",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-21T13:16:24Z",
      "side": 1,
      "message": "Correction of the addendum: I had forgotten that we wanted to benefit from calling #scan only once per (oldCommitId, newCommitId) pair to not add too much overhead compared to the old variant of calling #scan only once for a complete diff. Could we create a DiffFormatter per (oldCommitId, newCommitId) pair?",
      "parentUuid": "62117e8e_ae7f736a",
      "range": {
        "startLine": 134,
        "startChar": 10,
        "endLine": 134,
        "endChar": 77
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e5a54d4_ba038689",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "519ea3f9_450d7646",
      "range": {
        "startLine": 134,
        "startChar": 77,
        "endLine": 134,
        "endChar": 78
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9b3697e_556de228",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. Created a DiffFormatter per {oldTree, newTree, whitespace} combination.",
      "parentUuid": "70f8a795_170ed080",
      "range": {
        "startLine": 134,
        "startChar": 10,
        "endLine": 134,
        "endChar": 77
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7874a20_7e8fc081",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Should we ensure inside of loadAll() that this Iterable doesn\u0027t contain duplicate entries. I followed the calling hierarchy up a bit and LocalCache#getAll seems to feed a set into this method but I\u0027m not convinced that we should rely on this. Why don\u0027t we simply ignore duplicate keys inside loadAll() if they happen to occur?",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a226f2a0_2a519d35",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I didn\u0027t think of duplicate entries, but I agree it would be wasteful. I used the distinct() method of the stream in line 144.\n\nDone.",
      "parentUuid": "c7874a20_7e8fc081",
      "range": {
        "startLine": 141,
        "startChar": 41,
        "endLine": 141,
        "endChar": 49
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b54c157_12eef836",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "What it be a lot of effort to create an ImmutableMap via a builder instead?",
      "range": {
        "startLine": 142,
        "startChar": 6,
        "endLine": 142,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfe7153a_167677a3",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 142,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "No. Done.",
      "parentUuid": "9b54c157_12eef836",
      "range": {
        "startLine": 142,
        "startChar": 6,
        "endLine": 142,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d308ebcd_4878b038",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "The creation of this list is unnecessary if you just want to create a stream from it in line 145. You can simply use Streams#stream from Guava directly on the Iterable.",
      "range": {
        "startLine": 143,
        "startChar": 6,
        "endLine": 143,
        "endChar": 51
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0db2c3a0_53ed4adc",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "d308ebcd_4878b038",
      "range": {
        "startLine": 143,
        "startChar": 6,
        "endLine": 143,
        "endChar": 51
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "715064c7_3bd027ab",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Good idea to open the repository only once per project!",
      "range": {
        "startLine": 148,
        "startChar": 13,
        "endLine": 148,
        "endChar": 66
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbd6e188_14bc21c5",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, I did it intentionally. Thanks :)",
      "parentUuid": "715064c7_3bd027ab",
      "range": {
        "startLine": 148,
        "startChar": 13,
        "endLine": 148,
        "endChar": 66
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79eea5dd_4a67d7c7",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: Non-static call of static method.",
      "range": {
        "startLine": 168,
        "startChar": 38,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8bd4fe4_07a3dba0",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "The implementation of loadAll() is nearly meaningless if we don\u0027t combine several files for the same diff between commits into one call on DiffFormatter. Do you intend to still adjust this within this change? If not, can you add a todo?",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e70560d4_dfb3ca62",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, I adjusted it. We now use 1 diff request per each {old_id, new_id} trees pair.\n\nDone.",
      "parentUuid": "b8bd4fe4_07a3dba0",
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47cb16c6_3c199d04",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 168,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79eea5dd_4a67d7c7",
      "range": {
        "startLine": 168,
        "startChar": 38,
        "endLine": 168,
        "endChar": 64
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3f1132_2d02489e",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 171,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "It\u0027s an interesting idea to not set the old/new file paths if there\u0027s no diff. Was that a deliberate choice? Do you think that it won\u0027t have negative side-effects for files which exist in the repository but are unchanged? (By the way, checking whether the file exists in the repository might involve a TreeWalk which we want to avoid in the GitFileDiffCache due to performance reasons.)\n\nIs it also intended that we\u0027d pile up such empty diffs if Gerrit gets calls on the diff endpoint for non-existing files? (I\u0027m not sure we can or want to avoid that but we should at least have thought about it.)\n\nOne general alternative would be to throw an exception and thus not cache any value for non-existent diffs. I haven\u0027t thought through whether that would be better.\n\nWhat are your thoughts?",
      "range": {
        "startLine": 171,
        "startChar": 8,
        "endLine": 171,
        "endChar": 35
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0d0537d_ba0bbc0d",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 171,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-17T16:45:46Z",
      "side": 1,
      "message": "Addendum: In FileDiffCache, I saw that we\u0027ll sometimes request such empty diffs for edits due to rebase, which is necessary for the algorithm. Combined with getAll() throwing an exception if not all keys are evaluated, I guess that\u0027s why you decided to go for these empty-diff objects. Is this right?\n\nI\u0027m still wondering whether we can\u0027t improve the situation a bit. If we go for an empty-diff object, we should try to make this empty state as apparent for callers as possible.",
      "parentUuid": "ef3f1132_2d02489e",
      "range": {
        "startLine": 171,
        "startChar": 8,
        "endLine": 171,
        "endChar": 35
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25cad9f3_e809c5e0",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 171,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "This is a bit tricky: 1) we can\u0027t throw an exception because we are evaluating many keys, i.e. failure of evaluating 1 key should not abort the operation. 2) dropping this entry would be good for not piling up empty diffs, but would result in getAll failing with an exception which we need to avoid, because the FileDiffCache uses these empty diffs.\n\nWe can make it apparent to the callers by adding some javadoc, highlighting that we return an empty Diff object if the file path is not found in the repo.",
      "parentUuid": "e0d0537d_ba0bbc0d",
      "range": {
        "startLine": 171,
        "startChar": 8,
        "endLine": 171,
        "endChar": 35
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c31c253a_a39c96a1",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: Please strive to find descriptive names. I\u0027m used to abbreviations like \u0027rw\u0027 and \u0027df\u0027 by now (which are also not ideal) but I honestly stumbled upon \u0027de\u0027 as those two letters weren\u0027t even an abbreviation of the type. I only realized after some moments that you likely use \u0027de\u0027 as an abbreviation for @DiffExecutor. In new code, we should try to use descriptive and pronounceable names.",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7962d84a_06cb1535",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I agree. I added a more descriptive name.\nDone.",
      "parentUuid": "c31c253a_a39c96a1",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 42
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c50a0f90_90eab987",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 226,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "What do you mean by this?",
      "range": {
        "startLine": 226,
        "startChar": 11,
        "endLine": 226,
        "endChar": 52
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8fc62909_a4bce045",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 226,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "A TODO for myself to map this code from the old implementation.",
      "parentUuid": "c50a0f90_90eab987",
      "range": {
        "startLine": 226,
        "startChar": 11,
        "endLine": 226,
        "endChar": 52
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8a7b756_b88eab83",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 231,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit: Does this comment need an update now that the code isn\u0027t in PatchListCacheImpl anymore?",
      "range": {
        "startLine": 231,
        "startChar": 23,
        "endLine": 231,
        "endChar": 55
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "464194b9_a47f50e3",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 231,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. I removed the timeout from this class as per your other comment at line 260.\n\nNote: I added that comment to remind myself to change this variable name later.",
      "parentUuid": "d8a7b756_b88eab83",
      "range": {
        "startLine": 231,
        "startChar": 23,
        "endLine": 231,
        "endChar": 55
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "656cfd71_b55e62af",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "I had been curious what you\u0027d do with this timeout mechanism especially now that the cache key explicitly sets an algorithm and the fallback here simply switches to another diff algorithm. I\u0027m a bit surprised that you just copied the code. Did you consider to move the timeout to the FileDiffCache or even the Diffs facade? (The executor would need to move along of course.) In that situation, we could use a special value for the diff algorithm enum to map to this special fallback algorithm.\n\nBefore you now suggest that we simply remove the diff algorithm from the key, I would like to note that I introduced it on purpose. My intention is that the GitFileDiffCache stays as stable as possible and that all parameters influencing the diff calculation are part of the key. If we want to make adjustments to Gerrit\u0027s behavior, we can tune the code and settings in the Diffs facade and the FileDiffCache later. The timeout mechanism here is one of the things we should get rid off in the future. It has quite some issues. We likely don\u0027t need it anymore but we don\u0027t know for sure yet. I\u0027d like to give us the possibility that we can easily remove it in the future without touching the GitFileDiffCache.",
      "range": {
        "startLine": 247,
        "startChar": 28,
        "endLine": 260,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a46f1c29_102f2031",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-21T13:16:24Z",
      "side": 1,
      "message": "An additional note: This code is using the same DiffFormatter and DiffEntry instance on different threads. DiffFormatter/DiffEntry doesn\u0027t contain any comments saying that it\u0027s thread-safe and the implementation also doesn\u0027t explicitly contain concurrency constructs. The synchronized blocks on diffEntry ensured in the past that we didn\u0027t see threading bugs (though I\u0027m not sure whether we were just lucky to not run into or notice an uncovered case) but we\u0027d need to carefully check all new code paths. Ideally, we\u0027d avoid using DiffFormatter and DiffEntry on different threads.\n\nTL;DR: Please take concurrency considerations into account when deciding where to place this timeout mechanism.",
      "parentUuid": "656cfd71_b55e62af",
      "range": {
        "startLine": 247,
        "startChar": 28,
        "endLine": 260,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "55ce897f_591ab407",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 260,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Thanks for the detailed feedback.\n\nI\u0027m not sure I fully understand and I think I miss some context.\n\nI assume the executor service was introduced in the original implementation in the first place so that we can control the timeout for each file (let\u0027s say 5 seconds). If the computation for this file exceeds 5 seconds, we abort the operation and use (a cheaper?) algorithm to compute the file header. This fallback modifies the diff formatter to use the other algorithm, which will affect other keys in the new implementation if they use the same diff formatter.\n\nWhat I\u0027m thinking of now: we are using the loadAll method in this cache (the GitFileDiffCache). If we remove the timeout from this cache, we will not be able to force a timeout for each path (as was done in the old implementation), and instead, the caller (of this cache getAll\u0027s) will put a timeout on the whole operation (for many keys).\n\nNow thanks for pointing out that we shouldn\u0027t use the fallback algorithm directly, because the key is already forcing a specific algorithm. So the logic should be changed to:\n  * call the cache with a specific algorithm and set a timeout at caller\u0027s level.\n  * if the caller timed out, re-execute the operation with a different key containing the fallback algorithm.\n\nI can\u0027t think of a way to force a timeout way per path from the caller. Should we just get rid of the timeout from this cache and move to another value of the timeout at the caller (for all keys), and just fallback to the other algorithm for all keys in case of timeout? I implemented this approach.",
      "parentUuid": "a46f1c29_102f2031",
      "range": {
        "startLine": 247,
        "startChar": 28,
        "endLine": 260,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f8dbf53_cccab68e",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 273,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Adjusting the DiffFormatter which is shared among ALL keys means that we change the used algorithm for all further evaluated keys even the ones of different changes/patchsets. Is this intended?",
      "range": {
        "startLine": 273,
        "startChar": 8,
        "endLine": 273,
        "endChar": 54
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12ad720b_229025d6",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 273,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "No that was wrong, I adjusted it so that we create a separate diff formatter per (old tree, new tree, whitespace) configuration and this will not change. I also removed the fallback and the caller should explicitly request it.\n\nDone.",
      "parentUuid": "1f8dbf53_cccab68e",
      "range": {
        "startLine": 273,
        "startChar": 8,
        "endLine": 273,
        "endChar": 54
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb821c07_8efe5df4",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 291,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Couldn\u0027t this be just a normal class instead of an assisted factory? All parameters are directly passed into it.",
      "range": {
        "startLine": 282,
        "startChar": 6,
        "endLine": 291,
        "endChar": 0
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25d92269_3fe4e91d",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 291,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Yes, dependency injection doesn\u0027t make sense here.\nDone.",
      "parentUuid": "fb821c07_8efe5df4",
      "range": {
        "startLine": 282,
        "startChar": 6,
        "endLine": 291,
        "endChar": 0
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c58054e7_6bfb986d",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Nit, here and below: The formatting of the comments is a bit strange.",
      "range": {
        "startLine": 317,
        "startChar": 10,
        "endLine": 322,
        "endChar": 26
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a17f578_e16d4a55",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "This is the google-java-format style. Probably a bug?",
      "parentUuid": "c58054e7_6bfb986d",
      "range": {
        "startLine": 317,
        "startChar": 10,
        "endLine": 322,
        "endChar": 26
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e242f0a8_03fac08a",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Did you write Myers here as you saw that from some code? I\u0027m actually pretty sure that we currently use the histogram algorithm, which only uses Myers as fallback by default when it runs into special, problematic cases.",
      "range": {
        "startLine": 350,
        "startChar": 6,
        "endLine": 350,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43e0f402_1de1d3f0",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 350,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Thanks. I adjusted it.\n\nDone.",
      "parentUuid": "e242f0a8_03fac08a",
      "range": {
        "startLine": 350,
        "startChar": 6,
        "endLine": 350,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a2c8ce5_35c40dc7",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 353,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "As written in other comments, I\u0027d recommend an AutoValue.Builder here.",
      "range": {
        "startLine": 353,
        "startChar": 22,
        "endLine": 353,
        "endChar": 28
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a430621f_0a572247",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 353,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a2c8ce5_35c40dc7",
      "range": {
        "startLine": 353,
        "startChar": 22,
        "endLine": 353,
        "endChar": 28
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2943755_d73a9e41",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Should this behave just like the rename threshold on the GitModifiedFilesCache? If so, we should use the same format and restrictions (e.g. 0-100). We should also apply the same approach to switching rename detection off (e.g. with a magic value as I suggested for the GitModifiedFilesCache which is powered by an additional convenience method). This also means we need a Javadoc description which explains what this value here is and what the allowed values are.",
      "range": {
        "startLine": 374,
        "startChar": 28,
        "endLine": 374,
        "endChar": 45
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba4b46cf_8208eeb3",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "The similarity threshold should always be set from outside. There shouldn\u0027t be a default inside this cache.",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 374,
        "endChar": 46
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f895a5e3_4f0200ec",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba4b46cf_8208eeb3",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 374,
        "endChar": 46
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52ec7932_a66f6cd9",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 374,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2943755_d73a9e41",
      "range": {
        "startLine": 374,
        "startChar": 28,
        "endLine": 374,
        "endChar": 45
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17e2d867_5bb80c8d",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 377,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Like the similarity threshold, the diff algorithm should always be specified and has no default value inside the cache.",
      "range": {
        "startLine": 376,
        "startChar": 4,
        "endLine": 377,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1eeb982_bb3eab05",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 377,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. Removed the Nullable annotation.",
      "parentUuid": "17e2d867_5bb80c8d",
      "range": {
        "startLine": 376,
        "startChar": 4,
        "endLine": 377,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fbce65e_8e458ae7",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 379,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Please use a proper name for such a public field/method.",
      "range": {
        "startLine": 379,
        "startChar": 51,
        "endLine": 379,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7c4074f_bf1d1b31",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 379,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Please see my other comment about this type on the previous change.",
      "range": {
        "startLine": 379,
        "startChar": 20,
        "endLine": 379,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42d87481_98689839",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 379,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7c4074f_bf1d1b31",
      "range": {
        "startLine": 379,
        "startChar": 20,
        "endLine": 379,
        "endChar": 50
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68805d25_9cf7a32e",
        "filename": "java/com/google/gerrit/server/patch/GitFileDiffCache.java",
        "patchSetId": 6
      },
      "lineNbr": 379,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fbce65e_8e458ae7",
      "range": {
        "startLine": 379,
        "startChar": 51,
        "endLine": 379,
        "endChar": 53
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3117239d_abf5ea58",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "We shouldn\u0027t have this class which encapsulates JGit\u0027s FileHeader class. Apart from JGit\u0027s FileHeader class not being safe to use in an AutoValue, we really don\u0027t want to serialize this class as a cache value. Knowing the old diff caches and the diff_header field of DiffInfo [1], I\u0027d expect that we only need to store the string-based header lines in the cache value. That version is something we can generate inside of the GitFileDiffCache.\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#diff-info",
      "range": {
        "startLine": 23,
        "startChar": 22,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cf3ea92_230112ad",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "3117239d_abf5ea58",
      "range": {
        "startLine": 23,
        "startChar": 22,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1096038_0375e437",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "This is still the old code which leads to the same weird behavior of oldPath and newPath in PatchListEntry. We don\u0027t want that for the new caches. In the new caches, the oldPath should really contain the old path (-\u003e should be set for a deletion) and the newPath should be empty.",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 63,
        "endChar": 0
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f7b126e_dd25137d",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 63,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "c1096038_0375e437",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 63,
        "endChar": 0
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4240cc92_fea293d4",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "As this method shows, the value REWRITE is never generated. That value and all its handling in Gerrit\u0027s code seems to be dead code to me. Please remove it (-\u003e separate change?).",
      "range": {
        "startLine": 64,
        "startChar": 20,
        "endLine": 64,
        "endChar": 33
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b512d963_5d11a17e",
        "filename": "java/com/google/gerrit/server/patch/entities/FileHeader.java",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. Added a TODO and moved this code to the GitFileDiffCacheImpl.",
      "parentUuid": "4240cc92_fea293d4",
      "range": {
        "startLine": 64,
        "startChar": 20,
        "endLine": 64,
        "endChar": 33
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48990d2d_153eeb3c",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "As discussed, please directly use Protobuf serialization.",
      "range": {
        "startLine": 26,
        "startChar": 34,
        "endLine": 26,
        "endChar": 57
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd3759c6_49518911",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48990d2d_153eeb3c",
      "range": {
        "startLine": 26,
        "startChar": 34,
        "endLine": 26,
        "endChar": 57
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59dc64c5_77cb101b",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Given the amount of the fields and that oldXxx and newXxx can be easily switched erroneously, I\u0027d recommend the use of an AutoValue.Builder.",
      "range": {
        "startLine": 27,
        "startChar": 28,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84a1beba_e7997c31",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 27,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59dc64c5_77cb101b",
      "range": {
        "startLine": 27,
        "startChar": 28,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77cc4ea3_0a931cc6",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Why are the edits marked as nullable? Can\u0027t we simply use an empty list?",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dedd5732_d11946ca",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 41,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77cc4ea3_0a931cc6",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 41,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f031e6fc_c058d75e",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "We need to use an immutable type here. -\u003e ImmutableList or ImmutableSet.",
      "range": {
        "startLine": 42,
        "startChar": 18,
        "endLine": 42,
        "endChar": 22
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6822fa9f_82aa8345",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f031e6fc_c058d75e",
      "range": {
        "startLine": 42,
        "startChar": 18,
        "endLine": 42,
        "endChar": 22
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1c0f72c_0000cc17",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "As mentioned in other comments, please use Optional instead of @Nullable in AutoValues.",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1507504_55093e21",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a1c0f72c_0000cc17",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 11
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f3ec6cf_66736938",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Doesn\u0027t the GitModifiedFilesCache use oldPath() and newPath() for the file paths? If so, shouldn\u0027t we also use oldPath() and newPath() here for consistency?",
      "range": {
        "startLine": 48,
        "startChar": 25,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e68ca9aa_674521c1",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f3ec6cf_66736938",
      "range": {
        "startLine": 48,
        "startChar": 25,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42c6466_0ee0a5f8",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "Is there a reason to use Long + nullable instead of the primitive type long? In the old caches, we used long and simply put any value (even fallbacks like 0 for non-blobs) into the mandatory field \u0027size\u0027 of FileInfo [1]. Do you intend to use a different approach?\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#file-info",
      "range": {
        "startLine": 54,
        "startChar": 18,
        "endLine": 54,
        "endChar": 22
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94f363d5_c5d6ec79",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2020-09-16T17:28:08Z",
      "side": 1,
      "message": "According to the design, the size computation is in the FileDiffCache and not the GitFileDiffCache. That\u0027s crucial as we don\u0027t want to waste time on the size computation in the GitFileDiffCache even though not all callers of the GitFileDiffCache need the size. Please move it to the FileDiffCache.",
      "range": {
        "startLine": 54,
        "startChar": 23,
        "endLine": 54,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b97100d3_a8007c8d",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "I think I did put nullable for \"empty\" GitFileDiff. No specific reason. Done.",
      "parentUuid": "c42c6466_0ee0a5f8",
      "range": {
        "startLine": 54,
        "startChar": 18,
        "endLine": 54,
        "endChar": 22
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95cc6a16_3fef5348",
        "filename": "java/com/google/gerrit/server/patch/entities/GitFileDiff.java",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2020-10-22T13:56:37Z",
      "side": 1,
      "message": "Done. \n\nI had to introduce the new fields oldId, newId, oldMode, newMode to the output of the GitDiffFileCache, so that I can use them to compute the size in the FileDiffCache.",
      "parentUuid": "94f363d5_c5d6ec79",
      "range": {
        "startLine": 54,
        "startChar": 23,
        "endLine": 54,
        "endChar": 32
      },
      "revId": "c69573a5b7540c681100726d3530c8dc8e6893e8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}