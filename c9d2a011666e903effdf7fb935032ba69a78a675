{
  "comments": [
    {
      "key": {
        "uuid": "Uy-f0gA8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-05-18T00:51:18Z",
      "side": 1,
      "message": "This is going to either render performance unacceptable in some cases, or make drafts useless. I guess killing two features in favor of making drafts work correctly on tiny repositories is worth it?",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U1M5HI2I",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-05-20T18:44:27Z",
      "side": 1,
      "message": "\u003e [...] or make drafts useless.\n\nWell ... as of now drafts already are useless, as they can be pulled\ndirectly by users that do not have access to them. That\u0027s\ncounter-intuitive and the site-admins can do nothing about it.\n\nIf this change does anything, then it is making drafts use/ful/.\n\n\u003e This is going to either render performance unacceptable in some cases\n\nLet\u0027s have some numbers.\nOn my machine calling allRefsAreVisibleExcept 100000 times amounts for\n\n* ~88ms when checking only for READ.\n* ~80ms when checking only for READ and VIEW_DRAFTS.\n\nThe fact that checking for more conditions is faster than checking for\nless conditions shows that other causes have by far more influence.\n\nGiven that those numbers are for 100000 function calls, and we\ntypically have 1, or 2 per request clearly shows that the performance\nloss you hint at, cannot stem from the function itself getting too\nslow.\n\nSo, as allRefsAreVisibleExcept gets also used where we check whether or\nnot a short-cut through logic is allowed, I assume you hint towards the\nassociated performance loss from no longer being able to take the\ndraft-exposing short cuts.\n\nUsers still can use the draft-exposing short-cuts, if the site admin\ndecides to grant them VIEW_DRAFTS.\n\n\nSo up to now, it was \"There is no way to keep drafts hidden, but we\nprovide unconditional short-cuts through code logic\". This change\nturns that statement into \"You may choose on a per group basis between\nwhether\n\n* users are priviledged enough to see drafts and therefore are allowed some short-cuts through code, or\n* users should be kept well isolated from other\u0027s drafts and therefore cannot take the draft-exposing short-cuts\".\n\n\u003e I guess killing two features in favor of making drafts work\n\u003e correctly on tiny repositories is worth it?\n\nWhich two features get killed by this change?\nAnd why do you limit to tiny repositories?",
      "parentUuid": "Uy-f0gA8",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d29791e_94f3a427",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-06-08T16:59:46Z",
      "side": 1,
      "message": "If you want convincing results, either way, benchmark your tests on a repo with 100K-10M  refs and 1-10K ACLs.",
      "parentUuid": "U1M5HI2I",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d15f9f2_94c9c4a3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-06-12T21:59:46Z",
      "side": 1,
      "message": "Thanks, Martin.\n\nI retested calling allRefsAreVisibleExcept, it seems the cost is negligible\neven for bigger repos.\n\nAs seen below in the first table, increasing the number of refs does\nnot affect runtime too much. While the number of refs increased by\n4 orders of magnitude, mean runtime only about doubled.\n\nThe second table shows, that the number of access sections in the\nproject.config has more impact. However, 1K already seems way beyond\nwhat (at least) we typically use. Including all inherited access\nsections, even our bigger repos are only around 10 access sections.\n\n\n* 100K refs, 10 access sections in project.config.\n\n  +----------------+-----------+------------------+--------------+-----------------+\n  |                |           |                  | mean runtime |                 |\n  | Variant        | # batches | iterations/batch |   of batch   | std. derviation |\n  +----------------+-----------+------------------+--------------+-----------------+\n  | Without change |     5     |      100000      |    137ms     |      25ms       |\n  | With change    |     5     |      100000      |    180ms     |      29ms       |\n  +----------------+-----------+------------------+--------------+-----------------+\n\nAdditional cost per request: \u003c\u003c0.1ms\n\n\n* 100K refs, 1K access sections in project.config.\n\n  +----------------+-----------+------------------+--------------+-----------------+\n  |                |           |                  | mean runtime |                 |\n  | Variant        | # batches | iterations/batch |   of batch   | std. derviation |\n  +----------------+-----------+------------------+--------------+-----------------+\n  | Without change |     5     |      100000      |     78s      |       3s        |\n  | With change    |     5     |      100000      |     86s      |       4s        |\n  +----------------+-----------+------------------+--------------+-----------------+\n\nAdditional cost per request: \u003c0.1ms\n\nSo in all settings, the cost of this change to add a proper check for\npermissions is \u003c0.1ms.",
      "parentUuid": "7d29791e_94f3a427",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d9595bb_9be9cb38",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-06-12T22:09:35Z",
      "side": 1,
      "message": "It sounds like you are only testing allRefsAreVisibleExcept(), I don\u0027t think that is where the concern is.  I think the concern is that this now returns false more often than in the past and that in those cases advertising refs will be much slower.   So I suspect that an git ls-remote is what you should be testing?",
      "parentUuid": "7d15f9f2_94c9c4a3",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aec1579_410a9230",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-06-13T14:55:44Z",
      "side": 1,
      "message": "\u003e It sounds like you are only testing allRefsAreVisibleExcept(), [...]\n\nYes.\nAs that\u0027s where actual, direct cost comes from.\n\n\u003e I think the concern is\n\u003e that this now returns false more often [...]\n\nYes, there is also an indirect cost attached to this change.\n\nHowever, this indirect cost does not come in unconditionally and\nallRefsAreVisibleExcept /can/ return the same values as before.\nIf site admins think that the old behaviour is good and correct, they\ncan grant \"View Drafts\", and allRefsAreVisibleExcept returns just what\nit would return without the change. (That\u0027s what I did the timing for)\n\nThe benefit of the change is that site admins can now choose to not\ngrant \"View Drafts\" and that this refusal is respected. If they\nrefuse, that of course comes with extra cost.\n\nBut comparing the runtime of performance optimized code paths that\nexpose hidden information (current behaviour) to code paths that do\nnot expose confidential information (new behaviour without granting\n\"View Drafts\") is somewhat comparing apples to oranges.\n\nIf this indirect cost is as low as it is now, keeping hidden\ninformation hidden is more important to me.\n\n\u003e So I suspect that an git ls-remote is what you should\n\u003e be testing?\n\nThe following timing is on the 100K refs repo with 1K access sections.\n\n* Without the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.445s\n  user    0m0.040s\n  sys     0m0.021s\n\n* With the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.720s\n  user    0m0.029s\n  sys     0m0.019s\n\nThat would be perfectly fine with me. But since 1K access sections\nseems unrealistically high to me, here are timings for 50 access\nsections (still way more than I\u0027ve ever seen on a project). Again\nfor 100K refs:\n\n* Without the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.238s\n  user    0m0.020s\n  sys     0m0.008s\n\n* With the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.331s\n  user    0m0.021s\n  sys     0m0.005s",
      "parentUuid": "5d9595bb_9be9cb38",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d9899f5_5c21fda7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-06-13T17:32:32Z",
      "side": 1,
      "message": "These numbers are very suspect to me, how are you testing this exactly?  I cannot get an ls-remote to a high-end machine with SSDs to return in under 3s on a project with 275K refs.  Granted I am running Gerrit 2.5.1, but I doubt that master has improved that much since then.  How are you creating your refs?  Are you including a large percentage of changes in those refs, I have 236K changes in that one repo.  \n\nAnd for other numbers, I believe that some Gerrit users are running  on the order of 9K ALCs (2 years ago).  I understand that these are not numbers that everybody is expcted to see, but they are numbers that Gerrit is expected to handle (and we are focusing on making it handle way more even, at least 2 orders of magnitude more).  Gerrit is one of the most (if not the most) scalable git servers out there and it is important to many businesses that it stay that way and continue to improve, not degrade.\n\nThat being said, I think I agree with your argument about being able to just turn this off for those who care about performance over privacy.",
      "parentUuid": "2aec1579_410a9230",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8309c5_62e9f637",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-06-14T01:18:10Z",
      "side": 1,
      "message": "\u003e These numbers are very suspect to me, how are you testing this\nexactly?\n\nOn a two year old run of the mill machine\n(Intel Core i7 CPU 870, 16GB RAM)\n\nThe machine is running gentoo Linux and not under load, but caches are\nobviously not cold.\n\nThe repo I\u0027m in is on a local disk. The remote\u0027s url is ssh to the\nsame machine. The remote directory is also on a local disk. But the\nrepos are in the buffers, so disk should not matter too much.\n\nThe tested gerrits are 5d5c5c3556c3094fc95fc5d258569151e6818695, and\nf7b9bfe6cb1f8640a5d1797bdfc12038d2b4c0e1. Against a local MySQL\ndatabase on the same machine. Authentication is\nDEVELOPMENT_BECOME_ANY_ACCOUNT.\n\nIt\u0027s not in a VM, but on a real machine.\n\nMy Java is:\n\n  java version \"1.7.0_05\"\n  OpenJDK Runtime Environment (IcedTea7 2.2.1) (Gentoo build 1.7.0_05-b21)\n  OpenJDK 64-Bit Server VM (build 23.0-b21, mixed mode)\n\nEven with OS caches filled, the first call is ~30-100 times slower for\nme. Already for the second call performance takes a huge leap. After\nsome minutes there is again a boost of ~20%. No idea where this second\nboost comes from.\n\n\u003e I cannot get an ls-remote to a high-end machine with SSDs to return\n  in under 3s on a project with 275K refs.\n\nHa! My 2 year old machine is doing better than a beefy server :-))\n\nOk, I had only 100K refs. So, I tried again with 300K.\n\n* Without the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m1.210s\n  user    0m0.132s\n  sys     0m0.057s\n\n* With the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m1.536s\n  user    0m0.157s\n  sys     0m0.059s\n\nStill faster?\nWell, that can hardly be :-((\n\n\u003e How are you creating your refs?\n\nSynthetically. That may likely be the culprit that our timings do not align\ntoo nicely.\n\nThe refs have been generated by a script. First 1000 commits on top of\neach other. Each commit is small, just adding a file \"file$IDX\" with\ncontent \"file$IDX\". Then adding 100 refs to each commit.\n\nBut even if we used different sets of refs, and even if we get\ndifferent timings, the important question if and how much slower the\ncode would get due to this change:\n\n* For corner cases (I for one would not git ls-remotes for 300K refs) it\u0027s around 40% slower.\n* But for typical use cases, the change is just not noticable.\n\nDoes that agree with your measurements on a big, real world repo?",
      "parentUuid": "7d9899f5_5c21fda7",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}