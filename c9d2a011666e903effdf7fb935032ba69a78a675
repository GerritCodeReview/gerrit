{
  "comments": [
    {
      "key": {
        "uuid": "Uy-f0gA8",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2013-05-18T00:51:18Z",
      "side": 1,
      "message": "This is going to either render performance unacceptable in some cases, or make drafts useless. I guess killing two features in favor of making drafts work correctly on tiny repositories is worth it?",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "U1M5HI2I",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-05-20T18:44:27Z",
      "side": 1,
      "message": "\u003e [...] or make drafts useless.\n\nWell ... as of now drafts already are useless, as they can be pulled\ndirectly by users that do not have access to them. That\u0027s\ncounter-intuitive and the site-admins can do nothing about it.\n\nIf this change does anything, then it is making drafts use/ful/.\n\n\u003e This is going to either render performance unacceptable in some cases\n\nLet\u0027s have some numbers.\nOn my machine calling allRefsAreVisibleExcept 100000 times amounts for\n\n* ~88ms when checking only for READ.\n* ~80ms when checking only for READ and VIEW_DRAFTS.\n\nThe fact that checking for more conditions is faster than checking for\nless conditions shows that other causes have by far more influence.\n\nGiven that those numbers are for 100000 function calls, and we\ntypically have 1, or 2 per request clearly shows that the performance\nloss you hint at, cannot stem from the function itself getting too\nslow.\n\nSo, as allRefsAreVisibleExcept gets also used where we check whether or\nnot a short-cut through logic is allowed, I assume you hint towards the\nassociated performance loss from no longer being able to take the\ndraft-exposing short cuts.\n\nUsers still can use the draft-exposing short-cuts, if the site admin\ndecides to grant them VIEW_DRAFTS.\n\n\nSo up to now, it was \"There is no way to keep drafts hidden, but we\nprovide unconditional short-cuts through code logic\". This change\nturns that statement into \"You may choose on a per group basis between\nwhether\n\n* users are priviledged enough to see drafts and therefore are allowed some short-cuts through code, or\n* users should be kept well isolated from other\u0027s drafts and therefore cannot take the draft-exposing short-cuts\".\n\n\u003e I guess killing two features in favor of making drafts work\n\u003e correctly on tiny repositories is worth it?\n\nWhich two features get killed by this change?\nAnd why do you limit to tiny repositories?",
      "parentUuid": "Uy-f0gA8",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d29791e_94f3a427",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-06-08T16:59:46Z",
      "side": 1,
      "message": "If you want convincing results, either way, benchmark your tests on a repo with 100K-10M  refs and 1-10K ACLs.",
      "parentUuid": "U1M5HI2I",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d15f9f2_94c9c4a3",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-06-12T21:59:46Z",
      "side": 1,
      "message": "Thanks, Martin.\n\nI retested calling allRefsAreVisibleExcept, it seems the cost is negligible\neven for bigger repos.\n\nAs seen below in the first table, increasing the number of refs does\nnot affect runtime too much. While the number of refs increased by\n4 orders of magnitude, mean runtime only about doubled.\n\nThe second table shows, that the number of access sections in the\nproject.config has more impact. However, 1K already seems way beyond\nwhat (at least) we typically use. Including all inherited access\nsections, even our bigger repos are only around 10 access sections.\n\n\n* 100K refs, 10 access sections in project.config.\n\n  +----------------+-----------+------------------+--------------+-----------------+\n  |                |           |                  | mean runtime |                 |\n  | Variant        | # batches | iterations/batch |   of batch   | std. derviation |\n  +----------------+-----------+------------------+--------------+-----------------+\n  | Without change |     5     |      100000      |    137ms     |      25ms       |\n  | With change    |     5     |      100000      |    180ms     |      29ms       |\n  +----------------+-----------+------------------+--------------+-----------------+\n\nAdditional cost per request: \u003c\u003c0.1ms\n\n\n* 100K refs, 1K access sections in project.config.\n\n  +----------------+-----------+------------------+--------------+-----------------+\n  |                |           |                  | mean runtime |                 |\n  | Variant        | # batches | iterations/batch |   of batch   | std. derviation |\n  +----------------+-----------+------------------+--------------+-----------------+\n  | Without change |     5     |      100000      |     78s      |       3s        |\n  | With change    |     5     |      100000      |     86s      |       4s        |\n  +----------------+-----------+------------------+--------------+-----------------+\n\nAdditional cost per request: \u003c0.1ms\n\nSo in all settings, the cost of this change to add a proper check for\npermissions is \u003c0.1ms.",
      "parentUuid": "7d29791e_94f3a427",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d9595bb_9be9cb38",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2013-06-12T22:09:35Z",
      "side": 1,
      "message": "It sounds like you are only testing allRefsAreVisibleExcept(), I don\u0027t think that is where the concern is.  I think the concern is that this now returns false more often than in the past and that in those cases advertising refs will be much slower.   So I suspect that an git ls-remote is what you should be testing?",
      "parentUuid": "7d15f9f2_94c9c4a3",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aec1579_410a9230",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ProjectControl.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 1012155
      },
      "writtenOn": "2013-06-13T14:55:44Z",
      "side": 1,
      "message": "\u003e It sounds like you are only testing allRefsAreVisibleExcept(), [...]\n\nYes.\nAs that\u0027s where actual, direct cost comes from.\n\n\u003e I think the concern is\n\u003e that this now returns false more often [...]\n\nYes, there is also an indirect cost attached to this change.\n\nHowever, this indirect cost does not come in unconditionally and\nallRefsAreVisibleExcept /can/ return the same values as before.\nIf site admins think that the old behaviour is good and correct, they\ncan grant \"View Drafts\", and allRefsAreVisibleExcept returns just what\nit would return without the change. (That\u0027s what I did the timing for)\n\nThe benefit of the change is that site admins can now choose to not\ngrant \"View Drafts\" and that this refusal is respected. If they\nrefuse, that of course comes with extra cost.\n\nBut comparing the runtime of performance optimized code paths that\nexpose hidden information (current behaviour) to code paths that do\nnot expose confidential information (new behaviour without granting\n\"View Drafts\") is somewhat comparing apples to oranges.\n\nIf this indirect cost is as low as it is now, keeping hidden\ninformation hidden is more important to me.\n\n\u003e So I suspect that an git ls-remote is what you should\n\u003e be testing?\n\nThe following timing is on the 100K refs repo with 1K access sections.\n\n* Without the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.445s\n  user    0m0.040s\n  sys     0m0.021s\n\n* With the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.720s\n  user    0m0.029s\n  sys     0m0.019s\n\nThat would be perfectly fine with me. But since 1K access sections\nseems unrealistically high to me, here are timings for 50 access\nsections (still way more than I\u0027ve ever seen on a project). Again\nfor 100K refs:\n\n* Without the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.238s\n  user    0m0.020s\n  sys     0m0.008s\n\n* With the change\n\n  time git ls-remote \u0026\u003e/dev/null\n  \n  real    0m0.331s\n  user    0m0.021s\n  sys     0m0.005s",
      "parentUuid": "5d9595bb_9be9cb38",
      "revId": "c9d2a011666e903effdf7fb935032ba69a78a675",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}