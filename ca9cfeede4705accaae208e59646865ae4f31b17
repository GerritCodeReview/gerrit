{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06d5b179_ed864094",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-04-25T11:41:59Z",
      "side": 1,
      "message": "@Dmitrii what do you think?",
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39f5d3ae_fafafcb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-27T07:50:18Z",
      "side": 1,
      "message": "Sorry, I think this solution is overcomplicated and uses unobvious approaches/assumptions.\n\nMaybe let\u0027s discuss again my suggestion with unloaders (https://gerrit-review.googlesource.com/c/gerrit/+/334761/comments/81520c0c_d5652de6)?\n\nIn overall, I would like to have a clear responsibilities for increment/close Repository. In this change the responsibility is splitted between PerThreadCache and callers of getOptional + depends on the implementation of PerThreadCache (see my other comments)",
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23980d2b_771a997f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-04-27T08:00:14Z",
      "side": 1,
      "message": "OK, let me remove the PerThreadCache side of things. The problem exists even without the PerThreadCache, as shown in the test.\n\nI\u0027ll first upload a failing test *without* the use of PerThreadCache and then resolve the problem leaving the PerThreadCache outside the scope.\n\nAbandoning this change for now.",
      "parentUuid": "39f5d3ae_fafafcb0",
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30cd0c8d_20fd2204",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-04-27T10:23:34Z",
      "side": 1,
      "message": "@Dmitrii I\u0027ve uploaded Change-Id: I4b2c43ea430a0 for sorting out the issue of the RepoRefCache in allowing to access a closed repository.\n\nWith regards with the unloaders approach for the PerThreadCache, let\u0027s explore it but outside the scope of Change-Id: I4b2c43ea430a0 and as a separate change.\n\nWe are not aiming of resolving all Gerrit problems with a single change, otherwise we\u0027ll get stuck with it for the next days, weeks, months or years to come.",
      "parentUuid": "23980d2b_771a997f",
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58578bf5_e1d1c1b9",
        "filename": "java/com/google/gerrit/server/git/RepoRefCache.java",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-27T07:50:18Z",
      "side": 1,
      "message": "I had hard time when I was trying to understand how it works.\n\nIIUC, this code works in the following way:\n1. If this condition is false (i.e. cache.get(refCacheKey) \u003d\u003d null) \u003d\u003e loader has been called, but newly created RepoRefCache is not added in the cache.\nI.e. the returned RefCache must be closed explicitly.\nProblem 1: the following method in ChangeNotes\n  protected ObjectId readRef(Repository repo) throws IOException {\ndoesn\u0027t close it.\n\n2. If this condition is true \u003d\u003e 2 options:\n1) Loader has been called, new RepoRefCache has beed added to the PerThreadCache.\nIn this case, we can\u0027t call close on the created RepoRefCache. As a workaround, the RepoRefCache is wrapped into another RefCache and the first call to wrapper.close() doesn\u0027t do anything, but second does.\nProblem 2: This is very unclear logic. \n\n2) The PerThreadCache already contain RepoRefCache for the repo. In this case, only a new wrapper is returned for the same RepoRef.\nProblem 3: if wrapper.close() is called 2 times, the RepoRefCache becomes closed.",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caa5e0b9_fd26346e",
        "filename": "java/com/google/gerrit/server/git/RepoRefCache.java",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-27T07:50:18Z",
      "side": 1,
      "message": "Another notice: we assume, that PerThreadCache stores all instances forever. I.e.\nbetween these 2 lines\n  RepoRefCache refCache \u003d cache.get(refCacheKey, () -\u003e new RepoRefCache(repo));\n  if (cache.get(refCacheKey) !\u003d null)\n  \nthe entry for refCacheKey can\u0027t be evicted from the dictionary. This is unexpected assumption for the cache (the current implementation doesn\u0027t evict anything, but we can\u0027t be sure about the future)",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 40
      },
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a792a5b_a0389dc2",
        "filename": "java/com/google/gerrit/server/git/RepoRefCache.java",
        "patchSetId": 11
      },
      "lineNbr": 56,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2022-04-27T07:50:18Z",
      "side": 1,
      "message": "The first call to the close does nothing, but the second call closes refCache.\nBreaks the expectations for AutoCloseable: the expectation is that the first close() call does something, and all subsequent call just do nothing (in other word: calling close() one time is equal to multiple close() calls.)",
      "range": {
        "startLine": 56,
        "startChar": 16,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ca9cfeede4705accaae208e59646865ae4f31b17",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}