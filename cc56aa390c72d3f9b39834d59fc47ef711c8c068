{
  "comments": [
    {
      "key": {
        "uuid": "1b48d34e_ac03a325",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-02T22:13:52Z",
      "side": 1,
      "message": "Is it worth to mention here, that the JGit LFS support is now exposed in the plugin API and plugins can depend on it?",
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60fcbc2b_7e9d317a",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/lfs/LfsApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1012612
      },
      "writtenOn": "2015-12-02T13:54:43Z",
      "side": 1,
      "message": "Is only the batch protocol supported by JGit\u0027s LFS implementation currently?  I know that\u0027s the main protocol moving forward, but should we support the old API?",
      "range": {
        "startLine": 29,
        "startChar": 31,
        "endLine": 29,
        "endChar": 53
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_0609fa71",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/lfs/LfsApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2015-12-02T14:25:41Z",
      "side": 1,
      "message": "Personally I wouldn\u0027t bother about older versions. This is relatively new extension to git and (I hope) that everyone that is using it would be on new version.",
      "parentUuid": "60fcbc2b_7e9d317a",
      "range": {
        "startLine": 29,
        "startChar": 31,
        "endLine": 29,
        "endChar": 53
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b48d34e_6c553b45",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/lfs/LfsApiServlet.java",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2015-12-02T16:05:38Z",
      "side": 1,
      "message": "Yes, only the batch protocol is supported. The git-lfs client is by default using the new protocol (I checked the source code) and is only using the old protocol as a fallback when the LFS server doesn\u0027t support the new protocol",
      "parentUuid": "60fcbc2b_7e9d317a",
      "range": {
        "startLine": 29,
        "startChar": 31,
        "endLine": 29,
        "endChar": 53
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b48d34e_ec968b2d",
        "filename": "gerrit-server/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 63,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-02T16:58:12Z",
      "side": 1,
      "message": "It wasn\u0027t clear to me that gerrit core already includes this JGit extension. In this case, the plugins would already \"see\" this in plugin-api. Note, that all jars here art transitively included in plugin API. So that plugin with standalone Buck build mode would already be able to depend on it, without doing anything. However, for the in tree build mode to work, the new JGIt LFS extension JARs must be exported in gerrit-plugin-api/BUCK file (see  the line where jgit exported itself).",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 63,
        "endChar": 33
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_e613fea4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GerritGlobalModule.java",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2015-12-02T14:25:41Z",
      "side": 1,
      "message": "I\u0027m not so sure about reusing same interface here.\n\nWhat if we wanted to extend it in future? Waiting for a change being merged into jgit, then bumping it\u0027s version in Gerrit dependencies... sounds time consuming",
      "range": {
        "startLine": 300,
        "startChar": 33,
        "endLine": 300,
        "endChar": 52
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_c691a238",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GerritGlobalModule.java",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2015-12-02T16:05:38Z",
      "side": 1,
      "message": "Why is this interface in JGit? Our idea was that even JGit could provide a simple minimalistic LFS server that could be used for test purposes at least. The new lfs-store commands in JGit does that already.\n\nAs long as the lfs protocol implementation is in JGit I would also keep this interface in JGit.",
      "parentUuid": "5b27ab98_e613fea4",
      "range": {
        "startLine": 300,
        "startChar": 33,
        "endLine": 300,
        "endChar": 52
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b48d34e_2c8333bc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GerritGlobalModule.java",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2015-12-03T08:16:55Z",
      "side": 1,
      "message": "I second Dariusz\u0027 point.\n\nIt also struck me as strange to directly bind against a JGit interface here. I understand that JGit needs some abstraction of the large file repository that can be used from the protocol implementation.\n\nStill I think we should decouple the interfaces exposed by this extension point from the interface used by the JGit implementation. It just kind of feels wrong to implement let\u0027s say an S3 implementation of a large file repository against a JGit interface.",
      "parentUuid": "5b27ab98_c691a238",
      "range": {
        "startLine": 300,
        "startChar": 33,
        "endLine": 300,
        "endChar": 52
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_268356bc",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GerritGlobalModule.java",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2015-12-03T11:41:02Z",
      "side": 1,
      "message": "How would that interface look like in Gerrit?\n\n\u003e It just kind of feels wrong to implement let\u0027s say an S3 implementation of a large file repository against a JGit interface\n\nWhy?\n\n\n\nNote that this is not the first case that a JGit interface is exposed as an extension point. Check the lines 266-267: the PostReceiveHook and PreUploadHook are JGit interfaces.",
      "parentUuid": "1b48d34e_2c8333bc",
      "range": {
        "startLine": 300,
        "startChar": 33,
        "endLine": 300,
        "endChar": 52
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_668d4ee2",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GerritGlobalModule.java",
        "patchSetId": 2
      },
      "lineNbr": 300,
      "author": {
        "id": 1007114
      },
      "writtenOn": "2015-12-03T12:14:55Z",
      "side": 1,
      "message": "How would the interface look like? Maybe along the lines of the interface in JGit, maybe different. The basic requirements are the same, of course:\n- provide an upload URL to upload a new large object\n- get the download URL to download an existing large object\n\nBut I could as well imagine more requirements for communication between Gerrit and a large file repository like e.g. deletion of large objects in case of repo deletion. I just don\u0027t think we can assume that the same interface is a good fit for both levels of abstraction.\n\n\u003e PostReceiveHook and PreUploadHook\n\nOne could argue that a higher level of abstraction could have some benefits here as well. But that\u0027s a different discussion.",
      "parentUuid": "5b27ab98_268356bc",
      "range": {
        "startLine": 300,
        "startChar": 33,
        "endLine": 300,
        "endChar": 52
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b48d34e_ccf8ef70",
        "filename": "lib/jgit/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-02T22:13:52Z",
      "side": 1,
      "message": "To be consistent, the SHA1 shouldn\u0027t be provided here and in the next rule, as they wouldn\u0027t be stable anyway.",
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b48d34e_0c983737",
        "filename": "lib/jgit/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2015-12-03T00:32:49Z",
      "side": 1,
      "message": "we tried this and found that without SHA1 updates aren\u0027t downloaded if jgit is modified and rebuilt locally hence we reintroduced the hashes. \n\nWe had also tried local_jar but this was removed today since it\u0027s broken due to some changes in buck (https://gerrit-review.googlesource.com/#/c/72853/)",
      "parentUuid": "1b48d34e_ccf8ef70",
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_a6d106da",
        "filename": "lib/jgit/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-03T06:31:34Z",
      "side": 1,
      "message": "I\u0027m aware of it. The problem here (or the feature) is Buck\u0027s cache. Once rule is executed and rule key is calculated, next call will retrieve the artifact from the cache and not re-fetch it from local Maven repository. But, that applies not only to new introduced targets, jgit-lfs and jgit-lfs-server. Yet, in older JGit targets, like :jgit etc, SHA1 were removed. My suggestion include all of them or remove.\n\nIn recent changes, that relied on non-published JGit snapshots, Google\u0027s project members uploaded it to Google storage bucket. Can we ask them to do that? This would significanlty simplify verification of this change.\n\n| We had also tried local_jar but this was removed today since it\u0027s broken due to some changes in buck\n\nI know. My hope is that once cross-cell (project) support is landed in Buck we could provide better, simpler solution to changing third libraries workflow.",
      "parentUuid": "1b48d34e_0c983737",
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b27ab98_e6b21ebe",
        "filename": "lib/jgit/BUCK",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-12-02T22:13:52Z",
      "side": 1,
      "message": "Not needed. It already contained in transitive dependency chain, through dependency on :jgit-lfs.\n\nNit, we either use one line dep list: [\u0027foo\u0027], or multi line:\n\n  deps \u003d [\n    \u0027foo\u0027,\n    \u0027bar\u0027,\n  ]\n\nBut we don\u0027t mix them.",
      "range": {
        "startLine": 71,
        "startChar": 10,
        "endLine": 71,
        "endChar": 18
      },
      "revId": "cc56aa390c72d3f9b39834d59fc47ef711c8c068",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}