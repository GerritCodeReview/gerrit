{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d6cb6f4_1cc11473",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-12-06T16:33:44Z",
      "side": 1,
      "message": "connected",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81d5a361_09357fcd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T19:20:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d6cb6f4_1cc11473",
      "range": {
        "startLine": 18,
        "startChar": 10,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98eb06a1_357ce041",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T17:34:24Z",
      "side": 1,
      "message": "Thanks for the input! Seems we\u0027re thinking in very similar ways.",
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd70ac4b_a3a4d24e",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:05:41Z",
      "side": 1,
      "message": "there\u0027s a lot of abstraction power here that would be simpler to omit if it\u0027s not needed. KeyType could always be a class instead of a Symbol, and ValueType is an instance of that class? Then there would be no token creation/fetching needed and we would get more type checking and collision prevention.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 32,
        "endChar": 0
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b5caedc_d8eb82e1",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:49:24Z",
      "side": 1,
      "message": "Using the class would probably have a bit of shoehorning as well, so maybe Symbol is better. We can still reduce the unknowns a lot I think.",
      "parentUuid": "cd70ac4b_a3a4d24e",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 32,
        "endChar": 0
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "760fff41_002b4a29",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T17:34:24Z",
      "side": 1,
      "message": "Hah, great minds think alike. At first I also considered using Constructor\u003cT\u003e as the key-type, but I realized this might be shoehorning too much.\n\nFair point on simplifying to just a symbol.",
      "parentUuid": "1b5caedc_d8eb82e1",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 32,
        "endChar": 0
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16e9cb60_3dffced2",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1083225
      },
      "writtenOn": "2021-12-06T16:33:44Z",
      "side": 1,
      "message": "request-dependency?",
      "range": {
        "startLine": 51,
        "startChar": 11,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8d839f3_8f4b7461",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T22:54:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16e9cb60_3dffced2",
      "range": {
        "startLine": 51,
        "startChar": 11,
        "endLine": 51,
        "endChar": 28
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "428b9900_ed6d8a9b",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:05:41Z",
      "side": 1,
      "message": "any example of something that would need to use the async pattern? Or maybe we can always have a synchronously provided class that itself async methods/Observables?",
      "range": {
        "startLine": 120,
        "startChar": 2,
        "endLine": 120,
        "endChar": 6
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3137ff6_7dc1cea6",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 120,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T22:54:42Z",
      "side": 1,
      "message": "constructor() {\n  resolve(this, changeModelToken).then(changeModel \u003d\u003e \n    subscribe(this, changeModel.foo$, ...)\n  );\n}",
      "parentUuid": "428b9900_ed6d8a9b",
      "range": {
        "startLine": 120,
        "startChar": 2,
        "endLine": 120,
        "endChar": 6
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad5fb7d_1ffabc21",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:05:41Z",
      "side": 1,
      "message": "Just checking, is it important that you aren\u0027t using function syntax here (removing \"readonly\", \"\u003d\", and \"\u003d\u003e\") or just a style choice?",
      "range": {
        "startLine": 167,
        "startChar": 12,
        "endLine": 168,
        "endChar": 73
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "307d6395_489678bd",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T17:34:24Z",
      "side": 1,
      "message": "Yes, this is required to bind \u0027this\u0027.",
      "parentUuid": "8ad5fb7d_1ffabc21",
      "range": {
        "startLine": 167,
        "startChar": 12,
        "endLine": 168,
        "endChar": 73
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "212888a6_56166f3f",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T22:54:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "307d6395_489678bd",
      "range": {
        "startLine": 167,
        "startChar": 12,
        "endLine": 168,
        "endChar": 73
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e644d8f2_08195df7",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:05:41Z",
      "side": 1,
      "message": "this is a fooServiceProvider and not a fooService, right?",
      "range": {
        "startLine": 216,
        "startChar": 19,
        "endLine": 216,
        "endChar": 29
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "768a823f_94ffe5c0",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T22:54:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e644d8f2_08195df7",
      "range": {
        "startLine": 216,
        "startChar": 19,
        "endLine": 216,
        "endChar": 29
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ef44558_0e90fef2",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 220,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:05:41Z",
      "side": 1,
      "message": "can you explain .get() vs .wait():\nCan I do need(this,fooDependency).get() right away rather than keeping a provider around on the class?",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 29
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ebcb00db_a79cc3e2",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 220,
      "author": {
        "id": 1119195
      },
      "writtenOn": "2021-12-06T13:49:24Z",
      "side": 1,
      "message": "OK I think I see more now. need().get() won\u0027t work because all this stuff relies on dom events and therefore dom connections?",
      "parentUuid": "8ef44558_0e90fef2",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 29
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89723f8_11dd4cd0",
        "filename": "polygerrit-ui/app/services/dependency.ts",
        "patchSetId": 5
      },
      "lineNbr": 220,
      "author": {
        "id": 1139611
      },
      "writtenOn": "2021-12-06T17:34:24Z",
      "side": 1,
      "message": "So if you call need() inside of connectedCallback, you should be fine.  By the time need finishes the need should be fullfilled. This is guaranteed because of 3 reasons:\n1. Dom events are synchronously dispatched\n2. Parent elements get connectedCallback before child components, so as long as the need\u0027s been provided in or before a parent\u0027s connectedCallback we\u0027re good\n3. When adding a controller to a host that\u0027s connected, its hostConnected method gets called synchronously.\n\nThe reason for wait is if you do something inside of the constructor:\n\nconstructor() {\n  need(this, fooDependency).wait(dep \u003d\u003e\n     // do something with dep\n  )\n}",
      "parentUuid": "ebcb00db_a79cc3e2",
      "range": {
        "startLine": 220,
        "startChar": 0,
        "endLine": 220,
        "endChar": 29
      },
      "revId": "ce70efd3a7bb58431170b3c1728412f1f04a4b41",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}