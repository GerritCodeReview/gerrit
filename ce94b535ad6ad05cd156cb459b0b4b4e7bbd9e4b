{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1553016602 -0700\nnonce AC6AUtO8fmqmBLyk3T+RgQuTWKCFQDqQ6RqHbmb6PgaIGG5g9lkPoQhJ/pOYW+oUS4S1YEsASQM/\n\n0000000000000000000000000000000000000000 97b6331f980a2f8b0ccb385918f00adc5dacc0a2 refs/for/master%topic\u003dauto-annotations,r\u003dekempin@google.com\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlyRJxoVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMM0cP/jXqckIz68sxtT9D9gbBQIoikTby\nyUVg/wA/V3YyyelOcevDZmEITPhY93jLCrHij/JEn9TX5VVdlzEcP7MbywC9ePRm\n+cnyxXGyTuo7xnMMTmIMnASutQ+OS9DO9RLlx2DGo8wl9vWGPVCjlDlBLLjRMzIb\ncV3Yyr+vmjmeTDgMK7NAmEFd6Rs3DVknD+xCLndPYdyN58VjMw0dg6sUfaPi+buw\nUtbZvqEStmCZy97vJktiVGlk976bgwRKjM+cMwPQTgbBQ65+cY5hdTi5sFjiH6fn\n3Vzfza2lF5K3L5oTq1iWDo3Sw3oXWjRbhWFajQn9X3YQdzx2U2/NnLE4T+Vhmo6t\n8mC3GhlE67PzsmiXqID9aQazVU5qHl6EaUTR/oP4Quyqru8nk65OkV5RdJBNE30p\niwnhBX9YjYr2O9Ku0dO0LJ8MMvdBPJt4U+RISTuhaBA7YQbDFN8jN3tVEOk3E2CX\n4xjzxFWm5z61/DzLh6EAXLJg2r6u3+uO+S+E2GrOwveWPIjUV/BFatCQPh5E1YQD\nmgJuVBG4zw3FiwR3T0WXGjQOvpQS/KbfvWC+T/oaRN9+cr9n5DGVjXG9a2eGCnfj\n+TAMePM3qIHMu6nE5Dw0fwscs6vA7sZSppcbnxiudx4s41v+YyYNLQJo9nbNxaL5\nCANRWB3tAhyX4Wka\n\u003dRm1v\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "bac24ba1_611737c0",
        "filename": "java/com/google/gerrit/util/cli/CmdLineParser.java",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-21T14:10:02Z",
      "side": 1,
      "message": "Why not o.metaVar() as it was before?",
      "range": {
        "startLine": 436,
        "startChar": 8,
        "endLine": 436,
        "endChar": 13
      },
      "revId": "ce94b535ad6ad05cd156cb459b0b4b4e7bbd9e4b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d57e547_42f98a5f",
        "filename": "java/com/google/gerrit/util/cli/CmdLineParser.java",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-21T14:18:39Z",
      "side": 1,
      "message": "Huh? This is the help arg, o.metaVar() is the 4th arg.",
      "parentUuid": "bac24ba1_611737c0",
      "range": {
        "startLine": 436,
        "startChar": 8,
        "endLine": 436,
        "endChar": 13
      },
      "revId": "ce94b535ad6ad05cd156cb459b0b4b4e7bbd9e4b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c88957_77be4fef",
        "filename": "java/com/google/gerrit/util/cli/CmdLineParser.java",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-03-21T14:20:31Z",
      "side": 1,
      "message": "Oh, I see.",
      "parentUuid": "7d57e547_42f98a5f",
      "range": {
        "startLine": 436,
        "startChar": 8,
        "endLine": 436,
        "endChar": 13
      },
      "revId": "ce94b535ad6ad05cd156cb459b0b4b4e7bbd9e4b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5805bac1_70df3186",
        "filename": "java/com/google/gerrit/util/cli/CmdLineParser.java",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-03-21T14:29:08Z",
      "side": 1,
      "message": "By the way, sorry that @AutoAnnotation isn\u0027t quite ideal for the situation with lots of arguments. The annotated method needs to have types and names exactly matching the fields of the Annotation type, but that is not ideal when there are so many similarly-typed fields.\n\nOne possibility would be to introduce an intermediate @AutoValue type, like:\n\n @AutoValue\n abstract static class OptionSpec {\n   abstract String name();\n   abstract String[] aliases();\n   ...\n }\n\n private static Option newPrefixedOption(String prefix, Option o) {\n  return newOption(\n     OptionSpec.newBuilder().setName(prefix + o.name()).setAliases(aliases)....build());\n }\n\n private static Option newOption(OptionSpec spec) {\n   return newOption(spec.name(), spec.aliases(), ...);\n }\n\n @AutoAnnotation\n private static Option newOption(String name, String[] aliases, ...)\n\nIf we were designing a general-purpose library for programmatically creating Option instances, it might be worth it, but in this case I think it\u0027s probably overkill.",
      "parentUuid": "c0c88957_77be4fef",
      "range": {
        "startLine": 436,
        "startChar": 8,
        "endLine": 436,
        "endChar": 13
      },
      "revId": "ce94b535ad6ad05cd156cb459b0b4b4e7bbd9e4b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}