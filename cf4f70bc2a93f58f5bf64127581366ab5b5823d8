{
  "comments": [
    {
      "key": {
        "uuid": "b039f13a_b9abc0d6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1045122
      },
      "writtenOn": "2019-09-19T12:13:38Z",
      "side": 1,
      "message": "Q: How does this select JDK 8 explicitly? On my Debian-like system with \u0027update-alternatives --config javac\u0027 set to Java 11, it already seems to use my host JDK 11 (is that actually true and can I rely on that?).\n\nCould we make both JDKs explicit perhaps? E.g.:\n\n  $ bazel test --host_javabase\u003d@bazel_tools//tools/jdk:remote_jdk \\\n    --javabase\u003d@bazel_tools//tools/jdk:remote_jdk \\\n    --host_java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_java8 \\\n    --java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_java8 \\\n    //...\n\nwould build\u0026test using JDK 8 on a JDK 11 system, IIUC. But then I see\n\n    Fetching @remotejdk_linux; fetching 4s\n    Fetching https://mirror.bazel.build/openjdk/azul-zulu-9.0.7.1-jdk9.0.7/zulu9.0.7.1-jdk9.0.7-linux_x64-allmodules.tar.gz\n\nSo there\u0027s no remote_jdk for 8 and we rely on implicit host JDK being 8? 8 seems to be available (but not in Bazel tools itself) via https://mirror.bazel.build/openjdk/index.html . So I was thinking, perhaps it\u0027s worth the effort of defining our own \u0027jdk:remote_jdk8\u0027 pointing to JDK 8?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 20
      },
      "revId": "cf4f70bc2a93f58f5bf64127581366ab5b5823d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62730279_84cd8b77",
        "filename": "/COMMIT_MSG",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-19T12:43:25Z",
      "side": 1,
      "message": "You are overthinking this.\n\nBazel 0.29.1 (and upcoming 1.0 release for that matter), that is currently required, uses remote JDK 11 for builing Java source code. If you don\u0027t pass any option then per default Bazel would create Java 8 byte code (major version 52) even though the remote JDK 11 is actually used. It\u0027s guaranteed to happen, and wouldn\u0027t be changed unless explicitly announced. Remember, that Google internally still uses Java 8 (and would probably keep using Java 8 for quite some time). How Bazel does this magic, producing Java 8 byte code with Java 11? By passing --source 8 --target 8 compiler option.\n\nIn the same time Bazel supports building natively with Java 11 language level, and produces Java 11 byte code (major version 55). This is what this change is doing:\n\n  $ bazel build --host_javabase\u003d@bazel_tools//tools/jdk:remote_jdk11 \\\n    --javabase\u003d@bazel_tools//tools/jdk:remote_jdk11 \\\n    --host_java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_java11 \\\n    --java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_java11 \\\n    :release\n\nIn addition, Bazel supports vanilla toolchain (absolute_javabase that I\u0027ve added to Bazel recently), the one from Host Java runtime. You could install Java 12 (or Java 13), etc, and pass the absolute location to your Host Java installation directory to bazel, just pass the options, that documented in dev-bazel.txt. Then you would be able to produce Java 12 byte code (major version 56) as well:\n\n  $ bazel test \\\n    --define\u003dABSOLUTE_JAVABASE\u003d\u003cpath-to-java-12\u003e \\\n    --javabase\u003d@bazel_tools//tools/jdk:absolute_javabase \\\n    --host_javabase\u003d@bazel_tools//tools/jdk:absolute_javabase \\\n    --host_java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_vanilla \\\n    --java_toolchain\u003d@bazel_tools//tools/jdk:toolchain_vanilla \\\n    :release",
      "parentUuid": "b039f13a_b9abc0d6",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 16,
        "endChar": 20
      },
      "revId": "cf4f70bc2a93f58f5bf64127581366ab5b5823d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}