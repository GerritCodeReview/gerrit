{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c3b0144c_043085e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 17,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-29T12:10:57Z",
      "side": 1,
      "message": "This would be an implicit merge of stable into master which is actually much less dangerous than implicit merge of master into stable. And, of course, it would be an implicit merge only if stable contains a commit which is not yet in master.",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b700ff3_ecdd29ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 17,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-29T12:28:20Z",
      "side": 1,
      "message": "Names \"master\" and \"stable\" here doesn\u0027t have any special meaning, they only used in the example to demonstrate why existing ReceiveCommits can\u0027t catch all problems (and why it is not possible to fix ReceiveCommits to catch them).\n\n\u003e And, of course, it would be an implicit merge only if stable contains a commit which is not yet in master\n\nRoughly speaking, in the case you described, the fix checks if the parent commit is reachable from the target branch. So, if a commit is in both branches already - then it is reachable and not rejected.",
      "parentUuid": "c3b0144c_043085e4",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "210f9ae5_e6cec5ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 17,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-30T09:48:18Z",
      "side": 1,
      "message": "Regarding the branch names in the examples: I know that they do not matter. However, if concrete names are used which reflect our real life usage (like master and stable) then we intuitively think of stable being merged into the master most of the time and it is easier to reason that way.",
      "parentUuid": "1b700ff3_ecdd29ac",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30b50dd3_e87759ca",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 23,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-29T12:10:57Z",
      "side": 1,
      "message": "It was seven years ago when I implemented the implicit merge protection so I don\u0027t recall all details but I would argue that not rejecting change-1 is a bug.",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "161f75dc_89e8b72b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 23,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-29T12:28:20Z",
      "side": 1,
      "message": "\u003e  I would argue that not rejecting change-1 is a bug.\n\nNothing to argue about ðŸ˜Š This is not a bug, and the next sentence explicitly says it: \"This is correct behaviour, because change 2 is an explicit merge. \"\n\nThe problem appears only if someone submits \"change 1\" without \"change 2\".",
      "parentUuid": "30b50dd3_e87759ca",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54a9d309_518012b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 23,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-30T09:41:14Z",
      "side": 1,
      "message": "But the change-1 for itself is an implicit merge and that should have been detected by the receive commits.",
      "parentUuid": "161f75dc_89e8b72b",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25c356db_34997311",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-29T12:10:57Z",
      "side": 1,
      "message": "AFAIR, the most common scenario which caused an undetected implicit merge was to create a change on master and then move it to stable. In that case there is no check for implicit merge (as it was only done on the upload in the ReceiveCommits class).",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad906fd8_6810a65c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 35
      },
      "lineNbr": 29,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-29T12:28:20Z",
      "side": 1,
      "message": "\u003e In that case there is no check for implicit merge (as it was only done on the upload in the ReceiveCommits class).\n\nBefore this fix gerrit didn\u0027t reject moved changes (in this scenario). With this fix, gerrit rejects submission of moved changes if it leads to implicit merge.\n\nSo, for me it looks like the fix works as expected.",
      "parentUuid": "25c356db_34997311",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c989cde_821875ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-28T12:52:33Z",
      "side": 1,
      "message": "The option to reject implicit merges on uploading for review was implemented in https://gerrit-review.googlesource.com/c/gerrit/+/72574 seven years ago. That change added code for implicit merge detection in the ReceiveCommits class.\n\nThis change adds code for implicit merge detection in the MergeOp class.\n\nWouldn\u0027t it make sense to factor out the code for implicit merge detection and (re)use it from both places?",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99a7b0d8_5850565a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-29T12:35:59Z",
      "side": 1,
      "message": "\u003e Wouldn\u0027t it make sense to factor out the code for implicit merge detection and (re)use it from both places?\n\nWe can\u0027t detect all implicit merges on ReceiveCommits and reusing all the code can (potentially) make ReceiveCommits operation slower.\n\nDefinitely, we should try to refactor what we can, but I would like to do it later.\nFirst we want to enable new checks gradually (with experiments) to ensure that it doesn\u0027t break something else. After we will have enough confidence in the new code, we can do a refactoring.",
      "parentUuid": "2c989cde_821875ad",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7eb3b96_3380d384",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2023-11-30T09:41:14Z",
      "side": 1,
      "message": "I didn\u0027t mean to detect all implicit merges from ReceiveCommits, but only to factor out all implicit merge detection code into own class.",
      "parentUuid": "99a7b0d8_5850565a",
      "revId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Forward-Compatibility",
        "description": {
          "value": "Changes to NoteDb, data serialization in ChangeField, or the entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\"","file:\"^java/com/google/gerrit/server/index/.*Field\\\\.java\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Frontend-Verified",
        "description": {
          "value": "Frontend compilation, tests, and linters pass"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "branch:refs/heads/master AND file:\"^polygerrit-ui/.*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Frontend-Verified\u003dMAX AND -label:Frontend-Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"branch:refs/heads/master AND file:\"^polygerrit-ui/.*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["branch:refs/heads/master"],"failingAtoms":["file:\"^polygerrit-ui/.*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Frontend-Verified=MAX AND -label:Frontend-Verified=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^~(polygerrit-ui/.*)$\" OR -branch:refs/heads/master)"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["file:\"^~(polygerrit-ui/.*)$\"","branch:refs/heads/master"],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cf7d8fd66e41e857d764003c3d49dc65d76ec4f5",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}