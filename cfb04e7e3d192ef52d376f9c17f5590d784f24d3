{
  "comments": [
    {
      "key": {
        "uuid": "AAABEn//5wA\u003d",
        "filename": "gerrit-gwtui/src/main/java/com/google/gerrit/client/admin/ProjectInfoScreen.java",
        "patchSetId": 5
      },
      "lineNbr": 95,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2011-08-24T08:18:50Z",
      "side": 1,
      "message": "style-nit: this line seems to be too long",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEn//5v8\u003d",
        "filename": "gerrit-gwtui/src/main/java/com/google/gerrit/client/changes/PatchSetComplexDisclosurePanel.java",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2011-08-24T08:18:50Z",
      "side": 1,
      "message": "[optional] this method is only used in one place, maybe it should be inlined",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEn//5vk\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/changedetail/ChangeDetailFactory.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2011-08-24T08:18:50Z",
      "side": 1,
      "message": "why is control.getRefControl().canWrite() not enough?",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///cg\u003d",
        "filename": "gerrit-httpd/src/main/java/com/google/gerrit/httpd/rpc/changedetail/ChangeDetailFactory.java",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1004024
      },
      "writtenOn": "2011-08-29T16:32:40Z",
      "side": 1,
      "message": "Hi Edwin!\nThat is because \"canWrite()\" verifies only if the project is in ACTIVE state and for edition  the project needs to be in ACTIVE state and the user needs to be the project owner or the administrator.\n\nDo you think it could be implemented in another way?",
      "parentUuid": "AAABEn//5vk\u003d",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABEn//5vw\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/RefControl.java",
        "patchSetId": 5
      },
      "lineNbr": 357,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2011-08-24T08:18:50Z",
      "side": 1,
      "message": "I think it would be better if this method would check for the project state. I think it\u0027s confusing if for example canPerform(Permission.PUSH) returns true but the user still can\u0027t perform a push because the project is in READ_ONLY state. Having this check for the project state in this method would probably make some of the changes above unneeded.",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAABE3///uw\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/RefControl.java",
        "patchSetId": 5
      },
      "lineNbr": 357,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2011-08-26T19:04:59Z",
      "side": 1,
      "message": "I am not sure I agree with this suggestion.  It seems to me that generally in this class there are high level API functions which are asked by external entities, and there are low level internal utility functions used to access/interpret data to help answer some of the questions asked by the API.  This method seems like the latter case, so I am not convinced that it should attempt to answer questions from a higher level API perspective, which sounds like what you are suggesting.\n\nAsking canPerform(Permission.PUSH) internally to this class is not asking whether the user can push, that is after all what canUpdate() is for (?).  I think that this function it is asking, from a PermissionRule standpoint, can the user push?  After all, canUpdate() does some other checks also, should they be pushed into here too?  That is a slippery slope, this would become a large catch all function instead of a simple focused one.  One of the reasons I asked to have simpler lower level canWrite() like functions was so that the high level API functions could combine these various low level functions together in obvious ways.  It the low level functions are no longer simple and focused, then it is harder to make this obvious.\n\nPerhaps I don\u0027t really understand your point or intent?  I admit, I also don\u0027t know why this isn\u0027t private, so my point about the API thing might be weak if this is also somehow part of the API.  Perhaps the external users of canPerform() expect what you are suggesting?",
      "parentUuid": "AAABEn//5vw\u003d",
      "revId": "cfb04e7e3d192ef52d376f9c17f5590d784f24d3",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}