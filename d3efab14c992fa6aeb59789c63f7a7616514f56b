{
  "comments": [
    {
      "key": {
        "uuid": "7a920fd0_df13fdb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-10-30T14:03:57Z",
      "side": 1,
      "message": "Awesome! just a few questions:\n1. will this be merged to master ? if not, seems there will be a diverge between this branch and the master\n2. we are using `gr-formatted-text` in quite a few places, potentially not limited to comments and message texts, but adding a plugin endpoint to replace it will affect all of them, we may need to think twice on that :) if you only target on messages and comments, maybe add endpoints there instead ? its like you can control how you format message texts and comments, a bit more specific ?",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f123a77e_0ed8588a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-10-30T14:29:16Z",
      "side": 1,
      "message": "Thanks for looking at this :-)\n\n1. Sure, if we want to add this change, we should merge it up to master, let alone to allow plugins using this endpoint to work in all future versions.\n2. That is a valid point. I only checked for stable-2.16:\n\n  \u003e git grep \"\u003cgr-formatted-text\"\n  polygerrit-ui/app/elements/change/gr-comment-list/gr-comment-list.html:          \u003cgr-formatted-text\npolygerrit-ui/app/elements/change/gr-message/gr-message.html:            \u003cgr-formatted-text\npolygerrit-ui/app/elements/change/gr-reply-dialog/gr-reply-dialog.html:        \u003cgr-formatted-text\npolygerrit-ui/app/elements/diff/gr-diff-comment/gr-diff-comment.html:        \u003cgr-formatted-text class\u003d\"message\"\npolygerrit-ui/app/elements/shared/gr-formatted-text/gr-formatted-text_test.html:    \u003cgr-formatted-text\u003e\u003c/gr-formatted-text\u003e\n\nAll these occurrences are either messages or comments, thus I assumed it would be OK to just use it, since it would be the smallest effort/change. Also since comments and messages are managed independently in all these places and potentially more in the future, it would be nice to not have to maintain this endpoint at all these places.\nLet me check on master as well, whether this element is used there for other things as well.\n\nHowever, as I mentioned in my earlier message my biggest concern with this change is actually that changes made to the formatting by Gerrit core and the plugins are not at all synchronized and can easily interfere with each other, especially if more than one plugin is involved. It would be nice to have this pluggable in a different way. Ideally the method that does the formatting in Gerrit core would just call the methods provided by plugins one after the other after it itself finished formatting the text. I have however no idea how to do something like that. Do you have any ideas?",
      "parentUuid": "7a920fd0_df13fdb9",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a10b92b6_742fa94f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-10-30T15:11:59Z",
      "side": 1,
      "message": "I checked on the master-branch as well. `gr-formatted-text` is used in the same locations as in stable-2.16. So just for messages and comments. The name of the element is thus probably at least for now suggesting a bigger scope than necessary.",
      "parentUuid": "f123a77e_0ed8588a",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00459d47_bfc45ad9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-10-31T10:56:57Z",
      "side": 1,
      "message": "Yup, the name of this component is pretty generic. I won\u0027t limit it to only for messages and comments.\n\nRegarding to the order of Gerrit core and plugin loading issue, we are actually working on something to see if we can support config certain plugins to load before others, some even before main Gerrit (preloaders). But that will be an ongoing work without a defined date to support yet.\n\nRegarding multiple plugins issues, can you elaborate it a bit more ? is it for multiple plugins that may register into the same endpoint ?",
      "parentUuid": "f123a77e_0ed8588a",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448f5c66_f3e69d0a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-11-06T14:16:54Z",
      "side": 1,
      "message": "\u003e Yup, the name of this component is pretty generic. I won\u0027t limit it to only for messages and comments.\n\nOk, I will try to make the endpoint more specific and push a new patchset asap.\n\n\u003e Regarding to the order of Gerrit core and plugin loading issue, we are actually working on something to see if we can support config certain plugins to load before others, some even before main Gerrit (preloaders). But that will be an ongoing work without a defined date to support yet.\n\nSounds great!\n\n\u003e Regarding multiple plugins issues, can you elaborate it a bit more ? is it for multiple plugins that may register into the same endpoint ?\n\nI meant specifically this endpoint. If you look at `gr-formatted-text.js` the component will check, whether the content of `div#container`-content changes and will then format the contents. I noticed that this did not always happen after the hook to this endpoint is attached, but sometimes did. I solved this issue from the plugin site by adding a mutation observer that also checks for changes in the div\u0027s content and does the formatting afterwards. This causes a some unnecessary checks on the content, but works, although this might get out of hand with multiple plugins doing the same thing. Since it would also not set, which plugin hooks first, the output would be unpredictable if two plugins check for the same pattern to decide on formatting; Or if a plugin tries to overwrite core formatting. Having thought a little bit more about that and trying to come up with sensible examples however, I think this might anyway out of scope and could just be not supported.",
      "parentUuid": "00459d47_bfc45ad9",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaa87ecb_d840aaf4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-11-07T08:38:43Z",
      "side": 1,
      "message": "On the other hand, what contradicts to use this endpoint to not only let plugins format other texts than comments and messages, i.e. leaving the endpoint as is and just changing the commit message accordingly?",
      "parentUuid": "448f5c66_f3e69d0a",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4ba1ddf_76a4bdae",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-11-07T11:57:21Z",
      "side": 1,
      "message": "I think the main issue is this component is quite generic. And once we added the endpoint, we will need to maintain it and mind ourselves once we plan to use it anywhere else.\n\nAnd also if I understand you correctly, I think what you want is to be able to replace this `gr-formatted-text` with some plugin, by adding this endpoint here, it will work but a bit weird... and the gr-formatted-text.js is relying on the #container, but once you replaced it with something else, it won\u0027t work).\n\nI think its a bit better to have one or more endpoints where you actually want to replace the `gr-formatted-text`. And you can just provide an implementation for formatting with the plugin.\n\n\n```\n\u003cgr-endpoint-decorator name\u003d\"formatted-text\"\u003e\n  \u003c!-- fallback to gr-formatted-text if not provided --\u003e\n  \u003cgr-formatted-text\u003e\u003c/gr-formatted-text\u003e\n\u003c/gr-endpoint-decorator\u003e\n```",
      "parentUuid": "eaa87ecb_d840aaf4",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cef1e6e8_cc4df762",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1065256
      },
      "writtenOn": "2019-11-07T12:51:23Z",
      "side": 1,
      "message": "Ok, I uploaded a patch set doing that.\nJust to clarify, I did not plan to replace the \u0027#container\u0027, but to use it in the same way as gr-formatted-text. Thus, the formatting done in Gerrit core would still happen together with the formatting provided by plugins. The endpoint would be meant to be used for hooks and not to replace the gr-formatted-text.\nFor an example how I intend to use it, check this change: https://gerrit-review.googlesource.com/c/plugins/imagare/+/242733",
      "parentUuid": "e4ba1ddf_76a4bdae",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58cd7ace_76b9f77c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1086906
      },
      "writtenOn": "2019-11-07T13:33:21Z",
      "side": 1,
      "message": "Hi Thomas! Thanks for link me with the example, very useful. \n\nI think your use case is trying to enhance the formatted-text instead of replacing it, and that maybe pretty common for a lot people. We may can adapt how we support annotation layers from plugin in Gerrit for this to support load some enhancements for gr-formatted-text. And since its enhancements to the gr-formatted-text, we don\u0027t necessarily limited ourselves to comments and messages only.\n\nWhat you think ? \n\n\n// Register callback to event\nhttps://gerrit.googlesource.com/gerrit/+/master/polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-public-js-api.js#137\n\n// EventType\nhttps://gerrit.googlesource.com/gerrit/+/master/polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-js-api-interface.js#20\n\n// getDiffLayers\nhttps://gerrit.googlesource.com/gerrit/+/master/polygerrit-ui/app/elements/shared/gr-js-api-interface/gr-js-api-interface.js#228\n\nso its like we have a new EventType for formatted text, and then in gr-formatted-text, we retrieve all registered enhancements and apply to it ?\n\n```\n// from plugin:\nplugin.on(EventType.FORMATTED_TEXT_ADD_ON, (node) \u003d\u003e {\n  // how you want to handle the node generated by gr-formatted-text\n});\n\n\n// gr-formatted-text\n    // may need to call this again after plugins all loaded\n    _contentOrConfigChanged(content) {\n      const container \u003d Polymer.dom(this.$.container);\n      // Remove existing content.\n      while (container.firstChild) {\n        container.removeChild(container.firstChild);\n      }\n\n      // Get all plugin hooks on formatted-text\n      // This method needs to be provided in jsApi as well to retrieve all registered callbacks\n      const pluginFormatCallbacks \u003d this.$.jsAPI.getFormattedTextCallbacks();\n        \n      // Add new content.\n      for (const node of this._computeNodes(this._computeBlocks(content))) {\n        // Allow plugin to decorate on it again\n        for (const cb of pluginFormatCallbacks) {\n          node \u003d cb(node);\n        }\n        container.appendChild(node);\n      }\n    },\n```\n\nthoughts ?",
      "parentUuid": "cef1e6e8_cc4df762",
      "revId": "d3efab14c992fa6aeb59789c63f7a7616514f56b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}