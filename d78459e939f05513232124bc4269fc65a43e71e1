{
  "comments": [
    {
      "key": {
        "uuid": "a1691cb9_b18e984c",
        "filename": "java/com/google/gerrit/server/permissions/RefPermission.java",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-24T16:22:30Z",
      "side": 1,
      "message": "Within this class I would just access the nullable private field rather than handling the Optional. Then this can just be:\n\n return Stream.of(RefPermission.values()).map(p -\u003e p.name).filter(name::equals).findFirst();\n\n(Or an iterative equivalent if you think it\u0027s significantly clearer.)\n\nAlthough actually, even if you don\u0027t change the implementation, returning Optional from this method is probably better, given that this class already has other methods returning Optional.",
      "revId": "d78459e939f05513232124bc4269fc65a43e71e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fd77a9d_a77fca49",
        "filename": "java/com/google/gerrit/server/permissions/RefPermission.java",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2018-01-24T16:47:30Z",
      "side": 1,
      "message": "Done.\n\n(I don\u0027t really understand why null pointers have to be wrapped in Optional, but, .. shrug)",
      "parentUuid": "a1691cb9_b18e984c",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d78459e939f05513232124bc4269fc65a43e71e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4d082fb_e67db1bd",
        "filename": "java/com/google/gerrit/server/permissions/RefPermission.java",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-01-25T15:33:52Z",
      "side": 1,
      "message": "\u003e (I don\u0027t really understand why null pointers have to be wrapped in Optional, but, .. shrug)\n\nTwo brief answers:\n\n* It conveys in the type itself that the value may be present or empty; readers and authors of downstream code don\u0027t have to inspect the annotations/javadoc to learn this fact.\n* Optional has emptiness-aware convenience methods that may make things nicer for downstream callers. It doesn\u0027t *always* make things nicer, but the more general-purpose a library you\u0027re building, the greater likelihood that it will make things nicer for at least some of your callers.\n\nAnyway, I\u0027m not necessarily arguing strongly for or against using Optional in this class\u0027s methods; this decision can be made on a case-by-case basis if you like.\n\nBut I am arguing for consistency within a single class.",
      "parentUuid": "5fd77a9d_a77fca49",
      "revId": "d78459e939f05513232124bc4269fc65a43e71e1",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}