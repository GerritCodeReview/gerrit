{
  "comments": [
    {
      "key": {
        "uuid": "b296c697_a01bbe89",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2017-11-16T17:37:36Z",
      "side": 1,
      "message": "Did you use utf8mb4?",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 64
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3078bc07_a8335e21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-11-16T17:51:46Z",
      "side": 1,
      "message": "I believe we use utf8. Will double check later.",
      "parentUuid": "b296c697_a01bbe89",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 64
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c516b4d_1b23b95f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2017-11-16T20:44:21Z",
      "side": 1,
      "message": "This was a problem, Gerrit was failing to store review bit on file names that contains more than 256 characters.\n\nOn linux, files names can contains up to 4096 characters so gerrit must support that.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f33d94_a4ce6895",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2017-11-16T20:47:56Z",
      "side": 1,
      "message": "We need to find a solution that works for all database supported by Gerrit but I do not like the idea of simply reverting this to 256 and bringing back this limitation.",
      "parentUuid": "0c516b4d_1b23b95f",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bd365bc_d5158c6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-11-16T23:06:46Z",
      "side": 1,
      "message": "\u003e We need to find a solution that works for all database supported by Gerrit but I do not like the idea of simply reverting this to 256 and bringing back this limitation.\n\nMy main concern is to make it working on mysql, not to reduce the size to 256 :-)\n\nThinking about a possible solution I have the following idea: we can add another column\nfile_name_sha1 which is a hash of the file_name and use file_name_sha1 as a primary key\ncomponent instead of the file_name. The file_name column is still stored but is not part\nof the primary key. I think this can work.",
      "parentUuid": "27f33d94_a4ce6895",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbaa80a1_c351d4c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2017-11-17T01:53:26Z",
      "side": 1,
      "message": "As you planning to replace the file_name column by the file_name_sha1 and hash the file name before doing a query?\n\nI am asking because if you keep doing the query using the file_name then queries will be slow because they won\u0027t be able to leverage the implicit index created on primary key.\n\nThen you will need to create an index on (change_id, patch_set_id, account_id, file_name_sha1) to keep decent queries performance if this limitation of 767 bytes only apply to primary key and not to indices.",
      "parentUuid": "1bd365bc_d5158c6a",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5f3bd0_e9a18c84",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2017-11-17T01:55:18Z",
      "side": 1,
      "message": "\u003e As you planning to replace the file_name column by the file_name_sha1 and hash the file name before doing a query?\nAre you planning...",
      "parentUuid": "cbaa80a1_c351d4c5",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce83982_6752310b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2017-11-17T02:28:07Z",
      "side": 1,
      "message": "I should not comment late in the evening... here is my comment without the mistakes:\n\nAre you planning to hash the file name and do the queries using the file_name_sha1 column?\n\nI am asking because if you keep doing the query using the file_name then queries will be slow because they won\u0027t be able to leverage the implicit index created on primary key.\n\nThen you will need to create an index on (change_id, patch_set_id, account_id, file_name) to keep decent queries performance if this limitation of 767 bytes only apply to primary key and not to indices.",
      "parentUuid": "df5f3bd0_e9a18c84",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "654d1ce9_de25254e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-11-17T08:48:29Z",
      "side": 1,
      "message": "\u003e I should not comment late in the evening... here is my comment without the mistakes:\n\u003e \n\u003e Are you planning to hash the file name and do the queries using the file_name_sha1 column?\n\nYes. SHA1 is computed before executing a query.\n\n\u003e \n\u003e I am asking because if you keep doing the query using the file_name then queries will be slow because they won\u0027t be able to leverage the implicit index created on primary key.\n\u003e \n\u003e Then you will need to create an index on (change_id, patch_set_id, account_id, file_name) to keep decent queries performance if this limitation of 767 bytes only apply to primary key and not to indices.\n\nAs I see we only have queries on the whole file path. Therefore, file_name_sha1 can be used\ninstead. The additional index may be necessary *iff* we introduce querying by path prefix.",
      "parentUuid": "7ce83982_6752310b",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 26
      },
      "revId": "d7bdc1063dd73b6bc0b5b82274c3a30b2f1d9541",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}