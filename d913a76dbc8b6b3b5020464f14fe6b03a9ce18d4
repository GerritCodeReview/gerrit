{
  "comments": [
    {
      "key": {
        "uuid": "88bba4f1_b8eb59c6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-20T01:45:07Z",
      "side": 1,
      "message": "There is no test case for this.",
      "range": {
        "startLine": 11,
        "startChar": 12,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "d913a76dbc8b6b3b5020464f14fe6b03a9ce18d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d52c29_1681fced",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2016-04-20T10:56:37Z",
      "side": 1,
      "message": "this sound messy for me. Actually this \"messiness\" was the reason why I decided to go with single filed in ReviewInput and then propagate its value. After all we want to have the same tag on all entities that are included in the \"code review\" namely: review comment, labels and comments.\n\nCan\u0027t we edit draft comment and set tag during PostReview?",
      "range": {
        "startLine": 10,
        "startChar": 37,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "d913a76dbc8b6b3b5020464f14fe6b03a9ce18d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8e30849_a138fe21",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-04-20T15:23:17Z",
      "side": 1,
      "message": "The cause of the messiness is the inheritance structure of com.google.gerrit.extensions.client.Comment.\n\nThat\u0027s inherited by DraftInput, CommentInput, and CommentInfo. So if you put a \"tag\" field in Comment, you get one in CommentInput whether you like it or not. This was my attempt to deal with that.\n\nI guess I didn\u0027t really need to do that, though. I could put the tag field directly in DraftInput like you did in CommentInfo. Then you have the same field repeated in two different subclasses.\n\nI\u0027ll do that.",
      "parentUuid": "48d52c29_1681fced",
      "range": {
        "startLine": 10,
        "startChar": 37,
        "endLine": 12,
        "endChar": 28
      },
      "revId": "d913a76dbc8b6b3b5020464f14fe6b03a9ce18d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28d0f83a_15dd7426",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-04-20T06:06:41Z",
      "side": 1,
      "message": "This change (havn\u0027t look at the code) is the first step in the right direction to fix the cardinality mismatch between input and output that the original change was suffering from, see my comment [1] and make tagging patch line comments and change messages usable. The next step would be to extend label voting machinery to address the cardinality mismatch here as well, for example:\n\n  --verify+1@tag-foo --code-review-1@tag-bar\n\nor similar. The enforcement during the post review to normalize the comments tags and change message tag (--tag option to post-review is nothing more than change message tag, even though it\u0027s currently incorrectly stored in patch set approvals as well) in this change is wrong. We must offer all these 4 cases:\n\n* 1. --tag is provided on change message (post-review) but not on comments\n* 2. different --tags are provided on the comments, but no tag is provided on the change-message (post-review)\n* 3. different --tags are provided on the comments and different tag is provided on the change-message (post-review)\n* 4. neither tags on comment nor on change message\n\nThe real life use case can be seen on gwt-review with their go script for patch line comments on PMD check issued by their CI-firehose: [2]. In this use case, they would tag comments as pmd-checks and would tag the vote as CI or wouldn\u0027t tag change-message in post-review at all.\n\n* [1] https://gerrit-review.googlesource.com/#/c/75803/17//COMMIT_MSG@21\n* [2] https://gwt-review.googlesource.com/#/c/7857/1/dev/core/src/com/google/gwt/dev/shell/jetty/JettyLauncher.java@39",
      "range": {
        "startLine": 12,
        "startChar": 29,
        "endLine": 13,
        "endChar": 27
      },
      "revId": "d913a76dbc8b6b3b5020464f14fe6b03a9ce18d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88bba4f1_d8e60d00",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/CommentsIT.java",
        "patchSetId": 1
      },
      "lineNbr": 500,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-20T01:45:07Z",
      "side": 1,
      "message": "Add a test that passes in different tags in CommentInput and ReviewInput, and checks that it causes BadRequestException with the message \"tag for comment does not match tag for review\".",
      "revId": "d913a76dbc8b6b3b5020464f14fe6b03a9ce18d4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}