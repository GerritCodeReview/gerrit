{
  "comments": [
    {
      "key": {
        "uuid": "43d37948_35d19052",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "To me, these are two independent changes. It\u0027s always hard to review 2K LoC commits.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 49
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c2ad70_7a45b9ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-17T09:09:17Z",
      "side": 1,
      "message": "Separating it would mean adding the API in a separate change without tests.\n\nI think in this case it\u0027s better to do both in the same change.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 49
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_d58a5c42",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T09:35:14Z",
      "side": 1,
      "message": "In this specific case, all change edit tests were already there and use REST API, that is also used from the new API. But I\u0027m not insist on the split here, just mentioned, that it\u0027s encouraged to split the code in smaller changes.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 49
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_95c18485",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/GetRelatedIT.java",
        "patchSetId": 2
      },
      "lineNbr": 588,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "This is the first change that I\u0027m aware of that adds IJ specific SuppressWarnings annotations. Do we have a consensus on that? Mention that in some IJ specific documentation?",
      "range": {
        "startLine": 588,
        "startChar": 22,
        "endLine": 588,
        "endChar": 51
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c9819c_33f88852",
        "filename": "gerrit-acceptance-tests/src/test/java/com/google/gerrit/acceptance/server/change/GetRelatedIT.java",
        "patchSetId": 2
      },
      "lineNbr": 588,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-17T09:09:17Z",
      "side": 1,
      "message": "I didn\u0027t realise that this is IntelliJ specific.\n\nWould it be better to just make a call using the default boolean assertion from the Truth library? i.e.:\n\n assertThat(edit.isPresent()).isTrue();",
      "range": {
        "startLine": 588,
        "startChar": 22,
        "endLine": 588,
        "endChar": 51
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_15ce94b0",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/api/changes/ChangeEditApi.java",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "This is the public API, if you mention that they are similar, i wonder if you should also say what are the differences: Not dtored in the ReviewDb and stored on separate ref. We could even enter in the details here, like: Edits are stored on refs refs/users/UU/UUUU/edit-CCCC/P where UU/UUUU is sharded representation of user account, CCCC is change number and P is the patch set number it is based on.",
      "range": {
        "startLine": 26,
        "startChar": 43,
        "endLine": 28,
        "endChar": 48
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_b593609e",
        "filename": "gerrit-extension-api/src/main/java/com/google/gerrit/extensions/api/changes/ChangeEditApi.java",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "Without the \"please\"?",
      "range": {
        "startLine": 70,
        "startChar": 55,
        "endLine": 70,
        "endChar": 61
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_760dd05d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 410,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-16T15:43:51Z",
      "side": 1,
      "message": "maybe add @Nullable not sure if its common in this place",
      "range": {
        "startLine": 410,
        "startChar": 3,
        "endLine": 410,
        "endChar": 11
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_96fe2cf1",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 410,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-16T17:06:47Z",
      "side": 1,
      "message": "Up to now, none of the Java API classes uses @Nullable for the methods. There are only three result objects which use the annotation internally.",
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_36d19852",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 410,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-17T07:28:58Z",
      "side": 1,
      "message": "Yeah that\u0027s what I thought!",
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_55c40c90",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeEditApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 147,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "Nit: the prefered way to format ternary operator is either one liner, or if it not fit one line, then the format is a three liner:\n\n  return isFoo()\n      ? \"bar\"\n      : \"baz\";",
      "range": {
        "startLine": 146,
        "startChar": 13,
        "endLine": 147,
        "endChar": 46
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_d69ee4a7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeEditApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T08:02:49Z",
      "side": 1,
      "message": "Why the \"We try\" in this the comment? Wether you mimic this behaviour in the API or you don\u0027t.",
      "range": {
        "startLine": 231,
        "startChar": 28,
        "endLine": 231,
        "endChar": 58
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3c2ad70_5a42f5a6",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeEditApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-01-17T09:09:17Z",
      "side": 1,
      "message": "Do we know why the REST API behaves like that?  Maybe it\u0027s better to fix it such that GET does not create the resource?",
      "range": {
        "startLine": 231,
        "startChar": 28,
        "endLine": 231,
        "endChar": 58
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_b67fe84e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/api/changes/ChangeEditApiImpl.java",
        "patchSetId": 2
      },
      "lineNbr": 231,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-17T09:35:14Z",
      "side": 1,
      "message": "It must be implemented that way support change edit modifications without exiting change edit (quasi create it in place). That way it works to allow to start the change edit modification without existing change edit:\n\n* Modify the commit message\n* Add path\n* Modify path\n* Delete path\n* Restore path\n\nIf we remove that \"magic\" we would need explicit way to start change edit. e.g. by exposing new button on the UI: \"Create empty change edit\". But that would be another client-server round trip that we could have avoided with smarter REST API that creates the edit when not exist yet.",
      "range": {
        "startLine": 231,
        "startChar": 28,
        "endLine": 231,
        "endChar": 58
      },
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_b62248d3",
        "filename": "gerrit-test-util/src/main/java/com/google/gerrit/truth/OptionalSubject.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-16T15:43:51Z",
      "side": 1,
      "message": "Why not just use GuavaOptionalSubject?",
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d37948_f518b8a6",
        "filename": "gerrit-test-util/src/main/java/com/google/gerrit/truth/OptionalSubject.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2017-01-16T17:06:47Z",
      "side": 1,
      "message": "GuavaOptionalSubject is for com.google.common.base.Optional. This OptionalSubject is for java.util.Optional.\n\nBy the way, there is an extension for Truth which features such an OptionalSubject. As it doesn\u0027t have a value() method and is a final class, I decided to introduce my own implementation.",
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63d6bd38_f699e0c1",
        "filename": "gerrit-test-util/src/main/java/com/google/gerrit/truth/OptionalSubject.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2017-01-17T07:28:58Z",
      "side": 1,
      "message": "Makes sense! I was just wondering (and still am) why there is no complete implementation in a library fur such a generic Subject.",
      "revId": "dcfb947b314533b4de00db17190df1ce5ca212be",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}