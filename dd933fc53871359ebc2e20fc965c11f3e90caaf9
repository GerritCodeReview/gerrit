{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c2244ea9_308a8cbe",
        "filename": "java/com/google/gerrit/server/change/AbandonOp.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T06:51:50Z",
      "side": 1,
      "message": "Can we just adjust the fire method or add new one and pass in instant instance? Or do it later, when the rest of the code was adapted? This way we would avoid to change all caller sites. This measure would significantly reduce this change and avoid proliferation of: \"import java.sql.Timestamp\" statement that would be in itself a big plus.",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 38
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6814fa3e_e4541adb",
        "filename": "java/com/google/gerrit/server/change/AbandonOp.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-29T07:54:57Z",
      "side": 1,
      "message": "We could. My concern was that starting to modify events will require adapting all code that listens to events (e.g. plugins) which is why I thought that it\u0027s better a separate change, even if it means doing the conversion to Timestamp now at all the places where we fire events.",
      "parentUuid": "c2244ea9_308a8cbe",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 38
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a82922a_2cc4de85",
        "filename": "java/com/google/gerrit/server/change/AbandonOp.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T08:13:38Z",
      "side": 1,
      "message": "\u003e My concern was that starting to modify events will require adapting all code that listens to events [...]\n\nAdd a new fire method that accepts instant instance and do conversion there and delegate to the existing fire method? We should also add a TODO comment there, that the old method should be removed, once all caller site were adapted.",
      "parentUuid": "6814fa3e_e4541adb",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 38
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "738aed41_909e1780",
        "filename": "java/com/google/gerrit/server/change/AbandonOp.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-29T08:35:19Z",
      "side": 1,
      "message": "Not sure what\u0027s the benefit of this. This is not 1 fire method but n different fire methods. Whether we do the conversion of Instant to Timestamp at each of the n callers, or inside each of the n fire methods, doesn\u0027t make a big difference.",
      "parentUuid": "0a82922a_2cc4de85",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 38
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "933f3d55_3d77a526",
        "filename": "java/com/google/gerrit/server/change/AbandonOp.java",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T08:42:07Z",
      "side": 1,
      "message": "Ok. As you said we could do it later.",
      "parentUuid": "738aed41_909e1780",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 38
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "561a738c_2933b7a1",
        "filename": "java/com/google/gerrit/server/restapi/change/CherryPickChange.java",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T06:51:50Z",
      "side": 1,
      "message": "Can this method be adapted to accept instant instance to avoid conversion of caller sites? Or create a new method to convert rest caller sites later?",
      "range": {
        "startLine": 310,
        "startChar": 10,
        "endLine": 310,
        "endChar": 86
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a5cdd0d_732fb4d6",
        "filename": "java/com/google/gerrit/server/restapi/change/CherryPickChange.java",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-29T07:54:57Z",
      "side": 1,
      "message": "We could adapt this method too, but this method has another 16 callers that would then need to be adapted. I think I prefer to do this in a follow-up change to not make this change even bigger.",
      "parentUuid": "561a738c_2933b7a1",
      "range": {
        "startLine": 310,
        "startChar": 10,
        "endLine": 310,
        "endChar": 86
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a604507c_d6c7ec0e",
        "filename": "java/com/google/gerrit/server/restapi/change/CherryPickChange.java",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T08:13:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6a5cdd0d_732fb4d6",
      "range": {
        "startLine": 310,
        "startChar": 10,
        "endLine": 310,
        "endChar": 86
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4017a7_1b891ab0",
        "filename": "java/com/google/gerrit/server/update/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T06:51:50Z",
      "side": 1,
      "message": "Can this method be adapted to accept instant instance?",
      "range": {
        "startLine": 663,
        "startChar": 60,
        "endLine": 663,
        "endChar": 74
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb836895_b696495d",
        "filename": "java/com/google/gerrit/server/update/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-29T07:54:57Z",
      "side": 1,
      "message": "This one looks like it shouldn\u0027t be too hard to change (only 4 callers), but since this method is in IdentifiedUser I thought I will change it in the same change that adapts newCommitterIdent there (a change that migrates all dates in IdentifiedUser).",
      "parentUuid": "ec4017a7_1b891ab0",
      "range": {
        "startLine": 663,
        "startChar": 60,
        "endLine": 663,
        "endChar": 74
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06de5e1f_5f30af7c",
        "filename": "java/com/google/gerrit/server/update/BatchUpdate.java",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2021-12-29T08:13:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cb836895_b696495d",
      "range": {
        "startLine": 663,
        "startChar": 60,
        "endLine": 663,
        "endChar": 74
      },
      "revId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        ],
        "failingAtoms": [
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/.*\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "legacy": {
        "value": false
      },
      "forced": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX"
        ],
        "failingAtoms": [
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "dd933fc53871359ebc2e20fc965c11f3e90caaf9",
      "legacy": {
        "value": false
      },
      "forced": {}
    }
  ]
}