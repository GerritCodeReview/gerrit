{
  "comments": [
    {
      "key": {
        "uuid": "e092d862_9b40bc43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "You seem to be implying that users of textual \"git diff\" are not interested in whether files end with a newline or not, but \"git diff\" does in fact identify when one side or the other is missing a newline. Maybe not the most obvious behavior in the world, but it\u0027s there:\n\n $ git log --reverse -p\n commit 14e0ff4ebf2f388dd50a72e99c971b5be33aded8\n Author: Dave Borowitz \u003cdborowitz@google.com\u003e\n Date:   Fri Jul 6 14:31:42 2018 -0700\n \n     Add file with no trailing newline\n \n diff --git a/foo b/foo\n new file mode 100644\n index 0000000..a907ec3\n --- /dev/null\n +++ b/foo\n @@ -0,0 +1,2 @@\n +foo\n +bar\n \\ No newline at end of file\n \n commit 28fce9a752c88cb984122512cad632e4c732ee40\n Author: Dave Borowitz \u003cdborowitz@google.com\u003e\n Date:   Fri Jul 6 14:31:51 2018 -0700\n \n     Add trailing newline\n \n diff --git a/foo b/foo\n index a907ec3..3bd1f0e 100644\n --- a/foo\n +++ b/foo\n @@ -1,2 +1,2 @@\n  foo\n -bar\n \\ No newline at end of file\n +bar\n \n commit 138b4c6ec027c734c511db92493fc4ef61a98ae0 (HEAD -\u003e master)\n Author: Dave Borowitz \u003cdborowitz@google.com\u003e\n Date:   Fri Jul 6 14:31:59 2018 -0700\n \n     Remove trailing newline\n \n diff --git a/foo b/foo\n index 3bd1f0e..a907ec3 100644\n --- a/foo\n +++ b/foo\n @@ -1,2 +1,2 @@\n  foo\n -bar\n +bar\n \\ No newline at end of file",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 69
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22bd4630_4fd9006a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "Oh, that wasn\u0027t my intention. I added a clarifying comment to the previous paragraph and reformulated this one. I hope that\u0027s better.",
      "parentUuid": "e092d862_9b40bc43",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 41,
        "endChar": 69
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06ca0ece_5027c933",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "Can we at least document this discrepancy in the REST API docs?",
      "range": {
        "startLine": 97,
        "startChar": 31,
        "endLine": 100,
        "endChar": 32
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41997ecd_9bed6f6a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06ca0ece_5027c933",
      "range": {
        "startLine": 97,
        "startChar": 31,
        "endLine": 100,
        "endChar": 32
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48081ce3_613479b8",
        "filename": "java/com/google/gerrit/extensions/common/testing/FileMetaSubject.java",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "On its own the plural \"lines\" sounds to me like this would would return a subject over the list of lines, rather than over the number of lines. How about \"lineCount\"? Or, is there even a use case for this other than lines().isEqualTo(n)? If not, then we could skip the IntegerSubject and just have hasLineCount(n).\n\nAnother possibility: \"totalLines\", which I think pairs well with \"linesInserted/linesDeleted\"",
      "range": {
        "startLine": 35,
        "startChar": 24,
        "endLine": 35,
        "endChar": 29
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4637911_2b4af57b",
        "filename": "java/com/google/gerrit/extensions/common/testing/FileMetaSubject.java",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "Done. I think it\u0027s best to combine both of your name suggestions - \"totalLineCount\". :-)\n\nWe could have a hasTotalLineCount() method but I generally prefer the more flexible variant with the IntegerSubject. For me, that\u0027s more in the spirit of Truth, which allows flexible assertions depending on the caller\u0027s needs.",
      "parentUuid": "48081ce3_613479b8",
      "range": {
        "startLine": 35,
        "startChar": 24,
        "endLine": 35,
        "endChar": 29
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "265fd131_ef25009a",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "This phrase was a little hard to parse on first read. I would suggest \"differences in newline at end\".\n\nOptional: at that point, the method name is quite verbose. How about something like \"correctForDifferencesInNewlineAtEnd\"?",
      "range": {
        "startLine": 177,
        "startChar": 25,
        "endLine": 177,
        "endChar": 48
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bffc5dca_d940f081",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "265fd131_ef25009a",
      "range": {
        "startLine": 177,
        "startChar": 25,
        "endLine": 177,
        "endChar": 48
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46a85965_a4a6236f",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "Nit: Since edits is an ArrayList this can be done in O(1) time instead of O(n).",
      "range": {
        "startLine": 289,
        "startChar": 30,
        "endLine": 289,
        "endChar": 63
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd870b6_fbc39ab2",
        "filename": "java/com/google/gerrit/server/patch/PatchScriptBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "Done. I should have read the Javadoc of Streams#findLast after Iterables#getLast, which runs in O(1) for lists, pointed me to it. I\u0027m also not using Iterables#getLast now as it\u0027s ugly to map to Optional.",
      "parentUuid": "46a85965_a4a6236f",
      "range": {
        "startLine": 289,
        "startChar": 30,
        "endLine": 289,
        "endChar": 63
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b64b693_d2c63c9a",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RevisionDiffIT.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "I\u0027m not going to insist you fix this now, but it\u0027s a little unfortunate that these have to be phrased as slow acceptance tests. Most of the logic is in PatchScriptBuilder which is mostly self-contained, if we could figure out a way to stub out PatchListCache reasonably in tests.",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e5260d2_473deef9",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RevisionDiffIT.java",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "I agree that it would be much better if we had more unit tests instead of slow acceptance tests for the diff endpoint. However, a lot of the code is intertwined somehow.\n\nThis is also true for the fix of this change. Some of the logic is contained in GetDiff. When I started to work on this fix, I adjusted what I thought was relevant in PatchScriptBuilder. At one point, the tests I wrote failed due to some calls in GetDiff (e.g. trying to access a line which PatchScriptBuilder couldn\u0027t provide or not trying to access a line due to wrong size indications GetDiff was using). I don\u0027t think I would have gotten this right with only unit tests on PatchScriptBuilder. This fix looks small (and probably easy to others) but the path to tweak PatchScriptBuilder exactly in the right places, without breaking anything else and still generating a consistent and reasonable behavior, certainly didn\u0027t feel like it. While writing the tests, I found a lot of issues in my fix until I finally got it right. Those many tests may be slow and increase test execution even further but I feel much better and reassured knowing that the diff endpoint is behaving as I expect it to.\n\nGenerally speaking, I would love to be able to write unit tests for the diff code. In my opinion, the current structure of the code just doesn\u0027t allow us to easily and confidently do so.",
      "parentUuid": "7b64b693_d2c63c9a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d39ce156_df21b098",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RevisionDiffIT.java",
        "patchSetId": 1
      },
      "lineNbr": 415,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2018-07-06T22:17:06Z",
      "side": 1,
      "message": "Shouldn\u0027t there be an extra blank line? In other words, could this be .containsExactly(\"Line 1\", \"Line 2\", \"Line 3\", \"\")?",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 415,
        "endChar": 52
      },
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "992cecf7_3cda2048",
        "filename": "javatests/com/google/gerrit/acceptance/api/revision/RevisionDiffIT.java",
        "patchSetId": 1
      },
      "lineNbr": 415,
      "author": {
        "id": 1030912
      },
      "writtenOn": "2018-07-11T15:46:19Z",
      "side": 1,
      "message": "This could also be .containsExactly(\"Line 1\", \"Line 2\", \"Line 3\", \"\") but then it would also test that an empty last line is included at the end. My idea for this test was to concentrate on another aspect and leave the \"empty last line\" aspect to the next test (diffOfUnmodifiedFileWithNewlineAtEndHasEmptyLineAtEnd()). If I changed this to containsExactly(..), I guess that somebody would question why we even have the next test as it wouldn\u0027t bring any additional value (even though there would be some other reasons to keep it). If we removed the next test, the one afterwards would strangely stick out, and so on. That\u0027s part of my original train of thought.\n\nIf you think that using .containsExactly() here without touching the below tests is less confusing, I\u0027m willing to change this line. I just don\u0027t want to make it worse.",
      "parentUuid": "d39ce156_df21b098",
      "range": {
        "startLine": 415,
        "startChar": 0,
        "endLine": 415,
        "endChar": 52
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "de81fbb7d3d352ccd44a8f31c535523f4740f387",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}