{
  "comments": [
    {
      "key": {
        "uuid": "022d816e_a53466bc",
        "filename": "project.config",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-05-31T14:12:58Z",
      "side": 1,
      "message": "Branch only takes effect if there are no Prolog rules.\n\nBecause we have a custom submit rule in Prolog, this is ignored.",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "810d0b7f_7648e5ca",
        "filename": "project.config",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-05-31T14:42:14Z",
      "side": 1,
      "message": "Oh gosh, let me check that is well documented in Gerrit docs.",
      "parentUuid": "022d816e_a53466bc",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5058b901_1606d5a8",
        "filename": "project.config",
        "patchSetId": 3
      },
      "lineNbr": 57,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-05-31T20:31:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "022d816e_a53466bc",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 57,
        "endChar": 32
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be9f401_1da72dc7",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-05-31T14:12:58Z",
      "side": 1,
      "message": "This isn\u0027t right.\n\nThe Code-Style label is dead code. It binds CS, which is unused in the predicate.\nCS must be in the argument list to be exported back to the caller, who must use CS.\n\nThis is also overriding the branch field in project.config. The Prolog predicate runs on all branches. As written, all branches require base to succeed. That means if we export CS from base than all branches must have Code-Style+1 to be submittable. However only 2 branches have the label configured, which means the older stable branches will require Code-Style but be unable to vote on Code-Style as the UI can\u0027t get the label definitions due to the branch filtering.\n\nYes, this is a mess. I don\u0027t know who added the ref pattern branch stuff to the label, but its created something of a nightmare of misconfiguration between the Prolog rules and the label configurations. And this is a classic example of how easy it is to get it misconfigured.\n\nI\u0027ve only lately started noticing how difficult the label definitions are against the permission code as I\u0027ve been porting to PermissionBackend. RefControl and ChangeControl are deeply tied to label definitions in ways they shouldn\u0027t be that is making it harder to hide RefControl and ChangeControl behind PermissionBackend. *sigh*",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462bc38b_237d087a",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-05-31T14:42:14Z",
      "side": 1,
      "message": "I see it becomes then a bit problematic to add yet another rule for only 2 branches.",
      "parentUuid": "7be9f401_1da72dc7",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80a2e931_a197f76a",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-05-31T15:28:55Z",
      "side": 1,
      "message": "Wait, wait, why we give up the Code-Style label that fast, if we can\u0027t easily filter branches? Let us rather give up branch filtering idea. stable-2.13 is almost ready and we do not expect there a lot activity/changes. Upload of commits to early branches is prohibited anyway (stable-2.6 and friends).\n\nI suggest to fix broken predicates regarding passing CS, pointed out by Shawn and forget about branch filtering and use CR, CS, LC, and VRFY for all changes/branches from now on.\n\nCandidates for Code-Style checks are:\n\n* Google buildifier (format BUILD files)\n* Google-java-format (format Java files)\n* jslint (format JavaScript files)\n* eslint\n* polylint\n* furtehr checks can be added later",
      "parentUuid": "462bc38b_237d087a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3639823_168b069d",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-05-31T15:48:20Z",
      "side": 1,
      "message": "Or just have the CI give Code-Style +1 by default for any branch \u003c\u003d 2.13",
      "parentUuid": "80a2e931_a197f76a",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deaffd31_6a5de9f2",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-05-31T20:31:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7be9f401_1da72dc7",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abb21c1a_024a8b62",
        "filename": "rules.pl",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2017-06-01T12:04:45Z",
      "side": 1,
      "message": "\u003e This is also overriding the branch field in project.config. The\n \u003e Prolog predicate runs on all branches. As written, all branches\n \u003e require base to succeed. That means if we export CS from base than\n \u003e all branches must have Code-Style+1 to be submittable. However only\n \u003e 2 branches have the label configured, which means the older stable\n \u003e branches will require Code-Style but be unable to vote on\n \u003e Code-Style as the UI can\u0027t get the label definitions due to the\n \u003e branch filtering.\n \u003e \n \u003e Yes, this is a mess. I don\u0027t know who added the ref pattern branch\n \u003e stuff to the label, but its created something of a nightmare of\n\nIf the submit rule here would (post)process the result of gerrit:default_submit(Result)\ninstead of hardcoding the resulting set of labels, then the issue with CS label appearing\nin all branches would be automatically solved. Actually, we wouldn\u0027t have to touch the prolog code here at all.\n\nI know that we discussed (post)process of the default_submit vs. explicit list of labels in the submit_rule and that you don\u0027t like the usage of the default_submit because it makes the code less readable. But, in this \nparticular case it would work better, I think.",
      "parentUuid": "7be9f401_1da72dc7",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 24,
        "endChar": 49
      },
      "revId": "dee7570da7ef1b42e053023b2bbdde2cc5021cb0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}