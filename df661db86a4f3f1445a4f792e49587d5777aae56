{
  "comments": [
    {
      "key": {
        "uuid": "ca46ba34_7c7d07d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-24T16:57:29Z",
      "side": 1,
      "message": "Is the end result equal to the server\u0027s response after label was removed and change re-loaded?\nProbably worth explicitly stating that this replicates exact REST API behavior without reload, if so.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f9a946_8b3c5935",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-04-24T17:16:19Z",
      "side": 1,
      "message": "What are the pros and cons for reloading the labels from the server? I suppose, practically this means reloading the change.",
      "parentUuid": "ca46ba34_7c7d07d4",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c5f69ad_2152e14d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-04-25T07:09:53Z",
      "side": 1,
      "message": "Yes they are.\n\nThis is functionally the same as reloading the label values from the server -- it doesn\u0027t accomplish anything that affects our PG code, it just helps fix a bug in the chromium plugin like I mentioned.\n\nI don\u0027t see any way that this could ever result in an incorrect change object, as it removes one property from a specific label, and a user can never have multiple votes in the same label.",
      "parentUuid": "b0f9a946_8b3c5935",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3978a223_3a33b448",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-25T10:53:24Z",
      "side": 1,
      "message": "\u003e it doesn\u0027t accomplish anything that affects our PG code, it just helps fix a bug in the chromium plugin like I mentioned.\n\nI guess my concern is whether we should expect the plugin to re-request this data manually rather than having it expect coherent data in PG when the data might not explicitly be a part of the plugin API surface. (Unless I misunderstand it.)\n\nIMO, it should be safest for plugins to request server data whenever it\u0027s not clear whether some bit of PG will be updated in the expected way. I\u0027m just not sure where that boundary is.",
      "parentUuid": "9c5f69ad_2152e14d",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b50e7c5_1df967b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-04-25T11:54:35Z",
      "side": 1,
      "message": "It is exposed. The plugin interface allows plugins to subscribe to arbitrary events. In this case, the event being subscribed to is \u0027labelchange\u0027.",
      "parentUuid": "3978a223_3a33b448",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5d21826_13f3128e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-04-25T13:46:14Z",
      "side": 1,
      "message": "SGTM if it SGT Viktar.",
      "parentUuid": "6b50e7c5_1df967b4",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7783bea0_a4372aca",
        "filename": "polygerrit-ui/app/elements/change/gr-change-metadata/gr-change-metadata.js",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1030207
      },
      "writtenOn": "2017-04-20T14:33:05Z",
      "side": 1,
      "message": "Wouldn\u0027t label.hasOwnProperty(key) always be true because the for look is for \"key in label\"?",
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23663f8b_4982d253",
        "filename": "polygerrit-ui/app/elements/change/gr-change-metadata/gr-change-metadata.js",
        "patchSetId": 1
      },
      "lineNbr": 205,
      "author": {
        "id": 1029297
      },
      "writtenOn": "2017-04-20T16:27:32Z",
      "side": 1,
      "message": "This is a guard against prototype modification. Realistically probably unnecessary, but definitely doesn\u0027t hurt.\n\nhttp://stackoverflow.com/questions/12735778/for-in-and-hasownproperty",
      "parentUuid": "7783bea0_a4372aca",
      "revId": "df661db86a4f3f1445a4f792e49587d5777aae56",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}