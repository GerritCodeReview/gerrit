{
  "comments": [
    {
      "key": {
        "uuid": "1232f4e0_a94f13e4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-09-23T12:52:49Z",
      "side": 1,
      "message": "This accurately describes the situation within a single Gerrit host IMO. In our deployment we have the additional complication of strong and weak reads. A replica might be behind on the refs it knows about. This is generally OK when reading, you get data that is a couple of seconds old. When writing, we do a strong read before the update to prevent racing updates. However, this means you run into the same situation there where you might read a state before your transaction that is not current and then rely on it when performing the transaction. If the transaction encompasseses the prior state (e.g. because you want to advance a ref from state 1 to state 2) it would fail because it expected state1, but is actually in state2. However, in this case, that invariant is not part of the transaction, so you run into the same situation that you described there.",
      "range": {
        "startLine": 27,
        "startChar": 53,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "091edc36_52cb39af",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-09-23T13:15:25Z",
      "side": 1,
      "message": "Yes, this is only about upstream Gerrit with single master. Preventing this situation in multimaster is more complicated and currently not my target.",
      "parentUuid": "1232f4e0_a94f13e4",
      "range": {
        "startLine": 27,
        "startChar": 53,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd644b64_58040f17",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-24T12:40:33Z",
      "side": 1,
      "message": "\u003e This accurately describes the situation within a single Gerrit host IMO. In our deployment we have the additional complication of strong and weak reads. A replica might be behind on the refs it knows about. \n\nTrue, but single host Gerrit server is the only thing that is\npossible out of the open source Gerrit (including the core plugins).\nTherefore, it is fair to fix the issues for the single host server\nsetup, at least until we have multi-site open source Gerrit :-)\n\nThanks to Edwin for at least trying to address this issue.\nHaving two parallel pushes of the same commit to the same branch\nis a very unlikely event. The issue is rather low-prio I would say\nbut it would be nice to have it fixed. Maybe we will find some\ntime to look at it again during one of the next hackathons.",
      "parentUuid": "091edc36_52cb39af",
      "range": {
        "startLine": 27,
        "startChar": 53,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0798e33_50e0fea5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-09-24T12:57:06Z",
      "side": 1,
      "message": "\u003e \u003e This accurately describes the situation within a single Gerrit host IMO. In our deployment we have the additional complication of strong and weak reads. A replica might be behind on the refs it knows about. \n\u003e \n\u003e True, but single host Gerrit server is the only thing that is\n\u003e possible out of the open source Gerrit (including the core plugins).\n\nNot true: Gerrit v2.16 (or later) + multi-site plugin allows having a full multi-master/multi-site deployment.\nWe have the same on GerritHub.io and is open source.\n\nSo, we do have the problem that Edwin is referring to.\n\n\u003e Therefore, it is fair to fix the issues for the single host server\n\u003e setup, at least until we have multi-site open source Gerrit :-)\n\nNot fair to us at least :-)\nWe should solve the single-master and the multi-master/multi-site scenarios.\n\n\u003e Thanks to Edwin for at least trying to address this issue.\n\u003e Having two parallel pushes of the same commit to the same branch\n\u003e is a very unlikely event. The issue is rather low-prio I would say\n\u003e but it would be nice to have it fixed. Maybe we will find some\n\u003e time to look at it again during one of the next hackathons.\n\nIt *could* happen also if the reverse proxy misbehave: we had experiences with NGINX where used the policy of sending the same request to multiple masters at the same time.\nWith ReviewDb, the DBMS was making sure that this wasn\u0027t happening and one of the two were failing. With NoteDb, this can be a real issue.",
      "parentUuid": "cd644b64_58040f17",
      "range": {
        "startLine": 27,
        "startChar": 53,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87815278_94820e26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2019-09-24T14:10:10Z",
      "side": 1,
      "message": "\u003e \u003e \u003e This accurately describes the situation within a single Gerrit host IMO. In our deployment we have the additional complication of strong and weak reads. A replica might be behind on the refs it knows about. \n\u003e \u003e \n\u003e \u003e True, but single host Gerrit server is the only thing that is\n\u003e \u003e possible out of the open source Gerrit (including the core plugins).\n\u003e \n\u003e Not true: Gerrit v2.16 (or later) + multi-site plugin allows having a full multi-master/multi-site deployment.\n\nI wrote: \"Gerrit (including the core plugins)\".\nAFAIK, multi-site plugin is not a core Gerrit plugin.",
      "parentUuid": "f0798e33_50e0fea5",
      "range": {
        "startLine": 27,
        "startChar": 53,
        "endLine": 35,
        "endChar": 0
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f7749f1_d771c89e",
        "filename": "javatests/com/google/gerrit/acceptance/git/AbstractPushForReview.java",
        "patchSetId": 3
      },
      "lineNbr": 2705,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-09-23T12:52:49Z",
      "side": 1,
      "message": "Why is this done 10 times?\n\nI think this test is racy because the lock is not set a the correct point in the code. You probably want to create a situation where both changes passes a check for SHA1 or change ID in some part of ReceiveCommits, then processing continues. Is this why we try 10 times here?\n\nIn that case, it\u0027d be nicer to have a lock at the point where you assume that the threads actually race. I do realize that this is harder though :(",
      "range": {
        "startLine": 2705,
        "startChar": 6,
        "endLine": 2705,
        "endChar": 30
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7ae5312_0904504d",
        "filename": "javatests/com/google/gerrit/acceptance/git/AbstractPushForReview.java",
        "patchSetId": 3
      },
      "lineNbr": 2705,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-09-23T13:15:25Z",
      "side": 1,
      "message": "Yes, this test is intended to hit a race, but it\u0027s not 100% guaranteed that the race happens in the test. In practice it hits the race for me always on the first try, but we cannot be sure.\n\nThis way of testing races was copied from  CreateProjectIT#createSameProjectFromTwoConcurrentRequests (and it is used by several other tests), 10 is just a random number that gives us enough safety to always hit the race during a test run.\n\nI think that\u0027s good enough, but would be glad if find a way to make these kind of tests better.",
      "parentUuid": "4f7749f1_d771c89e",
      "range": {
        "startLine": 2705,
        "startChar": 6,
        "endLine": 2705,
        "endChar": 30
      },
      "revId": "df95674d181a8c7994af2abbb5eec252f06c0b84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}