{
  "comments": [
    {
      "key": {
        "uuid": "AAAGlX///z8\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-06-15T04:09:28Z",
      "side": 1,
      "message": "I would like to make a modification to this algorithm. I agree that what you have is better than the old hack we had before, but I think we can still do better.\n\nIf the current user has commented on a patch set, sure, its reviewed. But I think it should become unreviewed if the change owner comments on the patch set after the current user... and only becomes reviewed again if the user comments after the change owner. That is:\n\n  [Reviewer] Patch set 1:  -1; some comments\n  [Owner] Patch set 1: Done, done done.\n  [Owner] Patch set 2: Uploaded\n\nso now its not reviewed.\n\n  [Reviewer] Patch set 2: some more comments\n\nnow it is reviewed, we commented on the patch set.\n\n  [Owner] Patch set 2: explain why the comments don\u0027t apply\n\nnow it is unreviewed again, we need to reply to the owner.\n\n  [Reviewer] Patch set 2: +1 LGTM\n\nnow it is reviewed again, we replied.\n\nDoes this flow make sense? So take the messages for a patch set, .toList() them on the result set, sort them by timestamp (the query does not do this for you and I don\u0027t want to change the index) and walk backwards from the most recent message to see if it was written by the reviewer and is dated later than a message written by the owner of the change.",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGk3///+4\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 297,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2012-06-15T09:15:37Z",
      "side": 1,
      "message": "Yes, this way is better, and more reasonable.\n\nDone",
      "parentUuid": "AAAGlX///z8\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGln///3Y\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2012-06-14T21:19:37Z",
      "side": 1,
      "message": "How expensive is this? Have you tested this on a change with a large number of comments (50 or more)?",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGk3////k\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2012-06-15T01:57:31Z",
      "side": 1,
      "message": "It will cost server some time to query the data, especially when a lot of data exists in DB. Because the change query only returns a small amount of changes every time, maybe it can tolerate it.",
      "parentUuid": "AAAGln///3Y\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGlX///0I\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-06-15T04:09:28Z",
      "side": 1,
      "message": "Ugh, this is a tough call Nasser. Currently the messages collection in ChangeData is always null, and thus will be queried when this method is called.\n\nA future change would include more data about a change, and that may need the messages then, and using the same cached collection when both this boolean and all messages are needed to be returned would save time. But that isn\u0027t common in a dashboard type query to return both this boolean and the messages, so its maybe not worth it.\n\nThere is a byPatchSet(PatchSet.Id) method on db.messages() that could be used to narrow the query. But this doesn\u0027t use the primary key index, it uses a secondary index that would then need to go read the primary data rows. On a change with a lot of patch sets and messages, it would return a smaller subset of data, but may require more work out of the database. This is all unfortunately caused by the database key design for ChangeMessage. We didn\u0027t include the PatchSet.Id into it the way we did for other things like PatchLineComments and thus the primary key can\u0027t answer this query, even though logically it should be able to.\n\nI think Nasser is right, change this code to use db.messages().byPatchSet(). Trying to use the messages collection from ChangeData is probably only going to hurt performance.",
      "parentUuid": "AAAGk3////k\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGk3///+8\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2012-06-15T09:15:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAGlX///0I\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGlX///0A\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-06-15T04:09:28Z",
      "side": 1,
      "message": "the cm.getAuthor() !\u003d null test is not necessary. accountId.equals() will handle null testing its argument before comparing its contents.",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGk3////A\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 309,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2012-06-15T09:15:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAGlX///0A\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGlX///0E\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-06-15T04:09:28Z",
      "side": 1,
      "message": "you can drop this portion of the conditional if you use byPatchSet like we suggest above.",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAGk3////E\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/query/change/ListChanges.java",
        "patchSetId": 4
      },
      "lineNbr": 310,
      "author": {
        "id": 1010992
      },
      "writtenOn": "2012-06-15T09:15:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "AAAGlX///0E\u003d",
      "revId": "dfdfc9ed6827d4580f6f0900f971d1bff5d7e7e4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}