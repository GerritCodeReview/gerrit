{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "01906cb8_43acff5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 24
      },
      "lineNbr": 108,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-23T21:23:21Z",
      "side": 1,
      "message": "That\u0027s only one pice of the puzzle, let\u0027s not forget that any plugin can be doing some important operations and also can use external resources. Before anything is \"reloaded\", we should ensure that everything is properly stopped. Which is not an easy task on its own.",
      "range": {
        "startLine": 108,
        "startChar": 6,
        "endLine": 108,
        "endChar": 58
      },
      "revId": "e1c2e2350309cf81215f4044cad8c3d23ba72b65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cebd305f_462ed195",
        "filename": "java/com/google/gerrit/server/plugins/PluginLoader.java",
        "patchSetId": 24
      },
      "lineNbr": 480,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-26T15:50:11Z",
      "side": 1,
      "message": "This is a quick and dirty way of checking if the JAR file has `Gerrit-ApiModule` in its `MNIFEST.MF`. We should probably refactor logic here and use _some kind of a _wrapper_ around `Path` that knows what kind of plugin it is dealing with. But this would be probably a bigger refactoring in this area.\n\n```suggestion\n              private boolean isApi(Path pluginPath) {\n                if (!isJar(pluginPath)) {\n                  return false;\n                }\n\n                try (JarFile jarFile \u003d new JarFile(pluginPath.toString())) {\n                  String apiModule \u003d\n                      Strings.emptyToNull(\n                          jarFile.getManifest().getMainAttributes().getValue(\"Gerrit-ApiModule\"));\n\n                  return Optional.ofNullable(apiModule).isPresent();\n                } catch (IOException e) {\n                  logger.atWarning().withCause(e).log(\"cannot load plugin JAR file\");\n\n                  return false;\n                }\n              }\n```",
      "range": {
        "startLine": 478,
        "startChar": 14,
        "endLine": 480,
        "endChar": 15
      },
      "revId": "e1c2e2350309cf81215f4044cad8c3d23ba72b65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40dcf1f1_7223692b",
        "filename": "java/com/google/gerrit/server/plugins/ServerPlugin.java",
        "patchSetId": 24
      },
      "lineNbr": 284,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-09-23T21:23:21Z",
      "side": 1,
      "message": "nit: `.orElseGet(() -\u003e Guice.createInjector(modules));`, so that we won\u0027t create guice injectors when they are not needed.",
      "range": {
        "startLine": 284,
        "startChar": 9,
        "endLine": 284,
        "endChar": 46
      },
      "revId": "e1c2e2350309cf81215f4044cad8c3d23ba72b65",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}