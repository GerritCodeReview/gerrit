{
  "comments": [
    {
      "key": {
        "uuid": "467ec8cb_132bf49a",
        "filename": "polygerrit-ui/app/elements/change/gr-thread-list/gr-thread-list.js",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-08T23:07:42Z",
      "side": 1,
      "message": "Nit: rather than an observer that causes a side-effect, this might be cleaner as an computed that returns the threads.\n\n_sortedThreads: {\n  type: Array,\n  computed: \u0027_computeSortedThreads(threads.*)\u0027,\n},",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 27,
        "endChar": 52
      },
      "revId": "e1fc97ab0f9d5cff8c9d6f470f5d13b39e752096",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ecd7a0f_01207fe1",
        "filename": "polygerrit-ui/app/elements/change/gr-thread-list/gr-thread-list.js",
        "patchSetId": 11
      },
      "lineNbr": 41,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-08T23:07:42Z",
      "side": 1,
      "message": "Since it takes the dependency, shouldn\u0027t this be ..\n\n threads.base\n\n.. ?",
      "range": {
        "startLine": 41,
        "startChar": 28,
        "endLine": 41,
        "endChar": 40
      },
      "revId": "e1fc97ab0f9d5cff8c9d6f470f5d13b39e752096",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96f4eb4e_28f214ea",
        "filename": "polygerrit-ui/app/elements/change/gr-thread-list/gr-thread-list.js",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-08T23:07:42Z",
      "side": 1,
      "message": "Not sure about the way this writes these `unresolved`, `hasDraft` and `updated` properties. In this way, the properties that appear on the thread objects depends on whether the sort function has executed the side-effect yet.\n\nInstead of updating the object, could this map to a new object that contains the info used by sorting?\n\n_getThreadWithSortInfo(thread) {\n  const lastComment \u003d thread.comments[thread.comments.length - 1] || {};\n  return {\n    thread,\n    unresolved: !!lastComment.unresolved,\n    hasDraft: !!lastComment.__draft,\n    updated: lastComment.updated,\n  };\n},\n\nThat way, the sorting function can map to this data and then drop it back to the thread after it\u0027s sorted.\n\nthreads.map(this.updateThreadProperties)\n  .sort(threadInfo \u003d\u003e {\n    // ...\n  })\n  .map(threadInfo \u003d\u003e threadInfo.thread);",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 26
      },
      "revId": "e1fc97ab0f9d5cff8c9d6f470f5d13b39e752096",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "080bf738_708c0037",
        "filename": "polygerrit-ui/app/elements/change/gr-thread-list/gr-thread-list.js",
        "patchSetId": 11
      },
      "lineNbr": 80,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2018-03-08T23:07:42Z",
      "side": 1,
      "message": "Optional: to distinguish this from the similarly-named `removeThread`, this method might be named `_handleThreadDiscard` to match the name of the event that it handles.",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 23
      },
      "revId": "e1fc97ab0f9d5cff8c9d6f470f5d13b39e752096",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}