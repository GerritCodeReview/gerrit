{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1550701461 -0800\nnonce ANwvRnCzoFfwqGFG4AQISehJcATSkS+kjewUaOj6tzrbWNwSSedQ5Hs01a+SrDOD58xe7ZzBfK0P\n\n0000000000000000000000000000000000000000 e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2 refs/for/master%r\u003dhiesel@google.com,r\u003ddpursehouse@collab.net\n-----BEGIN PGP SIGNATURE-----\n\niQJJBAABCgAzFiEEpPm/sOxWgSqG5grhX9fFmpoSiIwFAlxt05UVHGRib3Jvd2l0\nekBnb29nbGUuY29tAAoJEF/XxZqaEoiMM0AP/2mHAF49Mv8GagQ01z5TEFc16btL\n7MAWnX0g3iMlpEq980vBUvSmmujdBjVBf9nQA+siC8q5VIeM2LjI5f9jHlQ6gZdH\nQV88KZXmUB1LnKhYy55WxJtfuNSql7s0OoSWbXJCjOZU1/XvYVilhgwu2b0l39eV\nks5GfeB9q2BbTAa9HannrMRSXD+6D2pSCcnkkHM/rk3u/rWToj5IBBEmIbhh6RjR\nTwad20eFqpo740eeKZ+5Txl2bXgr8yp5STm8v0LaF2k5npyGoYtDwoh4wRIPTa8I\niDESTEV3ChvytgF98vXlrxRaW0RTs20qyphR57lafle+/blFtEapRTAikxjSvrMi\nMTW1bWjQTniklSeuYZEtVBu49S1COI93U6gfi4wNIKUlL5IhhDACpc9BW7DSXcBG\n780EmISUIURr3SEyLEM4tXqSV9XTPUYh5i17AQSZR53QE4g4SFihvDkguNK9PuiA\n9fwxziUsMLCgTlISfnvbQQRjP6idvl1mbqmPbd8ULhXQNfzVxeDy/rAznslDFjag\nxA+8OhHZn7raMYZdK8JcngadW5W1bywwxeXCCNfzLxWRcIIw9dpdyyID18bp/eZ6\nz0im0bz2ZbIVphvtCeS+Nmdtd7B2w5KWVqYXIqd6+GVVTZt2NYH+cP28ysQtrv+t\niYF37SQmF3haUEvr\n\u003d224d\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "d1e2cf18_f7c0a1d5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T00:07:47Z",
      "side": 1,
      "message": "FYI, we have a new change coming soon that adds a bulk interface for factories instead. The idea is that knowing which changes we need to add data to up front allows us to query external sources for the full set of changes up front instead of querying for each change one at a time. This results in a significant performance improvement. I am just mentioning this in case it influences the approach you want to take here.",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 46
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26ca5d2f_64aa2eb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T00:14:17Z",
      "side": 1,
      "message": "I don\u0027t think it changes my desire to clean this up, but thanks for the heads up.",
      "parentUuid": "d1e2cf18_f7c0a1d5",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 46
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a0ca73c_5e1e29db",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T00:07:47Z",
      "side": 1,
      "message": "Could this prevent plugins from being unloaded until the query is complete (some queries can run for over an hour on our server)?",
      "range": {
        "startLine": 112,
        "startChar": 29,
        "endLine": 112,
        "endChar": 50
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34dee9b9_bea131f8",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T00:13:16Z",
      "side": 1,
      "message": "Yes, and I would argue that that\u0027s a feature, not a bug. It would be frankly bizarre from a client perspective if different changes in the same query have different output.\n\nFWIW this is not a change from the old implementation. The old setupAttributeFactories method snapshots the attributeFactories.plugins() list at creation time as well.",
      "parentUuid": "9a0ca73c_5e1e29db",
      "range": {
        "startLine": 112,
        "startChar": 29,
        "endLine": 112,
        "endChar": 50
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fce0bc6_4076499f",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T00:07:47Z",
      "side": 1,
      "message": "We generally avoid logging on anything that iterates over changes is a query because we don\u0027t want 2M entries in our logs if someone runs a status:merged query. If you are going to log, I would suggest doing on the first occurrence of an exception only.",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3545760_e35ef597",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T00:13:16Z",
      "side": 1,
      "message": "Fair enough. I am strongly against ever completely swallowing exceptions, but I understand wanting to avoid that kind of logs blowup. Will do.",
      "parentUuid": "4fce0bc6_4076499f",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3fb2e82_1cae2b7e",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T00:27:01Z",
      "side": 1,
      "message": "First exception per query is hard, because the interface is not a batch interface. I changed it log max once per minute, which applies across all changes and all queries. Is that a reasonable frequency? I can change it to whatever you think is reasonable.",
      "parentUuid": "f3545760_e35ef597",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f043fd1_8d856ab0",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T00:30:46Z",
      "side": 1,
      "message": "Add each attribute factory throwing an exception to a Set on the query processor, if the set.add() finds a dup, don\u0027t log it?",
      "parentUuid": "b3fb2e82_1cae2b7e",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6390693_526e71bd",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T15:00:19Z",
      "side": 1,
      "message": "The problem is that the Extension wrapper does not cache the extension, instead every call to e.get() calls get() on the underlying Provider. If the factory is not marked @Singleton, that gives a different instance on every iteration. That won\u0027t work unless these attribute factories are defining equals, which I doubt. (For example, the example in the docs is a non-singleton without equals.)\n\nWe might be able to change Extension to eagerly call provider.get(), but I\u0027m not sure if that would have unintended side effects.\n\nI suppose the other alternative is to warn once per plugin rather than once per ChangeAttributeFactory.\n\nThe other question is whether logging once per request per plugin is actually better than logging once per minute. If you have a broken plugin and you\u0027re getting, say, 10qps of query requests, would you rather have 10qps of log entries, or 1 per minute?",
      "parentUuid": "7f043fd1_8d856ab0",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb8a13b0_6fbab324",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T17:31:02Z",
      "side": 1,
      "message": "\u003e The problem is that the Extension wrapper does not cache the extension, instead every call to e.get() calls get() on the underlying Provider. If the factory is not marked @Singleton, that gives a different instance on every iteration. \n\nThat sounds like an undesired functional change. The original code made sure to call the same factory instance so that it could cache data throughout the lifespan of a query. If you change that, then plugin factory performance will drastically suffer.\n\nAs for logging, I think you are pointing out the very real complexities of logging during a query, and why we took the easy route and skipped it. We figured, if you have an issue in a plugin, log there. I suggest separating the concerns of this change, if you want to add a fancy logging mechanism, perhaps that deserves its own change?",
      "parentUuid": "c6390693_526e71bd",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09b9414c_4658b0e6",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2019-02-21T18:38:28Z",
      "side": 1,
      "message": "\u003e \u003e The problem is that the Extension wrapper does not cache the extension, instead every call to e.get() calls get() on the underlying Provider. If the factory is not marked @Singleton, that gives a different instance on every iteration. \n\u003e \n\u003e That sounds like an undesired functional change. The original code made sure to call the same factory instance so that it could cache data throughout the lifespan of a query.\n\nGood eye! That definitely sounds like a reason to not depend on Extension. (Actually it sounds like a reason to fix Extension to do the caching, but like I said I\u0027m not sure if that would break things.)\n\n\u003e \n\u003e As for logging, I think you are pointing out the very real complexities of logging during a query, and why we took the easy route and skipped it. We figured, if you have an issue in a plugin, log there.\n\nI\u0027m not sure it\u0027s a good assumption that plugins will always be logging. For checked exceptions--sure. But here we are talking about RuntimeExceptions, which are typically programmer error.\n\n\u003e I suggest separating the concerns of this change, if you want to add a fancy logging mechanism, perhaps that deserves its own change?\n\nDid you look at the most recent patch set? Logging once per minute is literally a one-liner with Flogger:\n\nhttps://gerrit-review.googlesource.com/c/gerrit/+/214994/2..5/java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java\n\nI would not want to go implementing such a fancy logging mechanism myself, but they\u0027ve already done it for me, so it\u0027s really easy to use.\n\nAnyway, I think the fact that we can\u0027t use Extension means this change needs to be reworked. The only things I feel strongly about are making setupAttributeFactories non-public and logging, so I will do those in separate changes.",
      "parentUuid": "fb8a13b0_6fbab324",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51e9778e_1699e783",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2019-02-21T18:54:25Z",
      "side": 1,
      "message": "I agree that it looks nice and simple. I would be fine with 1 mins and the one-liner is indeed very nice! I was concerned that someone might ask for the extra complexity of making the timespan configurable.",
      "parentUuid": "09b9414c_4658b0e6",
      "range": {
        "startLine": 156,
        "startChar": 20,
        "endLine": 156,
        "endChar": 26
      },
      "revId": "e3ac4a7084eb9e0d8b3f34e53ef8501f4c1c6de2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}