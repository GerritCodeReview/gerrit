{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "93be3230_e8bd040b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-02T14:09:49Z",
      "side": 1,
      "message": "Add \"Bug: Issue 13337\" footer",
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7816625b_99adda56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-02T14:18:22Z",
      "side": 1,
      "message": "Er, sorry: \"Feature: Issue 13337\"",
      "parentUuid": "93be3230_e8bd040b",
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "821ae05d_461809e5",
        "filename": "Documentation/user-search.txt",
        "patchSetId": 2
      },
      "lineNbr": 588,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-05T10:11:44Z",
      "side": 1,
      "message": "Do you have users that need this functionality or is it bots that call Gerrit and want to resolve more changes?",
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04e5d4b7_a35d75cb",
        "filename": "Documentation/user-search.txt",
        "patchSetId": 2
      },
      "lineNbr": 588,
      "author": {
        "id": 1096249
      },
      "writtenOn": "2020-10-05T19:14:42Z",
      "side": 1,
      "message": "Yes currently we have users that make use of this functionality in our gerrit version (forked from 2.7 version). Use cases for UX is low but primarily this functionality is used by the CI system.",
      "parentUuid": "821ae05d_461809e5",
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "342f3577_b2ad3b5b",
        "filename": "Documentation/user-search.txt",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-05T10:11:44Z",
      "side": 1,
      "message": "This is adding nested queries to change search, which I would really like to avoid. Maybe there is a solution to your problem that doesn\u0027t require nested queries. Would be good to learn about the context/background for that.\n\nNested queries make the query language more complex and add computational complexity as well. Besides, there are UX drawbacks. For example, the UI suggests predicates in the search field, but wouldn\u0027t suggest them for nested queries.",
      "range": {
        "startLine": 598,
        "startChar": 8,
        "endLine": 598,
        "endChar": 35
      },
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f7db0a9_5aa85a45",
        "filename": "Documentation/user-search.txt",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1096249
      },
      "writtenOn": "2020-10-05T19:14:42Z",
      "side": 1,
      "message": "\u003e This is adding nested queries to change search, which I would really like to avoid. Maybe there is a solution to your problem that doesn\u0027t require nested queries. Would be good to learn about the context/background for that.\n\nPrimary use case for our users is to identify the changes that can be integrated only if they don\u0027t have same Change-Id as that of changes that matches a particular criteria (query). A simple e.g. If user wants to filter the changes for integration that are only present in branch \u0027foo\u0027 but not present in branch \u0027bar\u0027 and there are changes being shared between branch foo and bar.\nDo you have an idea for another way to make it work for given use case?",
      "parentUuid": "342f3577_b2ad3b5b",
      "range": {
        "startLine": 598,
        "startChar": 8,
        "endLine": 598,
        "endChar": 35
      },
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ea5ac8a_103363ae",
        "filename": "java/com/google/gerrit/server/query/change/PeersPredicate.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2020-10-05T09:58:47Z",
      "side": 1,
      "message": "Isn\u0027t this potentially quadratic?",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 17
      },
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c48850a_3d315dbf",
        "filename": "java/com/google/gerrit/server/query/change/PeersPredicate.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1096249
      },
      "writtenOn": "2020-10-06T06:31:22Z",
      "side": 1,
      "message": "Yes it is for the use case I am trying to address. Do you see any downsides?",
      "parentUuid": "4ea5ac8a_103363ae",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 17
      },
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63d49bf8_ee04f864",
        "filename": "java/com/google/gerrit/server/query/change/PeersPredicate.java",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2020-10-06T11:00:43Z",
      "side": 1,
      "message": "It means that random users can wedge individual servers down by simply executing a query that returns a lot of results repeatedly, like\n\n status:merged peers:\"status:merged\" \n\nit\u0027s also unclear in your implementation how often the search backend is actually called to produce the list for the subquery. If it is called N times, then a single query could exhaust search backend quota, bringing the entire service down across all our tenants.\n\nI would expect it to work like:\n\n * get subquery results, put ChangeIds in a HashSet\u003cString\u003e once\n * post-filter by checking HashSet\u003c\u003e membership, which is O(1).\n\nThese are technical concerns, btw. I agree with Patrick; we don\u0027t currently do joins in the search backend, and I\u0027d rather keep it that way for service stability and predictability.",
      "parentUuid": "0c48850a_3d315dbf",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 17
      },
      "revId": "e427a209d72059000167663bf58c1eba76981cfa",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}