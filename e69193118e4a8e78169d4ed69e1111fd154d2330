{
  "comments": [
    {
      "key": {
        "uuid": "AAAJ7H///Zw\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/SubmitTypeRecord.java",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "AOSP copyright header.",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///ZE\u003d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/project/ChangeControl.java",
        "patchSetId": 5
      },
      "lineNbr": 584,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "env.once might be more useful if you only want the first solution.\n\nYou cannot call interpreted Prolog code directly from Java easily. The user supplied function is probably interpreted. So the call will fail without a level of indirection. From Java we can only invoke predicates that are builtins (implemented by hand in Java) or that were compiled by the Prolog-\u003eJava compiler and compiled as bytecode.\n\nits probably easiest to just do what you are doing here, but I think you might also be able to use the call predicate to start the interpreter. I may have had trouble with that before and just punted and used a precompiled trampoline function... aka get_submit_type.",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///Yo\u003d",
        "filename": "gerrit-server/src/main/java/gerrit/PRED_default_submit_type_1.java",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "AOSP header?",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///XA\u003d",
        "filename": "gerrit-server/src/main/java/gerrit/PRED_default_submit_type_1.java",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "project_default_submit_type/1? Its the project configuration submit type. I wonder if we shouldn\u0027t be explicitly clear about that in its name.",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///YA\u003d",
        "filename": "gerrit-server/src/main/java/gerrit/PRED_default_submit_type_1.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "Since this comes from an enum I would write:\n\n  private static final SymbolTerm[] term;\n\n  static {\n    SubmitType[] val \u003d SubmitType.values();\n    term \u003d new SymbolTerm[val.length];\n    for (int i \u003d 0; i \u003c val.length; i++) {\n      term[i] \u003d SymbolTerm.create(val[i].name);\n    }\n  }\n\nand then you can write in the exec:\n\n  a1.unify(term[submitType.ordinal()], engine.trail)",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///X8\u003d",
        "filename": "gerrit-server/src/main/prolog/gerrit_common.pl",
        "patchSetId": 5
      },
      "lineNbr": 161,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "We appear to put a blank line before the public decl so:\n\n  %%   Executes the ...\n  %%\n  :- public ...",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///Xs\u003d",
        "filename": "gerrit-server/src/main/prolog/gerrit_common.pl",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "If you use once in the Java code, you don\u0027t need the cut here. That may be a good thing because now we can define this to return all alternatives that are allowed.\n\nCallers that only one want solution can use once/1 in Prolog, or once in Java. Callers may however want all solutions. What if we want to offer the choice to sometimes permit a cherry-pick? We could write that in Prolog as:\n\n  submit_type(merge_always).\n  submit_type(cherry_pick).\n\nand some UI to wire up the choice at submit time. Easy eh? :-)",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///XU\u003d",
        "filename": "gerrit-server/src/main/prolog/gerrit_common.pl",
        "patchSetId": 5
      },
      "lineNbr": 192,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "The entire locate routine can be extracted into a utility:\n\n  locate_helper(Func, Default, user:Func) :- \u0027$compiled_predicate\u0027(user, Func, 1), !.\n  locate_helper(Func, Default, user:Func) :- clause(user:Func(_), _), !.\n  locate_helper(Func, Default, gerrit:Default).\n\n  locate_submit_rule(RuleName) :- locate_helper(submit_rule, default_submit, RuleName).\n  locate_submit_type(RuleName) :- locate_helper(submit_type, default_submit_type, RuleName).\n\nNote that : is actually a compound, \u0027:\u0027(user, Func). The compiler knows how to rewrite a:b as \u0027:\u0027(a, b) for you.",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAJ7H///Xk\u003d",
        "filename": "gerrit-server/src/main/prolog/gerrit_common.pl",
        "patchSetId": 5
      },
      "lineNbr": 201,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-10-06T00:37:13Z",
      "side": 1,
      "message": "I think this should be just submit_type, not submit_type_rule.",
      "revId": "e69193118e4a8e78169d4ed69e1111fd154d2330",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}