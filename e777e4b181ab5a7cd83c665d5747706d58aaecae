{
  "comments": [
    {
      "key": {
        "uuid": "AAAF/X///9Q\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/AccessSection.java",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "Shouldn\u0027t this also work and be shorter to write:\n\n  return new HashSet\u003cPermission\u003e(permissions)\n    .equals(new HashSet\u003cPermission\u003e(other.permissions));\n\nHashSet.equals() should perform all of this mess for you internally. I agree it might be hard to compare the two List objects as the order could be mismatched.",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAF/X///9M\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/AccessSection.java",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "Its bad form to hash mutable state into the hashCode. Use the reference name aka section name only.",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAF/X///9I\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/Permission.java",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "same as AccessSection",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAF/X///88\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/Permission.java",
        "patchSetId": 3
      },
      "lineNbr": 241,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "name should be enough here for the hash code of the permission. Within a container of Permission objects we tend to only make one object per Permission. The rules nested within don\u0027t really contribute to the hash code.\n\nalso its bad form to make mutable state part of the hashcode. the name isn\u0027t likely to change. The rules are.",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAF/X///9A\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/PermissionRule.java",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "group.hashCode() should be enough here. In general within a Permission each PermissionRule has a unique group because you can\u0027t put two different rules for the same group in the same Permission, and we are unlikely to combine PermissionRules across Permission instances because the semantic meaning of them can vary.",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAF/X///84\u003d",
        "filename": "gerrit-common/src/main/java/com/google/gerrit/common/data/RefConfigSection.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2012-05-30T02:19:56Z",
      "side": 1,
      "message": "nit: spaces here around the casting would be nice\n\n  name.equals(((RefConfigSection) obj).name);",
      "revId": "e777e4b181ab5a7cd83c665d5747706d58aaecae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}