{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c0d62357_1edf600f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-11-29T09:01:38Z",
      "side": 1,
      "message": "LGTM, but maybe Patrick should have also a look whether it\u0027s safe to skip submit records for non-existing labels.",
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ba8358a_ddae2691",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-11-29T09:42:11Z",
      "side": 1,
      "message": "@Patrick, we convert all labels of the default submit record to submit requirement results (legacy SRs). Sometimes the label type associated with some label might not exist (i.e. if project admin removed the label definition). WDYT is it better to skip returning an SR result in this case, or pretend that the label was blocking was return an SR result for it anyway?",
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b7fdb0e_b25d3229",
        "filename": "java/com/google/gerrit/server/project/SubmitRequirementsAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-11-29T09:50:23Z",
      "side": 1,
      "message": "Prolog can also \u0027invent\u0027 labels that aren\u0027t configured in project.config. For example, Prolog can emit a blocking label \"Non-Author-Code-Review\" when the Code-Review label only has approvals from the author.\n\nHow are we treating this case?",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a9e1ebc_d70f42c6",
        "filename": "java/com/google/gerrit/server/project/SubmitRequirementsAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-11-29T10:00:44Z",
      "side": 1,
      "message": "IIUC the problem is that we need to know whether the label is blocking.\nWhen the non-existing label comes from Prolog, the submit record tells us whether it is blocking. In this case however we do not know if the label is blocking, since no label config exists. So we can either ignore it (current change) or assume it is always blocking.",
      "parentUuid": "9b7fdb0e_b25d3229",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c15bd2_429ab364",
        "filename": "java/com/google/gerrit/server/project/SubmitRequirementsAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-11-29T10:01:16Z",
      "side": 1,
      "message": "That\u0027s a separate code path: this change fixes the code path of converting labels from the \"default submit rule\", which does not hit prolog.\n\nFor labels coming from Prolog, we don\u0027t check their corresponding label types https://gerrit.googlesource.com/gerrit/+/2d082a73ef919db9e21662d3c2824b4747d3a24c/java/com/google/gerrit/server/project/SubmitRequirementsAdapter.java#143",
      "parentUuid": "9b7fdb0e_b25d3229",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a038914c_dfd8ae30",
        "filename": "java/com/google/gerrit/server/project/SubmitRequirementsAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-11-29T15:21:43Z",
      "side": 1,
      "message": "Thanks, SGTM!",
      "parentUuid": "91c15bd2_429ab364",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 100,
        "endChar": 62
      },
      "revId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Review\u003dMAX,user\u003dnon_uploader"
        ],
        "failingAtoms": [
          "label:Code-Review\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Code-Style\u003dMAX"
        ],
        "failingAtoms": [
          "label:Code-Style\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          },
          "status": "FAIL",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config",
            "file:\"^lib/\"",
            "file:\"^WORKSPACE$\"",
            "file:\"^.gitmodule$\"",
            "file:\"^tools/deps.bzl$\""
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "status": "FAIL",
        "errorMessage": {},
        "passingAtoms": [],
        "failingAtoms": [
          "label:Library-Compliance\u003dMAX,user\u003dnon_uploader",
          "label:Library-Compliance\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "legacy": {
        "value": false
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {
          "expression": {
            "expressionString": "-branch:refs/meta/config"
          },
          "status": "PASS",
          "errorMessage": {},
          "passingAtoms": [],
          "failingAtoms": [
            "branch:refs/meta/config"
          ]
        }
      },
      "submittabilityExpressionResult": {
        "expression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "status": "PASS",
        "errorMessage": {},
        "passingAtoms": [
          "label:Verified\u003dMAX"
        ],
        "failingAtoms": [
          "label:Verified\u003dMIN"
        ]
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e8a63aea032d2374e757dd95e8b5b7714310fcac",
      "legacy": {
        "value": false
      }
    }
  ]
}