{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6dce8e4d_58326707",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-09-30T14:55:28Z",
      "side": 1,
      "message": "Ping, any Googlers able to review this like Marco suggests?",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6e5ee9c_104aff3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-02T16:38:58Z",
      "side": 1,
      "message": "+ the other 2 Google backend maintainers",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bca9a2f_f9eb4f5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-07T17:01:02Z",
      "side": 1,
      "message": "Sorry for the delay here, I\u0027ll do a full review tomorrow.",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4fc3134_ac28e529",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1083042
      },
      "writtenOn": "2020-10-08T09:46:08Z",
      "side": 1,
      "message": "With so many reviewers on this change, could you clarify how you envision the process so that you don\u0027t get contradictory or redundant comments? Maybe it would make sense to go top-down in the level of abstraction so that people don\u0027t spend time on details until the design is okayed?",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fa3c1ed_ba34790a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1012732
      },
      "writtenOn": "2020-10-08T13:07:43Z",
      "side": 1,
      "message": "Nasser added you while I was adding Patrick, so I suspect he didn\u0027t notice me doing so (prior to adding you and Han-Wen). Now, your comment about going top-down makes sense to me. This review ended up truly needing Google reviewers, hence me 1. requesting so and 2. eventually having to add Patrick.",
      "parentUuid": "d4fc3134_ac28e529",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f59e3eb8_5391a453",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-08T18:11:23Z",
      "side": 1,
      "message": "Thanks for all the review Patrick!",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e2265f4_28de4fc0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-08T18:12:41Z",
      "side": 1,
      "message": "Yes, I just didn\u0027t know who from Google would have time to review and Marco wanted someone from Google to review, so I cast a wide net. Feel free to remove yourself if you\u0027re letting Patrick handle the review.",
      "parentUuid": "1fa3c1ed_ba34790a",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc72f41_f6254d99",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 17
      },
      "lineNbr": 936,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "The interface should not allow for null to be a valid return value. Since it\u0027s a collection, you can just return an empty collection (e.g. ImmtuableMap.of())",
      "range": {
        "startLine": 936,
        "startChar": 1,
        "endLine": 936,
        "endChar": 16
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33557685_72708fa1",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 17
      },
      "lineNbr": 936,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-08T18:11:23Z",
      "side": 1,
      "message": "This was carried over from the single-change factory where it uses null to indicate that no attribute should be added to the output. I agree that\u0027s handled now by the Change.Id key not being present in the Map and there shouldn\u0027t be a need to to return null here. We\u0027ll double check that doesn\u0027t break any use cases and make the change.",
      "parentUuid": "1bc72f41_f6254d99",
      "range": {
        "startLine": 936,
        "startChar": 1,
        "endLine": 936,
        "endChar": 16
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e4b3cb3_8468173f",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 17
      },
      "lineNbr": 988,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "I feel strongly about only maintaining one of the two. The new bulk factory seems like the better choice to me because it allows for more use cases to be implemented and performance optimizations to happen.\n\nHaving the option to speed up processing by calling plugins with a collection of changes instead of one change makes sense to me. At the same time, all implementation comes at a maintenance cost and I see no need for needing the single-change attribute factory going forward. From what I see, it doesn\u0027t have many callers and all callers can simple migrate to your new bulk factory without much work.\n\nCan you remove the old factory in a follow up change or rewrite the old to the new instead of implementing the new completely on the side?",
      "range": {
        "startLine": 978,
        "startChar": 0,
        "endLine": 988,
        "endChar": 57
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aae47081_91adfd77",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 17
      },
      "lineNbr": 988,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2020-10-08T18:11:23Z",
      "side": 1,
      "message": "\u003e I feel strongly about only maintaining one of the two. The new bulk factory seems like the better choice to me because it allows for more use cases to be implemented and performance optimizations to happen.\n\u003e \n\u003e Having the option to speed up processing by calling plugins with a collection of changes instead of one change makes sense to me. At the same time, all implementation comes at a maintenance cost and I see no need for needing the single-change attribute factory going forward. From what I see, it doesn\u0027t have many callers and all callers can simple migrate to your new bulk factory without much work.\n\u003e \n\u003e Can you remove the old factory in a follow up change or rewrite the old to the new instead of implementing the new completely on the side?\n\nWe were hesitant to break all the old implementations in a single change, but we did plan to remove it. We thought to be safe it made sense to have both available in a single release and then remove the single-change attribute factory. Since 3.3 is close, maybe that makes sense?\n\nI\u0027m also OK with removing the single-change factory now since I agree it shouldn\u0027t be much work for any caller to convert to the new interface, but we didn\u0027t want to assume it was ok with everyone else. If there\u0027s no opposition to replacing the existing interface we can do that in this change or an immediate child.",
      "parentUuid": "7e4b3cb3_8468173f",
      "range": {
        "startLine": 978,
        "startChar": 0,
        "endLine": 988,
        "endChar": 57
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c236aa06_d34228cf",
        "filename": "Documentation/dev-plugins.txt",
        "patchSetId": 17
      },
      "lineNbr": 988,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2020-10-09T14:27:36Z",
      "side": 1,
      "message": "good point. Anecdotally, it seems that folks already have some trouble with upgrade, so maybe we could let the old mechanism stay in place for a release while marking it as deprecated. \n\nwe already have 3.3-rc0, so I fear it may be too late to get it into 3.3 ?",
      "parentUuid": "aae47081_91adfd77",
      "range": {
        "startLine": 978,
        "startChar": 0,
        "endLine": 988,
        "endChar": 57
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fecb50ee_378c301d",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 255,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Instead of having an optional here, is there a way to bind a no-op factory? It would make the code more readable.",
      "range": {
        "startLine": 255,
        "startChar": 16,
        "endLine": 255,
        "endChar": 24
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e310dc90_286588c5",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 306,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "nit: this name isn\u0027t readable. Can we name it pluginInfosByChange ?",
      "range": {
        "startLine": 306,
        "startChar": 58,
        "endLine": 306,
        "endChar": 70
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4669010c_2dfb5905",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 306,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Dealing with null here and an optional later makes the code harder to read. If you just use an empty map here and treat that empty map later on, it will get easier to read.",
      "range": {
        "startLine": 306,
        "startChar": 73,
        "endLine": 306,
        "endChar": 77
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d66e11c_c69579f5",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 440,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Optionals in arguments are discouraged. Just use an empty collection here in case there\u0027s no PDAF",
      "range": {
        "startLine": 440,
        "startChar": 6,
        "endLine": 440,
        "endChar": 14
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87827960_3f45b57c",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 468,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Use get on the list multimap directly without the optional handling. #get is guaranteed to provide a List, never null [1].\n\n[1] https://guava.dev/releases/19.0/api/docs/com/google/common/collect/ListMultimap.html",
      "range": {
        "startLine": 466,
        "startChar": 18,
        "endLine": 468,
        "endChar": 40
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae7420d_ef3e270f",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 526,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Similar to above, don\u0027t wrap collections in optionals. Use empty collections instead (which the ListMultiMap returns if there\u0027s no value for a key).",
      "range": {
        "startLine": 526,
        "startChar": 6,
        "endLine": 526,
        "endChar": 14
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "823edbdf_96c6e55d",
        "filename": "java/com/google/gerrit/server/change/ChangeJson.java",
        "patchSetId": 17
      },
      "lineNbr": 647,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Why is this distinction necessary? Can\u0027t you guarantee that the PDAIs were loaded and remove the fallback loading here?",
      "range": {
        "startLine": 639,
        "startChar": 0,
        "endLine": 647,
        "endChar": 5
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0087032_676a48c9",
        "filename": "java/com/google/gerrit/server/change/ChangePluginDefinedInfoFactory.java",
        "patchSetId": 17
      },
      "lineNbr": 41,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "nit: ... for each of the provided {@link ChangeData}s",
      "range": {
        "startLine": 41,
        "startChar": 5,
        "endLine": 41,
        "endChar": 41
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0d14d81_a5a5aafc",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 66,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "This should not be nullable, but an empty collection.\n\nThe caller, for example ChangeQueryProcessor doesn\u0027t propagate the @Nullable annotation and does\u0027t treat the null case explicitly either.",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 11
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2540daec_86075bb2",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 71,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "nit:naming\n\nsuggestion: pluginInfosByChange",
      "range": {
        "startLine": 71,
        "startChar": 64,
        "endLine": 71,
        "endChar": 68
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f25dcf16_a4e7d89d",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 96,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "This is not a good idea. If the system breaks, we want the request to fail instead of succeed and silently miss information that clients might expect.\n\nI see the existing logic handles it the same way and also eats up exceptions. I would change that and propagate these exceptions instead.",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 59
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36a17a85_f988d1f4",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 96,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-10-08T19:02:22Z",
      "side": 1,
      "message": "Would it make sense to make core add a special error PluginDefinedInfo with the plugin name but then still allow the query to proceed so that rogue plugins cannot make all queries break?",
      "parentUuid": "f25dcf16_a4e7d89d",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 59
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea14b7d8_35ea7a5c",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 96,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-09T11:32:05Z",
      "side": 1,
      "message": "This depends on the ownership model of your Gerrit installation:\n\n(1) On googlesource.com, we are the holistic service owners, so we\u0027re also responsible for any plugins that fail. As a practical result of that, we have SLOs on all HTTP requests to Gerrit and don\u0027t factor our plugins by default.\n\nIf you employ that model, it\u0027s better to just have the entire request fail. This way you know fast that something is not working as expected and catch regressions early. It\u0027s also way easier for your monitoring to detect issues because it can work off of HTTP status codes.\n\n(2) The opposite model would be to have other plugins be owned by other teams. In which case you can take the stance of \"I don\u0027t care what you but I will make sure you can\u0027t harm the main functionality\". As a practical result, an error encapsulated in PluginDefinedInfo as you suggested would be the better pick.\n\nMy vote always goes to (1) because it think it\u0027s way easier to support that as a service admin in that it\u0027s easier to monitor the system. We\u0027ve also found that because plugins run Java code inside your server binary, the desired \"I will make sure you can\u0027t harm the main functionality\" from (2) doesn\u0027t entirely work just because from that code, a malfunctioning plugin can always bring down the server. For me, that is a supporting argument for (1).",
      "parentUuid": "36a17a85_f988d1f4",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 59
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32fde4f5_938b3a7f",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 96,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-10-09T15:20:29Z",
      "side": 1,
      "message": "I am picturing a plugin which accesses an external data source. Suddenly there is an intermittent issue with the data source that triggers an unexpected exception in the plugin. I would not want ALL my queries failing because of an unmissed unusual exception path in the plugin since these types of things are fairly common, yet not common enough that the plugin developer would likely proactively catch it. External system errors are something you can\u0027t likely produce in advance to code to them. As a plugin developer I would wrap all my plugin code with this same code so that my plugins never cause all queries to fail. So without this code here, I would have to hope that I (and my coworkers) remember to add it to all our plugins.",
      "parentUuid": "ea14b7d8_35ea7a5c",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 59
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db3c56d5_2e7f7159",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedAttributesFactories.java",
        "patchSetId": 17
      },
      "lineNbr": 96,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-12T07:36:36Z",
      "side": 1,
      "message": "Sure. This is a valid argument for model (2) that I described. If you want to handle it this way, I think that\u0027s OK. It does mean that plugin developers would need to handle the error cases in their frontend plugin as well. But that seems OK to me as well.",
      "parentUuid": "32fde4f5_938b3a7f",
      "range": {
        "startLine": 96,
        "startChar": 9,
        "endLine": 96,
        "endChar": 59
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1cb26549_1e8550d6",
        "filename": "java/com/google/gerrit/server/change/PluginDefinedInfosFactory.java",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "nit: missing JavaDoc",
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4240c128_3cbeb71a",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryProcessor.java",
        "patchSetId": 17
      },
      "lineNbr": 155,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Should this happen in the constructor instead? It seems it\u0027s the only place where you need the values.",
      "range": {
        "startLine": 155,
        "startChar": 13,
        "endLine": 155,
        "endChar": 65
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c8aa3ba_182a39e9",
        "filename": "java/com/google/gerrit/server/query/change/OutputStreamQuery.java",
        "patchSetId": 17
      },
      "lineNbr": 103,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "nit: naming\n\nsuggestion: pluginInfosByChange",
      "range": {
        "startLine": 103,
        "startChar": 62,
        "endLine": 103,
        "endChar": 65
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df329be5_838feaae",
        "filename": "java/com/google/gerrit/server/query/change/OutputStreamQuery.java",
        "patchSetId": 17
      },
      "lineNbr": 333,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "Same as before for treating collections/null/lists.",
      "range": {
        "startLine": 333,
        "startChar": 21,
        "endLine": 333,
        "endChar": 26
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3140b87e_2f402632",
        "filename": "javatests/com/google/gerrit/acceptance/api/change/PluginFieldsIT.java",
        "patchSetId": 17
      },
      "lineNbr": 42,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2020-10-08T13:50:50Z",
      "side": 1,
      "message": "I don\u0027t understand the NullAttribute test for the bulk interface: Since we return a map, we can just not return a key/value if the plugin doesn\u0027t want to contribute any infos.\n\nFor the single info interface, that was different (though as a return value, I think optional would have been the better choice).",
      "range": {
        "startLine": 42,
        "startChar": 42,
        "endLine": 42,
        "endChar": 55
      },
      "revId": "e8ef2ce9f1373b5eadfe6414271ec6d277dd5d3e",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}