{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9977f977_89863c7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:09:43Z",
      "side": 1,
      "message": "Maybe a stupid comment, because I don\u0027t know much about label configs, but are label configs inherited? Can they be partially changed by child repos? If yes, then:\n\n1. Do we need a `copyIfParent` predicate?\n\n2. Do we need some way to prevent child overrides?",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65b15226_d956afd0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-26T08:17:32Z",
      "side": 1,
      "message": "\u003e but are label configs inherited\n\nyes\n\n\u003e Can they be partially changed by child repos?\n\nNo, they can only be replaced in full if canOverride [1] was set to true in the parent.\n\n\u003e Do we need a `copyIfParent` predicate?\n\nI think the current way of inheritance is pretty nice because it is simple: you can only override in full (not partially) and only of the parent allowed that. WDYT?\n\n\u003e Do we need some way to prevent child overrides?\n\nExists already :-)\n\n[1] https://gerrit-review.googlesource.com/Documentation/config-labels.html#label_canOverride",
      "parentUuid": "9977f977_89863c7a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e496b77c_72443e05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-05-26T08:17:53Z",
      "side": 1,
      "message": "For how it works now:\n\n* Yes, label definitions are inherited [1].\n* It\u0027s possible to prevent child projects from overriding inherited definitions [2]\n\n[1] https://docs.google.com/presentation/d/1fUjnmngWLFaexZKlN5XmL9EmOX8Nh_P0yJcThnlJ3Lk/edit#slide\u003did.g418d0013ba_2_303\n\n[2] https://docs.google.com/presentation/d/1fUjnmngWLFaexZKlN5XmL9EmOX8Nh_P0yJcThnlJ3Lk/edit#slide\u003did.g418d0013ba_2_360",
      "parentUuid": "9977f977_89863c7a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b931aed_689830fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:22:03Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "e496b77c_72443e05",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e7bde4_e58290be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-25T14:42:57Z",
      "side": 1,
      "message": "I\u0027d appreciate your comments also on a feature-design level to make sure we get this right.\n\nHow should we handle change-related terms?\nOption A (subquery):\n  change:\"project:fooBar\"\nOption B (dedicated predicate):\n  project:fooBar\nOption C (bridge over to change queries, so less boiler plate in code and no sub queries):\n  change-project:fooBar\n\nMy order of preferences is C (top) - B - A. WDYT?",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9c9483e_7209c33a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-05-25T17:39:55Z",
      "side": 1,
      "message": "2 random comments: \n\n* I think it would be good to have a mechanism (plugin API? gerrit.config?) that will do an implicit AND on the configured approval criterion. This would let us set a mandatory, global policy.\n\n* Are the copying criteria currently persisted in NoteDb? If not, it might be useful to do so, to be able to check afterwards why a certain approval was copied forward.",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "789298b4_c82eb786",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-26T08:17:32Z",
      "side": 1,
      "message": "\u003e This would let us set a mandatory, global policy.\n\nSGTM. A plugin endpoint that is allwowed to rewrite queries could be an option.\n\n\u003e Are the copying criteria currently persisted in NoteDb?\n\nThey are not, but this sounds like a good idea. Copied labels are currently only persisted when the change gets submitted. While it\u0027s active, we infer votes which is expensive, so we need to cache that or persist that in NoteDb as well when new patch sets get uploaded. I\u0027d vote for the latter but it means that copy config changes will not apply to open changes until new patch sets are uploaded (seems fine to me).",
      "parentUuid": "f9c9483e_7209c33a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e393a728_251aa9a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-05-26T09:29:09Z",
      "side": 1,
      "message": "\u003e A plugin endpoint that is allwowed to rewrite queries could be an option.\n\nit is an option, but it sounds hairy. What if two plugins try to rewrite the query? The result would depend on the ordering of the rewrites, and it would be harder (relative to AND-ing something together) to reason about the result of the extension.",
      "parentUuid": "789298b4_c82eb786",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}