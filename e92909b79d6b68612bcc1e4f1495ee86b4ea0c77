{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3e984cde_f817e8b6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-26T13:34:14Z",
      "side": 1,
      "message": "nit: please wrap text to 72 chars/line",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "267bcd28_0b5e9b49",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e984cde_f817e8b6",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9977f977_89863c7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:09:43Z",
      "side": 1,
      "message": "Maybe a stupid comment, because I don\u0027t know much about label configs, but are label configs inherited? Can they be partially changed by child repos? If yes, then:\n\n1. Do we need a `copyIfParent` predicate?\n\n2. Do we need some way to prevent child overrides?",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65b15226_d956afd0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-26T08:17:32Z",
      "side": 1,
      "message": "\u003e but are label configs inherited\n\nyes\n\n\u003e Can they be partially changed by child repos?\n\nNo, they can only be replaced in full if canOverride [1] was set to true in the parent.\n\n\u003e Do we need a `copyIfParent` predicate?\n\nI think the current way of inheritance is pretty nice because it is simple: you can only override in full (not partially) and only of the parent allowed that. WDYT?\n\n\u003e Do we need some way to prevent child overrides?\n\nExists already :-)\n\n[1] https://gerrit-review.googlesource.com/Documentation/config-labels.html#label_canOverride",
      "parentUuid": "9977f977_89863c7a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e496b77c_72443e05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-05-26T08:17:53Z",
      "side": 1,
      "message": "For how it works now:\n\n* Yes, label definitions are inherited [1].\n* It\u0027s possible to prevent child projects from overriding inherited definitions [2]\n\n[1] https://docs.google.com/presentation/d/1fUjnmngWLFaexZKlN5XmL9EmOX8Nh_P0yJcThnlJ3Lk/edit#slide\u003did.g418d0013ba_2_303\n\n[2] https://docs.google.com/presentation/d/1fUjnmngWLFaexZKlN5XmL9EmOX8Nh_P0yJcThnlJ3Lk/edit#slide\u003did.g418d0013ba_2_360",
      "parentUuid": "9977f977_89863c7a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b931aed_689830fe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2021-05-26T08:22:03Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "e496b77c_72443e05",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7ed211f_016f8d31",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-26T13:34:14Z",
      "side": 1,
      "message": "nit: polluting?",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 17
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "240c4de8_2670107e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7ed211f_016f8d31",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 17
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82e7bde4_e58290be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-25T14:42:57Z",
      "side": 1,
      "message": "I\u0027d appreciate your comments also on a feature-design level to make sure we get this right.\n\nHow should we handle change-related terms?\nOption A (subquery):\n  change:\"project:fooBar\"\nOption B (dedicated predicate):\n  project:fooBar\nOption C (bridge over to change queries, so less boiler plate in code and no sub queries):\n  change-project:fooBar\n\nMy order of preferences is C (top) - B - A. WDYT?",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9c9483e_7209c33a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-05-25T17:39:55Z",
      "side": 1,
      "message": "2 random comments: \n\n* I think it would be good to have a mechanism (plugin API? gerrit.config?) that will do an implicit AND on the configured approval criterion. This would let us set a mandatory, global policy.\n\n* Are the copying criteria currently persisted in NoteDb? If not, it might be useful to do so, to be able to check afterwards why a certain approval was copied forward.",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "789298b4_c82eb786",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-05-26T08:17:32Z",
      "side": 1,
      "message": "\u003e This would let us set a mandatory, global policy.\n\nSGTM. A plugin endpoint that is allwowed to rewrite queries could be an option.\n\n\u003e Are the copying criteria currently persisted in NoteDb?\n\nThey are not, but this sounds like a good idea. Copied labels are currently only persisted when the change gets submitted. While it\u0027s active, we infer votes which is expensive, so we need to cache that or persist that in NoteDb as well when new patch sets get uploaded. I\u0027d vote for the latter but it means that copy config changes will not apply to open changes until new patch sets are uploaded (seems fine to me).",
      "parentUuid": "f9c9483e_7209c33a",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e393a728_251aa9a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-05-26T09:29:09Z",
      "side": 1,
      "message": "\u003e A plugin endpoint that is allwowed to rewrite queries could be an option.\n\nit is an option, but it sounds hairy. What if two plugins try to rewrite the query? The result would depend on the ordering of the rewrites, and it would be harder (relative to AND-ing something together) to reason about the result of the extension.",
      "parentUuid": "789298b4_c82eb786",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfc8b3d2_70999de6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Right. Might be better to implement a plugin endpoint that creates an AndSource (used today for visibility predicates in indices) with the existing query + what it wants to inject.\n\nSounds simple enough so that we can add this later.",
      "parentUuid": "e393a728_251aa9a4",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4fe44e0_d612da2d",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "nit: duplicated word",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d75796e8_e03058c2",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "I would avoid using \u0027change\u0027 here unless you mean a Gerrit change. difference? modification?",
      "range": {
        "startLine": 27,
        "startChar": 78,
        "endLine": 27,
        "endChar": 84
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74d2421f_4430f954",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d75796e8_e03058c2",
      "range": {
        "startLine": 27,
        "startChar": 78,
        "endLine": 27,
        "endChar": 84
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "645c67e3_a89e50cd",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a4fe44e0_d612da2d",
      "range": {
        "startLine": 27,
        "startChar": 26,
        "endLine": 27,
        "endChar": 44
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf2d0ad4_c12d7fd3",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-05-26T11:09:36Z",
      "side": 1,
      "message": "Maybe do these checks when creating ApprovalContext?",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 59,
        "endChar": 5
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7794e7af_0fad73b1",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf2d0ad4_c12d7fd3",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 59,
        "endChar": 5
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "773dc54e_ea31b554",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "Do we use Objects.equals() for this usually?",
      "range": {
        "startLine": 83,
        "startChar": 11,
        "endLine": 83,
        "endChar": 70
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6794b8b9_57f12ca9",
        "filename": "java/com/google/gerrit/server/query/approval/ChangeKindPredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "That would not help because we need to extract the value anyway.",
      "parentUuid": "773dc54e_ea31b554",
      "range": {
        "startLine": 83,
        "startChar": 11,
        "endLine": 83,
        "endChar": 70
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d24c1670_2046d590",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "Needs license header",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f58a933_6105a3d8",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d24c1670_2046d590",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "faad3d34_154a20ce",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-05-26T11:09:36Z",
      "side": 1,
      "message": "nit: duplicated word",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 11,
        "endChar": 45
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c3ba735_67bb9b2c",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "faad3d34_154a20ce",
      "range": {
        "startLine": 11,
        "startChar": 26,
        "endLine": 11,
        "endChar": 45
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1fd89bf_fc4b70aa",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-05-26T13:34:14Z",
      "side": 1,
      "message": "Can we drop \"ANY\"? What could be a use case for it?\n\nFor example\n  * copyIf \u003d changekind:trivial-rebase AND is:ANY\n\nCan be reduced to\n  * copyIf \u003d changeKind:trivial-rebase\n\n--\n\nIf we want to support a use case like: \"always copy\", I believe it\u0027s better to add support for `copyIf \u003d true` to the language and use that to create a AlwaysTruePredicate. WDYT?",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 7
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3aae6f1_d0a933da",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "\u0027copyIf \u003d is:ANY\u0027 seems simpler to support than special logic for \u0027copyIf \u003d true\u0027, and probably easier for users to find/use.",
      "parentUuid": "d1fd89bf_fc4b70aa",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 7
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6c00b4e_c0e42059",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "I agree to what Nasser said, so leaving as-is.",
      "parentUuid": "b3aae6f1_d0a933da",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 7
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "224619e5_85ee9e3f",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "You can refactor this with a helper to share a bit more code and ensure you\u0027re covering the cases in your enum:\n\n  public boolean match(ApprovalContext ctx) {\n    short pValue;\n    switch (value) {\n      case MagicValue.ANY:\n        return true;\n      case MagicValue.MIN:\n        pValue \u003d getLabelType(ctx.project(), ctx.patchSetApproval().labelId()).getMaxNegative();\n        break;\n      case MagicValue.MAX:\n        pValue \u003d getLabelType(ctx.project(), ctx.patchSetApproval().labelId()).getMaxPositive();\n        break;\n    }\n    return pValue \u003d\u003d ctx.patchSetApproval().value();\n  }\n\n  private LabelType getLabelType(Project.NameKey project, LabelId labelId) {\n    return projectCache\n            .get(project)\n            .orElseThrow(() -\u003e new IllegalStateException(project + \" absent\"))\n            .getLabelTypes().byLabel(labelId);\n  }",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a15464c9_1cb2de23",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "224619e5_85ee9e3f",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24729234_c7e2113e",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "Use Objects.equals()?",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 60
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "948eb402_68b72848",
        "filename": "java/com/google/gerrit/server/query/approval/MagicValuePredicate.java",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Doesn\u0027t help because we need to compare the value, so have to cast anyway.",
      "parentUuid": "24729234_c7e2113e",
      "range": {
        "startLine": 71,
        "startChar": 11,
        "endLine": 71,
        "endChar": 60
      },
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "830bbf8c_085d4fe4",
        "filename": "javatests/com/google/gerrit/acceptance/server/query/ApprovalQueryIT.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-05-26T11:09:36Z",
      "side": 1,
      "message": "nit: missing licence header",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1302a260_9cb53064",
        "filename": "javatests/com/google/gerrit/acceptance/server/query/ApprovalQueryIT.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "830bbf8c_085d4fe4",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05c219aa_1d728d28",
        "filename": "javatests/com/google/gerrit/acceptance/server/query/ApprovalQueryIT.java",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-05-28T18:55:56Z",
      "side": 1,
      "message": "Are there existing helpers like this and the ones below for approval copying tests? (related: are there existing approval copying tests?)",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5279cbc3_e6c1ae23",
        "filename": "javatests/com/google/gerrit/acceptance/server/query/ApprovalQueryIT.java",
        "patchSetId": 1
      },
      "lineNbr": 137,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2021-06-01T08:30:23Z",
      "side": 1,
      "message": "Done (I factored out some logic in a predecessor change).",
      "parentUuid": "05c219aa_1d728d28",
      "revId": "e92909b79d6b68612bcc1e4f1495ee86b4ea0c77",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}