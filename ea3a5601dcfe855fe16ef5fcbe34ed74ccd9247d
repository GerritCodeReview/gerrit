{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "851a365a_b788adc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-12T19:47:07Z",
      "side": 1,
      "message": "@ghareeb@google.com this merged a little fast. Please wait longer for reviews or unset private much earlier. I don\u0027t see why this change was ever private though.",
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0301a202_58f2743e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-13T16:22:04Z",
      "side": 1,
      "message": "This was my change, not Youssef\u0027s.\n\nThe change was not private (in review) for half of the business day.\nIf you prefer the changes being pending longer, I can wait a day before submitting in the future.",
      "parentUuid": "851a365a_b788adc9",
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e16bdb06_6adfab91",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-13T18:40:09Z",
      "side": 1,
      "message": "\u003e This was my change, not Youssef\u0027s.\n\nSure, but Youssef also +2\u0027ed and as the maintainer doing so has the responsibility to ensure the change is ready to be submitted.\n\n\u003e \n\u003e The change was not private (in review) for half of the business day.\n\n\"half of the business day\" isn\u0027t especially helpful when your business day starts while I\u0027m asleep and finishes when I\u0027ve finished my morning coffee. ðŸ˜Š\n\n\u003e If you prefer the changes being pending longer, I can wait a day before submitting in the future.\n\nI don\u0027t think every change needs to be pending longer, but when you\u0027re changing a fundamental part of Gerrit (like indexing), planning for a little extra time in review would be helpful.",
      "parentUuid": "0301a202_58f2743e",
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3eb17dc2_56332383",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-10-14T08:09:34Z",
      "side": 1,
      "message": "Nasser is right; we agreed before to wait at least 1 day such that the change gets proper review from any interested maintainer.\n\nThis change was merged a little fast. I\u0027ll keep this in mind in the future.",
      "parentUuid": "e16bdb06_6adfab91",
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eda5a25_8041ad78",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 133,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-12T19:47:07Z",
      "side": 1,
      "message": "Shouldn\u0027t we be using a constant for this? `ChangeQueryBuilder.FIELD_STATUS` still exists [1], so it\u0027s strange that it\u0027s now unused here.\n\n[1] https://gerrit.googlesource.com/gerrit/+/refs/changes/37/347137/14/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java#201",
      "range": {
        "startLine": 133,
        "startChar": 45,
        "endLine": 133,
        "endChar": 53
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e75c043e_2ceefa94",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-13T16:22:04Z",
      "side": 1,
      "message": "It is used in L139.\n\nChangeQueryBuilder.FIELD_STATUS is still used by all existing indexing implementations, so nothing has changed for them. \nThe \"Status\" name can be used by the indexing implementations, that allow multiple searches by the dame field. Though in this case there is exactly one search (L138) on the field.",
      "parentUuid": "3eda5a25_8041ad78",
      "range": {
        "startLine": 133,
        "startChar": 45,
        "endLine": 133,
        "endChar": 53
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f6ccef_7a9f1726",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 133,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-13T18:40:09Z",
      "side": 1,
      "message": "\u003e It is used in L139.\n\u003e \n\u003e ChangeQueryBuilder.FIELD_STATUS is still used by all existing indexing implementations, so nothing has changed for them. \n\u003e The \"Status\" name can be used by the indexing implementations, that allow multiple searches by the dame field. Though in this case there is exactly one search (L138) on the field.\n\nHow would those indexing implementations know to to use the \"Status\" name? They just use `IndexedField.getName()`?\n\nI guess I\u0027m just confused why we need a new name instead of continuing to use existing field name. That\u0027s seeming to lead to the code needing to know there are two different field names depending on if you\u0027re doing the new multi-search thing or not.",
      "parentUuid": "e75c043e_2ceefa94",
      "range": {
        "startLine": 133,
        "startChar": 45,
        "endLine": 133,
        "endChar": 53
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1326e3f4_b432c28f",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 133,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-14T12:57:42Z",
      "side": 1,
      "message": "Yes, just calling IndexedField.getName() would be enough to know where to route this request.\nI am using the new names because:\n* it separates the IndexedFields (stored, used by the new implementation) from the SearchFields(old FieldDef). \n* I don\u0027t want to reuse the names like _hashtag, topic4, ... . In naming of IndexFields, I just want to ensure the consistent style, e.g. capital latter, descriptive name. So topic4,topic5,topic6 -\u003e Topic, status -\u003e Status.\n\nThe interface to request fields from index on search is IndexPredicate[1].\nIn case the implementation does not support multiple searches per field, it can call predicate.getField.getName() to build a query.\nIf the implementation supports multiple searches by field, it can call predicate.getField.getField.getName() and use the operator from SearchOption to build the query[2], [3].\n\n\n[1]https://gerrit.googlesource.com/gerrit/+/4d84fdc/java/com/google/gerrit/index/query/IndexPredicate.java#53\n[2]https://gerrit.googlesource.com/gerrit/+/4d84fdc/java/com/google/gerrit/index/IndexedField.java#210\n[3]https://gerrit.googlesource.com/gerrit/+/4d84fdc/master/java/com/google/gerrit/index/IndexedField.java#201",
      "parentUuid": "18f6ccef_7a9f1726",
      "range": {
        "startLine": 133,
        "startChar": 45,
        "endLine": 133,
        "endChar": 53
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfb7fe7d_d9471776",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 135,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-12T19:47:07Z",
      "side": 1,
      "message": "Where do these size #s come from?",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 19
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d57ef7ad_280368b4",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 135,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-13T16:22:04Z",
      "side": 1,
      "message": "Change#Status enum only has NEW, MERGED, ABANDONED statuses. A reasonable assumption that if we introduce a new status, it does not exceed a round number of 20 characters.\n\nNote: we are not enforcing sizes anywhere yet. We are likely not going to.",
      "parentUuid": "dfb7fe7d_d9471776",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 19
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90e01c41_841938e9",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 135,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-13T18:40:09Z",
      "side": 1,
      "message": "\u003e Change#Status enum only has NEW, MERGED, ABANDONED statuses. A reasonable assumption that if we introduce a new status, it does not exceed a round number of 20 characters.\n\nCouldn\u0027t you compute this from the enum values then? Or I guess if you don\u0027t want to have it change without changing the index version, you could add a test that confirms its accuracy?\n\n\u003e \n\u003e Note: we are not enforcing sizes anywhere yet. We are likely not going to.\n\nIf we\u0027re not enforcing and we\u0027re not going to, why set it?",
      "parentUuid": "d57ef7ad_280368b4",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 19
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d107f436_f7e4cd2c",
        "filename": "java/com/google/gerrit/server/index/change/ChangeField.java",
        "patchSetId": 14
      },
      "lineNbr": 135,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-14T12:57:42Z",
      "side": 1,
      "message": "\u003e Or I guess if you don\u0027t want to have it change without changing the index \nversion, you could add a test that confirms its accuracy?\n\nYou are right, changing the size will require the index upgrade. This is the case for field getters/setter today: you can accidentally change the fields getter (instead of creating a new field and adding new/removing old from schema), and this might not be caught by the test.\n\n\u003eIf we\u0027re not enforcing it and we\u0027re not going to, why set it?\n\nWe are not enforcing it internally, but index implementations again can choose to enforce the limit.\nWe could drop this property and add some kind of extension to enforce the limit, if this is a concern.",
      "parentUuid": "90e01c41_841938e9",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 19
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78167a7d_12d87053",
        "filename": "java/com/google/gerrit/server/index/change/ChangeSchemaDefinitions.java",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-12T19:47:07Z",
      "side": 1,
      "message": "Should this version increase?",
      "range": {
        "startLine": 35,
        "startChar": 25,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6034533_2ee047b5",
        "filename": "java/com/google/gerrit/server/index/change/ChangeSchemaDefinitions.java",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-13T16:22:04Z",
      "side": 1,
      "message": "No. Still the same version definition is used by all existing index implementations. See the change 339336. So if the index does not use IndexedFields, the fields, exposed by this schema (SchemaFields) are exactly the same.",
      "parentUuid": "78167a7d_12d87053",
      "range": {
        "startLine": 35,
        "startChar": 25,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c51c14a0_b1c81e1b",
        "filename": "java/com/google/gerrit/server/index/change/ChangeSchemaDefinitions.java",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-13T18:40:09Z",
      "side": 1,
      "message": "\u003e No. Still the same version definition is used by all existing index implementations. See the change 339336. So if the index does not use IndexedFields, the fields, exposed by this schema (SchemaFields) are exactly the same.\n\nBut if the index does use the IndexedFields, then the version should be different?\n\nI think maybe the pertinent part of the change you linked is:\n\u003e Each new FieldDef will be mapped exactly to a new SearchSpec, and all\n\u003e FieldDefs will be eventually removed. See the follow up changes for the\n\u003e code migration strategy.\n\nLooking at those follow up changes, it\u0027s not clear to me what the complete strategy is. I\u0027m sure part of the challenge is that the solution you\u0027re developing is very abstract to me since I\u0027m not at Google and don\u0027t know anything about the new index backend you\u0027re trying to support.\n\nAs a concrete example, if I want to update the elasticsearch index implementation to use IndexedFields, what would I need to do? (and maybe that\u0027s a more detailed question than I\u0027m trying for, so don\u0027t spend a lot of time on trying to answer it completely if it is)\nWould I end up needing to increment the schema version?",
      "parentUuid": "b6034533_2ee047b5",
      "range": {
        "startLine": 35,
        "startChar": 25,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8ff726e_287ae863",
        "filename": "java/com/google/gerrit/server/index/change/ChangeSchemaDefinitions.java",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1118500
      },
      "writtenOn": "2022-10-14T12:57:42Z",
      "side": 1,
      "message": "Yes, if the index uses IndexedFields, then each IndexField addition/removal is a separate schema upgrade.\nSince we are in the process of implementing our backend, and none of the upstream backends are using this yet, I don\u0027t want to touch the existing schemas, only replace the definitions.\nI.e. the assumption is that any implementation, using the new fields, has to support all searches that are currently supported by Gerrit. Until we have IndexFields for all searches, we can not build such an implementation.\n\nIf you want want to support this in Elastic, you would need:\n1) build a backed implementation that uses a primary storage with IndexFields and token index that references that primary storage (does not store the entire index document in index, only a key to primary storage)\n2) do a data migration (build this primaryStorage + token indexes from gerrit meta refs)\n3) switch to use the new implementation. Once the new index implementation is used, every new IndexedField/SearchSpec results in a schema upgrade.",
      "parentUuid": "c51c14a0_b1c81e1b",
      "range": {
        "startLine": 35,
        "startChar": 25,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98a15d39_05cc8379",
        "filename": "java/com/google/gerrit/server/index/change/ChangeSchemaDefinitions.java",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2022-10-22T16:19:26Z",
      "side": 1,
      "message": "Thanks for the detailed reply!\n\n\u003e Yes, if the index uses IndexedFields, then each IndexField addition/removal is a separate schema upgrade.\n\u003e Since we are in the process of implementing our backend, and none of the upstream backends are using this yet, I don\u0027t want to touch the existing schemas, only replace the definitions.\n\u003e I.e. the assumption is that any implementation, using the new fields, has to support all searches that are currently supported by Gerrit. Until we have IndexFields for all searches, we can not build such an implementation.\n\nAck.\n\n\u003e \n\u003e If you want want to support this in Elastic, you would need:\n\u003e 1) build a backed implementation that uses a primary storage with IndexFields and token index that references that primary storage (does not store the entire index document in index, only a key to primary storage)\n\nDoes the backend have to work that way? For example, with Elastic I think we could have fields that are indexed as the \u0027keyword\u0027 type [1] (maps to our \u0027exact\u0027 concept) and then at search time we could choose to do either a prefix query [2] or an exact term query [3]. I think this works perfectly for fields like Id, topic, and maybe even author/committer. You could add new SearchSpecs without needing to increment the index schema version because the new search is using an existing field.\n\nThere\u0027s also an idea of \"multi-fields\" [4] in Elastic where you can index the same field in different ways. It\u0027s less clear to me that the new IndexField/SearchSpec abstraction would support that.\n\nMaybe we can spend some time during the upcoming hackathon discussing more? ðŸ˜Š\n\n[1] https://www.elastic.co/guide/en/elasticsearch/reference/7.17/keyword.html\n[2] https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-prefix-query.html\n[3] https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-term-query.html\n[4] https://www.elastic.co/guide/en/elasticsearch/reference/7.17/multi-fields.html",
      "parentUuid": "f8ff726e_287ae863",
      "range": {
        "startLine": 35,
        "startChar": 25,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "ea3a5601dcfe855fe16ef5fcbe34ed74ccd9247d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}