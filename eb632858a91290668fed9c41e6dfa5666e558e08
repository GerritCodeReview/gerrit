{
  "comments": [
    {
      "key": {
        "uuid": "c1def8ae_6611828e",
        "filename": "polygerrit-ui/app/elements/change/gr-change-actions/gr-change-actions.js",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-10T17:11:51Z",
      "side": 1,
      "message": "This looks to me like less of a transpiler bug and more related to this vanilla for loop, which doesn\u0027t create a lexical scope.\n\nThis is why it\u0027s generally good to avoid declaring functions inside vanilla JS loops.\n\nWhat if this were just converted to a lexically binding loop such as ..\n\nObject.keys(actions).forEach(a \u003d\u003e {\n  // ..\n});\n\n.. or ..\n\nfor (const a in actions) {\n  ((a) \u003d\u003e {\n    // ..\n  })(a);\n}\n\n.. ?",
      "range": {
        "startLine": 633,
        "startChar": 6,
        "endLine": 633,
        "endChar": 32
      },
      "revId": "eb632858a91290668fed9c41e6dfa5666e558e08",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e58548c4_98dfee07",
        "filename": "polygerrit-ui/app/elements/change/gr-change-actions/gr-change-actions.js",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-11-10T19:25:39Z",
      "side": 1,
      "message": "tl;dr: Done.\n\n\u003e This looks to me like less of a transpiler bug and more related to this vanilla for loop, which doesn\u0027t create a lexical scope.\n\nDetails are here:\nhttps://bugs.chromium.org/p/gerrit/issues/detail?id\u003d7685#c8\n\nAlso, at a risk of repeating myself I\u0027ll point out that unminified version works.",
      "parentUuid": "c1def8ae_6611828e",
      "range": {
        "startLine": 633,
        "startChar": 6,
        "endLine": 633,
        "endChar": 32
      },
      "revId": "eb632858a91290668fed9c41e6dfa5666e558e08",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02e73173_bd26171d",
        "filename": "polygerrit-ui/app/elements/change/gr-change-actions/gr-change-actions.js",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-10T19:53:21Z",
      "side": 1,
      "message": "SGTM.\n\nIt looks like this code can probably also break in unminified code if the getChangeActionURL method actually makes a request. Almost always though, it doesn\u0027t and resolves synchronously.",
      "parentUuid": "e58548c4_98dfee07",
      "range": {
        "startLine": 633,
        "startChar": 6,
        "endLine": 633,
        "endChar": 32
      },
      "revId": "eb632858a91290668fed9c41e6dfa5666e558e08",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a6bb3f_3c419f27",
        "filename": "polygerrit-ui/app/elements/change/gr-change-actions/gr-change-actions.js",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1024777
      },
      "writtenOn": "2017-11-10T20:30:59Z",
      "side": 1,
      "message": "Right, but it returns a Promise, so always async.",
      "parentUuid": "02e73173_bd26171d",
      "range": {
        "startLine": 633,
        "startChar": 6,
        "endLine": 633,
        "endChar": 32
      },
      "revId": "eb632858a91290668fed9c41e6dfa5666e558e08",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1c8ce7a_331cea22",
        "filename": "polygerrit-ui/app/elements/change/gr-change-actions/gr-change-actions.js",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 1026519
      },
      "writtenOn": "2017-11-10T23:14:14Z",
      "side": 1,
      "message": "I didn\u0027t know promises are always async -- even when they resolve immediately! TIL",
      "parentUuid": "d9a6bb3f_3c419f27",
      "range": {
        "startLine": 633,
        "startChar": 6,
        "endLine": 633,
        "endChar": 32
      },
      "revId": "eb632858a91290668fed9c41e6dfa5666e558e08",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}