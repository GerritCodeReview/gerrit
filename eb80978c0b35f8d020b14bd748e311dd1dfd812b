{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e30bb2fc_3427dcf5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-20T09:59:52Z",
      "side": 1,
      "message": "Friendly ping. I added a long comment for why a test is failing and proposed a way to proceed.",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d5f77c4_34569db4",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-20T12:11:29Z",
      "side": 1,
      "message": "Is the information in the IS_SUBMITTABLE field ever needed for closed changes? If not, shouldn\u0027t this field just contain \u0027false\u0027 for closed changes?",
      "range": {
        "startLine": 729,
        "startChar": 6,
        "endLine": 731,
        "endChar": 57
      },
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f784bfa7_4b6930be",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-20T12:28:08Z",
      "side": 1,
      "message": "We made that decision (keep closed changes out of the predicate\u0027s decision) earlier https://gerrit-review.googlesource.com/c/gerrit/+/323185/comment/4ae298b5_b28632d3/.\n\nYour suggestion sounds like a reasonable addition to me, but this will require re-indexing all changes (performing index upgrade) unfortunately.",
      "parentUuid": "2d5f77c4_34569db4",
      "range": {
        "startLine": 729,
        "startChar": 6,
        "endLine": 731,
        "endChar": 57
      },
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26f8e6a6_12462498",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-20T15:08:40Z",
      "side": 1,
      "message": "\u003e Your suggestion sounds like a reasonable addition to me\n\nI think this would be the proper fix.\n\n\u003e but this will require re-indexing all changes (performing index upgrade) \n\u003e unfortunately.\n\nYes, that\u0027s why I had concerns with storing the submittable flag in the index (https://gerrit-review.googlesource.com/c/gerrit/+/323185/16..20//COMMIT_MSG#b13).\n\nI think it\u0027s possible to fix this with change query rewriting (I\u0027ll upload a new patch set to demonstrate this). But I would do this only as an intermediate solution.\n\nI would propose to:\n\n1. fix this now by rewriting the query\n\n2. fix the index:\na) make a new change index schema version with an IS_SUBMITTABLE_2 field that is populated correctly (or drop the field and have a queryable submit requirements field instead)\nb) use the IS_SUBMITTABLE_2 field if it\u0027s available in the schema\nc) execute the rewriting only if an older schema version is run\n\n3. do an index upgrade somewhen later when it\u0027s needed for other reasons\n\nWDYT?\n\nOther question: Why do we use \"Predicate.not(ChangeStatusPredicate.closed())\" here?  \nWouldn\u0027t it be easier to read if this was just \"ChangeStatusPredicate.open()\" (doesn\u0027t make a difference for the issue at hand)?\n\nAlso, I would expect that \"is:submittable OR -is:submittable\" matches all changes.\nHence if \"is:submittable\" only matches changes that are open and submittable, I think \"-is:submittable\" should match closed changes and unsubmittable open changes, right? I\u0027m asking because it\u0027s it\u0027s not covered by the test.",
      "parentUuid": "f784bfa7_4b6930be",
      "range": {
        "startLine": 729,
        "startChar": 6,
        "endLine": 731,
        "endChar": 57
      },
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe3b4999_6a153e28",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-22T10:16:43Z",
      "side": 1,
      "message": "\u003e I think it\u0027s possible to fix this with change query rewriting (I\u0027ll upload a new patch set to demonstrate this). But I would do this only as an intermediate solution.\n\nYes, rewriting the query is a solution for this issue. Thanks for uploading the new PS. We could add a queryable submit requirements with another change.\n\n\u003e Also, I would expect that \"is:submittable OR -is:submittable\" matches all changes. \n\nCorrect. But my previous implementation did not have that with Lucene.\n\n\u003e Hence if \"is:submittable\" only matches changes that are open and submittable, I think \"-is:submittable\" should match closed changes and unsubmittable open changes, right? I\u0027m asking because it\u0027s it\u0027s not covered by the test.\n\nCorrect. This test [1] with \"-is:submittable\" matches with two changes where one is closed, and the other is {open, not submittable}.\n\n[1] https://gerrit-review.googlesource.com/c/gerrit/+/326533/2/javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java#3047",
      "parentUuid": "26f8e6a6_12462498",
      "range": {
        "startLine": 729,
        "startChar": 6,
        "endLine": 731,
        "endChar": 57
      },
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93d3ee66_3b01ca5b",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-15T15:21:59Z",
      "side": 1,
      "message": "This line is failing when run with Lucene backend (does not match with any docs). Still looking why.",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1320b1c_03a3d655",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-15T16:07:33Z",
      "side": 1,
      "message": "This one very subtle, here\u0027s why it failed:\n\nIn Lucene, we maintain separate sub indexes for open/closed changes. When we execute a query, query processor will use either the open index, closed index or both depending on the query [1]. For example, if we search for \"status:open AND status:merged\" the processor will use both indexes, but if we search for \"status:open\" the processor will use the open sub-index only.\n  \nNow if we have a query like the one in this change: \"AND (field(issubmittable, 1), NOT(field(status, closed))\". Assume we have two open changes, where c1 is submittable but c2 isn\u0027t. A query for \"is:submittable\" will work (will match with c1), but a query with \"-is:submittable\" (we expect it to match with c2) won\u0027t work and will not match with any changes. This is because the code in [1] inspects the query:\n  * -(issubmittable:1 status:new -(status:merged OR status:abandoned))\n\nand concludes that the statuses in the query are [merged, abandoned]. It neglected \"new\" since it was negated. The query then uses the closed index only which is empty, hence the query does not match with any changes.\n  \nWith the current code state in [1] I believe this behaviour is wrong. I\u0027d always use both open and closed indexes in queries and neglect this optimization. \n\n[1] https://gerrit.googlesource.com/gerrit/+/4f3e4366d9181fafc1b1af8ebbe72d7cfd81fc89/java/com/google/gerrit/lucene/LuceneChangeIndex.java#270",
      "parentUuid": "93d3ee66_3b01ca5b",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d44e0413_5a37e162",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-20T12:11:29Z",
      "side": 1,
      "message": "Can ChangeIndexRewriter#getPossibleStatus(Predicate) be fixed to detect the statuses in the query correctly?\n\n\u003e With the current code state in [1] I believe this behaviour is wrong.\n\u003e I\u0027d always use both open and closed indexes in queries and neglect this\n\u003e optimization. \n\nI wouldn\u0027t drop this optimization without understanding how it would effect performance of change queries. \n\nAlso if this optimization is dropped, there is probably no more reason to keep the indexes for open and closed changes separate? Hence in this case we should cleanup and merge them, and drop all code complexity that comes from having these indexes separately.",
      "parentUuid": "b1320b1c_03a3d655",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a0c6f84_f286c0d8",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-20T12:28:08Z",
      "side": 1,
      "message": "\u003e Can ChangeIndexRewriter#getPossibleStatus(Predicate) be fixed to detect the statuses in the query correctly?\n\nIt works correctly. It traverses the query tree bottom up and returns the available statuses (or their complement at each level). So a query with\n  * -(status:new -(status:merged OR status:abandoned))\n\nwill\n  * first return status\u003d{MERGED, ABANDONED} from the right leaf\n  * negate this leaf (because of the - sign on the right) and returns {NEW}\n  * joins it with status\u003d{NEW} from LHS, result \u003d {NEW}\n  * negate the whole thing, returning {MERGED, ABANDONED}\n  \nThe result set only contains MERGED, ABANDONED, hence the query will run against the closed sub-index, neglecting the open sub-index.\n\n\u003e I wouldn\u0027t drop this optimization without understanding how it would effect performance of change queries. \n\nI\u0027m also against that. Dropping it would mean it\u0027s not used anywhere, whilst we only need it for one specific use case (is:submittable).\n\nI spent some time trying to rewrite the query in a way that includes both OPEN/CLOSED sub-indexes in the negation case but couldn\u0027t.",
      "parentUuid": "d44e0413_5a37e162",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98baa552_e8b1e229",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-12-20T15:08:40Z",
      "side": 1,
      "message": "I see. I made a proposal here:\nhttps://gerrit-review.googlesource.com/c/gerrit/+/326533/1/java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java\n\nI think fixing this by rewriting the query works, I\u0027ll upload a new patch set for this.",
      "parentUuid": "8a0c6f84_f286c0d8",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7f60015_8df79a9b",
        "filename": "javatests/com/google/gerrit/server/query/change/AbstractQueryChangesTest.java",
        "patchSetId": 1
      },
      "lineNbr": 3032,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2021-12-22T10:16:43Z",
      "side": 1,
      "message": "Yes, indeed. Thanks for uploading the new PS. I added javadocs in the TODO.",
      "parentUuid": "98baa552_e8b1e229",
      "revId": "eb80978c0b35f8d020b14bd748e311dd1dfd812b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}