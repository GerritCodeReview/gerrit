{
  "comments": [
    {
      "key": {
        "uuid": "0df5e23c_7f01af40",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-21T08:59:36Z",
      "side": 1,
      "message": "This is the plugin API extension and as thus must be documented here: [1].\n\n* [1] https://github.com/gerrit-review/gerrit/blob/master/Documentation/dev-plugins.txt#L962,L1020",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 13,
        "endChar": 55
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edfb2e32_7e01b140",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/GetRevisionActions.java",
        "patchSetId": 7
      },
      "lineNbr": 96,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-21T08:59:36Z",
      "side": 1,
      "message": "I would expect that the contract is that change resource contribution to MD5 hash is done on line 97, here:\n\n  rsrc.getChangeResource().prepareETag(h, ctl.getCurrentUser());\n\nso that core and plugin action handlers can rely on this contract. It wouldn\u0027t hurt to mention this contract in the commit message and/or in dev-plugin description.",
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "784c5e14_3b9dd76a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Rebase.java",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-18T05:25:21Z",
      "side": 1,
      "message": "canRebase() was removed from ETag computation on /changes/\u003cid\u003e/detail in: [1], with this justification:\n\n  The change ETag should be based on the change metadata itself, not\n  the branch it is targeting. Running an inmemory rebase every time\n  we need to compute the ETag is too heavy weight for If-None-Match.\n\nWhy is this the right thing to do on /changes/{id}/revisions/{sha}/actions what was wrong thing to do on /changes/\u003cid\u003e/detail?\n\n* [1] https://gerrit-review.googlesource.com/69651",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 53
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "581ddaf5_ba89f12e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Rebase.java",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2015-07-19T00:01:17Z",
      "side": 1,
      "message": "You are right, its not really OK here either. The computation is just too heavy weight for the ETag in either API.\n\nThe difference is the expected latency. /changes/{id}/detail needs to be faster because it blocks display of ChangeScreen and is part of the \"any new comments\" polling the browser runs in the background while ChangeScreen is open.\n\n/changes/{id}/revisions/{sha1}/actions can be slower as it runs async once the ChangeScreen is loaded and updates the already displayed UI when it comes back. This makes the UI feel more responsive. The browser also does not poll actions every 10s like it does /detail.\n\nGiven the ETag computation is close in cost to just computing the reply I wanted to avoid ETag generation for /actions. Then Dave Borowitz pointed out how slow it is for Submit to compute its contribution to /actions when multiple changes share a topic.\n\nActions don\u0027t change that often on a change. I think they change less often than /detail as many comments published to a change don\u0027t come with votes that change the submit status and don\u0027t change parents that change rebase status. So /detail updates more often than /actions and needs to be quicker at detecting that.\n\nEven expensive caching of /actions is better than no caching due to the cost of submit computation on a multi-change topic and how infrequent action states change.\n\nBut. Yes. I am still not happy about the cost here. Submit is even worse. We likely need to come back and optimize these further somehow.",
      "parentUuid": "784c5e14_3b9dd76a",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 53
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b84256dc_bd379f0b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Rebase.java",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-19T21:33:26Z",
      "side": 1,
      "message": "| /changes/{id}/revisions/{sha1}/actions can be slower as it runs async once the ChangeScreen is loaded\n\nI was aware of the fact that /changes/{id}/revisions/{sha1}/actions runs asynchronously and that /changes/\u003cid\u003e/detail is polling every 30 seconds.  It\u0027s very important that the user gets visual feedback ASAP after opening a change in change screen, so yes, I agree that canRebase() sucks less in GET /actions context.\n\nHowever, I compare this not only between GET /actions and GET /detail, but between the situation before submit-whole-topic was introduced and after it. Before introdction of (optional and disabled per default) submit-whole-topic feature and before split of GET /actions from GET /detail REST endpoint (because submitability computation was trivial and fast enough to be done within GET /detail, and there wasn\u0027t need to optimize it), the \"rebaseability\" computation was done only once and never again for the same change (in getDescription() method), when nothing changed with the change. The every 30 sec. polling compared ETag, that was only induced from change metadata and *not* target branch, figured it wasn\u0027t changed and moved forward with the life.\n\nAfter submit-whole-topic feature was introduced, GET actions  was splitted, done asynchronously, and with this change ETag computation includes canRebase() invocation. That means, that every time, the change is opened in change screen, this computation takes place. In fact when ETag for GET actions is changed, then canRebase() even invoked twice:\n\n* 1. in ETag computation itself\n* 2. in getDescription() invocation\n\nIt feels very wrong to me, that we for one perform such heavy weight computation in cache key computation phase, and for another don\u0027t do any memoization/caching with these computed values. This should be changed (something similar to  MergeabilityCache, though, I guess, RebaseabilityCache can be memory based).\n\nI also wonder if enable or disable rebase button on change screen is really worth to pay the price for this performance degradation? What is wrong to always make rebase button enable and compute the real rebaseaility, after the user click on this button, iow, if she really cares about this use case atm?\n\nFYI: one idea I proposed in one of the changes where split of GET actions from GET /detail was implemented is to do dedicated REST endpoint invocation conditionally: only when submit-whole-topic was activated in gerrit config. But I see, how this condition would complicate the logic in change screen and handlers.",
      "parentUuid": "581ddaf5_ba89f12e",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 53
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd1f4a53_f5c6f88d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Rebase.java",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-07-20T22:53:28Z",
      "side": 1,
      "message": "AFAICT from what you just wrote, you and Shawn are in violent agreement that this sucks. Removing the slow feature is probably a good idea but beyond the scope of this change.",
      "parentUuid": "b84256dc_bd379f0b",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 53
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0df5e23c_ffedbfff",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/change/Submit.java",
        "patchSetId": 7
      },
      "lineNbr": 332,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2015-07-21T08:59:36Z",
      "side": 1,
      "message": "Why the change contribution to the MD5 hash is buried in submit handler and guarded by canSubmit() capability? The contract is clearly to do basic contribution to the ETag like view id and change resource contribution in GetRevisionActions.buildETag(). So that core and plugin action handlers can rely on it.",
      "range": {
        "startLine": 332,
        "startChar": 6,
        "endLine": 332,
        "endChar": 68
      },
      "revId": "eba4156032a634ea83cd3c6a485e0bd34e4943da",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}