{
  "comments": [
    {
      "key": {
        "uuid": "1a133f13_93543c16",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2014-11-19T15:23:43Z",
      "side": 1,
      "message": "Wouldn\u0027t it be easier to just add a param to this constructor?\n\npublic PatchListKey(final Project.NameKey pk, final AnyObjectId a, boolean reversedOrder\n      final AnyObjectId b, final Whitespace ws) {\n    projectKey \u003d pk;\n    if (reversedOrder) {\n        oldId \u003d b !\u003d null ? a.copy() : null;\n        newId \u003d a.copy();\n    } else {\n        oldId \u003d a !\u003d null ? a.copy() : null;\n        newId \u003d b.copy();\n    }\n    whitespace \u003d ws;\n  }\n\nand call it with:\nboolean reversedOrder \u003d base !\u003d null ? base.getId().get() - patchSet.getId().get() \u003c 0 : false;\nnew PatchListKey(change.getProject(), a, b,\nreversedOrder, Whitespace.IGNORE_NONE);",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "edd17ac7bd55c1b390dff3d457f2e4b4a8b0291d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1afa5ff3_3b3a57ec",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1016722
      },
      "writtenOn": "2014-11-19T16:10:36Z",
      "side": 1,
      "message": "Currently the application uses the order of patches as it is passed from the gui. There is no need to determine if the order is direct or reverse. I do not think it is easier or harder to use your approach or my approach. I think it is not necessary to calculate a boolean flag for the order of patches. It is an extra operation which itself does not have a big impact on performance, but still takes time.",
      "parentUuid": "1a133f13_93543c16",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "edd17ac7bd55c1b390dff3d457f2e4b4a8b0291d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6fbfad_93f37c02",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/patch/PatchListKey.java",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1014252
      },
      "writtenOn": "2014-11-20T07:26:47Z",
      "side": 1,
      "message": "This change takes great care in reversing the order. It\u0027s just that instead of this rather simple approach it introduces to new class members and getter methods for those to perform the reordering in the PatchListLoader.\nThe \"reversed\" check is still being done in PatchListLoader.java:144 so this approach would introduce no \"extra\" operation.\nThe question is:\nSince we are after the absolute difference, should theese classes (PatchListKey, PatchListLoader) know of or care about any possible ordering of the revisions to create patches from?\n\nEven placing the ordering in the constructor of PatchListKey (as I suggested) feels like a hack, if the ordering is not considered a state of the PatchListKey.",
      "parentUuid": "1afa5ff3_3b3a57ec",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "edd17ac7bd55c1b390dff3d457f2e4b4a8b0291d",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}