{
  "comments": [
    {
      "key": {
        "uuid": "d496de1c_79fd0b94",
        "filename": "Documentation/rest-api-groups.txt",
        "patchSetId": 2
      },
      "lineNbr": 475,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-09-09T06:19:18Z",
      "side": 1,
      "message": "We could theoretically also support the other way around: including the encoded UUID in the URL and provide the name in the GroupInput entity:\n\n  PUT /groups/9999c971bb4ab872aab759d8c49833ee6b9ff320\n\nand then pass the name (unencoded) in the entity:\n\n  {\n    \"name\": \"MyProject-Committers\",\n  [...]\n\nHowever, in this case we would have to figure out, what is passed in the URL: UUID or name? We could prefix the URL part with: id:foo and name:bar, but this would mean a non backwards compatible change.",
      "range": {
        "startLine": 475,
        "startChar": 2,
        "endLine": 475,
        "endChar": 34
      },
      "revId": "ef0f8808a05d7af9407c423f2e5c7cabf82ff95b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8396cfa5_eb64f694",
        "filename": "Documentation/rest-api-groups.txt",
        "patchSetId": 2
      },
      "lineNbr": 475,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-09-09T06:25:50Z",
      "side": 1,
      "message": "This would be nice, but I think it would introduce additional complexity and risk for regressions that we shouldn\u0027t do on the stable-branch.  If we do this, it should be on master.",
      "parentUuid": "d496de1c_79fd0b94",
      "range": {
        "startLine": 475,
        "startChar": 2,
        "endLine": 475,
        "endChar": 34
      },
      "revId": "ef0f8808a05d7af9407c423f2e5c7cabf82ff95b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "994f78de_18a22191",
        "filename": "Documentation/rest-api-groups.txt",
        "patchSetId": 2
      },
      "lineNbr": 1600,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2019-09-09T06:57:52Z",
      "side": 1,
      "message": "I think we want to accept only UUIDs here that are valid for internal groups (\u0027[0-9a-f]{40}\u0027). Group UUIDs can also contain schemes (e.g. starts with \u0027global:\u0027 for system groups). Creating an internal group with such an UUID doesn\u0027t make sense since the corresponding group backend cannot resolve it (or even worse, the group backend resolves it to a different group which exists in the group backend and coincidentally has the same UUID).\n\nIf I read the code correctly I currently can specify \u0027foo:bar\u0027 as UUID which creates an internal group, but then the Create Group REST endpoint fails when it tries to format the JSON for that group.\n\nI think the Create Group REST endpoint must validate the incoming UUID and ensure that it matches UUID\u0027s for internal groups (\u0027[0-9a-f]{40}\u0027).",
      "range": {
        "startLine": 1600,
        "startChar": 27,
        "endLine": 1600,
        "endChar": 49
      },
      "revId": "ef0f8808a05d7af9407c423f2e5c7cabf82ff95b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "775972ad_bc7a4669",
        "filename": "Documentation/rest-api-groups.txt",
        "patchSetId": 2
      },
      "lineNbr": 1600,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2019-09-09T07:18:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "994f78de_18a22191",
      "range": {
        "startLine": 1600,
        "startChar": 27,
        "endLine": 1600,
        "endChar": 49
      },
      "revId": "ef0f8808a05d7af9407c423f2e5c7cabf82ff95b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}