{
  "comments": [
    {
      "key": {
        "uuid": "2fd9f10d_b0989865",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/GlobalPluginConfig.java",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-26T10:56:05Z",
      "side": 1,
      "message": "As commented in the other place: another option is to override the $PLUGIN.config with $PLUGIN.secure.config. This would mean that GlobalPluginConfig class wouldn\u0027t be necessary and the getGlobalPluginConfig could still return just Config.",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 53,
        "endChar": 3
      },
      "revId": "ef764b035c213d7ac2d449169e25a61bf4d43476",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f749dbe_338d8827",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/PluginConfigFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2016-07-26T10:56:05Z",
      "side": 1,
      "message": "Another possibility would be to simply override the Config from $PLUGIN.config with the Config from $PLUGIN.secure.config. This would mean that this one Map\u003cString, Config\u003e would be enough.",
      "range": {
        "startLine": 54,
        "startChar": 28,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ef764b035c213d7ac2d449169e25a61bf4d43476",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f9be97c_b2b700d4",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/PluginConfigFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-07-27T07:27:03Z",
      "side": 1,
      "message": "Assuming you mean to construct the Config from plugin.config, passing in a Config from plugin.secure.config as the base config.\n\nSuch an implementation would mean that the SecureStore interface must expose a method to return the entire Config.  This would be inconsistent with the existing methods which only return specific settings.\n\nIn the current implementation, values are read from the secure.config on demand and not stored.  I think this was intentional such that there is no potential for them to be compromised.\n\n(the default secure store is of course caching them, but since they\u0027re not encrypted it makes no difference security-wise.  a real implementation would presumably read and decrypt on demand without caching them.)",
      "parentUuid": "8f749dbe_338d8827",
      "range": {
        "startLine": 54,
        "startChar": 28,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ef764b035c213d7ac2d449169e25a61bf4d43476",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f9be97c_f2b188de",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/config/PluginConfigFactory.java",
        "patchSetId": 7
      },
      "lineNbr": 54,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2016-07-27T07:39:48Z",
      "side": 1,
      "message": "One can still have Map\u003cString, Config\u003e and pass GlobalPluginConfig to it as it is derived from Config and overrides methods that make sense for secure config... regarding caching I would rather leave the decision to secure store implementation what and how it should be cached. That makes even more sense when one want to react on pass change - which will not be read when value is cached...",
      "parentUuid": "6f9be97c_b2b700d4",
      "range": {
        "startLine": 54,
        "startChar": 28,
        "endLine": 54,
        "endChar": 40
      },
      "revId": "ef764b035c213d7ac2d449169e25a61bf4d43476",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}