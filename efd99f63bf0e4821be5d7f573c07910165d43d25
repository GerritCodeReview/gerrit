{
  "pushCert": "certificate version 0.1\npusher Dave Borowitz \u003cdborowitz@google.com\u003e 1482442932 -0500\nnonce AHDV6GkAjXILrI1iPifVvJn0sEy+ZjegT+2xhdyvYqUhJwZ4aMLoIK+jKDJd4p1uKaoP51H+hUj8\n\n0000000000000000000000000000000000000000 efd99f63bf0e4821be5d7f573c07910165d43d25 refs/for/master%r\u003dekempin@google.com,r\u003djrn@google.com,r\u003dtparker@google.com\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYXEi0AAoJEF/XxZqaEoiM4KQQAM3J2CKalDKbGDZaL9FZQ4uS\nV2VyXCvp0MPtuc3bkkEysDgFkLZEuEBXYFCPHPmGJ1hSrK8pUUQDeKx99CPWzSyQ\n70+mkAAYlgWi/ChuXeN8ztzlUXuKsNG49A0KolyqYV9jI2u8IntYp1yDOLdeP33q\nATfDRqv4OxQ+AFL1bRWGO+aX9pm+YBtuD4weixX8GU3h54sdA+83z308g1hGl+wx\nzcSr9khZ0zB8EvE01gU2zzpwPdOgyN7Y2YNyWUSeJyL1UMde4nndvMrzW3hvRG+J\nMELgXm7NXO4aKu44YL7DEfl3zyhktdkZGYuey4dd7vrpRoe+RWQMZTeJzM1HSVN9\n+Az8Vvgy2sinRGUnphjja3xjviX63Oc6OZce5nRDGvRYHB4uhrYyNZGNTXo7qs6N\n5DyUCdMnmo+YEqk0LvgVa7xTJpyQAeoIthWHF07xEXg6VLnrjcf+h7qHrHvRs2Ol\nxgJY0ZyzfyoUeMss9vQu4wRiK8SsdPKUXRH8aHyAQYmTq0xYQxYtxfUI+FjjQqv7\na5apta3d6DVy21u/qIh/irUAOf1DlrQRSmSOuQZ3kZSFngQde7sRt93qMvF8zYZH\nFAxQA+sLL8R0JMpmUjdN6Jb6wf/rHnT+ov9t49Rtctbu9m2b1WeRDTgf9lbE3he6\n9I7/DT5M6DSPXdt6E9g4\n\u003dIj8d\n-----END PGP SIGNATURE-----\n",
  "comments": [
    {
      "key": {
        "uuid": "1a1ba32a_7bd057e0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "For me at least it is unexpected, that with this option set, the data is still written to the database, e.g: [1], but the TX is rollbacked. Not sure, if it is expected at that point, but I think it would worth mentioning this behaviour in the commit message.\n\nNote: to get this stack trace, i disabled database entirely, as explained in detail in another comment.\n\n* [1] http://paste.openstack.org/show/593386",
      "range": {
        "startLine": 9,
        "startChar": 37,
        "endLine": 10,
        "endChar": 9
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bad8d7b0_edfe618c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-12-28T19:26:55Z",
      "side": 1,
      "message": "I understand that this may be confusing, I\u0027ll try to document the behavior more clearly.\n\nHowever I really do not want to change the behavior that\u0027s in this code.\n\nTake a look at this change:\n\nhttps://gerrit-review.googlesource.com/93355\n\nThat\u0027s what we had to do to avoid calling into db.changes() *just* for delete calls. Imagine if we had to have that check for every single insert/update/upsert as well. It would be gross.\n\nSwapping out a ReviewDb implementation is another possibility, but it gets ugly pretty quickly. We have to support the state where some changes have NoteDb primary and some changes have ReviewDb primary. That means that the implementation of update(Colllection) has to first look up changes in that list to see which ones have ReviewDb primary, and call delegate.update() only for the ones that do.\n\nEventually we will swap out ReviewDb#changes, but only once we no longer need to support mixed ReviewDb/NoteDb primary in the same server.",
      "parentUuid": "1a1ba32a_7bd057e0",
      "range": {
        "startLine": 9,
        "startChar": 37,
        "endLine": 10,
        "endChar": 9
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17d8de6b_4d4ff9db",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-05T20:59:40Z",
      "side": 1,
      "message": "| That\u0027s what we had to do to avoid calling into db.changes() *just* for delete calls. Imagine if we had to have that check for every single insert/update/upsert as well. It would be gross.\n\nI agree. All what I\u0027m asking for is to clarify the commit message and emphasize, that even when \"all changes are migrated to NoteDb\" already (ot new site is started with primary storage NoteDb) there is no way to avoid No-Op reads from and Write-And-Rollback to the database.\n\nTo summarize this discussion: The current situation is an intermediate step that is done that way to not pollute the  code with ugly hacks, yet supporting mixed storages to make zero downtime migration possible. Once that migration is done, all changes are in the NoteDb this is going to be cleaned up. No No-Op reads from and no Write-And-Rollback to the database.",
      "parentUuid": "bad8d7b0_edfe618c",
      "range": {
        "startLine": 9,
        "startChar": 37,
        "endLine": 10,
        "endChar": 9
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57bdf6e4_57abec53",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T21:08:44Z",
      "side": 1,
      "message": "\u003e To summarize this discussion: The current situation is an intermediate step that is done that way to not pollute the  code with ugly hacks, yet supporting mixed storages to make zero downtime migration possible. Once that migration is done, all changes are in the NoteDb this is going to be cleaned up. No No-Op reads from and no Write-And-Rollback to the database.\n\nExactly. We\u0027re on the same page here.\n\nOne slight clarification:\n\n\u003e Eventually we will swap out ReviewDb#changes\n\nThis is referring to the migration state where no NoteDb change writes are happening at all. We will still be making calls to db.changes().update(...), but the ChangeAccess implementation will be a complete no-op and will not write to the db even if it\u0027s rolled back.",
      "parentUuid": "17d8de6b_4d4ff9db",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3d3551c_80e9d689",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-12T21:50:03Z",
      "side": 1,
      "message": "I added some more detail to the commit message, PTAL.",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a1ba32a_dbe08bb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "This option:\n\n  GERRIT_NOTEDB\u003dPRIMARY buck test\n\nshould be documented in Buck and Bazel development documentation. We should also consider to add primary storage NoteDb mode for GerritForge CI.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 15,
        "endChar": 9
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f0de9e_8da1217e",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 3
      },
      "lineNbr": 999,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "It wasn\u0027t added in this change, but i wonder in this idiom:\n\n  db.changes().beginTransaction(id);\n  try {\n    for (Op op : changeOps) {\n      dirty |\u003d op.updateChange(ctx);\n    }\n    [...] // further mutation operations\n    if (storage \u003d\u003d PrimaryStorage.REVIEW_DB) {\n      db.commit();\n    }\n  } finally {\n    db.rollback();\n  }\n\nwhy not to respect the primary storage mode:\n\n  if (storage \u003d\u003d PrimaryStorage.REVIEW_DB) {\n    db.rollback();\n  }\n\nfor starting the TX and rollback operations as well? Starting from this change?\n\nMoreover, I wonder if it could be avoided in near future to use BatchUpdateReviewDb in primary storage NoteDb code path for change entity group? One of missing bits seem to be sequence retrieval for change messages: [1].\n\n* [1] http://paste.openstack.org/show/593371",
      "range": {
        "startLine": 980,
        "startChar": 10,
        "endLine": 999,
        "endChar": 11
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57bdf6e4_178334f0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 3
      },
      "lineNbr": 999,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T15:53:08Z",
      "side": 1,
      "message": "\u003e for starting the TX and rollback operations as well?\n\nIt\u0027s definitely necessary to start the transaction when NoteDb is primary, otherwise the db.changes().update() calls will happen immediately, rather than being rolled back. If we avoided those calls as well, it would work, but as I said elsewhere that gets real ugly.\n\n\u003e Moreover, I wonder if it could be avoided in near future to use BatchUpdateReviewDb in primary storage NoteDb code path for change entity group?\n\nYeah, I will consider this as a future cleanup. However, I\u0027m not yet sure whether it\u0027s worth trying too hard to clean up the codepaths related to mixed-NoteDb/ReviewDb-primary  in a single server, as opposed to forging ahead with the mode that turns off ReviewDb entirely for changes.",
      "parentUuid": "17f0de9e_8da1217e",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b83af6_38d189e5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 3
      },
      "lineNbr": 999,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-05T16:22:47Z",
      "side": 1,
      "message": "Ah right. I had strong impression during review of this series, that I was missing something very important. And the answer is: I entirely forgot about mixed mode where some changes were already migrated and some not. Thanks for clarifying. May be it could emphasized more clearly somewhere to avoid further confusion.",
      "parentUuid": "57bdf6e4_178334f0",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a1ba32a_1bd323ef",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 3
      },
      "lineNbr": 1054,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "This idiom is spreaded across the code base: starting from this change (or in a follow-up change?) we could skip database read attempt in primary storage NoteDb mode:\n\n  Change change \u003d null;\n  if (storage \u003d\u003d PrimaryStorage.REVIEW_DB) {\n    change \u003d ChangeNotes.readOneReviewDbChange(db, id);\n  }\n  if (change \u003d\u003d null) {\n    change \u003d newNoteDbOnlyChange(project, id);\n  }",
      "range": {
        "startLine": 1054,
        "startChar": 8,
        "endLine": 1054,
        "endChar": 54
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7cb4a92_5479ac2f",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/git/BatchUpdate.java",
        "patchSetId": 3
      },
      "lineNbr": 1054,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T15:53:08Z",
      "side": 1,
      "message": "Just because the *default* primary storage is NoteDb doesn\u0027t mean that *all* changes have ReviewDb as their primary storage. We still need to try to read the change from ReviewDb in case it does exist in ReviewDb, and the noteDbState field in ReviewDb indicates that ReviewDb is primary.\n\nA later migration phase, not yet written, will assume all changes have NoteDb primary, in which case we will skip the ReviewDb read. But we can\u0027t flip that flag until all old changes have been migrated to NoteDb primary.",
      "parentUuid": "1a1ba32a_1bd323ef",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "486b96ff_95e78492",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2017-01-20T06:52:57Z",
      "side": 1,
      "message": "@Luca, now, that this change was merged, we should set up new CI job with NoteDb mode primaryStorage.",
      "range": {
        "startLine": 54,
        "startChar": 48,
        "endLine": 54,
        "endChar": 64
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "486b96ff_758628b7",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2017-01-20T07:39:30Z",
      "side": 1,
      "message": "Yep",
      "range": {
        "startLine": 54,
        "startChar": 48,
        "endLine": 54,
        "endChar": 64
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f0de9e_4d90d92b",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "Can this be re-considered now? I would expect that when I say:\n\n  noteDb.read \u003d true\n  noteDb.write \u003d true\n  noteDb.primaryStorage \u003d NOTE_DB\n\nthat sequences for change entity group are not read from the database. It\u0027s also confusing that tests default behave differently here.\n\nChangeMessage sequence implementation, that is not touching database, is missing.",
      "range": {
        "startLine": 102,
        "startChar": 15,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7cb4a92_34863000",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T15:53:08Z",
      "side": 1,
      "message": "Good question. I like the idea that sequence \u003d true when default storage is NoteDb, but I don\u0027t think we want to just unconditionally make sequence \u003d (storage \u003d\u003d NOTE_DB). As this comment notes, once you turn on sequences from NoteDb, you cannot go back to sequences from ReviewDb. But you *should* be able to switch primary storage back and forth several times with no problems. Tying sequences to primary storage breaks this assumption.",
      "parentUuid": "17f0de9e_4d90d92b",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f0de9e_ada4dd8d",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "Should we add dedicated option for ChangeMessage sequence or was it a mistake to not respect the readChangeSequence configuration option for ChangeMessage sequence?",
      "range": {
        "startLine": 103,
        "startChar": 4,
        "endLine": 103,
        "endChar": 22
      },
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7cb4a92_148334f0",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T15:53:08Z",
      "side": 1,
      "message": "You are right, I completely forgot that ChangeMessage UUIDs come from a database sequence.  I haven\u0027t thought about this at all yet, but I\u0027ll tackle it this week. Thanks for pointing it out.\n\n(This is a separate migration unrelated to this change.)",
      "parentUuid": "17f0de9e_ada4dd8d",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa132f0f_97a8a6c5",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-23T04:30:04Z",
      "side": 1,
      "message": "Are we planning to document this option at some point? I mean in 3.0 we wouldn\u0027t have it anyway.",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57bdf6e4_37863800",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/ConfigNotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2017-01-05T15:53:08Z",
      "side": 1,
      "message": "We will document it at the same time that we document all the other config options used by this class, which may or may not be never :)",
      "parentUuid": "fa132f0f_97a8a6c5",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f0de9e_0d96d12a",
        "filename": "gerrit-server/src/main/java/com/google/gerrit/server/notedb/NotesMigration.java",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "It\u0027s binary option, so helper method(s) coud help: isPrimaryStorageNoteDb() would simplifiy the checks in tests and productive code.",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17f0de9e_6d8b1503",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/testutil/NoteDbChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2016-12-26T19:06:32Z",
      "side": 1,
      "message": "One problem that generally arises with \"Post Mortem Analyse\" approach is that you never know how you got there: no rows in the database. We disabled the db during secondary index integration to avoid touching the database altogether when reading changes and expecting there is no any database interaction. I did similar database disabling approach for unit tests here, and it turns out, there are still some database operations including inserts and rollbacks at this point and reading database sequences (it\u0027s clear, it\u0027s not ready yet, though): [1].\n\nIdeally, we could set up partialy disabled ReviewDb for unit tests in primary storage NoteDb mode case, until accounts and Groups stuff is not migrated to NoteDb. So that database read (including sequence retrieval) and write operations only blocked for change entity group, but still work for account and group entities.\n\n* [1] http://paste.openstack.org/show/593381",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bad8d7b0_6d38b18d",
        "filename": "gerrit-server/src/test/java/com/google/gerrit/testutil/NoteDbChecker.java",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2016-12-28T19:13:00Z",
      "side": 1,
      "message": "I considered that, but the reason I didn\u0027t take that approach was that it\u0027s a bit of work to build that partial ReviewDb properly. You have to keep track of which entities have been inserted and then throw the appropriate exception during commit(). Not impossible, but this was much easier, and in practice I didn\u0027t have a hard time tracking down the few failures there were.",
      "parentUuid": "17f0de9e_6d8b1503",
      "revId": "efd99f63bf0e4821be5d7f573c07910165d43d25",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}