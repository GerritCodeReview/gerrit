{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e120b692_ce781c2e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-27T15:44:13Z",
      "side": 1,
      "message": "Missing `Release-Notes` footer.",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c553ab1d_146ffaf6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-11-27T15:48:07Z",
      "side": 1,
      "message": "is this `Release-Notes` footer documented somewhere? I\u0027m confused now, as I don\u0027t think that this should be mentioned in the release notes (sure I can add `Release-Notes: skip`) also there\u0027s a `Bug` footer already that should be enough for the release notes.\n\nIs it a mandatory footer now? When it can be skipped?",
      "parentUuid": "e120b692_ce781c2e",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e69adfc_0b1ee60e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1148215
      },
      "writtenOn": "2023-11-27T08:17:31Z",
      "side": 1,
      "message": "I think, unless there is a specific reason for this, the changes should first be submitted to master and then cherrypicked into versioned releases.",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36e9d6d8_a52db12b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-11-27T09:37:50Z",
      "side": 1,
      "message": "I\u0027ve put it on `stable-3.9` because we need this for the eclipse.gerrithub.io (which is running 3.9) and I find it cleaner to fix bugs on a stable branch and merge back to `master` than cherrypicking to stable. As with cherrypick you will end up with duplicated commits when stable and master are eventually merged together.\n\nHaving said that, I don\u0027t mind moving this to `master` if that\u0027s the Gerrit convention.",
      "parentUuid": "6e69adfc_0b1ee60e",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5285e471_783f1ac9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-27T09:44:48Z",
      "side": 1,
      "message": "Please do not submit without an approval from google\u0027s gerrit team. It seems the fix you made can break our internal version - internally, some services bind @CanonicalWebUrl provider to a different class. We need to ensure that we can adapt our code to the suggested fix.",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aee5af7a_c9a885a0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2023-11-27T15:43:48Z",
      "side": 1,
      "message": "Thanks @dmfilippov@google.com for the warning: are you guys using (or subclassing) Daemon? Can you put a `-2` in the meantime, so we don\u0027t risk to get this merged?",
      "parentUuid": "5285e471_783f1ac9",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71a62b11_b9aa0340",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-11-27T17:51:51Z",
      "side": 1,
      "message": "\u003e are you guys using (or subclassing) Daemon\n\nNo, we don\u0027t use Daemon. But we have a separate service which binds CanonicalWebUrlProvider instead of HttpCanonicalWebUrlProvider. I will look at this more closely tomorrow - i don\u0027t know why CanonicalWebUrlProvider was used.\n\n\u003e Can you put a -2 in the meantime, so we don\u0027t risk to get this merged\nOk.",
      "parentUuid": "aee5af7a_c9a885a0",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1dbc4897_0c118502",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-01T09:22:42Z",
      "side": 1,
      "message": "@dimitry@google.com, any updates on your findings?",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2e3a277_078f393a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-04T10:08:47Z",
      "side": 1,
      "message": "We really need this change in Gerrit core in order to make the `virutalhost` module  provide correct server URL in the push output. Without it Gerrit won\u0027t even start when we try to bind `virtualhost` specific _canonical web url provider_:\n```\n1) [Guice/ErrorInCustomProvider]: OutOfScopeException: Cannot access scoped [HttpServletRequest]. Either we are not currently inside an HTTP Servlet request, or you may have forgotten to apply GuiceFilter as a servlet filter for this request.\n  at InternalServletModule.provideHttpServletRequest(InternalServletModule.java:112)\n      \\_ installed by: RequestContextFilter$1 -\u003e InternalServletModule\n  while locating HttpServletRequest\n  while locating HttpCanonicalWebUrlProvider\n  while locating String annotated with interface CanonicalWebUrl\n\nLearn more:\n  https://github.com/google/guice/wiki/ERROR_IN_CUSTOM_PROVIDER\n\n1 error\n\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nFull classname legend:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nCanonicalWebUrl:             \"com.google.gerrit.server.config.CanonicalWebUrl\"\nGuiceFilter:                 \"com.google.inject.servlet.GuiceFilter\"\nHttpCanonicalWebUrlProvider: \"com.google.gerrit.httpd.HttpCanonicalWebUrlProvider\"\nHttpServletRequest:          \"javax.servlet.http.HttpServletRequest\"\nInternalServletModule:       \"com.google.inject.servlet.InternalServletModule\"\nOutOfScopeException:         \"com.google.inject.OutOfScopeException\"\nRequestContextFilter$1:      \"com.google.gerrit.httpd.RequestContextFilter$1\"\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nEnd of classname legend:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n```\n\n@dimitry@google.com, have you had change to verify if this change will also work for Google?",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8edb67e_b2e395d8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-12-14T16:23:33Z",
      "side": 1,
      "message": "All our tests are passed, so it seems the change shouldn\u0027t break our code.",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20ea13b3_27f422d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-12-14T16:23:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "71a62b11_b9aa0340",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6333284_94a444fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-14T17:04:26Z",
      "side": 1,
      "message": "Thank you Dmitrii, for checking that for us",
      "parentUuid": "a8edb67e_b2e395d8",
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec04d5f3_0734689a",
        "filename": "java/com/google/gerrit/httpd/GuiceRequestScopePropagator.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-12-14T16:23:33Z",
      "side": 1,
      "message": "There is a difference in how Guice works:\nWhen urlProvider is a Provider\u003cString\u003e, then each calls to urlProvider.get creates a new CanonicalWebUrl or HttpCanonicalWebUrlProvider instance and call get methon of the newly created instance.\n\nWhen urlProvider is HttpCanonicalWebUrlProvider, the HttpCanonicalWebUrlProvider instance is created only when GuiceRequestScopePropagator is created and then the same instance is used in each urlProvider.get() call.\n\n---\nI don\u0027t say this is wrong, but could you please double check that it shouldn\u0027t cause some issue? (I checked it already, but would like a second head on this)",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 33
      },
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e64bc49a_dc374d0d",
        "filename": "java/com/google/gerrit/httpd/GuiceRequestScopePropagator.java",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-14T17:04:26Z",
      "side": 1,
      "message": "\u003e There is a difference in how Guice works:\n\u003e When urlProvider is a Provider\u003cString\u003e, then each calls to urlProvider.get creates a new CanonicalWebUrl or HttpCanonicalWebUrlProvider instance and call get methon of the newly created instance.\n\nUnless the class is a singleton, then Guice should use that single instance. Similarly to \"scoped\" instances (eg. request scoped), then the instance from the \"scope\" should be returned from `Provider`.\n\n\u003e When urlProvider is HttpCanonicalWebUrlProvider, the HttpCanonicalWebUrlProvider instance is created only when GuiceRequestScopePropagator is created and then the same instance is used in each urlProvider.get() call.\n\nCorrect, I believe that `GuiceRequestScopePropagator` should be only created in the request scope so even when we had `@CanoncialWebUrl Provider\u003cString\u003e`, we ended up having an instance of `HttpCanoncialWebUrlProvider` here.\n\nThe reason why I changed this to an explicit type, is that `HttpCanoncialWebaurlProvider` has a public `setHttpServletRequest()` method that changes its behaviour.\n\n\u003e I don\u0027t say this is wrong, but could you please double check that it shouldn\u0027t cause some issue? (I checked it already, but would like a second head on this)\n\nAs mentioned above, the only reason why this type was changed is the presence of `setHttpServletRequest()` that we need to call in `wrapImpl`.\n\nIBH, I did expect Guice to call `setHttpServletRequest()` for us, as it is marked with `@Inject(optional \u003d true)`, which should ensure that `HttpServletRequest` is set in the http request context... but for unknown reasons that injection doesn\u0027t happen, that\u0027s why we need to do it manually in `wrapImpl`.\n\nHope this sheds some light on this change.",
      "parentUuid": "ec04d5f3_0734689a",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 33
      },
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caa6e271_264a1d91",
        "filename": "java/com/google/gerrit/httpd/GuiceRequestScopePropagator.java",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1085901
      },
      "writtenOn": "2023-12-14T16:23:33Z",
      "side": 1,
      "message": "It looks suspicious that the line\nurlProvider.setHttpServletRequest(request);\nis called inside wrapImpl - it means that now we reassign request provider in each request.\nIs it correct? Can this line (urlProvider.setHttpServletRequest(request)) be moved to the GuiceRequestScopePropagator constructor?",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7e745c2_d6f1f092",
        "filename": "java/com/google/gerrit/httpd/GuiceRequestScopePropagator.java",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1010134
      },
      "writtenOn": "2023-12-14T17:04:26Z",
      "side": 1,
      "message": "yes, as I mentioned above, I\u0027d expect it to be called by Guice automatically before the provider is injected. But from my testing, it looks like it doesn\u0027t work this way.\n\n\u003e is called inside wrapImpl - it means that now we reassign request provider in each request. Is it correct? \n\nwell, we override the `Provider\u003cHttpServletRequest\u003e` not the actual scoped request, so we should be fine.\n\n\u003e Can this line (urlProvider.setHttpServletRequest(request)) be moved to the GuiceRequestScopePropagator constructor?\n\nWell the naming is a bit off here, the `request` is actually a `requestProvider`. I think as long as we don\u0027t call `get()` on that provider, we can probably call it in the constructor (and do the dirty work for the Guice).\n\nWe need to be sure, that we call `urlProvider.get()` inside of `wrapImpl` as this must be called inside of request scope.",
      "parentUuid": "caa6e271_264a1d91",
      "range": {
        "startLine": 64,
        "startChar": 4,
        "endLine": 64,
        "endChar": 47
      },
      "revId": "f34901ad4509a531fe6c59ea36b9cb25b70cb7a6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}