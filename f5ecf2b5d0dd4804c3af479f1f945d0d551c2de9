{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "83c77a8e_0007b1e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-10-19T21:32:28Z",
      "side": 1,
      "message": "Keep with L9",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36119779_98da74f9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2022-10-19T21:32:28Z",
      "side": 1,
      "message": "Issue 16100",
      "range": {
        "startLine": 11,
        "startChar": 5,
        "endLine": 11,
        "endChar": 10
      },
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "486c89f8_f2f9a869",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2022-10-20T13:36:58Z",
      "side": 1,
      "message": "Thanks Leo for change. I agree it would be nice to have better previews for gerrit, but as Ben and Edwin commented it needs to make sure that it doesn\u0027t decrease performance. \n\nThe first index is very important - we start to download js files only after this. Do you think it is possible to create title after page is rendered? Will it be parsed by search engines or messangers?\n\nBtw. I think *googlesource have robots.txt set so this host wouldn\u0027t benefit much from this, since it blocks search engines.",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90a53c67_40ddfaa6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1108045
      },
      "writtenOn": "2022-10-20T14:27:10Z",
      "side": 1,
      "message": "\u003e The first index is very important - we start to download js files only after this. Do you think it is possible to create title after page is rendered? Will it be parsed by search engines or messangers?\n\nBoth. Some search engines execute JS, but messengers/link preview bots won\u0027t. They just download the page and look for the meta/OpenGraph tags. So yes, it unfortunately has to be rendered server-side.\n\nI\u0027ll abandon this change. How would you feel about doing it conditionally for a hardcoded list of known user agents?",
      "parentUuid": "486c89f8_f2f9a869",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e28c9b6_a03e55be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1085182
      },
      "writtenOn": "2022-11-17T14:30:23Z",
      "side": 1,
      "message": "You can assign it to me. I don\u0027t know ETA (maybe early 2023), but I would be interested to implement this.",
      "parentUuid": "90a53c67_40ddfaa6",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1927d584_87aae588",
        "filename": "java/com/google/gerrit/httpd/raw/IndexHtmlUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-09-28T15:01:17Z",
      "side": 1,
      "message": "This impacts the latency of initial page load. I don\u0027t think we can wait for this.",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9995004a_436b3fdc",
        "filename": "java/com/google/gerrit/httpd/raw/IndexHtmlUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1108045
      },
      "writtenOn": "2022-09-29T11:24:59Z",
      "side": 1,
      "message": "I thought about this, but I don\u0027t know how expensive it actually is - I saw we were already querying accounts, for instance, and the call is really fast locally and on my (small) production hosts.\n\nI do believe that proper link previews are quite important for usability - any thought on how we could approach this? Perhaps we could route specific, known user agents to a dedicated link preview servlet?",
      "parentUuid": "1927d584_87aae588",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ca6884e_345317f4",
        "filename": "java/com/google/gerrit/httpd/raw/IndexHtmlUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1013302
      },
      "writtenOn": "2022-09-29T13:21:26Z",
      "side": 1,
      "message": "@ekempin@google.com This needs someone from the backend team to look at.",
      "parentUuid": "9995004a_436b3fdc",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7342191a_a4b22a83",
        "filename": "java/com/google/gerrit/httpd/raw/IndexHtmlUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1108045
      },
      "writtenOn": "2022-09-30T17:09:41Z",
      "side": 1,
      "message": "Some thoughts on how to approach the latency trade off:\n\n- Detect link preview bots and serve a static site just for them. Unfortunately, there is no standard way of identifying them other than by making a list of known user agents. Maintaining a list doesn\u0027t sound great, but otherwise, this would be my preferred solution - zero cost for the SPA, and it would us add more features over time (like Open Graph snippets or including parts of the commit message).\n\n- Make it configurable so users can pick their poison. Not great since it would lead to an inconsistent user experience.\n\n- Fetch /detail and prefetch it - the frontend fetches that anyway so at least don\u0027t pay the cost twice.\n\n(happy to move the discussion to the issue/repo-discuss/elsewhere - I\u0027m aware that submitting a CL without getting sign-off on the overall approach first means it might be rejected, I\u0027m OK with that)",
      "parentUuid": "9ca6884e_345317f4",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e674a03_3db61eb8",
        "filename": "java/com/google/gerrit/httpd/raw/IndexHtmlUtil.java",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-10-04T07:52:10Z",
      "side": 1,
      "message": "IIUC this call results in invoking ChangesCollection#parse which invoked ChangeFinder#find. This means it:\n\n* does an index query (to find the project for changeNum, only if not present in the changeIdProjectCache)\n* loads the change from NoteDb (requires project + changeNum)\n* checks the read permissions of the change\n\nI do agree with Ben that this is likely a too large latency increase to do unconditionally.\n\nIIUC issue 16100 affects only a few user agents, hence your suggestion to make this logic depending on the user agent. Maybe admins could configure the list of user agents in gerrit.config for which the change info should be included? I have no preference for a solution here, but I think we should avoid the latency decrease for callers that do not need the change info.",
      "parentUuid": "7342191a_a4b22a83",
      "revId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Change-Is-Forward-Compatible",
        "description": {
          "value": "Changes to NoteDb or entities packages require careful consideration. Make sure your change is forward compatible and add the footer \u0027Forward-Compatible: checked\u0027 to your commit message"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Forward-Compatible\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\" OR file:\"^java/com/google/gerrit/entities/.*\\\\.java$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^java/com/google/gerrit/server/notedb/.*\\\\.java$\"","file:\"^java/com/google/gerrit/entities/.*\\\\.java$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Forward-Compatible\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"]}
      },
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND -hasfooter:\"Release-Notes\" AND -is:pure-revert"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":["branch:refs/meta/config","is:pure-revert"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f5ecf2b5d0dd4804c3af479f1f945d0d551c2de9",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}