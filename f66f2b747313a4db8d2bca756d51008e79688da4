{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ee06575c_0a7f6962",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1091982
      },
      "writtenOn": "2022-06-07T13:01:06Z",
      "side": 1,
      "message": "Thank you for reviewing.\n\nI gave this a second though and I think this refactoring was over-engineered and not really needed. I reworked the last change - I2faf081ce74659cdb8d3a789ed79acced8503cfc - and will abandon the two refactoring changes.",
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88963fcd_ae146904",
        "filename": "java/com/google/gerrit/server/project/validator/CopyValuesLabelConfigValidator.java",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-06-07T12:28:42Z",
      "side": 1,
      "message": "The logic of this validator is tightly related to the logic in DeprecatedFlagsLabelConfigValidator (both validators check that deprecated approval copying fields are no longer used). I think it\u0027s better to keep this logic together in a single validator, or is there a good reason to split this?",
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0431c471_4564cd12",
        "filename": "java/com/google/gerrit/server/project/validator/LabelConfigValidatorChecker.java",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-06-07T12:28:42Z",
      "side": 1,
      "message": "I\u0027m not sure this name makes sense to me. \"LabelConfigValidatorChecker\" sounds to me like it\u0027s \"a checker for label config validators\" but what is being checked here is the label config not the validator. Can we find a better name for this extension point?\n\nIf possible, please avoid having both LabelConfigValidator and LabelConfigChecker at the same time, because from this naming it would unclear what would be the difference between them.",
      "range": {
        "startLine": 28,
        "startChar": 17,
        "endLine": 28,
        "endChar": 44
      },
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e7af620_b4e2e5ca",
        "filename": "java/com/google/gerrit/server/project/validator/LabelConfigValidatorChecker.java",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-06-07T12:28:42Z",
      "side": 1,
      "message": "I\u0027m not sure whether Config is the right representation of the project configuration for all project config validators. I think in most cases it would be better to use ProjectConfig instead. ProjectConfig already has logic to parse project.config and hence is more comfortable to use than the plain JGit Config API.\n\nFYI the existing LabelConfigValidator is using Config rather than ProjectConfig, only because it checks deprecated fields that will be dropped from the ProjectConfig API soon and we still want to keep this validator after the deprecated fields and their API has been removed from ProjectConfig.",
      "range": {
        "startLine": 39,
        "startChar": 24,
        "endLine": 39,
        "endChar": 68
      },
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7a6948a_fd512f8d",
        "filename": "java/com/google/gerrit/server/project/validator/LabelConfigValidatorChecker.java",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-06-07T12:28:42Z",
      "side": 1,
      "message": "If this is the only method that stays in this interface (as commented below I don\u0027t think flagChangedOrNewlySet should be part of this API) then this interface has nothing specific about label config validation. Hence I would suggest naming this interface \"ProjectConfigValidator\" (only if we can find another name for the existing ProjectConfigValidator class) or similar.",
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b59521e1_79325e5c",
        "filename": "java/com/google/gerrit/server/project/validator/LabelConfigValidatorChecker.java",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2022-06-07T12:28:42Z",
      "side": 1,
      "message": "It doesn\u0027t look right to me to have this method as part of the interface:\n\n1. It\u0027s never called by users of LabelConfigValidatorChecker, but only from the implementations, hence it doesn\u0027t need to be part of the public API.\n\n2. A default method suggests that there may be reason to override it, but this method should never be overridden by implementations (it should rather be a final, than a default method).\n\nMaybe have a AbstractLabelConfigValidator class with this method that is extended by all label config validators.",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 56,
        "endChar": 3
      },
      "revId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Style",
        "description": {
          "value": "Code has correct style and format"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Style\u003dMAX AND -label:Code-Style\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Style=MAX AND -label:Code-Style=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Style=MAX"],"failingAtoms":["label:Code-Style=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Library-Compliance",
        "description": {
          "value": "Changes to specific library/metadata files require additional approval"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Library-Compliance\u003dMAX,user\u003dnon_uploader AND -label:Library-Compliance\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config AND (file:\"^lib/.*\" OR file:\"^WORKSPACE$\" OR file:\"^.gitmodule$\" OR file:\"^tools/deps.bzl$\")"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config","file:\"^lib/.*\"","file:\"^WORKSPACE$\"","file:\"^.gitmodule$\"","file:\"^tools/deps.bzl$\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Library-Compliance=MAX,user=non_uploader AND -label:Library-Compliance=MIN"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Release-Notes",
        "description": {
          "value": "Changes must include a \u0027Release-Notes\u0027 footer with a single sentence to mention in the release notes. Changes not worth mentioning in the release notes should put \u0027Release-Notes: skip\u0027"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "hasfooter:\"Release-Notes\""
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"hasfooter:\"Release-Notes\""},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["hasfooter:\"Release-Notes\""],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f66f2b747313a4db8d2bca756d51008e79688da4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}