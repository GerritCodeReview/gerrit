{
  "comments": [
    {
      "key": {
        "uuid": "7688fb7b_3e231980",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-09-18T15:24:23Z",
      "side": 1,
      "message": "This is good info to know, thanks!\n\nIf concurrency on the same repo is indeed the problem, then it would likely be better to use an approach which grabs a single slice per repo, ordered starting with the largest repos first.",
      "revId": "f768f8fc1ccf5a1709223023a9648dcd1abf1a55",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70df4309_6d6d0544",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2020-09-28T23:29:45Z",
      "side": 1,
      "message": "Then we are back to migrate large repositories single threaded since the small ones will finish quickly. In my tests I could run something like 20 threads with 3 large repositories and all the other ones were smaller. After a while all but these 3 finished migration. This means I was still running 5-10 threads on the remaining 3 large repositories.",
      "parentUuid": "7688fb7b_3e231980",
      "revId": "f768f8fc1ccf5a1709223023a9648dcd1abf1a55",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9a7a52c_8626332b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-09-29T00:26:33Z",
      "side": 1,
      "message": "To clarify, I didn\u0027t meant to restrict the large repos to 1 thread permanently, I meant only until there are no other repos to grab slices from. However, I realize that this could still be problematic and that it might be better to institute a cap that is larger then 1 (maybe 3-5) threads per repo during the period when there are still other repos to work on. This would come closer to the random approach but likely a bit better. Particularly for us because we have a bunch of larger repos (likely not just 3). My concern is that randomizing things does not force the large repos to be worked on from the start and thus could delay things more than an approach that ensures that the large repos are worked a certain minimum amount right from the start.",
      "parentUuid": "70df4309_6d6d0544",
      "revId": "f768f8fc1ccf5a1709223023a9648dcd1abf1a55",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287b6726_5c3b301e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2020-09-29T07:42:28Z",
      "side": 1,
      "message": "Randomizing worked for our two sites since the large repositories produce a lot of slices so that they had slices being processed all the time during the complete migration. I don\u0027t have a lot of time to further improve notedb migration and it works for our sites, hence I propose to accept this change as an improvement. Further improvements potentially replacing randomizing slices can be implemented in follow-up changes.",
      "parentUuid": "a9a7a52c_8626332b",
      "revId": "f768f8fc1ccf5a1709223023a9648dcd1abf1a55",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb19b35_8502c413",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 13,
      "author": {
        "id": 1003883
      },
      "writtenOn": "2020-09-29T19:48:03Z",
      "side": 1,
      "message": "I am grateful for the knowledge your team has provided by creating these changes, and I understand that you don\u0027t want to spend a ton of time on them since they have already done their job for you. Until proven differently with good data, we may need to consider these to be customizations that were appropriate for you and potentially not appropriate for all. I would not push to get them merged too soon without being confident that they will not hurt others. They are here for others to use if others are having issues with the tip code. If others do use them, they may be able to provide more feedback on them, we plan to.\n\nWe are working on benchmarking the changes in this series and do plan to help get them merged. As we test them, we will provide feedback with performance numbers. I hope that we can help provide a good understanding of the impacts of these changes across many different repository configurations before merging them as they could have downsides. If there are downsides, we want to know them and have them at least documented, and potentially mitigated with switches to turn the features off. It may take a while for us to do this work, as we are running into many issues already before this even (we already are pursing one on the mailing list, the issue about ref creations in jgit being very slow). It may makes sense to work through or around some of those types of issues before these changes can be given a fair evaluation.",
      "parentUuid": "287b6726_5c3b301e",
      "revId": "f768f8fc1ccf5a1709223023a9648dcd1abf1a55",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}