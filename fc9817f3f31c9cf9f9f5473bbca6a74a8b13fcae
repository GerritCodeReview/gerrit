{
  "comments": [
    {
      "key": {
        "uuid": "eaae426e_15645531",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2019-03-24T00:00:39Z",
      "side": 1,
      "message": "When will this be done (Adapt the Quota plugin to use this new extension point)?\n\nIm finding that the plugin is not rate limiting in 2.16.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 76,
        "endChar": 18
      },
      "revId": "fc9817f3f31c9cf9f9f5473bbca6a74a8b13fcae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2e24935_fd1245b4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1026112
      },
      "writtenOn": "2019-03-25T07:47:52Z",
      "side": 1,
      "message": "Hopefully soon, though not by me.\n\n\nI was hoping that the people who use that plugin can adapt it (we don\u0027t unfortunately). We actually wanted to get this done as a group effort at the last hackathon but then the 2.16 release required more resources.\n\nAre you using the plugin and want to help with the migration?",
      "parentUuid": "eaae426e_15645531",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 76,
        "endChar": 18
      },
      "revId": "fc9817f3f31c9cf9f9f5473bbca6a74a8b13fcae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba8fb073_f765105f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 76,
      "author": {
        "id": 1029953
      },
      "writtenOn": "2019-03-25T10:46:12Z",
      "side": 1,
      "message": "After some recent issues at the WMF, I think we are going to install the plugin. At the time I wrote that comment, the plugin was not working and so I thought using the core functions would work. I then figured out the fixes so the plugin works now.",
      "parentUuid": "c2e24935_fd1245b4",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 76,
        "endChar": 18
      },
      "revId": "fc9817f3f31c9cf9f9f5473bbca6a74a8b13fcae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a890d5b_6d067592",
        "filename": "java/com/google/gerrit/server/quota/QuotaEnforcer.java",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2019-05-15T08:45:27Z",
      "side": 1,
      "message": "both requestToken and dryRun methods assume that the requested tokens number is known upfront which is OK in many cases but not for the way how the size quote gets enforced:\n1. ReceiveCommits calls ReceivePackInitializer implementations to provide the max available size\n2. Quota plugin implements ReceivePackInitializer and calls org.eclipse.jgit.transport.BaseReceivePack.setMaxPackSizeLimit(long) on provided ReceivePack instance (which sets the available tokens)\n3. while an object is being retrieved from the client its size gets checked against available space limit and in case it is bigger error gets\nreturned to the client\n\nThere are 2 options that could be done to solve the problem:\n1. extend interface with another method e.g.\n\n  requestAvailableTokens(String quotaGroup, QuotaRequestContext ctx)\n\n2. extend JGit with extension point that can hook into the PackParser so that requestTokens(...) could be called from the hook",
      "revId": "fc9817f3f31c9cf9f9f5473bbca6a74a8b13fcae",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}