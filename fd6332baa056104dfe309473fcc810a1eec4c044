{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b5f8a6ff_b16c19cb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-06T15:28:45Z",
      "side": 1,
      "message": "I think it\u0027s good as you did it. Instead of doing injections into the Predicate classes we have the Arguments class in ChangeQueryBuilder and then we just pass the args into the Predicate class if any of the args is needed there.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 37
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cab20d32_f4e72017",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-06T12:02:40Z",
      "side": 1,
      "message": "Sasa for SAP concerns.",
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbdf7727_3ca1962e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-08T01:06:59Z",
      "side": 1,
      "message": "@Jacek could you evaluate the performance of this change *after* having applied your fix to the caching of All-Users\u0027s refs?",
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bad295a7_c0a52906",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 455,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-08T22:46:09Z",
      "side": 1,
      "message": "for future: probably can clean up some of the comments in this file like this where it implies there\u0027s a non-NoteDb variant.",
      "range": {
        "startLine": 455,
        "startChar": 8,
        "endLine": 455,
        "endChar": 75
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "310d01f4_22fd1844",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 478,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-06T12:02:14Z",
      "side": 1,
      "message": "AFAIK, Youssef wrote a schema migration to fix these, those the zombies shouldn\u0027t concern anyone anymore.",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 478,
        "endChar": 62
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c93b9da_cf7c1a5f",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 478,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-06T15:28:45Z",
      "side": 1,
      "message": "Must be https://gerrit-review.googlesource.com/c/gerrit/+/252282",
      "parentUuid": "310d01f4_22fd1844",
      "range": {
        "startLine": 477,
        "startChar": 0,
        "endLine": 478,
        "endChar": 62
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d97063f_1c133d64",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-06T12:02:14Z",
      "side": 1,
      "message": "I know we did an analysis that shows that this is not an issue for googlesource deployments, but it would be interesting to know from folks at SAP, QC and Gerritforge how much time this operation takes for them, as they are typically on NFS with packed/loose ref storage. They also tend to have a single host for all of their users, ie. more users and more drafts.\n\nIf this turns out to be an issue for them, we\u0027d want to know well before we cut the next stable release, to be able to setup a schema migration.",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "756eb2f8_1901e5ec",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-08T22:46:09Z",
      "side": 1,
      "message": "\u003e I know we did an analysis that shows that this is not an issue for googlesource deployments, but it would be interesting to know from folks at SAP, QC and Gerritforge how much time this operation takes for them, as they are typically on NFS with packed/loose ref storage. They also tend to have a single host for all of their users, ie. more users and more drafts.\n\nI think there\u0027s no prefix search optimization possible with ref files-backend (non-reftable), so this is going to be relatively slow on a site with many users. It\u0027s going to be even slower if using NFS and setting core.trustFolderStat\u003dfalse since then packed-refs will be fully re-read every time this method is called.\n\nIf I\u0027m reading the code right, it should be just as slow as getDraftRefs(), so depending on where that\u0027s used, there could be some real data available from a site like gerrithub.io. @Luca?\n\n\u003e \n\u003e If this turns out to be an issue for them, we\u0027d want to know well before we cut the next stable release, to be able to setup a schema migration.\n\nNot following this. How would a schema migration help?",
      "parentUuid": "4d97063f_1c133d64",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b94a33d1_afb0bea7",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-08T22:51:12Z",
      "side": 1,
      "message": "\u003e I think there\u0027s no prefix search optimization possible with ref files-backend (non-reftable), so this is going to be relatively slow on a site with many users. It\u0027s going to be even slower if using NFS and setting core.trustFolderStat\u003dfalse since then packed-refs will be fully re-read every time this method is called.\n\nThat is *very true*: reading refs with open-source JGit (pre-reftable) is a real pain and is very slow.\n\n\u003e If I\u0027m reading the code right, it should be just as slow as getDraftRefs(), so depending on where that\u0027s used, there could be some real data available from a site like gerrithub.io. @Luca?\n\nJacek is gathering some data and will give an update on the timings.",
      "parentUuid": "756eb2f8_1901e5ec",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab6f798_17794ad4",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-09-09T13:28:19Z",
      "side": 1,
      "message": "Thanks!\nI will wait for Jacek\u0027s input before I continue working on this change, then.",
      "parentUuid": "b94a33d1_afb0bea7",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01e078e4_7485d757",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-09T13:35:14Z",
      "side": 1,
      "message": "\u003e\u003e If this turns out to be an issue for them, we\u0027d want to know well before we cut the next stable release, to be able to setup a schema migration.\n\n\u003e Not following this. How would a schema migration help?\n\nif you invert the ordering, you can do a prefix scan for \"refs/users/${USERID}\" to find drafts for a single user. In the files backend, this only has to do a read everything under \"refs/users/${USERID}/*\" from the filesystem. That will make it O(#drafts-per-user) rather than O(#users * #drafts-per-user).\n\nif you\u0027re on NFS, that might still be slow, but an NFS filer is like ~1ms per operation, so in total ~25ms  might still be attainable?",
      "parentUuid": "eab6f798_17794ad4",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1971feb9_80000b20",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-09T13:42:52Z",
      "side": 1,
      "message": "come to think of it, to know that the refs exist, you only have to do opendir + readdir + closedir, but I\u0027m not sure if JGit lets you do that; it might want to try reading the files as well to get the SHA1s.",
      "parentUuid": "01e078e4_7485d757",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca4e27c4_f47785b6",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T15:31:26Z",
      "side": 1,
      "message": "Ok, so the schema migration would rename the refs from \u0027refs/draft-comments/\u003csharded change\u003e/\u003caccount-id\u003e\u0027 to something like \u0027refs/\u003caccount-id\u003e/draft-comments/\u003csharded change\u003e\u0027?\n\nUnfortunately I don\u0027t think that helps because it still relies on a prefix search. Unless I\u0027m misremembering the JGit code, it has no optimizations for prefix searching with the files backend, and while it could have tricks to speed things up with loose refs, I think you\u0027re missing the case where the refs are packed. You\u0027re not looking at only files in a subdir then, you\u0027re also opening and reading the entire packed-refs file. That\u0027s about 12MB for us and I suspect larger for sites with more users/drafts. I think that\u0027s the real cost/overhead here for files backend.",
      "parentUuid": "1971feb9_80000b20",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c61cf2b_20012bb5",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-09T16:00:45Z",
      "side": 1,
      "message": "\u003eyou\u0027re also opening and reading the entire packed-refs file. \n\n(spends some time reading JGit and CGit)  \n\n\u0026@%\u0026@% I hate the loose/packed packed ref DB.\n\n\u003e You\u0027re not looking at only files in a subdir then, you\u0027re also opening and reading the entire packed-refs file. That\u0027s about 12MB for us and I suspect larger for sites with more users/drafts. I think that\u0027s the real cost/overhead here for files backend.\n\nthe packed refs is cached in memory, see here:\n\nhttps://gerrit.googlesource.com/jgit/+/1cbfea9ece03b40669377a7f858218f6994562ea/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java#144\n\nIt would only get overwritten for transactions (which don\u0027t happen often), I think?\n\nStill, it looks like JGit tries to be efficient by caching the file in memory as long as it doesn\u0027t change. I thought we had a RepositoryCache to avoid opening and closing repositories all the time? That is also why I don\u0027t quite understand why it makes sense to build a caching layer on top of the repository (which is what Jacek is doing.)\n\n(CGit mmaps the file, so it can find place to start reading using binary search, avoiding the reads to begin with)",
      "parentUuid": "ca4e27c4_f47785b6",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f7b1b6b_0fe67d25",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-09T16:05:01Z",
      "side": 1,
      "message": "\u003e if using NFS and setting core.trustFolderStat\u003dfalse since then packed-refs will be fully re-read every time this \n\nI missed this bit earlier. Damn.",
      "parentUuid": "8c61cf2b_20012bb5",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ad67bd6_aaf60609",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T16:08:01Z",
      "side": 1,
      "message": "\u003e \u003e you\u0027re also opening and reading the entire packed-refs file. \n\u003e \n\u003e (spends some time reading JGit and CGit)  \n\u003e \n\u003e \u0026@%\u0026@% I hate the loose/packed packed ref DB.\n\nThe feeling is mutual. I\u0027m very excited about your git.git reftable series making progress ❤️\n\nAnd thank you for digging into the code more and confirming my memory of it.\n\n\u003e \n\u003e \u003e You\u0027re not looking at only files in a subdir then, you\u0027re also opening and reading the entire packed-refs file. That\u0027s about 12MB for us and I suspect larger for sites with more users/drafts. I think that\u0027s the real cost/overhead here for files backend.\n\u003e \n\u003e the packed refs is cached in memory, see here:\n\u003e \n\u003e https://gerrit.googlesource.com/jgit/+/1cbfea9ece03b40669377a7f858218f6994562ea/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java#144\n\u003e \n\u003e It would only get overwritten for transactions (which don\u0027t happen often), I think?\n\nEvery draft comment that is saved writes a loose ref. I think Luca is packing loose refs every 15 minutes, so it\u0027s being refreshed at least that often for him.\n\nAlso... some folks on NFS are using trustFolderStat\u003dfalse because directory attributes get aggressively cached on NFS. The impact on packedRefs caching can be seen here:\n\nhttps://gerrit.googlesource.com/jgit/+/1cbfea9ece03b40669377a7f858218f6994562ea/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java#882\n\nIt just re-reads the whole file every time. 😞\n\n\u003e \n\u003e Still, it looks like JGit tries to be efficient by caching the file in memory as long as it doesn\u0027t change. I thought we had a RepositoryCache to avoid opening and closing repositories all the time? That is also why I don\u0027t quite understand why it makes sense to build a caching layer on top of the repository (which is what Jacek is doing.)\n\nI don\u0027t know the current state of expected behavior for RepositoryCache. At one point I think it was caching too much, and then too little. @Matthias might be able to share more.",
      "parentUuid": "8c61cf2b_20012bb5",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f757910e_a7c8e96f",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-09T16:43:44Z",
      "side": 1,
      "message": "so I think you\u0027re right, but at the same time, have you ever tested running a NoteDb powered gerrit on this config? Because exactRef() triggers a read of packed-refs too\n\nhttps://gerrit.googlesource.com/jgit/+/1cbfea9ece03b40669377a7f858218f6994562ea/org.eclipse.jgit/src/org/eclipse/jgit/internal/storage/file/RefDirectory.java#284\n\nand we call exactRef all over the place for notedb.",
      "parentUuid": "6ad67bd6_aaf60609",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8da46767_88b8baac",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-09-09T18:57:47Z",
      "side": 1,
      "message": "Answering to @Han-Wen remark:\n\u003e Still, it looks like JGit tries to be efficient by caching the file in memory as long as it doesn\u0027t change. \n\nThe problem is what you mean by \"efficient\": resolving the call in msec? micros? nanos?\n\nWhen you are on NFS and have set trustFolderStat \u003d false, JGit does a filesystem access (*at least* msec if not sometimes sec-level latency) to check if the file has changed. That is never going to be a \"caching\" behaviour, unfortunately.\n\nWe cannot just rely on JGit being fast in reading refs, because that isn\u0027t the case, even though it tries to cache them in memory (with one filesystem access per call).",
      "parentUuid": "f757910e_a7c8e96f",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b17f2f36_da01e825",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1002666
      },
      "writtenOn": "2021-09-09T19:20:44Z",
      "side": 1,
      "message": "I agree those are going to be similar. I know the smaller host we upgraded from 2.11-\u003e3.2 earlier this year (currently) uses trustFolderStat\u003dfalse and had performance regressions, at least some of which are still open issues. This has likely just been a problem for a while, but it\u0027s probably showing up in the All-Users case because the Gerrit design produces many refs in that repo. I\u0027m surprised there wasn\u0027t more discussion/concern back in 2.15 when this happened, but maybe caches there covered it up?\n\nIn general, JGit could certainly be smarter about how it deals with packed-refs (for example, leveraging knowledge of sort order to search without reading the whole file). For NFS specifically, I had some patches a couple years ago that tried to force directory attributes to refresh so we could trust them instead of re-reading packed-refs, but I stopped progress due to some other priorities.\n\nAs excited as I am about reftable, I\u0027m also not sure it solves the problem. Directory attributes are still cached on NFS and the largest reftable file likely won\u0027t be any smaller on disk than the current packed-refs file. Does that code have tricks to avoid reading the whole file?\n\nI\u0027m hoping to start some very intensive performance QA in about 6 months and I\u0027m expecting to find problems in this general area. It\u0027s also possible we\u0027ll have to solve some of those sooner to get our schema migration + notedb migration + offline reindex time down under 4 hours. Thinking of that, a new schema migration that renames 1000s of refs is not going to be very quick. Avoiding that would be preferred.",
      "parentUuid": "f757910e_a7c8e96f",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c246359_85ce19d4",
        "filename": "java/com/google/gerrit/server/CommentsUtil.java",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 1024147
      },
      "writtenOn": "2021-09-13T13:05:24Z",
      "side": 1,
      "message": "\u003e [reftable] Does that code have tricks to avoid reading the whole file?\n\nreftable is an indexed format. It needs log_{blocksize}(#refs) reads to read the final data; you can tweak the blocksize to reduce the number of accesses if reads are expensive. It never reads the entire file, except when you iterate over the entire ref space.\n\n\u003e In general, JGit could certainly be smarter about how it deals with packed-refs (for example, leveraging knowledge of sort order to search without reading the whole file). \n\nAFAICT, Java supports mmap\u0027d files, (https://howtodoinjava.com/java/nio/memory-mapped-files-mappedbytebuffer/), so you could use the exact same trick used in CGit to avoid reading the entire file. Would still be good to see how much time the file reading costs vs. doing the directory reads, though.\n\n\u003eThe problem is what you mean by \"efficient\": resolving the call in msec? micros? nanos?\n\u003e\n\u003eWhen you are on NFS and have set trustFolderStat \u003d false, JGit does a filesystem access (*at least* msec if not sometimes sec-level latency) to check if the file has changed. That is never going to be a \"caching\" behaviour, unfortunately.\n\nJGit does this trickery this to account for other processes that write into the same storage. \n\nI think Jacek is trying to introduce a cache that is triggered by ref updates from inside Gerrit, but that only works if Gerrit is the only process writing into repository. If you know that to be the case, I think you could simply also stop overriding trustFolderStat for that repository? I am assuming that in a single-writer (ie. Gerrit) scenario, the same process gets a consistent result from reading back its own writes.",
      "parentUuid": "b17f2f36_da01e825",
      "range": {
        "startLine": 494,
        "startChar": 45,
        "endLine": 495,
        "endChar": 89
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bed776a_48c0f847",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 6
      },
      "lineNbr": 1068,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-06T15:28:45Z",
      "side": 1,
      "message": "[optional] I think for other predicates we always just pass in the whole args, you may do here the same.",
      "range": {
        "startLine": 1068,
        "startChar": 36,
        "endLine": 1068,
        "endChar": 53
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22f6c531_697a545f",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 6
      },
      "lineNbr": 1068,
      "author": {
        "id": 1085183
      },
      "writtenOn": "2021-09-06T16:15:22Z",
      "side": 1,
      "message": "This method is used in 2 places which have different args, so that doesn\u0027t work.",
      "parentUuid": "9bed776a_48c0f847",
      "range": {
        "startLine": 1068,
        "startChar": 36,
        "endLine": 1068,
        "endChar": 53
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e527bebf_c305cf71",
        "filename": "java/com/google/gerrit/server/query/change/ChangeQueryBuilder.java",
        "patchSetId": 6
      },
      "lineNbr": 1068,
      "author": {
        "id": 1003935
      },
      "writtenOn": "2021-09-07T06:23:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "22f6c531_697a545f",
      "range": {
        "startLine": 1068,
        "startChar": 36,
        "endLine": 1068,
        "endChar": 53
      },
      "revId": "fd6332baa056104dfe309473fcc810a1eec4c044",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}