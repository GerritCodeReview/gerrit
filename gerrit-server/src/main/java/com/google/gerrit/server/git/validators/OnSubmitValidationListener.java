// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.google.gerrit.server.git.validators;

import com.google.gerrit.extensions.annotations.ExtensionPoint;
import com.google.gerrit.reviewdb.client.Project;
import com.google.gerrit.server.validators.ValidationException;

import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevWalk;

/**
 * Listener to validate a branch tip update when a change is being submitted by
 * submit strategy.
 *
 * As submit strategies may generate new commits (e.g. Cherry Pick), this
 * listener allows validation of resulting new commit before branch is updated.
 *
 * If you only care about validating the change being submitted and not the
 * resulting new commit, consider using {@link MergeValidationListener} instead.
 */
@ExtensionPoint
public interface OnSubmitValidationListener {
  public class Arguments {
    private Project.NameKey project;
    private Repository repository;
    private String branch;
    private ObjectId currentTip;
    private ObjectId newTip;

    public Arguments(Project.NameKey project, Repository repository,
        String branch, ObjectId currentTip, ObjectId newTip) {
      this.project = project;
      this.repository = repository;
      this.branch = branch;
      this.currentTip = currentTip;
      this.newTip = newTip;
    }

    public Project.NameKey getProject() {
      return project;
    }

    public Repository getRepository() {
      return repository;
    }

    public RevWalk createRevWalk() {
      return new RevWalk(repository);
    }

    /**
     * Returns current tip of the branch, {@link ObjectId#zeroId()} indicates
     * branch is being created.
     */
    public ObjectId getCurrentTip() {
      return currentTip;
    }

    public ObjectId getNewTip() {
      return newTip;
    }

    public String getBranchName() {
      return branch;
    }
  }

  /**
   * Called after new commit (if any) is generated by submit strategy and before
   * branch is updated.
   *
   * If exception is thrown, change submission is aborted.
   */
  void preBranchUpdate(Arguments args) throws ValidationException;
}
