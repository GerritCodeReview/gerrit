// Copyright (C) 2015 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.gerrit.server.restapi.change;

<<<<<<< HEAD
import com.google.common.collect.ImmutableList;
=======
import static java.util.stream.Collectors.toList;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.gerrit.entities.ChangeMessage;
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
import com.google.gerrit.entities.Comment;
import com.google.gerrit.extensions.common.CommentInfo;
import com.google.gerrit.extensions.restapi.AuthException;
import com.google.gerrit.extensions.restapi.Response;
import com.google.gerrit.extensions.restapi.RestReadView;
<<<<<<< HEAD
=======
import com.google.gerrit.server.ChangeMessagesUtil;
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
import com.google.gerrit.server.CommentsUtil;
import com.google.gerrit.server.change.ChangeResource;
import com.google.gerrit.server.permissions.PermissionBackendException;
import com.google.gerrit.server.query.change.ChangeData;
import com.google.gerrit.server.restapi.change.CommentJson.CommentFormatter;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.Singleton;
<<<<<<< HEAD
import java.util.List;
import java.util.Map;

@Singleton
public class ListChangeComments implements RestReadView<ChangeResource> {
=======
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Singleton
public class ListChangeComments implements RestReadView<ChangeResource> {
  private final ChangeMessagesUtil changeMessagesUtil;
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
  private final ChangeData.Factory changeDataFactory;
  private final Provider<CommentJson> commentJson;
  private final CommentsUtil commentsUtil;

  @Inject
  ListChangeComments(
      ChangeData.Factory changeDataFactory,
      Provider<CommentJson> commentJson,
<<<<<<< HEAD
      CommentsUtil commentsUtil) {
    this.changeDataFactory = changeDataFactory;
    this.commentJson = commentJson;
    this.commentsUtil = commentsUtil;
=======
      CommentsUtil commentsUtil,
      ChangeMessagesUtil changeMessagesUtil) {
    this.changeDataFactory = changeDataFactory;
    this.commentJson = commentJson;
    this.commentsUtil = commentsUtil;
    this.changeMessagesUtil = changeMessagesUtil;
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
  }

  @Override
  public Response<Map<String, List<CommentInfo>>> apply(ChangeResource rsrc)
      throws AuthException, PermissionBackendException {
    if (!rsrc.getUser().isIdentifiedUser()) {
      throw new AuthException("Authentication required");
    }
<<<<<<< HEAD
    return Response.ok(getAsMap(listComments(rsrc)));
=======
    return Response.ok(getAsMap(listComments(rsrc), rsrc));
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
  }

  public List<CommentInfo> getComments(ChangeResource rsrc)
      throws AuthException, PermissionBackendException {
    if (!rsrc.getUser().isIdentifiedUser()) {
      throw new AuthException("Authentication required");
    }
<<<<<<< HEAD
    return getAsList(listComments(rsrc));
=======
    return getAsList(listComments(rsrc), rsrc);
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
  }

  private Iterable<Comment> listComments(ChangeResource rsrc) {
    ChangeData cd = changeDataFactory.create(rsrc.getNotes());
    return commentsUtil.publishedByChange(cd.notes());
  }

<<<<<<< HEAD
  private ImmutableList<CommentInfo> getAsList(Iterable<Comment> comments)
      throws PermissionBackendException {
    return getCommentFormatter().formatAsList(comments);
  }

  private Map<String, List<CommentInfo>> getAsMap(Iterable<Comment> comments)
      throws PermissionBackendException {
    return getCommentFormatter().format(comments);
=======
  private ImmutableList<CommentInfo> getAsList(Iterable<Comment> comments, ChangeResource rsrc)
      throws PermissionBackendException {
    ImmutableList<CommentInfo> commentInfos = getCommentFormatter().formatAsList(comments);
    List<ChangeMessage> changeMessages =
        Lists.newArrayList(changeMessagesUtil.byChange(rsrc.getNotes()));
    linkCommentsToChangeMessages(commentInfos.stream().collect(toList()), changeMessages);
    return commentInfos;
  }

  private Map<String, List<CommentInfo>> getAsMap(Iterable<Comment> comments, ChangeResource rsrc)
      throws PermissionBackendException {
    Map<String, List<CommentInfo>> commentInfosMap = getCommentFormatter().format(comments);
    List<CommentInfo> commentInfos =
        commentInfosMap.values().stream().flatMap(List::stream).collect(toList());
    List<ChangeMessage> changeMessages =
        Lists.newArrayList(changeMessagesUtil.byChange(rsrc.getNotes()));
    linkCommentsToChangeMessages(commentInfos, changeMessages);
    return commentInfosMap;
  }

  /**
   * This method populates the "changeMessageId" field of the comments parameter based on timestamp
   * matching. The comments parameter will be modified.
   *
   * <p>Each comment will be matched to the nearest next change message in timestamp
   *
   * @param comments the list of comments
   * @param changeMessages list of change messages
   */
  static void linkCommentsToChangeMessages(
      List<CommentInfo> comments, List<ChangeMessage> changeMessages) {
    ArrayList<ChangeMessage> mutableChangeMessages =
        changeMessages.stream()
            .sorted(Comparator.comparing(ChangeMessage::getWrittenOn))
            .collect(Collectors.toCollection(ArrayList::new));

    ArrayList<CommentInfo> mutableCommentInfos =
        comments.stream()
            .sorted(Comparator.comparing(c -> c.updated))
            .collect(Collectors.toCollection(ArrayList::new));

    int cmItr = 0;
    for (CommentInfo comment : mutableCommentInfos) {
      // keep advancing the change message pointer until we associate the comment to the next change
      // message in timestamp
      while (cmItr < mutableChangeMessages.size()
          && comment.updated.after(mutableChangeMessages.get(cmItr).getWrittenOn())) {
        cmItr += 1;
      }
      if (cmItr < changeMessages.size()) {
        comment.changeMessageId = mutableChangeMessages.get(cmItr).getKey().uuid();
      }
    }
>>>>>>> 9393a7743b... Move linking comments with change messages to Gerrit's backend
  }

  private CommentFormatter getCommentFormatter() {
    return commentJson.get().setFillAccounts(true).setFillPatchSet(true).newCommentFormatter();
  }
}
