// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.google.gerrit.git;

import static com.google.gerrit.git.DelegatedMethodTestingSupport.assertMethodIsDelegated;
import static com.google.gerrit.git.DelegatedMethodTestingSupport.methodsForDelegationTest;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
import static org.easymock.EasyMock.reset;
import static org.powermock.api.easymock.PowerMock.createMock;

import java.lang.reflect.Method;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

import org.eclipse.jgit.lib.RefDatabase;
import org.eclipse.jgit.lib.Repository;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import com.google.common.collect.ImmutableSet;
import com.google.gerrit.server.git.PermissionAwareRefDatabase;
import com.google.gerrit.server.permissions.PermissionBackend;


@RunWith(Parameterized.class)
public class PermissionAwareRefDatabaseMethodDelegationTest {
  private Repository repository;
  private RefDatabase refDb;
  private PermissionBackend.ForProject forProject;
  private PermissionAwareRefDatabase permissionAwareRefDb;

  private final Method repositoryMethod;
  // Only used to make the test method name generated by Parameterized more readable
  @SuppressWarnings("unused")
  private final String repositoryMethodName;
  
  private static Set<String> methodsWithDedicatedTest = ImmutableSet.of(
	        "newUpdate",
	        "newRename",
	        "toString",
	        "exactRef",
	        "firstExactRef",
	        "getRefs",
	        "getRefsByPrefix",
	        "getAdditionalRefs");
  
  @Parameterized.Parameters(name = "{1} is delegated")
  public static Collection<Object[]> data() {
    return methodsForDelegationTest(RefDatabase.class)
    		.filter(method -> !methodsWithDedicatedTest.contains(method.getName()))
    		.map(method -> new Object[] {method, method.getName()})
        .collect(Collectors.toList());
  }
  
  public PermissionAwareRefDatabaseMethodDelegationTest(Method repositoryMethod, String repositoryMethodName) {
	  this.repositoryMethod = repositoryMethod;
	  this.repositoryMethodName = repositoryMethodName;
  }
  
  @Before
  public void setUp() {
    repository = createMock(Repository.class);
    refDb = createMock(RefDatabase.class);
    forProject = createMock(PermissionBackend.ForProject.class);

    replay(repository, refDb, forProject);

    permissionAwareRefDb = new PermissionAwareRefDatabase(repository, forProject);

    reset(repository, refDb, forProject);
  }

  @Test
  public void isDelegated() throws Exception {
    assertMethodIsDelegated( 
        repositoryMethod, permissionAwareRefDb, refDb, new Object[] {repository, forProject}, 
        		() -> expect(repository.getRefDatabase()).andReturn(refDb).anyTimes()
      );
  }
}
