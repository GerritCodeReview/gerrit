From 55179cd8151b06706b90e89df62cba3dbeac5c53 Mon Sep 17 00:00:00 2001
From: dpb <dpb@google.com>
Date: Wed, 13 Jun 2018 10:14:39 -0700
Subject: [PATCH 1/4] Add a static overrides() method to MoreElements that uses
 ExplicitOverrides.

RELNOTES=Add an `overrides()` method to `MoreElements` that is more consistent between javac and ECJ.

-------------
Created by MOE: https://github.com/google/moe
MOE_MIGRATED_REVID=200410431
---
 .../java/com/google/auto/common/MoreElements.java  | 27 ++++++++++++++++++----
 1 file changed, 22 insertions(+), 5 deletions(-)

diff --git a/common/src/main/java/com/google/auto/common/MoreElements.java b/common/src/main/java/com/google/auto/common/MoreElements.java
index 8ae9fca..288e411 100644
--- a/common/src/main/java/com/google/auto/common/MoreElements.java
+++ b/common/src/main/java/com/google/auto/common/MoreElements.java
@@ -18,6 +18,7 @@ package com.google.auto.common;
 
 import static javax.lang.model.element.ElementKind.PACKAGE;
 
+import com.google.auto.common.Overrides.ExplicitOverrides;
 import com.google.common.annotations.Beta;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
@@ -299,11 +300,27 @@ public final class MoreElements {
    */
   public static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(
       TypeElement type, Types typeUtils, Elements elementUtils) {
-    // TODO(emcmanus): detect if the Types and Elements are the javac ones, and use
-    //   NativeOverrides if so. We may need to adjust the logic further to avoid the bug
-    //   tested for by MoreElementsTest.getLocalAndInheritedMethods_DaggerBug.
-    Overrides overrides = new Overrides.ExplicitOverrides(typeUtils);
-    return getLocalAndInheritedMethods(type, overrides);
+    return getLocalAndInheritedMethods(type, new ExplicitOverrides(typeUtils));
+  }
+
+  /**
+   * Tests whether one method, as a member of a given type, overrides another method.
+   *
+   * <p>This method does the same thing as {@link Elements#overrides(ExecutableElement,
+   * ExecutableElement, TypeElement)}, but in a way that is more consistent between compilers, in
+   * particular between javac and ecj (the Eclipse compiler).
+   *
+   * @param overrider the first method, possible overrider
+   * @param overridden the second method, possibly being overridden
+   * @param type the type of which the first method is a member
+   * @return {@code true} if and only if the first method overrides the second
+   */
+  public static boolean overrides(
+      ExecutableElement overrider,
+      ExecutableElement overridden,
+      TypeElement type,
+      Types typeUtils) {
+    return new ExplicitOverrides(typeUtils).overrides(overrider, overridden, type);
   }
 
   private static ImmutableSet<ExecutableElement> getLocalAndInheritedMethods(
-- 
2.16.3

