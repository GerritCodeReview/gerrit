// Copyright (C) 2020 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import * as path from "path";
import * as fs from "fs";
import {PackageInfo} from "./package-license-info";
import {fail, readMultilineParamFile} from "./utils";
import {LicenseMapGenerator} from "./licenses-map";
import {SharedLicensesProvider} from "./shared-licenses-provider";

interface LicenseMapCommandLineArgs {
  generatorParams: LicenseMapGeneratorParameters;
  outputJsonPath: string;
}

export interface LicenseMapGeneratorParameters {
  sharedLicensesFiles: string[];
  nodeModulesFiles: string[];
  packages: PackageInfo[];
}

function parseArguments(argv: string[]): LicenseMapCommandLineArgs {
  if(argv.length < 6) {
    fail("Invalid command line parameters\n" +
        "\tUsages:\n\tnode license-map-generator config-location.js node-modules-files.txt shared-licenses.txt json-output.json");
  }
  //It is expected, that config is compiled from .ts file end has default export.
  //Typescript compiler checks that .ts file matches PackageInfo interface, so no additional
  //validations are needed
  const packages: PackageInfo[] = require(path.join(process.cwd(), argv[2])).default;
  const nodeModulesFiles = readMultilineParamFile(argv[3]);
  const sharedLicensesFiles = readMultilineParamFile(argv[4]);

  return {
    generatorParams: {
      packages,
      nodeModulesFiles,
      sharedLicensesFiles,
    },
    outputJsonPath: argv[5]
  }
}

function main() {
  const args = parseArguments(process.argv);
  const generator = new LicenseMapGenerator(args.generatorParams.packages, new SharedLicensesProvider(args.generatorParams.sharedLicensesFiles));
  const licenseMap = generator.generateMap(args.generatorParams.nodeModulesFiles);
  // JSON is quite small, so there are no reasons to minify it.
  // Write it as multiline file with tabs (spaces).
  fs.writeFileSync(args.outputJsonPath, JSON.stringify(licenseMap, null, 2), "utf-8");
}

main();
